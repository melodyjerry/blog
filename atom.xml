<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-07-11T02:52:49.511Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客建筑常用的JS特效</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AD%91%E5%B8%B8%E7%94%A8%E7%9A%84JS%E7%89%B9%E6%95%88/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AD%91%E5%B8%B8%E7%94%A8%E7%9A%84JS%E7%89%B9%E6%95%88/</id>
    <published>2020-07-11T04:55:00.000Z</published>
    <updated>2020-07-11T02:52:49.511Z</updated>
    
    <content type="html"><![CDATA[<p>随机图片API</p><ol><li><a href="https://api.mz-moe.cn/img.php" target="_blank" rel="noopener">https://api.mz-moe.cn/img.php</a></li><li><a href="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" target="_blank" rel="noopener">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</a></li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--动态线条背景--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span></span><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">"255,0,0"</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">'1'</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">"-2"</span> <span class="hljs-attr">count</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- 天气挂件 --&gt;</span><span class="hljs-comment">&lt;!-- &lt;div id="tp-weather-widget"&gt;&lt;/div&gt;</span><span class="hljs-comment">&lt;script&gt;</span><span class="hljs-comment">    (function(a,h,g,f,e,d,c,b){b=function(){d=h.createElement(g);c=h.getElementsByTagName(g)[0];d.src=e;d.charset="utf-8";d.async=1;c.parentNode.insertBefore(d,c)};a["SeniverseWeatherWidgetObject"]=f;a[f]||(a[f]=function(){(a[f].q=a[f].q||[]).push(arguments)});a[f].l=+new Date();if(a.attachEvent){a.attachEvent("onload",b)}else{a.addEventListener("load",b,false)}}(window,document,"script","SeniverseWeatherWidget","//cdn.sencdn.com/widget2/static/js/bundle.js?t="+parseInt((new Date().getTime() / 100000000).toString(),10)));</span><span class="hljs-comment">    window.SeniverseWeatherWidget('show', {</span><span class="hljs-comment">      flavor: "bubble",</span><span class="hljs-comment">      location: "WS0E9D8WN298",</span><span class="hljs-comment">      geolocation: true,</span><span class="hljs-comment">      language: "zh-Hans",</span><span class="hljs-comment">      unit: "c",</span><span class="hljs-comment">      theme: "auto",</span><span class="hljs-comment">      token: "5fd5b254-57fe-4f8a-8a13-f92485efeb0b",</span><span class="hljs-comment">      hover: "enabled",</span><span class="hljs-comment">      container: "tp-weather-widget"</span><span class="hljs-comment">    })</span><span class="hljs-comment">&lt;/script&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tp-weather-widget"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,h,g,f,e,d,c,b</span>)</span>{b=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{d=h.createElement(g);c=h.getElementsByTagName(g)[<span class="hljs-number">0</span>];d.src=e;d.charset=<span class="hljs-string">"utf-8"</span>;d.async=<span class="hljs-number">1</span>;c.parentNode.insertBefore(d,c)};a[<span class="hljs-string">"SeniverseWeatherWidgetObject"</span>]=f;a[f]||(a[f]=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(a[f].q=a[f].q||[]).push(<span class="hljs-built_in">arguments</span>)});a[f].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-keyword">if</span>(a.attachEvent){a.attachEvent(<span class="hljs-string">"onload"</span>,b)}<span class="hljs-keyword">else</span>{a.addEventListener(<span class="hljs-string">"load"</span>,b,<span class="hljs-literal">false</span>)}}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">"script"</span>,<span class="hljs-string">"SeniverseWeatherWidget"</span>,<span class="hljs-string">"//cdn.sencdn.com/widget2/static/js/bundle.js?t="</span>+<span class="hljs-built_in">parseInt</span>((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() / <span class="hljs-number">100000000</span>).toString(),<span class="hljs-number">10</span>)));</span><span class="javascript">    <span class="hljs-built_in">window</span>.SeniverseWeatherWidget(<span class="hljs-string">'show'</span>, {</span><span class="actionscript">      flavor: <span class="hljs-string">"bubble"</span>,</span><span class="actionscript">      location: <span class="hljs-string">"WS0E9D8WN298"</span>,</span><span class="actionscript">      geolocation: <span class="hljs-literal">true</span>,</span><span class="actionscript">      language: <span class="hljs-string">"zh-Hans"</span>,</span><span class="actionscript">      unit: <span class="hljs-string">"c"</span>,</span><span class="actionscript">      theme: <span class="hljs-string">"auto"</span>,</span><span class="actionscript">      token: <span class="hljs-string">"5fd5b254-57fe-4f8a-8a13-f92485efeb0b"</span>,</span><span class="actionscript">      hover: <span class="hljs-string">"disabled"</span>,</span><span class="actionscript">      container: <span class="hljs-string">"tp-weather-widget"</span></span>    })<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.6/js/FunnyTitle.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--图片放缩-fancybox插件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--放大图片--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://blog-static.cnblogs.com/files/zouwangblog/zoom.css"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.2.0/js/transition.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://blog-static.cnblogs.com/files/zouwangblog/zoom.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text/javascript'</span>&gt;</span><span class="javascript">$(<span class="hljs-string">'#cnblogs_post_body img'</span>).attr(<span class="hljs-string">'data-action'</span>, <span class="hljs-string">'zoom'</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--放大图片end--&gt;</span><span class="hljs-comment">&lt;!--樱花瓣飘落--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-love109.cn@2.0.6/js/sakura.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--速度优化脚本--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.6/js/instantclick-1.2.2.js"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--热门标签，旋转，来自https://arlxn.xyz/--&gt;</span><span class="hljs-comment">&lt;!--tagcloud.ejs--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://createdestruction.github.io/js/tagcanvas.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://createdestruction.github.io/js/tagcloud.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--宅音乐播放器 https://player.ilt.me/admin--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ilt"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://player.ilt.me/player/js/player.js"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"992f0d81b6b74b93b6bbdb56f57a6c58"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--闲聊么http://www.xianliao.me/faq&lt;script&gt;var xlm_wid='15920';var xlm_url='https://www.xianliao.me/';&lt;/script&gt;&lt;script type="text/javascript" charset="UTF-8" src="https://www.xianliao.me/embed.js"&gt;&lt;/script&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-comment">&lt;!--打字机--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center;font-weight: bold;color: #1BC3FB;"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"subtitle1"</span>&gt;</span>没有伞的孩子必须努力奔跑！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"typed-cursor typed-cursor--blink"</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"typed-cursor"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- 打字特效（蓝色字体） --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript"><span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> Typed(<span class="hljs-string">"#subtitle1"</span>, { strings: [<span class="hljs-string">"Live a good life, write some good code !!!"</span>, <span class="hljs-string">"愿自己的努力终将获得回报。"</span>, <span class="hljs-string">"花开不是为了花落，而是为了开的更加灿烂。"</span>, <span class="hljs-string">"没有伞的孩子必须努力奔跑！"</span>, <span class="hljs-string">"欲望以提升热忱，毅力以磨平高山。"</span>, <span class="hljs-string">"如果放弃太早，你永远都不知道自己会错过什么。"</span>, <span class="hljs-string">"没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。"</span>], startDelay: <span class="hljs-number">1000</span>, typeSpeed: <span class="hljs-number">100</span>, loop: !<span class="hljs-number">0</span>, backSpeed: <span class="hljs-number">60</span>, backDelay: <span class="hljs-number">2000</span>, showCursor: !<span class="hljs-number">0</span> })</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--建站运行时长--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); </span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createtime</span><span class="hljs-params">()</span> </span>{ </span><span class="javascript">        <span class="hljs-keyword">var</span> grt= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"06/11/2019 17:38:00"</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span>        now.setTime(now.getTime()+250); <span class="javascript">        days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-built_in">Math</span>.floor(days); </span><span class="javascript">        hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-built_in">Math</span>.floor(hours); </span><span class="javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(hnum).length ==<span class="hljs-number">1</span> ){hnum = <span class="hljs-string">"0"</span> + hnum;} minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum); </span><span class="javascript">        mnum = <span class="hljs-built_in">Math</span>.floor(minutes); <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(mnum).length ==<span class="hljs-number">1</span> ){mnum = <span class="hljs-string">"0"</span> + mnum;} </span>        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); <span class="javascript">        snum = <span class="hljs-built_in">Math</span>.round(seconds); <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(snum).length ==<span class="hljs-number">1</span> ){snum = <span class="hljs-string">"0"</span> + snum;} </span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"timeDate"</span>).innerHTML = <span class="hljs-string">"小站勉强运行了 "</span>+dnum+<span class="hljs-string">" 天 "</span>; </span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"times"</span>).innerHTML = hnum + <span class="hljs-string">" 小时 "</span> + mnum + <span class="hljs-string">" 分 "</span> + snum + <span class="hljs-string">" 秒 ( ͡° ͜ʖ ͡°)✧ "</span>; </span>    } <span class="actionscript">setInterval(<span class="hljs-string">"createtime()"</span>,<span class="hljs-number">250</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"timeDate"</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"times"</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-comment">&lt;!--网站访客地理信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//rf.revolvermaps.com/0/0/8.js?i=5eqiqb8vl6p&amp;m=2&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33&amp;z=17&amp;rx=-40&amp;lx=-540&amp;ly=520&amp;hi=60"</span> <span class="hljs-attr">async</span>=<span class="hljs-string">"async"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-comment">&lt;!--cnzz统计--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">"%3Cspan id='cnzz_stat_icon_'%3E%3C/span%3E%3Cscript src='' type='text/javascript'"</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随机图片API&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://api.mz-moe.cn/img.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.mz-moe.cn/img.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Git Bash 命令大全</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/Git-Bash-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/Git-Bash-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-07-10T14:25:00.000Z</published>
    <updated>2020-07-11T02:52:49.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>在当前目录新建一个Git代码库</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git init</code></pre></div><p>新建一个目录，将其初始化为Git代码库</p><div class="hljs"><pre><code class="hljs applescript">复制$ git init [project-<span class="hljs-built_in">name</span>]</code></pre></div><p>下载一个项目和它的整个代码历史</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>]</code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>显示当前的Git配置</p><div class="hljs"><pre><code class="hljs routeros">复制$ git<span class="hljs-built_in"> config </span>--list</code></pre></div><p>编辑Git配置文件</p><div class="hljs"><pre><code class="hljs routeros">复制$ git<span class="hljs-built_in"> config </span>-e [--global]</code></pre></div><p>设置提交代码时的用户信息</p><div class="hljs"><pre><code class="hljs routeros">复制$ git<span class="hljs-built_in"> config </span>[--global] user.name <span class="hljs-string">"[name]"</span>$ git<span class="hljs-built_in"> config </span>[--global] user.email <span class="hljs-string">"[email address]"</span></code></pre></div><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><p>添加指定文件到暂存区</p><div class="hljs"><pre><code class="hljs prolog">复制$ git add [file1] [file2] ...</code></pre></div><p>添加指定目录到暂存区，包括子目录</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git <span class="hljs-keyword">add</span><span class="bash"> [dir]</span></code></pre></div><p>添加当前目录的所有文件到暂存区</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git <span class="hljs-keyword">add</span><span class="bash"> .</span></code></pre></div><p>添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git <span class="hljs-keyword">add</span><span class="bash"> -p</span></code></pre></div><p>删除工作区文件，并且将这次删除放入暂存区</p><div class="hljs"><pre><code class="hljs prolog">复制$ git rm [file1] [file2] ...</code></pre></div><p>停止追踪指定文件，但该文件会保留在工作区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git rm --cached [<span class="hljs-keyword">file</span>]</code></pre></div><p>改名文件，并且将这个改名放入暂存区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git mv [<span class="hljs-keyword">file</span>-original] [<span class="hljs-keyword">file</span>-renamed]</code></pre></div><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>提交暂存区到仓库区</p><div class="hljs"><pre><code class="hljs cmake">复制$ git commit -m [<span class="hljs-keyword">message</span>]</code></pre></div><p>提交暂存区的指定文件到仓库区</p><div class="hljs"><pre><code class="hljs inform7">复制$ git commit <span class="hljs-comment">[file1]</span> <span class="hljs-comment">[file2]</span> ... -m <span class="hljs-comment">[message]</span></code></pre></div><p>提交工作区自上次commit之后的变化，直接到仓库区</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git commit -a</code></pre></div><p>提交时显示所有diff信息</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git commit -v</code></pre></div><p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend -m [message]</span></code></pre></div><p>重做上一次commit，并包括指定文件的新变化</p><div class="hljs"><pre><code class="hljs prolog">复制$ git commit --amend [file1] [file2] ...</code></pre></div><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>列出所有本地分支</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git branch</code></pre></div><p>列出所有远程分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>-r</code></pre></div><p>列出所有本地分支和远程分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>-a</code></pre></div><p>新建一个分支，但依然停留在当前分支</p><div class="hljs"><pre><code class="hljs applescript">复制$ git branch [branch-<span class="hljs-built_in">name</span>]</code></pre></div><p>新建一个分支，并切换到该分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git checkout -<span class="hljs-keyword">b </span>[<span class="hljs-keyword">branch]</span></code></pre></div><p>新建一个分支，指向指定commit</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>[<span class="hljs-keyword">branch] </span>[commit]</code></pre></div><p>新建一个分支，与指定的远程分支建立追踪关系</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>--track [<span class="hljs-keyword">branch] </span>[remote-<span class="hljs-keyword">branch]</span></code></pre></div><p>切换到指定分支，并更新工作区</p><div class="hljs"><pre><code class="hljs applescript">复制$ git checkout [branch-<span class="hljs-built_in">name</span>]</code></pre></div><p>切换到上一个分支</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git checkout -</code></pre></div><p>建立追踪关系，在现有分支与指定的远程分支之间</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git branch --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">[branch] [remote-branch]</span></code></pre></div><p>合并指定分支到当前分支</p><div class="hljs"><pre><code class="hljs cos">复制$ git <span class="hljs-keyword">merge</span> [branch]</code></pre></div><p>选择一个commit，合并进当前分支</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git cherry-pick [commit]</code></pre></div><p>删除分支</p><div class="hljs"><pre><code class="hljs applescript">复制$ git branch -d [branch-<span class="hljs-built_in">name</span>]</code></pre></div><p>删除远程分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">push </span>origin --delete [<span class="hljs-keyword">branch-name]</span><span class="hljs-keyword">$ </span>git <span class="hljs-keyword">branch </span>-dr [remote/<span class="hljs-keyword">branch]</span></code></pre></div><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>列出所有tag</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span></code></pre></div><p>新建一个tag在当前commit</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>]</code></pre></div><p>新建一个tag在指定commit</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit]</code></pre></div><p>删除本地tag</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>]</code></pre></div><p>删除远程tag</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git push origin <span class="hljs-symbol">:refs/tags/</span>[tagName]</code></pre></div><p>查看tag信息</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git show [<span class="hljs-keyword">tag</span>]</code></pre></div><p>提交指定tag</p><div class="hljs"><pre><code class="hljs inform7">复制$ git push <span class="hljs-comment">[remote]</span> <span class="hljs-comment">[tag]</span></code></pre></div><p>提交所有tag</p><div class="hljs"><pre><code class="hljs ada">复制$ git push [remote] <span class="hljs-comment">--tags</span></code></pre></div><p>新建一个分支，指向某个tag</p><div class="hljs"><pre><code class="hljs armasm">复制$ git checkout -<span class="hljs-keyword">b </span>[<span class="hljs-keyword">branch] </span>[tag]</code></pre></div><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p>显示有变更的文件</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git status</code></pre></div><p>显示当前分支的版本历史</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span></code></pre></div><p>显示commit历史，以及每次commit发生变更的文件</p><div class="hljs"><pre><code class="hljs applescript">复制$ git <span class="hljs-built_in">log</span> <span class="hljs-comment">--stat</span></code></pre></div><p>搜索提交历史，根据关键词</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span> -S [keyword]</code></pre></div><p>显示某个commit之后的所有变动，每个commit占据一行</p><div class="hljs"><pre><code class="hljs applescript">复制$ git <span class="hljs-built_in">log</span> [tag] HEAD <span class="hljs-comment">--pretty=format:%s</span></code></pre></div><p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p><div class="hljs"><pre><code class="hljs vim">复制$ git <span class="hljs-built_in">log</span> [<span class="hljs-keyword">tag</span>] HEAD --<span class="hljs-keyword">grep</span> feature</code></pre></div><p>显示某个文件的版本历史，包括文件改名</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span> --follow [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> git whatchanged [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示指定文件相关的每一次diff</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span> -p [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示过去5次提交</p><div class="hljs"><pre><code class="hljs applescript">复制$ git <span class="hljs-built_in">log</span> <span class="hljs-number">-5</span> <span class="hljs-comment">--pretty --oneline</span></code></pre></div><p>显示所有提交过的用户，按提交次数排序</p><div class="hljs"><pre><code class="hljs armasm">复制$ git shortlog -<span class="hljs-meta">sn</span></code></pre></div><p>显示指定文件是什么人在什么时间修改过</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git blame [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示暂存区和工作区的差异</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git diff</code></pre></div><p>显示暂存区和上一个commit的差异</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git diff --cached [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示工作区与当前分支最新commit之间的差异</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git diff HEAD</code></pre></div><p>显示两次提交之间的差异</p><div class="hljs"><pre><code class="hljs maxima">复制$ git <span class="hljs-built_in">diff</span> [<span class="hljs-built_in">first</span>-branch]...[<span class="hljs-built_in">second</span>-branch]</code></pre></div><p>显示今天你写了多少行代码</p><div class="hljs"><pre><code class="hljs mipsasm">复制$ git <span class="hljs-keyword">diff </span>--<span class="hljs-keyword">shortstat </span><span class="hljs-string">"@{0 day ago}"</span></code></pre></div><p>显示某次提交的元数据和内容变化</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">show</span> [<span class="hljs-keyword">commit</span>]</code></pre></div><p>显示某次提交发生变化的文件</p><div class="hljs"><pre><code class="hljs fortran">复制$ git show --<span class="hljs-keyword">name</span>-<span class="hljs-keyword">only</span> [commit]</code></pre></div><p>显示某次提交时，某个文件的内容</p><div class="hljs"><pre><code class="hljs inform7">复制$ git show <span class="hljs-comment">[commit]</span>:<span class="hljs-comment">[filename]</span></code></pre></div><p>显示当前分支的最近几次提交</p><div class="hljs"><pre><code class="hljs angelscript">复制$ git <span class="hljs-built_in">ref</span>log</code></pre></div><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>下载远程仓库的所有变动</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git fetch [remote]</code></pre></div><p>显示所有远程仓库</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git remote -v</code></pre></div><p>显示某个远程仓库的信息</p><div class="hljs"><pre><code class="hljs dart">复制$ git remote <span class="hljs-keyword">show</span> [remote]</code></pre></div><p>增加一个新的远程仓库，并命名</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git remote <span class="hljs-keyword">add</span><span class="bash"> [shortname] [url]</span></code></pre></div><p>取回远程仓库的变化，并与本地分支合并</p><div class="hljs"><pre><code class="hljs inform7">复制$ git pull <span class="hljs-comment">[remote]</span> <span class="hljs-comment">[branch]</span></code></pre></div><p>上传本地指定分支到远程仓库</p><div class="hljs"><pre><code class="hljs inform7">复制$ git push <span class="hljs-comment">[remote]</span> <span class="hljs-comment">[branch]</span></code></pre></div><p>强行推送当前分支到远程仓库，即使有冲突</p><div class="hljs"><pre><code class="hljs ada">复制$ git push [remote] <span class="hljs-comment">--force</span></code></pre></div><p>推送所有分支到远程仓库</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git push [remote] --<span class="hljs-keyword">all</span></code></pre></div><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p>恢复暂存区的指定文件到工作区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git checkout [<span class="hljs-keyword">file</span>]</code></pre></div><p>恢复某个commit的指定文件到暂存区和工作区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git checkout [commit] [<span class="hljs-keyword">file</span>]</code></pre></div><p>恢复暂存区的所有文件到工作区</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git checkout .</code></pre></div><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git reset [<span class="hljs-keyword">file</span>]</code></pre></div><p>重置暂存区与工作区，与上一次commit保持一致</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span></code></pre></div><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> [<span class="hljs-keyword">commit</span>]</code></pre></div><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard [commit]</span></code></pre></div><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--keep [commit]</span></code></pre></div><p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">revert </span>[commit]</code></pre></div><p>暂时将未提交的变化移除，稍后再移入</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git stash<span class="hljs-variable">$ </span>git stash pop</code></pre></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>生成一个可供发布的压缩包</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git archive</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; class=&quot;headerlink&quot; title=&quot;仓库&quot;&gt;&lt;/a&gt;仓库&lt;/h2&gt;&lt;p&gt;在当前目录新建一个Git代码库&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs elixir&quot;&gt;复
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Git" scheme="https://melodyjerry.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>「hexo.sh」一个方便管理与发布hexo博客的脚本</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/%E3%80%8Chexo.sh%E3%80%8D%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/%E3%80%8Chexo.sh%E3%80%8D%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%84%9A%E6%9C%AC/</id>
    <published>2020-07-10T07:09:00.000Z</published>
    <updated>2020-07-11T02:52:49.502Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png" srcset="/blog/img/loading.gif" alt="img"></a></p><p>「<code>hexo.sh</code>」脚本可以很方便执行各种 hexo 命令，开启后会一直保持会话，随时输入 <code>c</code>、<code>cs</code>、<code>cg</code>、<code>cgd</code> 等简短的命令去执行一系列操作，提高效率。</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-meta">例如，`cs`相当于：hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><span class="hljs-meta">`cgd`相当于：hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><span class="hljs-attr">git</span> <span class="hljs-string">add --all</span><span class="hljs-attr">git</span> <span class="hljs-string">commit -am "update all"</span><span class="hljs-attr">git</span> <span class="hljs-string">push origin</span></code></pre></div><h2 id="下载并安装脚本"><a href="#下载并安装脚本" class="headerlink" title="下载并安装脚本"></a>下载并安装脚本</h2><p>打开终端，输入这行命令：</p><div class="hljs"><pre><code class="hljs vim">curl -s http<span class="hljs-variable">s:</span>//xaoxuu.<span class="hljs-keyword">com</span>/install | <span class="hljs-keyword">sh</span> -s hexo.<span class="hljs-keyword">sh</span></code></pre></div><p>如需安装指定版本，在后面加上版本号即可，例如：</p><div class="hljs"><pre><code class="hljs vim">curl -s http<span class="hljs-variable">s:</span>//xaoxuu.<span class="hljs-keyword">com</span>/install | <span class="hljs-keyword">sh</span> -s hexo.<span class="hljs-keyword">sh</span> <span class="hljs-number">2.1</span>.<span class="hljs-number">0</span></code></pre></div><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><p>在终端输入如下命令即可打开脚本：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">hexo</span><span class="hljs-selector-class">.sh</span></code></pre></div><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在终端输入如下命令即可查看脚本所有支持的指令：</p><div class="hljs"><pre><code class="hljs stata">hexo.<span class="hljs-keyword">sh</span> <span class="hljs-keyword">help</span></code></pre></div><p>如果是脚本已经启动（可以看到脚本菜单，处于待输入指令的状态），则只需要输入 <code>help</code>，下文其它情景同理。</p><p>下面是一些常见使用场景：</p><h3 id="A-使用脚本快速搭建博客"><a href="#A-使用脚本快速搭建博客" class="headerlink" title="A. 使用脚本快速搭建博客"></a>A. 使用脚本快速搭建博客</h3><p>let <code>path</code> = 你想把博客放在哪里，打开终端 <strong><code>cd</code> 到 <code>path</code></strong> 。</p><p>在终端输入如下命令自动检查并安装所有需要的环境，然后搭建并启动博客：</p><div class="hljs"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">COPYhexo</span>.</span></span>sh init</code></pre></div><p>脚本会依次执行以下这些操作：</p><ol><li>检测node.js环境，如果没有就安装。</li><li>检测hexo环境，如果没有就安装。</li><li>输入自定义博客名，在当前目录执行初始化。</li><li>安装Material X主题。</li><li>安装所有依赖包。</li></ol><blockquote><p>注意：安装node.js或者hexo的时候需要输入一次<strong>本机密码</strong>，别忘了哦。<br>搭建博客的时候你需要输入<strong>博客名</strong>，其他时间就可以坐和放宽了。</p></blockquote><h3 id="B-使用脚本快速更新博客"><a href="#B-使用脚本快速更新博客" class="headerlink" title="B. 使用脚本快速更新博客"></a>B. 使用脚本快速更新博客</h3><p>let <code>path</code> = 你的博客路径，打开终端 <code>cd</code> 到 <code>path</code> 。</p><p>在终端输入如下命令启动博客：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">hexo</span><span class="hljs-selector-class">.sh</span> <span class="hljs-selector-tag">s</span></code></pre></div><p>然后修改你的文章、博客主题，如果修改了 <code>_config.yml</code> 是需要重新启动博客的，有些参数甚至需要 <code>clean</code> 之后重启才能生效，这时候你只需要在终端脚本【请输入指令】后面输入：</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">cs</span></code></pre></div><p>就执行 <code>hexo clean</code>，然后执行 <code>hexo server</code> 了。</p><p>如果你已经修改完毕，需要发布更新，可以在终端脚本【请输入指令】后面输入：</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">cgd</span></code></pre></div><p>脚本就会执行 <code>hexo clean</code>、<code>hexo generate</code>、<code>hexo deploy</code>，然后执行一系列的git命令把源码的更新提交至远程仓库。</p><h2 id="所有支持的命令"><a href="#所有支持的命令" class="headerlink" title="所有支持的命令"></a>所有支持的命令</h2><p>这是 <code>2.1.0</code> 版本中的所有命令，可能未必准确，以脚本中的帮助信息为准。</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-meta">常用</span>:<span class="hljs-string"></span>  <span class="hljs-attr">c</span> <span class="hljs-string">(clean)  执行 hexo clean</span>  <span class="hljs-attr">s</span> <span class="hljs-string">(server)  执行 hexo server</span>  <span class="hljs-attr">g</span> <span class="hljs-string">(generate)  执行 hexo generate</span>  <span class="hljs-attr">d</span> <span class="hljs-string">(deploy)  执行 hexo deploy</span>  <span class="hljs-attr">cs</span>   <span class="hljs-string">执行 c, s 的组合</span>  <span class="hljs-attr">cg</span>   <span class="hljs-string">执行 c, g 的组合</span>  <span class="hljs-attr">cgd</span>   <span class="hljs-string">执行 c, g, d 的组合，然后提交代码</span><span class="hljs-meta">安装</span>:<span class="hljs-string"></span>  <span class="hljs-attr">i</span> <span class="hljs-string">(install)  用于安装的命令，下面是install命令的参数:</span>   <span class="hljs-attr">n</span> <span class="hljs-string">(node)       安装node.js环境</span>   <span class="hljs-attr">h</span> <span class="hljs-string">(hexo)       安装hexo环境(npm install hexo-cli -g)</span>   <span class="hljs-attr">b</span> <span class="hljs-string">(blog)       搭建博客(hexo init, npm install)</span>   <span class="hljs-attr">d</span> <span class="hljs-string">(dependency) 安装依赖包(npm install)</span>   <span class="hljs-attr">v</span> <span class="hljs-string">(volantis)   下载并应用「Volantis」主题</span><span class="hljs-meta">自动</span>:<span class="hljs-string"></span>  <span class="hljs-attr">init</span>  <span class="hljs-string">自动检查并安装所有需要的环境，然后搭建并启动博客。👍🏼</span>  <span class="hljs-attr">vut</span>  <span class="hljs-string">下载并运行「Volantis」主题的单元测试。</span><span class="hljs-meta">脚本</span>:<span class="hljs-string"></span>  <span class="hljs-attr">cd</span> <span class="hljs-string">+ `path`  选择路径</span>  <span class="hljs-attr">docs</span>   <span class="hljs-string">查看文档(https://xaoxuu.com/wiki/hexo.sh)</span>  <span class="hljs-attr">gh</span> <span class="hljs-string">(github)  GitHub页面(https://github.com/xaoxuu/hexo.sh)</span>  <span class="hljs-attr">u</span> <span class="hljs-string">(update)  更新脚本文件(当前版本：2.1.0)</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令小记</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-07-10T07:03:00.000Z</published>
    <updated>2020-07-10T06:46:17.615Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li><p><code>rpm -q xx</code> 查询xx是否安装</p></li><li><p><code>yum install xx</code> 安装xx软件包</p></li><li><p><code>yum remove xx</code> 卸载xx软件包</p></li><li><p><code>vim /路径</code> 读写文件</p><ul><li>i：编辑模式</li><li>Exc：退出到命令模式</li><li>:wq：保存并退出Vim</li></ul></li><li><p><code>startx</code> （一次性地）从命令行切换到桌面环境</p></li><li><p><code>systemctl get-default</code> 获取当前启动模式</p></li><li><p><code>systemctl set-default graphical.target</code> 修改启动模式为图形化</p></li><li><p><code>systemctl set-default multi-user.target</code> 修改启动模式为命令行</p></li><li><p><code>安装桌面环境</code> 安装桌面环境（这里安装 GNOME）</p></li><li><p><code>systemctl start xx</code>  启动xx服务</p></li><li><p><code>systemctl enable xx</code> 开机自启动xx服务</p></li><li><p><code>firewall-cmd --permanent --zone=public --add-port=3389/tcp</code> 防火墙开放3389端口</p></li><li><p><code>firewall-cmd --reload</code> 重启防火墙</p></li><li><p><code>systemctl stop firewalld</code> 关闭防火墙</p></li><li><p><code>systemctl disable firewalld</code></p><p>禁止防火墙开机启动</p></li><li><p><code>cp /路径</code> 复制文件</p></li><li><p><code>systemctl daemon-reload</code></p><p>让服务文件修改生效</p></li><li><p><code>netstat -lnpt|grep xx</code> 查看xx的服务端口</p></li><li><p><code>sudo yum update -y</code> 更新服务器地软件包</p></li><li><p><code>sudo yum install java-1.8.0-openjdk -y</code> 安装 OpenJRE</p></li><li><p><code>java -version</code>  检测jre是否安装成功</p></li><li><p><code>sudo useradd -m halo</code>  创建一个<strong>低权限</strong>地用户halo</p></li><li><p><code>sudo su halo</code> 登录用户halo</p></li><li><p><code>wget url</code> 下载xx安装包</p></li><li><p><code>useradd [-d home] [-s shell] [-c comment] [-m [-k template]] [-f inactive] [-e expire ] [-p passwd] [-r] name</code>  useradd或adduser命令用来建立用户帐号和创建用户的起始目录，使用权限是超级用户</p><p>主要参数</p><ul><li>-c：加上备注文字，备注文字保存在passwd的备注栏中。</li><li>-d：指定用户登入时的主目录，替换系统默认值/home/&lt;用户名&gt;</li><li>-D：变更预设值。</li><li>-e：指定账号的失效日期，日期格式为MM/DD/YY，例如06/30/12。缺省表示永久有效。</li><li>-f：指定在密码过期后多少天即关闭该账号。如果为0账号立即被停用；如果为-1则账号一直可用。默认值为-1.</li><li>-g：指定用户所属的群组。值可以使组名也可以是GID。用户组必须已经存在的，期默认值为100，即users。</li><li>-G：指定用户所属的附加群组。</li><li>-m：自动建立用户的登入目录。</li><li>-M：不要自动建立用户的登入目录。</li><li>-n：取消建立以用户名称为名的群组。</li><li>-r：建立系统账号。</li><li>-s：指定用户登入后所使用的shell。默认值为/bin/bash。</li><li>-u：指定用户ID号。该值在系统中必须是唯一的。0~499默认是保留给系统用户账号使用的，所以该值必须大于499。</li></ul><blockquote><p><a href="https://www.cnblogs.com/irisrain/p/4324593.html" target="_blank" rel="noopener">https://www.cnblogs.com/irisrain/p/4324593.html</a></p></blockquote></li><li><p><code>w # whoami</code> 查看当前登陆用户</p><div class="hljs"><pre><code class="hljs angelscript"> <span class="hljs-number">12</span>:<span class="hljs-number">10</span>:<span class="hljs-number">27</span> up <span class="hljs-number">21</span>:<span class="hljs-number">13</span>,  <span class="hljs-number">1</span> user,  load average: <span class="hljs-number">0.00</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.08</span>USER          TTY      FROM                 <span class="hljs-symbol">LOGIN@</span>   IDLE   JCPU   PCPU WHATroot            pts/<span class="hljs-number">0</span>    ***.**.***.**    <span class="hljs-number">11</span>:<span class="hljs-number">33</span>    <span class="hljs-number">0.00</span>s  <span class="hljs-number">0.08</span>s  <span class="hljs-number">0.00</span>s   wtmp_3254  ps1       ***.**.***.**     <span class="hljs-number">11</span>:<span class="hljs-number">33</span>    <span class="hljs-number">0.00</span>s  <span class="hljs-number">0.08</span>s  <span class="hljs-number">0.00</span>s   ls</code></pre></div></li></ol><ol start="27"><li><p><code>su xxx # 或者直接 exit</code> 退出当前用户登录，进入一个有管理员权限的用户</p></li><li><p><code>pkill -kill -t [TTY]</code> 强制退出已经登陆用户</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">0</span>pkill -kill -t ps1</code></pre></div></li><li><p><code>ls -a # ls --all</code> 查看当前目录下的所有文件</p></li><li><p><code>service xx restart</code>  重启xx应用</p></li><li><p><code>curl -o /路径 --create-dirs  url</code>  下载配置文件、模板等文件</p></li><li><p><code>sudo nginx -t</code> 检查Nginx配置是否有误</p></li><li><p><code>sudo nginx -s reload</code> 重载Nginx配置</p></li><li><p><code>sudo service xx status</code>  查看xx的运行状态</p></li><li><p><code>sudo service halo stop</code>  停止xx</p></li><li><p><code>sudo service halo restart</code> 重启xx</p></li><li><p><code>sudo service halo start</code>  启动xx</p></li><li><p><code>sudo systemctl daemon-reload</code> 修改<strong>service</strong>文件之后需要刷新<strong>Systemd</strong></p></li><li><p><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code> 添加软件源信息</p></li><li><p><code>sudo yum makecache fast</code> 更新yum缓存</p></li><li><p>镜像加速</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 新建 daemon.json 文件</span>sudo vim /etc/docker/daemon.json</code></pre></div><p>将下面的配置复制进去即可：</p><div class="hljs"><pre><code class="hljs json">{  <span class="hljs-attr">"registry-mirrors"</span>: [<span class="hljs-string">"http://hub-mirror.c.163.com"</span>]}</code></pre></div><blockquote><p>注意：修改完配置文件之后需要执行 <code>service docker restart</code> 才可生效。</p></blockquote></li><li><p><code>sudo docker pull ruibaby/xx</code> 拉取xx的最新镜像</p></li><li><p><code>docker run --rm -it -d --name halo -p 8090:8090  -v ~/.halo:/root/.halo ruibaby/halo</code> 创建容器并运行halo</p><ul><li>–rm：停止之后自动删除容器。</li><li>–name：容器名。</li><li>-p：占用端口，前者为宿主机端口，后者为 Halo 的运行端口，可在 <code>application.yaml</code> 配置。</li><li>-v：目录映射，一般不要修改。</li></ul></li><li><p><code>netstat -tln # netstat -tln | grep 8080</code> 查找被占用的端口（可接特定端口号）</p></li><li><p><code>netstat -ntlp</code> 查看其他端口</p></li><li><p><code>lsof -i:8060</code> 查看端口属于哪个程序、端口被哪个进程占用</p></li><li><p><code>kill -9 进程id</code> 杀掉占用端口的进程 根据pid杀掉</p></li><li><p><code>shutdown -h now</code>  立即关机</p></li><li><p><code>shutdown -r now # reboot</code>  立即重启</p></li><li><p><code>docker run --name some-wordpress --link some-mysql:mysql -d wordpress</code> 参数说明：</p><ul><li><code>--name</code> 容器的的名字</li><li><code>--link</code> 和其他容器做连接</li><li><code>-d/--detach</code> 后台运行</li></ul></li><li><p><code>docker run -d --privileged=true --name myMysql -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 33306:3306 mysql:5.6</code> 参数解释：</p><ul><li>-p: 端口映射，33306表示宿主，3306表示容器中的端口。 这里表示将宿主机的33306映射给镜像的3306.</li><li>-e: 环境变量， 环境变量和具体的Docker容器制作时设置有关，这里表示设置镜像中MySQL的root 密码时123456</li><li>-v: 指定数据卷，也就是将我们MySQL容器的<code>/var/lib/mysql</code>映射到宿主机的<code>/data/mysql</code></li><li><code>--privileged=true:</code> CentOS系统下的安全Selinux禁止了一些安全权限，导致MySQL容器在运行时会因为权限不足而报错，所以需要增加该选项</li></ul></li><li><p><code>docker ps -a</code>  查看MySQL是否正常运行</p></li><li><p><code>docker stop 容器名</code>  停止运行</p></li><li><p><code>docker rm 容器名</code>  删除容器（之后去掉<code>-d</code>选项重新运行排查错误）</p></li><li><p>快速批量删除docker镜像或容器</p><blockquote><p>Docker本身并没有提供批量删除的功能，当有大量的镜像或者容器需要删除的时候，手动的一个一个删就比较麻烦了。</p></blockquote><div class="hljs"><pre><code class="hljs nsis"><span class="hljs-comment"># 直接删除所有镜像或容器</span>    <span class="hljs-comment"># 直接删除所有镜像</span>    docker rmi <span class="hljs-string">`docker images -q`</span>    <span class="hljs-comment"># 直接删除所有容器</span>    docker rm <span class="hljs-string">`docker ps -aq`</span>    <span class="hljs-comment"># 按条件筛选之后删除</span>    <span class="hljs-comment"># 按条件筛选之后删除镜像</span>    docker rmi <span class="hljs-string">`docker images | grep xxxxx | awk '{print <span class="hljs-variable">$3</span>}'`</span>    <span class="hljs-comment"># 按条件筛选之后删除容器</span>    docker rm <span class="hljs-string">`docker ps -a | grep xxxxx | awk '{print <span class="hljs-variable">$1</span>}'`</span></code></pre></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rpm -q xx&lt;/code&gt; 查询xx是否安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;yum install xx&lt;/code&gt; 安装xx软件包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;y
      
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/08/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/08/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-08T04:55:00.000Z</published>
    <updated>2020-07-11T01:51:50.361Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Docker安装部署"><a href="#Docker安装部署" class="headerlink" title="Docker安装部署"></a>Docker安装部署</h1><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><ul><li><p>yum 包更新到最新（花的时间比较多）</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum update</span></code></pre></div></li><li><p>安装需要的软件包，yum-util 提供的yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>  <div class="hljs"><pre><code class="hljs gml">yum install -<span class="hljs-symbol">y</span> yum-utils device-mapper-<span class="hljs-symbol">persistent</span>-data lvm2</code></pre></div></li><li><p>设置yum源</p>  <div class="hljs"><pre><code class="hljs vim">yum-confi-manager --<span class="hljs-built_in">add</span>-repo http<span class="hljs-variable">s:</span>//download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo</code></pre></div></li><li><p>安装docker，出现输入的页面都按 y</p>  <div class="hljs"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker-ce</code></pre></div></li><li><p>查看docker版本，验证是否安装成功</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span></code></pre></div></li></ul><h3 id="其他安装方式-推荐"><a href="#其他安装方式-推荐" class="headerlink" title="其他安装方式(推荐)"></a>其他安装方式(推荐)</h3><p>教程链接：<a href="https://www.jianshu.com/p/1e5c86accacb" target="_blank" rel="noopener">Here!</a></p><h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><h2 id="Docker服务相关命令"><a href="#Docker服务相关命令" class="headerlink" title="Docker服务相关命令"></a>Docker服务相关命令</h2><ul><li><p>启动docker服务</p>  <div class="hljs"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> dockersystemctl <span class="hljs-literal">start</span> docker</code></pre></div></li><li><p>停止docker服务</p>  <div class="hljs"><pre><code class="hljs arduino">systemctl <span class="hljs-built_in">stop</span> docker</code></pre></div></li><li><p>重启docker服务</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span></code></pre></div></li><li><p>查看docker服务状态</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status docker</span></code></pre></div></li><li><p>设置开机启动docker服务</p>  <div class="hljs"><pre><code class="hljs routeros">systemstl <span class="hljs-builtin-name">enable</span> docker</code></pre></div></li></ul><h2 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h2><ul><li><p>查看镜像：查看本地所有的镜像</p>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> imagesdocker images -q <span class="hljs-comment"># 查看所有镜像id</span></code></pre></div></li><li><p>搜索镜像：从网络中查找需要的镜像</p>  <div class="hljs"><pre><code class="hljs excel">docker <span class="hljs-built_in">search</span> 镜像名称</code></pre></div></li><li><p>拉取镜像：从docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是<strong>最新版本</strong>。如果不知道镜像版本，可以去<a href="http://hub.docker.com/" target="_blank" rel="noopener">docker hub</a> 搜索对应镜像查看</p>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull 镜像名称</code></pre></div></li><li><p>删除镜像</p>  <div class="hljs"><pre><code class="hljs applescript">docker rmi 镜像<span class="hljs-built_in">id</span>docker rmi `docker images -q` <span class="hljs-comment"># 删除所有本地镜像</span></code></pre></div></li></ul><h2 id="Docker容器相关的命令"><a href="#Docker容器相关的命令" class="headerlink" title="Docker容器相关的命令"></a>Docker容器相关的命令</h2><ul><li><p>查看容器</p>  <div class="hljs"><pre><code class="hljs livecodeserver">docker ps <span class="hljs-comment"># 查看正在运行的容器</span>docker ps -<span class="hljs-keyword">a</span> <span class="hljs-comment"># 查看所有容器</span></code></pre></div></li><li><p>创建并启动容器</p>  <div class="hljs"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> 参数</span></code></pre></div><ul><li>参数说明：<ul><li>-i：保持容器运行。通常与-t同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</li><li>-t：为容器重新分配一个伪输入终端，通常与-i同时使用。</li><li>-d:以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用<code>docker exec</code>进入容器。退出时，容器不会关闭。</li><li>-it：创建的容器一般称为<strong>交互式容器</strong>。</li><li>-id：创建的容器一般称为<strong>守护式容器</strong>。</li><li>–name：为创建的容器命名。</li></ul></li></ul></li><li><p>进入容器</p>  <div class="hljs"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> 参数 <span class="hljs-comment"># 退出容器，容器不会关闭</span></code></pre></div></li><li><p>启动容器</p>  <div class="hljs"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span> 容器名称</code></pre></div></li><li><p>停止容器</p>  <div class="hljs"><pre><code class="hljs arduino">docker <span class="hljs-built_in">stop</span> 容器名称</code></pre></div></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> rm 容器名称</code></pre></div></li><li><p>查看容器信息</p>  <div class="hljs"><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span> 容器名称</code></pre></div></li></ul><h1 id="Docker容器的数据卷"><a href="#Docker容器的数据卷" class="headerlink" title="Docker容器的数据卷"></a>Docker容器的数据卷</h1><h2 id="数据卷概念和作用"><a href="#数据卷概念和作用" class="headerlink" title="数据卷概念和作用"></a>数据卷概念和作用</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>Docker容器删除后，在容器中产生的数据也会随之销毁吗？<ul><li>会。</li></ul></li><li>Docker容器和外部机器可以直接交换文件吗？<ul><li>不可以。</li></ul></li><li>容器之间想要进行数据交互？<ul><li>不可以。</li></ul></li></ul><blockquote><p><em>那咋办嘛？这就要用到数据卷了</em></p></blockquote><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><ul><li>数据卷是宿主机中的一个<strong>目录或文件</strong></li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被<strong>多个容器同时挂载</strong></li><li>一个容器也可以被挂载<strong>多个数据卷</strong></li></ul><h3 id="数据卷的作用"><a href="#数据卷的作用" class="headerlink" title="数据卷的作用"></a>数据卷的作用</h3><ul><li>容器数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><h2 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h2><ul><li><p>创建启动容器时，使用<code>-v</code>参数设置数据卷</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> <span class="hljs-built_in">..</span>.-v 宿主机目录(文件):容器内目录(文件)<span class="hljs-built_in">..</span>.</code></pre></div></li><li><p>注意事项：</p><ol><li>目录必须是<strong>绝对路径</strong></li><li>如果目录不存在，会<strong>自动创建</strong></li><li>可以挂载<strong>多个</strong>数据卷</li></ol></li></ul><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><h3 id="配置数据卷容器"><a href="#配置数据卷容器" class="headerlink" title="配置数据卷容器"></a>配置数据卷容器</h3><ul><li><p>创建启动c3数据卷容器，使用<code>-v</code>参数设置数据卷</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name-</span>=c3 -v /volume centos:7 /bin/bash</code></pre></div></li><li><p>创建启动c1 c2数据卷容器，使用<code>-volumes-from</code>参数设置数据卷</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name-</span>=c1 -volumes-from c3 centos:7 /bin/bashdocker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name-</span>=c2 -volumes-from c3 centos:7 /bin/bash</code></pre></div></li></ul><p>#Docker应用部署</p><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><ul><li><p>搜索MySQL镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search mysql</span></code></pre></div></li><li><p>拉取MySQL镜像</p>  <div class="hljs"><pre><code class="hljs angelscript">docker pull mysql:<span class="hljs-number">5.6</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 在/root目录下创建mysql目录用于存储mysql数据信息</span>mkdir ~<span class="hljs-string">/mysql</span><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/mysql</span></code></pre></div><hr>  <div class="hljs"><pre><code class="hljs crystal">docker run -id \--name=c_mysql \-p <span class="hljs-number">3307</span>:<span class="hljs-number">3306</span> \-v $PWD/<span class="hljs-symbol">conf:</span>/etc/mysql/confi.d \-v $PWD/<span class="hljs-symbol">logs:</span>/logs \-v $PWD/<span class="hljs-symbol">data:</span>/var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">mysql</span> \</span>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> \<span class="hljs-symbol">mysql:</span><span class="hljs-number">5.6</span></code></pre></div><ul><li>参数说明：<ul><li>-p 3307:3306：将容器的3306端口映射到宿主机的3307端口。</li><li>-v $PWD/conf:/etc/mysql/confi.d：将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf。配置目录</li><li>-v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs。日志目录</li><li>-v $PWD/data:/var/lib/mysql：将主机当前目录下的data目录挂载到容器的/var/lib/mysql。数据目录</li><li>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码。</li></ul></li></ul></li></ul><h2 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h2><ul><li><p>搜索Tomcat镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search tomcat</span></code></pre></div></li><li><p>拉取Tomcat镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull tomcat</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 在/root目录下创建tomcat目录用于存储tomcat数据信息</span>mkdir ~<span class="hljs-string">/tomcat</span><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/tomcat</span></code></pre></div><hr>  <div class="hljs"><pre><code class="hljs haml">docker run -id \-<span class="ruby">-name=c_tomcat \</span><span class="ruby">-p <span class="hljs-number">8080</span><span class="hljs-symbol">:</span><span class="hljs-number">8080</span> \</span><span class="ruby">-v $PWD<span class="hljs-symbol">:/usr/local/tomcat/webapps</span> \</span><span class="ruby">tomcat</span></code></pre></div><ul><li>参数说明：<ul><li>-p 8000:8080：将容器的8080端口映射到宿主机的8000端口。</li><li>-v $PWD:/usr/local/tomcat/webapps：将主机当前目录挂载到容器的/usr/local/tomcat/webapps。</li></ul></li></ul></li></ul><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><ul><li><p>搜索Nginx镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search nginx</span></code></pre></div></li><li><p>拉取Nginx镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull nginx</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs vim"># 在/root目录下创建nginx目录用于存储nginx数据信息<span class="hljs-built_in">mkdir</span> ~/nginx<span class="hljs-keyword">cd</span> ~/nginx<span class="hljs-built_in">mkdir</span> <span class="hljs-keyword">conf</span><span class="hljs-keyword">cd</span> <span class="hljs-keyword">conf</span># 在~/nginx/<span class="hljs-keyword">conf</span>/下创建nginx.<span class="hljs-keyword">conf</span>文件，粘贴下面内容<span class="hljs-keyword">vim</span> nginx.<span class="hljs-keyword">conf</span></code></pre></div><hr>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  nginx;<span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<span class="hljs-attribute">error_log</span>  /var/log/nginx/error.log <span class="hljs-literal">warn</span>;<span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<span class="hljs-section">events</span> {    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;}<span class="hljs-section">http</span> {    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;    <span class="hljs-attribute">default_type</span>  application/octet-stream;    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">'<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] "<span class="hljs-variable">$request</span>" '</span>                      <span class="hljs-string">'<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> "<span class="hljs-variable">$http_referer</span>" '</span>                      <span class="hljs-string">'"<span class="hljs-variable">$http_user_agent</span>" "<span class="hljs-variable">$http_x_forwarded_for</span>"'</span>;    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;    <span class="hljs-comment">#tcp_nopush     on;</span>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;    <span class="hljs-comment">#gzip  on;</span>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;}</code></pre></div><hr>  <div class="hljs"><pre><code class="hljs stata">docker <span class="hljs-keyword">run</span> -id \--name=c_nginx \-p 81:80 \-v <span class="hljs-variable">$PWD</span>/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span>:/etc/nginx/nginx.<span class="hljs-keyword">conf</span> \-v <span class="hljs-variable">$PWD</span>/logs:/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/nginx \-v <span class="hljs-variable">$PWD</span>/html:/usr/share/nginx/html \nginx</code></pre></div><ul><li>参数说明：<ul><li>-p 81:80：将容器的80端口映射到宿主机的81端口。</li><li>v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机当前目录下的/conf/nginx.conf挂载到容器的/etc/nginx/nginx.conf。配置目录</li><li>-v $PWD/logs:/var/log/nginx：将主机当前目录下的logs目录挂载到容器的/var/log/nginx。日志目录</li><li>-v $PWD/html:/usr/share/nginx/html：将主机当前目录下的/html挂载到容器的/usr/share/nginx/html。</li></ul></li></ul></li></ul><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><ul><li><p>搜索Redis镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search redis</span></code></pre></div></li><li><p>拉取Redis镜像</p>  <div class="hljs"><pre><code class="hljs vim">docker pull <span class="hljs-keyword">redi</span><span class="hljs-variable">s:5</span>.<span class="hljs-number">0</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -id <span class="hljs-attribute">--name</span>=c_redis -p 6379:6379 redis:5.0</code></pre></div><ul><li>参数说明：<ul><li>-p 6379:6379：将容器的6379端口映射到宿主机的6379端口。</li></ul></li></ul></li><li><p>使用外部机器连接redis</p>  <div class="hljs"><pre><code class="hljs stylus">./redis-cli<span class="hljs-selector-class">.exe</span> -h &lt;your ipAddress&gt; -<span class="hljs-selector-tag">p</span> <span class="hljs-number">6379</span></code></pre></div></li></ul><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h2><h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><ul><li><p>Docker镜像本质是什么？</p><ul><li>是一个分层的文件系统</li></ul></li><li><p>Docker中一个centos镜像为什么只有200MB，而一个centos操作系统的</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">iso</span></code></pre></div><p>  文件要几个GB？</p><ul><li>Centos的<code>iso</code>镜像文件包含<code>bootfs</code>和<code>rootfs</code>，而docker的centos镜像<strong>复用</strong>操作系统的<code>bootfs</code>，只包含<code>rootfs</code>和其他镜像层</li></ul></li><li><p>Docker中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</p><ul><li>由于docker中镜像是分层的，tomcat虽然只有70多MB，但它需要依赖于<strong>父镜像</strong>和<strong>子镜像</strong>，所有整个对外暴露的tomcat镜像大小有500多MB</li></ul></li></ul><h3 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h3><ul><li>bootfs：包含<code>bootloader</code>（引导加载系统）和<code>kernel</code>（内核）</li><li>rootfs：root文件系统，包含的就是典型的Linux系统中的<code>/dev</code>，<code>/proc</code>，<code>/bin</code>，<code>/etc</code>等标准目录和文件</li><li>不用的Linux发行版，<code>bootfs</code>基本一样，而<code>rootfs</code>不同，如Ubuntu，centos等</li></ul><p><img src="http://106.75.80.200/2020/03/15/seven/layer1.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><ul><li>Docker镜像是由特殊的文件系统叠加而成</li><li>最底端是<code>bootfs</code>,并使用宿主机的<code>bootfs</code></li><li>第二层是root文件系统<code>rootfs</code>,称为<code>base image</code></li><li>然后再往上可以叠加其他的镜像文件</li><li><strong><em>统一文件系统(Union File System)\</em></strong>技术能够将不同的层整合成一个文件系统,为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来,只存在一个文件系统。</li><li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为<strong><em>父镜像\</em></strong>，最底部的镜像成为<strong><em>基础镜像\</em></strong>。</li><li>当从一个镜像启动容器时，Docker会从最顶层加载一个<strong>读写文件系统</strong>作为容器</li></ul><p><img src="http://106.75.80.200/2020/03/15/seven/layer2.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><ul><li><p>容器转为镜像</p>  <div class="hljs"><pre><code class="hljs sql">docker <span class="hljs-keyword">commit</span> 容器<span class="hljs-keyword">id</span> 镜像名称:版本号  <span class="hljs-comment"># 将容器转换为镜像文件</span>docker <span class="hljs-keyword">save</span> -o 压缩文件名称 镜像名称:版本号  <span class="hljs-comment"># 将镜像文件打包成压缩文件，之后就能对压缩文件传送了</span>docker <span class="hljs-keyword">load</span> -i 压缩文件名称  <span class="hljs-comment"># 将压缩文件解压称为镜像文件</span></code></pre></div></li><li><p>Dockerfile</p><ul><li><em>看下面内容</em></li></ul></li></ul><h2 id="Dockerfile概念及作用"><a href="#Dockerfile概念及作用" class="headerlink" title="Dockerfile概念及作用"></a>Dockerfile概念及作用</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>Dockerfile是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ul><p><img src="http://106.75.80.200/2020/03/15/seven/dockerfile1.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="Dockerfile关键字"><a href="#Dockerfile关键字" class="headerlink" title="Dockerfile关键字"></a>Dockerfile关键字</h2><p><em>列举一些常用的</em></p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h2 id="制作自定义centos镜像"><a href="#制作自定义centos镜像" class="headerlink" title="制作自定义centos镜像"></a>制作自定义centos镜像</h2><h3 id="自定义需求"><a href="#自定义需求" class="headerlink" title="自定义需求"></a>自定义需求</h3><ul><li>默认登录路径为<code>/usr</code></li><li>可以使用vim</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>创建编辑dockerfile文件</p>  <div class="hljs"><pre><code class="hljs properties"><span class="hljs-attr">mkdir</span> <span class="hljs-string">/root/dockerfile</span><span class="hljs-attr">cd</span> <span class="hljs-string">dockerfile</span><span class="hljs-attr">vim</span> <span class="hljs-string">centos_dockerfile</span></code></pre></div><ul><li>定义父镜像：<code>FROM centos:7</code></li><li>定义作者信息：<code>MAINTAINER adongyo &lt;adongyo@it.cn&gt;</code></li><li>执行安装vim命令：<code>RUN yum install -y vim</code></li><li>定义默认的工作目录：<code>WORKDIR /usr</code></li><li>定义容器启动执行的命令：<code>CMD /bin/bash</code></li></ul></li><li><p>执行命令</p>  <div class="hljs"><pre><code class="hljs angelscript">docker build -f ./centos_dockerfile -t myCentos:<span class="hljs-number">1</span> .</code></pre></div><ul><li><p>参数说明：</p><ul><li><p>-f： 指定dockerfile文件</p></li><li><p>-t： 设置生成的新的镜像的名称</p></li><li><p>.： 别漏了后面还有一个’.’</p></li></ul></li></ul></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.bilibili.com/video/av89009239" target="_blank" rel="noopener">b站转载黑马程序员</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;Docker安装部署&quot;&gt;&lt;a href=&quot;#Docker安装部署&quot; class=&quot;headerlink&quot; title=&quot;Docker安装部署&quot;&gt;&lt;/a&gt;Docker安装部署&lt;/h1&gt;&lt;h2 id=&quot;CentOS&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="Docker" scheme="https://melodyjerry.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到云服务器</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/08/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/08/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-07-08T04:49:00.000Z</published>
    <updated>2020-07-10T06:46:17.219Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>阿里云VPS搭建自己的的Hexo博客：<a href="https://segmentfault.com/a/1190000005723321" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005723321</a><br>Hexo个人博客部署到CentOS个人服务器：<a href="https://segmentfault.com/a/1190000010680022" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010680022</a><br>部署Hexo到个人服务器：<a href="https://www.huangtengxq.com/2017/08/19/BuildHexoOnVps/" target="_blank" rel="noopener">https://www.huangtengxq.com/2017/08/19/BuildHexoOnVps/</a><br>HEXO部署到unbuntu服务器详细指南：<a href="http://www.laoyuyu.me/2017/10/10/hexo_deploy_vps/" target="_blank" rel="noopener">http://www.laoyuyu.me/2017/10/10/hexo_deploy_vps/</a><br>服务器部署Hexo博客：<a href="https://dogorgod.github.io/2017/03/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">https://dogorgod.github.io/2017/03/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</a><br>Hexo博客部署到服务器：<a href="https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</a><br>通过Git将Hexo博客部署到服务器：<a href="https://www.jianshu.com/p/e03e363713f9" target="_blank" rel="noopener">https://www.jianshu.com/p/e03e363713f9</a><br>部署Hexo博客到linux云主机并实现自动发布：<a href="https://ghui.me/post/2016/07/host-hexo-vps/" target="_blank" rel="noopener">https://ghui.me/post/2016/07/host-hexo-vps/</a><br>将Hexo博客部署到云主机：<a href="https://blog.fundebug.com/2017/05/18/deploy-hexo-on-cloud/" target="_blank" rel="noopener">https://blog.fundebug.com/2017/05/18/deploy-hexo-on-cloud/</a><br>配合Travis CI，将Hexo博客自动部署到你的服务器上：<a href="https://blog.keep.moe/2015/11/06/hexo-and-travis-ci/" target="_blank" rel="noopener">https://blog.keep.moe/2015/11/06/hexo-and-travis-ci/</a><br>使用Git Hook自动部署Hexo到个人VPS：<a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="noopener">http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/</a><br>VPS Centos7安装Git服务器，部署Hexo静态博客：<a href="https://www.micronbot.com/blog/8.html" target="_blank" rel="noopener">https://www.micronbot.com/blog/8.html</a><br>在Ubuntu 14.04服务器上部署Hexo博客：<a href="https://cloud.tencent.com/developer/article/1004587" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1004587</a><br>阿里云ubuntu部署hexo,并与本地同步，实现自动部署：<a href="http://blog.csdn.net/nghuyong/article/details/54430093" target="_blank" rel="noopener">http://blog.csdn.net/nghuyong/article/details/54430093</a><br>阿里云搭建Git服务，实现Hexo自动部署：<a href="https://imys.net/20160303/hexo-nginx-auto-deploy.html" target="_blank" rel="noopener">https://imys.net/20160303/hexo-nginx-auto-deploy.html</a><br>hexo博客部署到linux服务器上：<a href="https://lvshen9.github.io/2018/01/08/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/" target="_blank" rel="noopener">https://lvshen9.github.io/2018/01/08/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;阿里云VPS搭建自己的的Hexo博客：&lt;a href=&quot;https://segmentfault.com/a/1190000005723321&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmen
      
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>服务器安装宝塔面板</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BFLinux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BFLinux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-07-07T15:32:00.000Z</published>
    <updated>2020-07-10T06:46:17.920Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h2><p>Centos安装脚本</p><div class="hljs"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span></code></pre></div><p>Ubuntu/Deepin安装脚本</p><div class="hljs"><pre><code class="hljs cmake">wget -O <span class="hljs-keyword">install</span>.sh http://download.bt.cn/<span class="hljs-keyword">install</span>/<span class="hljs-keyword">install</span>-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; sudo bash <span class="hljs-keyword">install</span>.sh</code></pre></div><p>Debian安装脚本</p><div class="hljs"><pre><code class="hljs cmake">wget -O <span class="hljs-keyword">install</span>.sh http://download.bt.cn/<span class="hljs-keyword">install</span>/<span class="hljs-keyword">install</span>-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; bash <span class="hljs-keyword">install</span>.sh</code></pre></div><p>Fedora安装脚本</p><div class="hljs"><pre><code class="hljs vim">wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; bash install.<span class="hljs-keyword">sh</span></code></pre></div><h2 id="管理宝塔"><a href="#管理宝塔" class="headerlink" title="管理宝塔"></a>管理宝塔</h2><p>宝塔工具箱(包含下列绝大部分功能 直接ssh中执行bt命令 仅限6.x以上版本面板)</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">bt</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/bt <span class="hljs-built_in">stop</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs armasm">/etc/init.d/<span class="hljs-keyword">bt </span>start</code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs armasm">/etc/init.d/<span class="hljs-keyword">bt </span>restart</code></pre></div><p>卸载</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /</span>etc<span class="hljs-regexp">/init.d/</span>bt &amp;&amp; rm -rf <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel</span></code></pre></div><p>查看当前面板端口</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/port.pl</span></code></pre></div><p>修改面板端口，如要改成8881（centos 6 系统）</p><div class="hljs"><pre><code class="hljs routeros">echo <span class="hljs-string">'8881'</span> &gt; /www/server/panel/data/port.pl &amp;&amp; /etc/init.d/bt restartiptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8881 -j ACCEPTservice iptables saveservice iptables restart</code></pre></div><p>修改面板端口，如要改成8881（centos 7 系统）</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> '8881' &gt; <span class="hljs-string">/www/server/panel/data/port.pl</span> &amp;&amp; <span class="hljs-string">/etc/init.d/bt</span> restartfirewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=public</span> <span class="hljs-params">--add-port=8881/tcp</span>firewall-cmd <span class="hljs-params">--reload</span></code></pre></div><p>强制修改MySQL管理(root)密码，如要改成123456</p><div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /www/server/panel &amp;&amp; <span class="hljs-keyword">python</span> tools.<span class="hljs-keyword">py</span> root <span class="hljs-number">123456</span></code></pre></div><p>修改面板密码，如要改成123456</p><div class="hljs"><pre><code class="hljs mel">cd /www/server/<span class="hljs-keyword">panel</span> &amp;&amp; <span class="hljs-keyword">python</span> tools.py <span class="hljs-keyword">panel</span> <span class="hljs-number">123456</span></code></pre></div><p>查看宝塔日志</p><div class="hljs"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /tmp/panelBoot.<span class="hljs-keyword">pl</span></code></pre></div><p>查看软件安装日志</p><div class="hljs"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /tmp/panelExec.<span class="hljs-keyword">log</span></code></pre></div><p>站点配置文件位置</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost</code></pre></div><p>删除域名绑定面板</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/domain.conf</span></code></pre></div><p>清理登陆限制</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/*.login</span></code></pre></div><p>查看面板授权IP</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/limitip.conf</span></code></pre></div><p>关闭访问限制</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/limitip.conf</span></code></pre></div><p>查看许可域名</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/domain.conf</span></code></pre></div><p>关闭面板SSL</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/ssl.pl &amp;&amp; /</span>etc<span class="hljs-regexp">/init.d/</span>bt restart</code></pre></div><p>查看面板错误日志</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/tmp/</span>panelBoot</code></pre></div><p>查看数据库错误日志</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/data/</span>*.err</code></pre></div><p>站点配置文件目录(nginx)</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost<span class="hljs-regexp">/nginx</span></code></pre></div><p>站点配置文件目录(apache)</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost<span class="hljs-regexp">/apache</span></code></pre></div><p>站点默认目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>wwwroot</code></pre></div><p>数据库备份目录</p><div class="hljs"><pre><code class="hljs sql">/www/<span class="hljs-keyword">backup</span>/<span class="hljs-keyword">database</span></code></pre></div><p>站点备份目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>backup<span class="hljs-regexp">/site</span></code></pre></div><p>站点日志</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>wwwlogs</code></pre></div><h2 id="Nginx服务管理"><a href="#Nginx服务管理" class="headerlink" title="Nginx服务管理"></a>Nginx服务管理</h2><p>nginx安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nginx</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/nginx start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/nginx <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/nginx restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/nginx</span> <span class="hljs-keyword">reload</span></code></pre></div><p>nginx配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/nginx.conf</span></code></pre></div><h2 id="Apache服务管理"><a href="#Apache服务管理" class="headerlink" title="Apache服务管理"></a>Apache服务管理</h2><p>apache安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/httpd</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/httpd start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/httpd <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/httpd restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/httpd</span> <span class="hljs-keyword">reload</span></code></pre></div><p>apache配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/apache/</span>conf<span class="hljs-regexp">/httpd.conf</span></code></pre></div><h2 id="MySQL服务管理"><a href="#MySQL服务管理" class="headerlink" title="MySQL服务管理"></a>MySQL服务管理</h2><p>mysql安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/mysql</span></code></pre></div><p>phpmyadmin安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/phpmyadmin</span></code></pre></div><p>数据存储目录</p><div class="hljs"><pre><code class="hljs haskell">/www/server/<span class="hljs-class"><span class="hljs-keyword">data</span></span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/mysqld start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/mysqld <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/mysqld restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/mysqld</span> <span class="hljs-keyword">reload</span></code></pre></div><p>mysql配置文件</p><div class="hljs"><pre><code class="hljs applescript">/etc/<span class="hljs-keyword">my</span>.cnf</code></pre></div><h2 id="FTP服务管理"><a href="#FTP服务管理" class="headerlink" title="FTP服务管理"></a>FTP服务管理</h2><p>ftp安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/pure-ftpd</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/pure-ftpd start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs fortran">/etc/init.d/<span class="hljs-keyword">pure</span>-ftpd <span class="hljs-keyword">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/pure-ftpd restart</span></code></pre></div><p>ftp配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/pure-ftpd/</span>etc<span class="hljs-regexp">/pure-ftpd.conf</span></code></pre></div><h2 id="PHP服务管理"><a href="#PHP服务管理" class="headerlink" title="PHP服务管理"></a>PHP服务管理</h2><p>php安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/php</span></code></pre></div><p>启动(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 start)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} start</code></pre></div><p>停止(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 stop)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} stop</code></pre></div><p>重启(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 restart)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} restart</code></pre></div><p>启载(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 reload)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} reload</code></pre></div><p>配置文件(请根据安装PHP版本号做更改，例如：/www/server/php/52/etc/php.ini)</p><div class="hljs"><pre><code class="hljs angelscript">/www/server/php/{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>}/etc/php.ini</code></pre></div><h2 id="Redis服务管理"><a href="#Redis服务管理" class="headerlink" title="Redis服务管理"></a>Redis服务管理</h2><p>redis安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/redis</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/redis start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/redis <span class="hljs-built_in">stop</span></code></pre></div><p>redis配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/redis/</span>redis.conf</code></pre></div><h2 id="Memcached服务管理"><a href="#Memcached服务管理" class="headerlink" title="Memcached服务管理"></a>Memcached服务管理</h2><p>memcached安装目录</p><div class="hljs"><pre><code class="hljs applescript">/usr/<span class="hljs-keyword">local</span>/memcached</code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/memcached start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/memcached <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/memcached restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/memcached</span> <span class="hljs-keyword">reload</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;安装宝塔&quot;&gt;&lt;a href=&quot;#安装宝塔&quot; class=&quot;headerlink&quot; title=&quot;安装宝塔&quot;&gt;&lt;/a&gt;安装宝塔&lt;/h2&gt;&lt;p&gt;Centos安装脚本&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code
      
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="宝塔" scheme="https://melodyjerry.github.io/blog/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>服务器安装宝塔面板</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/</id>
    <published>2020-07-07T13:24:00.000Z</published>
    <updated>2020-07-10T06:46:17.934Z</updated>
    
    <content type="html"><![CDATA[<p>这里两篇文章关于“CentOS安装宝塔面板”</p><ol><li><a href="https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658" target="_blank" rel="noopener">https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658</a></li><li><a href="http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6" target="_blank" rel="noopener">http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6</a></li></ol><a id="more"></a><h1 id="①"><a href="#①" class="headerlink" title="①"></a>①</h1><p>购买完云服务器ECS后，对于新手而言如何搭建Web环境是比较棘手的，分享一款简单易用的主机面板：宝塔面板，分享阿里云服务器安装宝塔面板图文教程：</p><p>本文以：Linux云服务器，CentOS 7.4 64位系统为例。</p><h2 id="一：开放安全组端口"><a href="#一：开放安全组端口" class="headerlink" title="一：开放安全组端口"></a>一：开放安全组端口</h2><p>什么是安全组？是阿里云ECS云服务器特有的虚拟防火墙，是一种安全机制，默认情况下宝塔面板依赖的端口并没有开放，所以我们第一步是自定义安全组开放端口，如下图所示：<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_53df984b8026689.png" srcset="/blog/img/loading.gif" alt="img"></p><p>我们以开放8888号端口为例：<br>1、登录到云服务器ECS控制台；<br>2、点击“更多”–“网络和安全组”–“安全组配置”，点击“配置规则”<br>3、如下图所示，端口范围填：8888/8888，授权对象填：0.0.0.0/0<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_a2508699857cd44.png" srcset="/blog/img/loading.gif" alt="img"></p><p>端口范围按照格式，填写我们需要开放的端口；授权对象填0.0.0.0/0的意思是对所有人开放这个端口，授权范围大家可以按照自己的需求自定义。<br>宝塔面板需要开放的端口有：8888、888、80、443、20、21，这6个端口都需要开放，大家按照上面的方法开放即可。</p><p>安全组不会操作，可以参考阿里云官方文档： <a href="https://help.aliyun.com/document_detail/58746.html?source=5176.11533457&amp;userCode=r3yteowb&amp;type=copy" target="_blank" rel="noopener">阿里云安全组的典型应用示例</a></p><h2 id="二：安装宝塔面板"><a href="#二：安装宝塔面板" class="headerlink" title="二：安装宝塔面板"></a>二：安装宝塔面板</h2><p>SSH的方式登录到你的云服务器ECS上，命令：ssh root@你的服务器IP<br>执行命令：<br><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code>然后输入字母“y”，等待程序自行安装，大约2分钟</p><h2 id="三：保存宝塔面板后台登录名和密码"><a href="#三：保存宝塔面板后台登录名和密码" class="headerlink" title="三：保存宝塔面板后台登录名和密码"></a>三：保存宝塔面板后台登录名和密码</h2><p>执行上述命令后，程序自动安装，安装完毕后，会出现宝塔后台登录的账户名和密码，大家保存下来<br><code>Complete!==================================================================Congratulations! Install succeeded!==================================================================Bt-Panel: http://47.104.71.103:8888username: adminpassword: 66d52887Warning:If you cannot access the panel,release the following port (8888|888|80|443|20|21) in the security group==================================================================</code><br>宝塔面板后台登录地址为：http://你的服务器IP/8888<br>默认登录名为：admin<br>密码：安装完成后，会随机生成一段密码，请保存好</p><h2 id="四：登录到宝塔面板后台，安装web环境"><a href="#四：登录到宝塔面板后台，安装web环境" class="headerlink" title="四：登录到宝塔面板后台，安装web环境"></a>四：登录到宝塔面板后台，安装web环境</h2><p>使用刚才保存的账户名和密码，登录到宝塔面吧后台，一键安装Web环境，登录宝塔面板后台，地址：http://你的服务器IP/8888，输入刚才保存好的账户和密码</p><p>登录后会自动弹出安装Web环境页面，如下图所示：<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_9e27130fd205b61.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>可选LNMP和LAMP两种Web环境，大家按需选择（推荐选择第一个LNMP），然后点击“一键安装”，等待即可。大约需要8分钟。</p><h2 id="五：创建站点"><a href="#五：创建站点" class="headerlink" title="五：创建站点"></a>五：创建站点</h2><p>Web环境一键安装完毕后，点击左侧“网站”—“添加站点”，如下图所示：<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_2cb13619b62eeec.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>输入域名后，默认不会自动创建FTP和MySQL数据库，我们可以选择自动创建，方便省事，点击“提交”，创建成功后，会显示你的FTP和MySQL数据信息，例如：</p><blockquote><p>FTP账号资料<br>用户：aliyunbaike_com<br>密码：625GcrKSc3<br>只要将网站上传至以上FTP即可访问!<br>数据库账号资料<br>数据库名：aliyunbaike_com<br>用户：aliyunbaike_com<br>密码：e8QZfQDPDT</p></blockquote><p>大家将新建站点的FTP账户密码、数据库账户密码都保存好。</p><h2 id="六：域名解析"><a href="#六：域名解析" class="headerlink" title="六：域名解析"></a>六：域名解析</h2><p>将域名解析到你的服务器IP，解析出成功后，会显示“恭喜，站点创建成功！”</p><h2 id="七：网站安装"><a href="#七：网站安装" class="headerlink" title="七：网站安装"></a>七：网站安装</h2><p>将你的网站程序上传到域名所对应的根目录，如果是新站，输入第五步的数据库账户和密码。</p><h1 id="②"><a href="#②" class="headerlink" title="②"></a>②</h1><p>下面稍微介绍一下如何使用阿里云服务器安装<a href="https://www.bt.cn/?invite_code=MV9la3hmaXo=" target="_blank" rel="noopener">宝塔面板</a>。</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>阿里云的<a href="https://www.aliyun.com/minisite/goods?userCode=ywqc0ubl&amp;share_source=copy_link" target="_blank" rel="noopener">云服务器</a>，即 阿里云ECS，默认的用户名 root，密码的话可以修改。</p><p>远程连接云服务器使用 ssh 软件工具，使用的是公网ip。</p><p>注意事项：出于性能考虑，服务器的操作系统一定要选Linux版本（centos或者ubuntu），不要选Window。</p><blockquote><p><strong>主要步骤</strong>：拥有一台云服务器》ssh工具连接云服务器》安装宝塔面板》配置云服务器安全组(放行端口)》宝塔面板在线访问成功</p></blockquote><h2 id="二、安装面板"><a href="#二、安装面板" class="headerlink" title="二、安装面板"></a>二、安装面板</h2><h3 id="1、使用ssh工具连接云服务器"><a href="#1、使用ssh工具连接云服务器" class="headerlink" title="1、使用ssh工具连接云服务器"></a>1、使用ssh工具连接云服务器</h3><p>windows下可以使用XShell，macOs的可以使用终端。</p><blockquote><p>因为SSH工具有很多种，找到自己用的舒服的工具就可以，不用纠结使用哪一种。</p></blockquote><p>我自己是用的<a href="https://www.jianshu.com/p/14c3b78ca570" target="_blank" rel="noopener">FinalShell</a>这一款SSH工具来进行Linux远程连接的,如何认为不安全的话，也可以继续用Xshell，只是需要激活码,如下图</p><p><img src="https://i.loli.net/2020/05/02/rAwQ6NvadVFEemS.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="2、输入宝塔面板安装命令"><a href="#2、输入宝塔面板安装命令" class="headerlink" title="2、输入宝塔面板安装命令"></a>2、输入宝塔面板安装命令</h3><blockquote><p><strong>温馨提示</strong>：宝塔面板最近升级到了7.0版本，Centos7以上的系统建议安装宝塔面板最新版：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html（宝塔面板7.x版本，点击查看安装命令）" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html（宝塔面板7.x版本，点击查看安装命令）</a><br><a href="https://www.bt.cn/bbs/thread-30562-1-1.html（宝塔面板6.x版本，点击查看安装命令）" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-30562-1-1.html（宝塔面板6.x版本，点击查看安装命令）</a></p></blockquote><p>安装方法这里也有介绍（以宝塔面板5.x版本举例）：<a href="http://www.bt.cn/bbs/thread-1186-1-1.html" target="_blank" rel="noopener">http://www.bt.cn/bbs/thread-1186-1-1.html</a></p><blockquote><p>以下安装命令是宝塔面板5.x版本的，请注意。如果安装出错了，就去安装宝塔面板7.x版本</p></blockquote><p><strong>Centos安装脚本：</strong></p><blockquote><p>yum install -y wget &amp;&amp; wget -O install.sh <a href="http://download.bt.cn/install/install.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install.sh</a> &amp;&amp; sh install.sh</p></blockquote><p><strong>Ubuntu/Deepin安装脚本：</strong></p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install-ubuntu.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install-ubuntu.sh</a> &amp;&amp; sudo bash install.sh</p></blockquote><p>Debian安装脚本：</p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install-ubuntu.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install-ubuntu.sh</a> &amp;&amp; bash install.sh</p></blockquote><p>Fedora安装脚本:</p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install.sh</a> &amp;&amp; bash install.sh</p></blockquote><p>前两者偏多。根据操作系统输入不同的安装命令，然后回车</p><p>此间不需要任何操作。</p><h3 id="3、宝塔面板安装成功"><a href="#3、宝塔面板安装成功" class="headerlink" title="3、宝塔面板安装成功"></a>3、宝塔面板安装成功</h3><p>稍等一分钟（有时候网速差可能久一点)，然后不要关闭窗口</p><p>最终可以看到如下界面</p><p><img src="https://i.loli.net/2020/05/02/VJea2FuRGSXx5iY.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>这里会显示宝塔后台地址和账号密码，可以手动复制到记事本暂时存起来。</p><h2 id="三、配置安全组"><a href="#三、配置安全组" class="headerlink" title="三、配置安全组"></a>三、配置安全组</h2><blockquote><p>如果你已经会设置安全组的话，就可以省略这一步，直接浏览器访问宝塔面板<br>访问地址：<strong>http://云服务器公网IP地址:8888/</strong></p></blockquote><p>上面的黄色的字也说了，如果不能访问面板，请在安全组中放行端口。</p><p>因为刚装的系统，自然也没有放行8888端口，面板后台无法打开</p><p><img src="https://i.loli.net/2020/05/02/6gsm9Ft1vXEyTHK.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>下面我们添加安全组</p><h3 id="1、进入云服务器管理后台"><a href="#1、进入云服务器管理后台" class="headerlink" title="1、进入云服务器管理后台"></a>1、进入云服务器管理后台</h3><p>进入<a href="https://www.aliyun.com/activity/daily/cloud?source=5176.11533457&amp;userCode=ywqc0ubl&amp;type=copy" target="_blank" rel="noopener">服务器</a>(实例)主页，点击右边的查看更多，点击安全组配置。</p><p><img src="https://i.loli.net/2020/05/02/yRi8TN31z6sGmQg.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="2、然后可以看到一条安全组"><a href="#2、然后可以看到一条安全组" class="headerlink" title="2、然后可以看到一条安全组"></a>2、然后可以看到一条安全组</h3><p>点击配置规则（如果没有就新建一条安全组）</p><h3 id="3、点击快速创建规则"><a href="#3、点击快速创建规则" class="headerlink" title="3、点击快速创建规则"></a>3、点击快速创建规则</h3><p><img src="https://i.loli.net/2020/05/02/k81wxvdC4fcRTAB.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="4、可以看到如下页面"><a href="#4、可以看到如下页面" class="headerlink" title="4、可以看到如下页面"></a>4、可以看到如下页面</h3><p><img src="https://i.loli.net/2020/05/02/v1EzkoN7jmZlG5K.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>常用端口可以勾选，相当于多选。也可以自定义端口，比如我们要将8888和888添加进去。</p><p>授权对象像之前已经填的 0.0.0.0/0 一样。</p><p>基本就是这样。</p><h3 id="5、最终安全记录如下"><a href="#5、最终安全记录如下" class="headerlink" title="5、最终安全记录如下"></a>5、最终安全记录如下</h3><p><img src="https://i.loli.net/2020/05/02/MBPJ9XnlIvd2OjQ.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="6、浏览器访问宝塔面板成功"><a href="#6、浏览器访问宝塔面板成功" class="headerlink" title="6、浏览器访问宝塔面板成功"></a>6、浏览器访问宝塔面板成功</h3><p>然后我们再刷新之前的网页就能正常啦</p><blockquote><p>在云服务器上安装宝塔面板成功之后，访问地址：<strong>http://云服务器公网IP地址:8888/</strong><br>输入安装的时候产生的默认<strong>临时账号和密码登录</strong>。登录之后，请一定记得去改账号和密码哦！</p></blockquote><p><img src="https://i.loli.net/2020/05/02/xq5ncj4BTetbL3s.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="7、修改临时账号和密码"><a href="#7、修改临时账号和密码" class="headerlink" title="7、修改临时账号和密码"></a>7、修改临时账号和密码</h3><blockquote><p>为了安全考虑，在云服务器上安装完成宝塔面板之后，你应该马上修改你的宝塔面板登录账户和密码（注意：这个账户和密码不是宝塔面板官网的，而是每个云服务器访问宝塔面板需要用到的账户和密码）</p></blockquote><p><img src="https://i.loli.net/2020/05/02/pjZnqBRT74yJcHu.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>修改账号和密码之后，后面访问登录就是你新设置的账号和密码了</p><p><img src="https://i.loli.net/2020/05/02/5eLR3YS6AMaG4fD.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="8、绑定宝塔面板账号"><a href="#8、绑定宝塔面板账号" class="headerlink" title="8、绑定宝塔面板账号"></a>8、绑定宝塔面板账号</h3><blockquote><p>首先解释下为什么要绑定宝塔面板账号：每一台云服务器上安装了宝塔面板之后都需要去绑定你在宝塔面板官网上注册的 宝塔账号 这样每台云服务器的宝塔面板都可以享受你这个账号付过费的服务了。</p></blockquote><p>安装宝塔面板之后必做的事情：<a href="http://tencent.yundashi168.com/319.html" target="_blank" rel="noopener">如何注册和绑定宝塔面板账号？</a></p><p><a href="https://i.loli.net/2020/05/02/uqXTf6wH5a14mvl.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/05/02/uqXTf6wH5a14mvl.png" srcset="/blog/img/loading.gif" alt="img"></a></p><h3 id="9、安装LNMP网站环境"><a href="#9、安装LNMP网站环境" class="headerlink" title="9、安装LNMP网站环境"></a>9、安装LNMP网站环境</h3><p>LNMP网站环境是Linux+Nginx+Mysql+PHP的组合搭配网站程序环境，用来快速搭建各种开源的网站程序（WordPress,帝国CMS，织梦，Zblog等）</p><p><strong>为什么选择LNMP?</strong> 主要归功于Nignx服务器的功能强大和性能出色，还能节省服务器内存开销。</p><p><img src="https://i.loli.net/2020/06/28/PmZn3esuv5NMG98.png" srcset="/blog/img/loading.gif" alt="img"></p><p>然后会出现这个界面，需要等待十分钟左右，这会你可以去忙其它事情，过会来看。</p><p><img src="https://i.loli.net/2020/06/28/AGP2w9CZ3phuFTl.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="10、安装开源建站程序"><a href="#10、安装开源建站程序" class="headerlink" title="10、安装开源建站程序"></a>10、安装开源建站程序</h3><p>完成了以上步骤之后，你就可以随心所以的基于宝塔面板来安装各种建站程序了</p><ul><li><a href="http://tencent.yundashi168.com/421.html" target="_blank" rel="noopener">基于宝塔面板安装WordPress个人网站（图文教程）</a></li><li><a href="http://tencent.yundashi168.com/407.html" target="_blank" rel="noopener">基于宝塔面板搭建Typecho博客网站（图文教程）</a></li><li><a href="http://tencent.yundashi168.com/520.html" target="_blank" rel="noopener">基于宝塔面板安装Hexo个人博客（图文教程）</a></li></ul><hr><ul><li><a href="http://tencent.yundashi168.com/503.html" target="_blank" rel="noopener">基于宝塔面板对WordPress网站进行备份与恢复（网站迁移教程）</a></li><li><a href="http://tencent.yundashi168.com/258.html" target="_blank" rel="noopener">宝塔面板干什么用的? 有什么优点？搭建网站为什么要用它？</a></li><li><a href="http://tencent.yundashi168.com/325.html" target="_blank" rel="noopener">使用宝塔面板搭建网站之后的经验总结</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里两篇文章关于“CentOS安装宝塔面板”&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="宝塔" scheme="https://melodyjerry.github.io/blog/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7操作SSH/SSHD服务(查看/启动/重启/自启)</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/CentOS7%E6%93%8D%E4%BD%9CSSH%E3%80%81SSHD%E6%9C%8D%E5%8A%A1(%E6%9F%A5%E7%9C%8B%E3%80%81%E5%90%AF%E5%8A%A8%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E8%87%AA%E5%90%AF)/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/CentOS7%E6%93%8D%E4%BD%9CSSH%E3%80%81SSHD%E6%9C%8D%E5%8A%A1(%E6%9F%A5%E7%9C%8B%E3%80%81%E5%90%AF%E5%8A%A8%E3%80%81%E9%87%8D%E5%90%AF%E3%80%81%E8%87%AA%E5%90%AF)/</id>
    <published>2020-07-07T08:05:00.000Z</published>
    <updated>2020-07-10T06:46:17.185Z</updated>
    
    <content type="html"><![CDATA[<p>查看状态：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">status</span> <span class="hljs-selector-tag">sshd</span><span class="hljs-selector-class">.service</span></code></pre></div><p>启动服务：</p><div class="hljs"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> sshd.service</code></pre></div><p>重启服务：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">systemctl</span> <span class="hljs-selector-tag">restart</span> <span class="hljs-selector-tag">sshd</span><span class="hljs-selector-class">.service</span></code></pre></div><p>开机自启：</p><div class="hljs"><pre><code class="hljs routeros">systemctl <span class="hljs-builtin-name">enable</span> sshd.service</code></pre></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看状态：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;sshd&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.service&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动服务：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs crmsh&quot;&gt;systemctl &lt;span class=&quot;hljs-literal&quot;&gt;start&lt;/span&gt; sshd.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启服务：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;hljs-selector-tag&quot;&gt;sshd&lt;/span&gt;&lt;span class=&quot;hljs-selector-class&quot;&gt;.service&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;开机自启：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs routeros&quot;&gt;systemctl &lt;span class=&quot;hljs-builtin-name&quot;&gt;enable&lt;/span&gt; sshd.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS服务器升级Linux版本</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%87%E7%BA%A7Linux%E7%89%88%E6%9C%AC/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%87%E7%BA%A7Linux%E7%89%88%E6%9C%AC/</id>
    <published>2020-07-07T06:45:00.000Z</published>
    <updated>2020-07-10T06:46:17.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="检查系统版本"><a href="#检查系统版本" class="headerlink" title="检查系统版本"></a>检查系统版本</h1><div class="hljs"><pre><code class="hljs arduino">$ cat /etc/redhat-<span class="hljs-built_in">release</span></code></pre></div><p>显示</p><div class="hljs"><pre><code class="hljs angelscript">CentOS Linux release <span class="hljs-number">7.1</span><span class="hljs-number">.1503</span> (Core)</code></pre></div><h1 id="备份重要数据"><a href="#备份重要数据" class="headerlink" title="备份重要数据"></a>备份重要数据</h1><p>备份例如<code>/etc</code>、<code>/var</code>、<code>/opt</code><br>如果是安装在虚拟机上，那么可以使用快照进行备份。像VMware虚拟机可以快照备份，当然更奢侈一点是备份整个虚拟机。也可以针对重要程序数据进行备份，例如MySQL, Appache, Nginx, DNS等等。</p><h1 id="运行yum命令升级"><a href="#运行yum命令升级" class="headerlink" title="运行yum命令升级"></a>运行yum命令升级</h1><div class="hljs"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> sudo yum clean <span class="hljs-keyword">all</span><span class="hljs-symbol">$</span> sudo yum update</code></pre></div><h1 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h1><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo reboot</code></pre></div><h1 id="查看现在系统版本"><a href="#查看现在系统版本" class="headerlink" title="查看现在系统版本"></a>查看现在系统版本</h1><div class="hljs"><pre><code class="hljs arduino">$ cat /etc/redhat-<span class="hljs-built_in">release</span></code></pre></div><p>显示</p><div class="hljs"><pre><code class="hljs angelscript">CentOS Linux release <span class="hljs-number">7.8</span><span class="hljs-number">.2003</span> (Core)</code></pre></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;检查系统版本&quot;&gt;&lt;a href=&quot;#检查系统版本&quot; class=&quot;headerlink&quot; title=&quot;检查系统版本&quot;&gt;&lt;/a&gt;检查系统版本&lt;/h1&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs arduino&quot;&gt;$ cat /etc/redhat-&lt;span class=&quot;hljs-built_in&quot;&gt;release&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;CentOS Linux release &lt;span class=&quot;hljs-number&quot;&gt;7.1&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.1503&lt;/span&gt; (Core)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;备份重要数据&quot;&gt;&lt;a href=&quot;#备份重要数据&quot; class=&quot;headerlink&quot; title=&quot;备份重要数据&quot;&gt;&lt;/a&gt;备份重要数据&lt;/h1&gt;&lt;p&gt;备份例如&lt;code&gt;/etc&lt;/code&gt;、&lt;code&gt;/var&lt;/code&gt;、&lt;code&gt;/opt&lt;/code&gt;&lt;br&gt;如果是安装在虚拟机上，那么可以使用快照进行备份。像VMware虚拟机可以快照备份，当然更奢侈一点是备份整个虚拟机。也可以针对重要程序数据进行备份，例如MySQL, Appache, Nginx, DNS等等。&lt;/p&gt;
&lt;h1 id=&quot;运行yum命令升级&quot;&gt;&lt;a href=&quot;#运行yum命令升级&quot; class=&quot;headerlink&quot; title=&quot;运行yum命令升级&quot;&gt;&lt;/a&gt;运行yum命令升级&lt;/h1&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs gams&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;$&lt;/span&gt; sudo yum clean &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;hljs-symbol&quot;&gt;$&lt;/span&gt; sudo yum update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;重启系统&quot;&gt;&lt;a href=&quot;#重启系统&quot; class=&quot;headerlink&quot; title=&quot;重启系统&quot;&gt;&lt;/a&gt;重启系统&lt;/h1&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs elixir&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$ &lt;/span&gt;sudo reboot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;查看现在系统版本&quot;&gt;&lt;a href=&quot;#查看现在系统版本&quot; class=&quot;headerlink&quot; title=&quot;查看现在系统版本&quot;&gt;&lt;/a&gt;查看现在系统版本&lt;/h1&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs arduino&quot;&gt;$ cat /etc/redhat-&lt;span class=&quot;hljs-built_in&quot;&gt;release&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;CentOS Linux release &lt;span class=&quot;hljs-number&quot;&gt;7.8&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.2003&lt;/span&gt; (Core)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>阿里云云服务器漏洞修复</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D/</id>
    <published>2020-07-07T06:22:00.000Z</published>
    <updated>2020-07-10T06:46:17.945Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子在阿里云618活动花“巨款”买下了一个T5型的云服务器，镜像版本为CentOS 7.4。由于是第一次购买阿里云的服务器，云安全中心提示需要修复的漏洞有98个，一看到就怕了，可以阿里云的修复要钱，最少都是30/台/月，耗不起。<br>于是，百度了一下，找到了3篇有用的文章</p><ol><li><a href="https://www.cnblogs.com/wang-yaz/p/10563394.html" target="_blank" rel="noopener">https://www.cnblogs.com/wang-yaz/p/10563394.html</a></li><li><a href="https://www.cnblogs.com/ice-line/p/9590445.html" target="_blank" rel="noopener">https://www.cnblogs.com/ice-line/p/9590445.html</a></li><li><a href="https://www.v2ex.com/t/598779" target="_blank" rel="noopener">https://www.v2ex.com/t/598779</a></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前阵子在阿里云618活动花“巨款”买下了一个T5型的云服务器，镜像版本为CentOS 7.4。由于是第一次购买阿里云的服务器，云安全中心提示需要修复的漏洞有98个，一看到就怕了，可以阿里云的修复要钱，最少都是30/台/月，耗不起。&lt;br&gt;于是，百度了一下，找到了3篇有用的文章&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wang-yaz/p/10563394.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wang-yaz/p/10563394.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/ice-line/p/9590445.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/ice-line/p/9590445.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.v2ex.com/t/598779&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.v2ex.com/t/598779&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器安装Docker</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Docker/</id>
    <published>2020-07-07T05:56:00.000Z</published>
    <updated>2020-07-10T06:46:17.619Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子在阿里云618活动花“巨款”买下了一个T5型的云服务器，镜像版本为CentOS 7.4。现打算安装Docker。</p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><a id="more"></a><h1 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h1><p>按官方的文档，新版Docker无法覆盖旧版的，所以无比先卸载原来的旧版本</p><p>在Linux虚拟机上，我是装有旧版的，但由于服务器是全新的，无任何配置的，可以跳过这步骤</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-comment"># 移除旧版本的 Docker</span><span class="hljs-attr">yum</span> <span class="hljs-string">remove docker \</span>  <span class="hljs-meta">docker-client</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-client-latest</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-common</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-latest</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-latest-logrotate</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-logrotate</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-selinux</span> <span class="hljs-string">\</span>  <span class="hljs-meta">docker-engine-selinux</span> <span class="hljs-string">\</span>  <span class="hljs-attr">docker-engine</span></code></pre></div><h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><ol><li>安装软件包</li></ol><div class="hljs"><pre><code class="hljs haskell"><span class="hljs-meta"># 安装 Docker 依赖</span><span class="hljs-title">yum</span> install -y yum-utils device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> lvm2</span></code></pre></div><ol start="2"><li>配置阿里云Docker Yum源(个人觉的好)</li></ol><div class="hljs"><pre><code class="hljs vala"><span class="hljs-meta"># 添加源</span>yum-config-manager --add-repo https:<span class="hljs-comment">//download.docker.com/linux/centos/docker-ce.repo</span><span class="hljs-meta"># 更新 yum 缓存</span>yum makecache fast</code></pre></div><ol start="3"><li>安装最新版本的Docker</li></ol><div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment"># 安装 Docker-CE</span>yum <span class="hljs-keyword">install</span> -y docker-ce<span class="hljs-comment"># 开启 Docker</span>systemctl <span class="hljs-keyword">start</span> docker<span class="hljs-comment"># 安装 Docker Compose</span>curl -L <span class="hljs-string">"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)"</span> -o /usr/<span class="hljs-keyword">local</span>/<span class="hljs-keyword">bin</span>/docker-composechmod +x /usr/<span class="hljs-keyword">local</span>/<span class="hljs-keyword">bin</span>/docker-compose</code></pre></div><h1 id="相关防火墙配置"><a href="#相关防火墙配置" class="headerlink" title="相关防火墙配置"></a>相关防火墙配置</h1><div class="hljs"><pre><code class="hljs dsconfig"><span class="hljs-comment"># Docker 和 Swarm 相关防火墙配置</span><span class="hljs-string">systemctl </span><span class="hljs-string">status </span><span class="hljs-string">firewalld</span><span class="hljs-string">systemctl </span><span class="hljs-string">start </span><span class="hljs-string">firewalld</span><span class="hljs-string">firewall-</span><span class="hljs-string">cmd </span><span class="hljs-built_in">--add-port=9010/tcp</span> <span class="hljs-built_in">--permanent</span><span class="hljs-built_in">firewall-cmd</span> <span class="hljs-built_in">--add-port=9020/tcp</span> <span class="hljs-built_in">--permanentfirewall-cmd</span> <span class="hljs-built_in">--add-port=443/tcp</span> <span class="hljs-built_in">--permanent</span><span class="hljs-built_in">firewall-cmd</span> <span class="hljs-built_in">--add-port=80/tcp</span> <span class="hljs-built_in">--permanent</span><span class="hljs-built_in">firewall-cmd</span> <span class="hljs-built_in">--add-port=80/udp</span> <span class="hljs-built_in">--permanentfirewall-cmd</span> <span class="hljs-built_in">--add-port=22/tcp</span> <span class="hljs-built_in">--permanent</span><span class="hljs-built_in">firewall-cmd</span> <span class="hljs-built_in">--add-port=22/udp</span> <span class="hljs-built_in">--permanent</span><span class="hljs-built_in">firewall-cmd</span> <span class="hljs-built_in">--reload</span><span class="hljs-built_in">systemctl</span> <span class="hljs-string">restart </span><span class="hljs-string">docker</span></code></pre></div><p>这里说明一下如果开始 firewalld 服务被锁定<code>Unit is masked</code></p><p>需要先解除锁定，然后才能开放端口</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl unmask firewall</span></code></pre></div><h1 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h1><div class="hljs"><pre><code class="hljs routeros"><span class="hljs-comment"># 开机自启动</span>systemctl <span class="hljs-builtin-name">enable</span> firewalldsystemctl <span class="hljs-builtin-name">enable</span> docker</code></pre></div><h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><p>在配置阿里云Docker Yum源时候，可能出现<code>Loaded plugins: fastestmirror</code>的错误提示，百度上的解决如下：</p><p>1、</p><div class="hljs"><pre><code class="hljs ini"><span class="hljs-comment"># vi  /etc/yum/pluginconf.d/fastestmirror.conf</span><span class="hljs-attr">enabled</span>=<span class="hljs-number">0</span>    //由 <span class="hljs-number">1</span> 改成<span class="hljs-number">0</span> ，禁用该插件<span class="hljs-attr">verbose</span>=<span class="hljs-number">0</span><span class="hljs-attr">always_print_best_host</span> = <span class="hljs-literal">true</span><span class="hljs-attr">socket_timeout</span>=<span class="hljs-number">3</span><span class="hljs-comment">#  Relative paths are relative to the cachedir (and so works for users as well</span><span class="hljs-comment"># as root).</span><span class="hljs-attr">hostfilepath</span>=timedhosts.txt<span class="hljs-attr">maxhostfileage</span>=<span class="hljs-number">10</span><span class="hljs-attr">maxthreads</span>=<span class="hljs-number">15</span><span class="hljs-comment">#exclude=.gov, facebook</span><span class="hljs-comment">#include_only=.nl,.de,.uk,.ie</span></code></pre></div><p>2、</p><div class="hljs"><pre><code class="hljs ini"><span class="hljs-comment">#vi /etc/yum.conf</span><span class="hljs-section">[main]</span><span class="hljs-attr">cachedir</span>=/var/cache/yum/<span class="hljs-variable">$basearch</span>/<span class="hljs-variable">$releasever</span><span class="hljs-attr">keepcache</span>=<span class="hljs-number">0</span><span class="hljs-attr">debuglevel</span>=<span class="hljs-number">2</span><span class="hljs-attr">logfile</span>=/var/log/yum.log<span class="hljs-attr">exactarch</span>=<span class="hljs-number">1</span><span class="hljs-attr">obsoletes</span>=<span class="hljs-number">1</span><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><span class="hljs-attr">plugins</span>=<span class="hljs-number">1</span> <span class="hljs-comment">#将plugins的值修改为0</span><span class="hljs-attr">installonly_limit</span>=<span class="hljs-number">5</span></code></pre></div><p>3、</p><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>yum clean dbcache</code></pre></div><p>4、重新执行配置源和安装命令即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前阵子在阿里云618活动花“巨款”买下了一个T5型的云服务器，镜像版本为CentOS 7.4。现打算安装Docker。&lt;/p&gt;
&lt;h1 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.docker.com/install/linux/docker-ce/centos/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="Docker" scheme="https://melodyjerry.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>服务器安装Nginx</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Nginx/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Nginx/</id>
    <published>2020-07-07T05:26:00.000Z</published>
    <updated>2020-07-10T06:46:17.929Z</updated>
    
    <content type="html"><![CDATA[<p>图方便，用了个自动脚本：</p><div class="hljs"><pre><code class="hljs jboss-cli">wget http:<span class="hljs-string">//mirrors.linuxeye.com/oneinstack-full.tar.gz</span> &amp;&amp; tar xzf oneinstack-full.tar.gz &amp;&amp; <span class="hljs-string">./oneinstack/install.sh</span> <span class="hljs-params">--nginx_option</span> 1</code></pre></div><p>安装 Nginx 成功，重启服务器，连接 SSH</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图方便，用了个自动脚本：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs jboss-cli&quot;&gt;wget http:&lt;span class=&quot;hljs-string&quot;&gt;//mirrors.linuxeye.com/oneinstack-full.tar.gz&lt;/span&gt; &amp;amp;&amp;amp; tar xzf oneinstack-full.tar.gz &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;./oneinstack/install.sh&lt;/span&gt; &lt;span class=&quot;hljs-params&quot;&gt;--nginx_option&lt;/span&gt; 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安装 Nginx 成功，重启服务器，连接 SSH&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitEE 搭建、备份、恢复、多终端</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/Hexo%20+%20GitEE%20%E6%90%AD%E5%BB%BA%E3%80%81%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D%E3%80%81%E5%A4%9A%E7%BB%88%E7%AB%AF/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/Hexo%20+%20GitEE%20%E6%90%AD%E5%BB%BA%E3%80%81%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D%E3%80%81%E5%A4%9A%E7%BB%88%E7%AB%AF/</id>
    <published>2020-07-07T05:21:00.000Z</published>
    <updated>2020-07-10T06:46:17.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Hexo 是使用的比较多的博客框架了，之所以没有使用 GitHub 而选择了码云，</p><ol><li>我有自己的 VPS 不需要使用 GitHub Pages ，所以本文也没有关于如何使用 GitHub Pages 的教程；</li><li>GitHub 上私有仓库是收费的，码云上面能创建免费的私有仓库。也有人选择使用 Docker 来创建博客环境，做镜像备份.</li></ol><p>这里没有使用此方案，各有所好吧！</p><a id="more"></a><h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h1><p>主服务器系统版本与内核版本：</p><div class="hljs"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>dbn- ~]# cat /etc/redhat-releaseCentOS Linux release <span class="hljs-number">7.5</span><span class="hljs-number">.1804</span> (Core) [<span class="hljs-symbol">root@</span>dbn- ~]# uname -r<span class="hljs-number">3.10</span><span class="hljs-number">.0</span><span class="hljs-number">-862.3</span><span class="hljs-number">.2</span>.el7.x86_64</code></pre></div><p>测试服务器系统版本与内核版本：</p><div class="hljs"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>host ~]# cat /etc/redhat-releaseCentOS Linux release <span class="hljs-number">7.3</span><span class="hljs-number">.1611</span> (Core) [<span class="hljs-symbol">root@</span>host ~]# uname -r<span class="hljs-number">4.10</span><span class="hljs-number">.4</span><span class="hljs-number">-1.</span>el7.elrepo.x86_64</code></pre></div><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><h2 id="2-1-wget"><a href="#2-1-wget" class="headerlink" title="2.1 wget"></a>2.1 wget</h2><div class="hljs"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y wget</code></pre></div><h2 id="2-2-NodeJS"><a href="#2-2-NodeJS" class="headerlink" title="2.2 NodeJS"></a>2.2 NodeJS</h2><div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-comment"># 下载nodejs最新的bin包</span>wget https://nodejs.org/dist/v12.<span class="hljs-number">18.2</span>/<span class="hljs-keyword">node</span><span class="hljs-title">-v12</span>.<span class="hljs-number">18.2</span>-linux-x64.tar.xz<span class="hljs-comment"># 解压</span>xz -d <span class="hljs-keyword">node</span><span class="hljs-title">-v12</span>.<span class="hljs-number">18.2</span>-linux-x64.tar.xztar -xf <span class="hljs-keyword">node</span><span class="hljs-title">-v12</span>.<span class="hljs-number">18.2</span>-linux-x64.tar<span class="hljs-comment"># 移动目录</span>mv <span class="hljs-keyword">node</span><span class="hljs-title">-v12</span>.<span class="hljs-number">18.2</span>-linux-x64 /usr/local/nodejs<span class="hljs-comment"># 部署文件</span>ln -s /usr/local/nodejs/bin/<span class="hljs-keyword">node</span> <span class="hljs-title">/usr</span>/bin/<span class="hljs-keyword">node</span><span class="hljs-title"></span><span class="hljs-title">ln</span> -s /usr/local/nodejs/bin/npm /usr/bin/npm</code></pre></div><p>可以去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官方网站</a>下载，我这里使用的类型为：Linux Binaries (x64)</p><p><strong>测试</strong></p><div class="hljs"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>dbn-japan packages]# node -vv12<span class="hljs-number">.18</span><span class="hljs-number">.2</span>[<span class="hljs-symbol">root@</span>dbn-japan packages]# npm -v<span class="hljs-number">6.14</span><span class="hljs-number">.5</span></code></pre></div><p>如果输出了版本号，说明安装成功。</p><h2 id="2-3-Git"><a href="#2-3-Git" class="headerlink" title="2.3 Git"></a>2.3 Git</h2><div class="hljs"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y git</code></pre></div><p>初始化设置：</p><div class="hljs"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"vip@email.com"</span>git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"MelodyJerry"</span></code></pre></div><h2 id="2-4-Hexo"><a href="#2-4-Hexo" class="headerlink" title="2.4 Hexo"></a>2.4 Hexo</h2><div class="hljs"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></div><p>安装后尝试执行命令： hexo </p><p>如果出现下面的输出，按我下面的方法解决，没有则跳过。</p><div class="hljs"><pre><code class="hljs mipsasm">[root@dbn-<span class="hljs-keyword">japan </span>packages]<span class="hljs-comment"># hexo</span>-<span class="hljs-keyword">bash: </span>hexo: command not found</code></pre></div><p>编辑环境变量文件： vim /etc/profile ，在文件末尾增加下面设置：</p><div class="hljs"><pre><code class="hljs elixir">export PATH=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/nodejs/lib/node_modules/hexo-cli/bin</span></code></pre></div><p>刷新环境变量： source /etc/profile ，这时再运行命令 hexo 就会有正确的输出了。</p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h1><h2 id="3-1-创建项目与分支"><a href="#3-1-创建项目与分支" class="headerlink" title="3.1 创建项目与分支"></a>3.1 创建项目与分支</h2><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181112223524269-603079356.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181112223524269-603079356.png" srcset="/blog/img/loading.gif" alt="img"></a></p><p>创建新的分支：sources</p><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181112223651823-1038516991.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181112223651823-1038516991.png" srcset="/blog/img/loading.gif" alt="img"></a></p><ul><li><strong>master</strong>：存放 Hexo 编译生成的静态资源。</li><li><strong>sources</strong>：存放源文件，用来备份博客。</li></ul><h2 id="3-2-设置-SSH-Key"><a href="#3-2-设置-SSH-Key" class="headerlink" title="3.2 设置 SSH Key"></a>3.2 设置 SSH Key</h2><p>运行下面的命令创建 SSH Key，邮箱部分改成你创建账户时候的邮箱：</p><div class="hljs"><pre><code class="hljs vbnet">[root@dbn-japan blog.dbnuo.org]<span class="hljs-meta"># ssh-keygen -t rsa -C "dbnuo@foxmail.com"</span>Generating <span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span> rsa <span class="hljs-keyword">key</span> pair.Enter file <span class="hljs-keyword">in</span> which <span class="hljs-keyword">to</span> save the <span class="hljs-keyword">key</span> (/root/.ssh/id_rsa): <span class="hljs-meta"># 目录</span>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): <span class="hljs-meta"># 输入密码，可回车跳过</span>Enter same passphrase again: <span class="hljs-meta"># 再次输入密码</span></code></pre></div><p>查看公开密钥：</p><div class="hljs"><pre><code class="hljs arcade">cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub</code></pre></div><p> 将公开密钥添加至码云。</p><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181112223849791-551396003.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181112223849791-551396003.png" srcset="/blog/img/loading.gif" alt="img"></a></p><h2 id="3-3-拉取项目"><a href="#3-3-拉取项目" class="headerlink" title="3.3 拉取项目"></a>3.3 拉取项目</h2><p>跳转至网站根目录，克隆项目至本地：</p><div class="hljs"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://gitee.com/dbnuo/bnd-hexo.git</code></pre></div><p>跳转至拉取的项目目录：</p><div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment"># 创建 hexo 目录</span>mkdir hexo<span class="hljs-comment"># 进入 hexo 目录</span>cd hexo/<span class="hljs-comment"># 初始化 hexo 目录</span>hexo initnpm <span class="hljs-keyword">install</span><span class="hljs-comment"># 安装插件</span>npm <span class="hljs-keyword">install</span> hexo-generator-<span class="hljs-keyword">index</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-<span class="hljs-keyword">archive</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-<span class="hljs-keyword">category</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-tag <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-<span class="hljs-keyword">server</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-heroku <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-rsync <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-openshift <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-renderer-marked <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-renderer-stylus <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-feed <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-sitemap <span class="hljs-comment">--save</span></code></pre></div><h1 id="4-建站"><a href="#4-建站" class="headerlink" title="4.建站"></a>4.建站</h1><p>先看文件夹里都有什么：</p><div class="hljs"><pre><code class="hljs mipsasm">[root@dbn-<span class="hljs-keyword">japan </span>hexo]<span class="hljs-comment"># ls -a</span>.  ..  _<span class="hljs-built_in">config</span>.yml  .gitignore  node_modules  package.<span class="hljs-keyword">json </span> package-lock.<span class="hljs-keyword">json </span> <span class="hljs-keyword">scaffolds </span> source  themes</code></pre></div><ul><li>_config.yml：站点的配置文件，需要备份；</li><li>themes：主题文件夹，需要备份；</li><li>source：博客文章的 .md 文件，需要备份；</li><li>scaffolds：文章的模板，需要备份；</li><li>package.json：安装包的名称，需要备份；</li><li>.gitignore：限定在 push 时哪些文件可以忽略，需要备份；</li><li>.git：主题和站点都有，标志这是一个 git 项目，不需要备份；</li><li>node_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份；</li><li>public：是 hexo g 生成的静态网页，不需要备份；</li><li>.deploy_git：同上，hexo g 也会生成，不需要备份；</li><li>db.json：文件，不需要备份。</li></ul><h2 id="4-1-配置-config-yml"><a href="#4-1-配置-config-yml" class="headerlink" title="4.1 配置 _config.yml"></a>4.1 配置 _config.yml</h2><p>基础配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方文档</a>的配置说明。这里需要在末尾添加 Git 的配置：</p><div class="hljs"><pre><code class="hljs crmsh">...deploy:  <span class="hljs-keyword">type</span>: git  repo: https://gitee.com/dbnuo/bnd-hexo.git  branch: <span class="hljs-literal">master</span>  message: 'web updata: {{now(<span class="hljs-string">"YYYY-MM-DD HH/mm/ss"</span>)}}'</code></pre></div><h2 id="4-2-生成页面并提交"><a href="#4-2-生成页面并提交" class="headerlink" title="4.2 生成页面并提交"></a>4.2 生成页面并提交</h2><p>运行命令： <code>hexo cl &amp;&amp; hexo g -d</code> 输入用户名和密码后，页面代码就会提交至码云项目中。</p><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113103505392-1803344108.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113103505392-1803344108.png" srcset="/blog/img/loading.gif" alt="img"></a></p><p>将网站目录指定至 hexo 的 public 文件夹中，访问网站：</p><div class="hljs"><pre><code class="hljs routeros">cd hexohexo s # hexo<span class="hljs-built_in"> server </span>默认是4000端口</code></pre></div><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113103622833-1181993845.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113103622833-1181993845.png" srcset="/blog/img/loading.gif" alt="img"></a></p><h1 id="5-备份"><a href="#5-备份" class="headerlink" title="5.备份"></a>5.备份</h1><p>跳转至项目目录 bnd-hexo：</p><div class="hljs"><pre><code class="hljs mipsasm">git checkout -<span class="hljs-keyword">b </span>sources <span class="hljs-comment"># 创建切换分支</span>git push <span class="hljs-keyword">origin </span>sources <span class="hljs-comment"># 提交代码至分支</span></code></pre></div><p>提交至码云项目分支：</p><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113105109879-1083473093.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113105109879-1083473093.png" srcset="/blog/img/loading.gif" alt="img"></a></p><p>至此搭建完毕，代码也备份到项目中了。为了测试备份恢复，我新建了个文章 test 并提交进行测试。</p><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113105556438-1191039737.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113105556438-1191039737.png" srcset="/blog/img/loading.gif" alt="img"></a></p><h1 id="6-恢复"><a href="#6-恢复" class="headerlink" title="6.恢复"></a>6.恢复</h1><p>切换至测试服务器，基础的安装和设置可以参考上面的流程。</p><p>跳转至网站的根目录：</p><div class="hljs"><pre><code class="hljs sql"><span class="hljs-comment"># 拉取项目至本地</span>git clone https://gitee.com/dbnuo/bnd-hexo.git<span class="hljs-comment"># 跳转至目录</span>cd bnd-hexo<span class="hljs-comment"># 创建分支并拉取</span>git checkout -b sources origin/sources<span class="hljs-comment"># 跳转至源文件目录</span>cd hexo<span class="hljs-comment"># 初始安装</span>npm <span class="hljs-keyword">install</span>npm <span class="hljs-keyword">install</span> hexo-generator-<span class="hljs-keyword">index</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-<span class="hljs-keyword">archive</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-<span class="hljs-keyword">category</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-tag <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-<span class="hljs-keyword">server</span> <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-heroku <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-rsync <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-deployer-openshift <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-renderer-marked <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-renderer-stylus <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-feed <span class="hljs-comment">--save</span>npm <span class="hljs-keyword">install</span> hexo-generator-sitemap <span class="hljs-comment">--save</span></code></pre></div><p>执行完毕，hexo 就恢复了，可以正常操作了。</p><h1 id="7-多终端"><a href="#7-多终端" class="headerlink" title="7.多终端"></a>7.多终端</h1><p>至此两台服务器都对一个项目库进行操作，可以说是多终端了，我在测试服务器新建了个文章： hexo new post “test2” </p><p>创建成功后提交上传。</p><p>切换回主服务器：</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-comment"># 跳转至项目目录</span><span class="hljs-attr">cd</span> <span class="hljs-string">bnd-hexo</span><span class="hljs-comment"># 拉取项目</span><span class="hljs-attr">git</span> <span class="hljs-string">pull origin sources</span><span class="hljs-comment"># 跳转至源文件目录</span><span class="hljs-attr">cd</span> <span class="hljs-string">hexo/</span><span class="hljs-comment"># 重新编译</span><span class="hljs-attr">hexo</span> <span class="hljs-string">cl &amp;&amp; hexo g -d</span></code></pre></div><p>再访问网站：</p><p><a href="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113114656020-1660436245.png" target="_blank" rel="noopener"><img src="https://img2018.cnblogs.com/blog/1065454/201811/1065454-20181113114656020-1660436245.png" srcset="/blog/img/loading.gif" alt="img"></a></p><p>看到这里出现了文章 test2 ，至此多终端编辑操作成功。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo 是使用的比较多的博客框架了，之所以没有使用 GitHub 而选择了码云，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我有自己的 VPS 不需要使用 GitHub Pages ，所以本文也没有关于如何使用 GitHub Pages 的教程；&lt;/li&gt;
&lt;li&gt;GitHub 上私有仓库是收费的，码云上面能创建免费的私有仓库。也有人选择使用 Docker 来创建博客环境，做镜像备份.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里没有使用此方案，各有所好吧！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>服务器端简单Demo</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%AE%80%E5%8D%95Demo/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%AE%80%E5%8D%95Demo/</id>
    <published>2020-07-07T05:05:00.000Z</published>
    <updated>2020-07-10T06:46:17.936Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">void</span> CSrvDemoDlg::OnBnClickedOk(){    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 在此添加控件通知处理程序代码</span>    <span class="hljs-comment">//创建一个套接字的步骤</span>    <span class="hljs-comment">//定义套接字变量</span>    SOCKET ls;    <span class="hljs-comment">//创建套接字</span>    ls=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);    <span class="hljs-comment">//判断套接字是否成功，失败则退出</span>    <span class="hljs-keyword">if</span>(ls==INVALID_SOCKET){        printf(<span class="hljs-string">"Error at socket():%d\n"</span>,WSAGetLastError());        WSACleanup();        <span class="hljs-keyword">return</span>;    }    <span class="hljs-comment">//绑定套接字和套接字地址</span>    sockaddr_in sa;    sa.sin_family=AF_INET;    sa.sin_addr.S_un.S_addr=inet_addr(<span class="hljs-string">"127.0.0.1"</span>);    sa.sin_port=htons(<span class="hljs-number">12345</span>);    <span class="hljs-comment">//判断是否绑定成功</span>    <span class="hljs-keyword">if</span>(bind(ls,(SOCKADDR*)&amp;sa,sizeof(sa))==SOCKET_ERROR){        printf(<span class="hljs-string">"bind()failed.\n"</span>);        closesocket(ls);        <span class="hljs-keyword">return</span>;    }    <span class="hljs-comment">//把套接字置入侦听状态</span>    listen(ls,<span class="hljs-number">3</span>);    <span class="hljs-comment">//接受连接请求</span>    SOCKET snew;    snew=accept(ls,NULL,NULL);    <span class="hljs-keyword">char</span> szmsg[<span class="hljs-number">50</span>];    strcpy(szmsg,<span class="hljs-string">"welcome to hgu.edu!\r\n"</span>);    <span class="hljs-comment">//发送数据</span>    send(snew,szmsg,strlen(szmsg),<span class="hljs-number">0</span>);}</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; CSrvDemoDlg::OnBnClickedOk()
{
    
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】9. 回文数</title>
    <link href="https://melodyjerry.github.io/blog/2020/06/10/%E3%80%90LeetCode%E3%80%919.%20%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/06/10/%E3%80%90LeetCode%E3%80%919.%20%E5%9B%9E%E6%96%87%E6%95%B0/</id>
    <published>2020-06-10T03:58:00.000Z</published>
    <updated>2020-07-10T06:46:17.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>判断一个整数是否是回文数。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-number">121</span><span class="hljs-string">输出:</span> <span class="hljs-literal">true</span></code></pre></div><p>示例 2:</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-number">-121</span><span class="hljs-string">输出:</span> <span class="hljs-literal">false</span><span class="hljs-string">解释:</span> <span class="hljs-string">从左向右读,</span> <span class="hljs-string">为</span> <span class="hljs-number">-121</span> <span class="hljs-string">。</span> <span class="hljs-string">从右向左读,</span> <span class="hljs-string">为</span> <span class="hljs-number">121</span><span class="hljs-bullet">-</span> <span class="hljs-string">。因此它不是一个回文数。</span></code></pre></div><p>示例 3:</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-number">10</span><span class="hljs-string">输出:</span> <span class="hljs-literal">false</span><span class="hljs-string">解释:</span> <span class="hljs-string">从右向左读,</span> <span class="hljs-string">为</span> <span class="hljs-number">01</span> <span class="hljs-string">。因此它不是一个回文数。</span></code></pre></div><p>进阶:</p><ul><li>你能不将整数转为字符串来解决这个问题吗？</li></ul><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>用数学方法直接计算出倒数</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{        <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">int</span> rec = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> num = x;        <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>) {            rec = rec * <span class="hljs-number">10</span> + num % <span class="hljs-number">10</span>;            num /= <span class="hljs-number">10</span>;        }        <span class="hljs-keyword">return</span> rec == x;    }}</code></pre></div><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><ul><li>将整数转为字符串来解决<br><a href="https://leetcode-cn.com/problems/palindrome-number/solution/dong-hua-hui-wen-shu-de-san-chong-jie-fa-fa-jie-ch/" target="_blank" rel="noopener">动画：回文数的三种解法 | 法解种三的数文回：画动</a><br><a href="https://leetcode-cn.com/problems/palindrome-number/solution/hui-wen-shu-by-leetcode-solution/" target="_blank" rel="noopener">回文数</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;判断一个整数是否是回文数。&lt;/p&gt;
&lt;p&gt;回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;输入:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;121&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;输出:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;输入:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-121&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;输出:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;解释:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;从左向右读,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;为&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;-121&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;。&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;从右向左读,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;为&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;hljs-bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;。因此它不是一个回文数。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs yaml&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;输入:&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;输出:&lt;/span&gt; &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;hljs-string&quot;&gt;解释:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;从右向左读,&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;为&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;。因此它不是一个回文数。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进阶:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你能不将整数转为字符串来解决这个问题吗？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="https://melodyjerry.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>超星学习通脚本（油猴）</title>
    <link href="https://melodyjerry.github.io/blog/2020/06/09/%E8%B6%85%E6%98%9F%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%EF%BC%88%E6%B2%B9%E7%8C%B4%EF%BC%89/"/>
    <id>https://melodyjerry.github.io/blog/2020/06/09/%E8%B6%85%E6%98%9F%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%84%9A%E6%9C%AC%EF%BC%88%E6%B2%B9%E7%8C%B4%EF%BC%89/</id>
    <published>2020-06-09T09:52:00.000Z</published>
    <updated>2020-07-10T06:46:17.942Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="脚本①"><a href="#脚本①" class="headerlink" title="脚本①"></a>脚本①</h1><div class="hljs"><pre><code class="hljs js"><span class="hljs-comment">// ==UserScript==</span><span class="hljs-comment">// @name         熊猫超星网课助手</span><span class="hljs-comment">// @namespace    xiongmao</span><span class="hljs-comment">// @version      9.0.1</span><span class="hljs-comment">// @description  自动挂机看尔雅MOOC，支持视频、音频、文档、图书自动完成，章节测验自动答题提交，支持自动切换任务点、挂机阅读时长、自动登录等，解除各类功能限制，开放自定义参数</span><span class="hljs-comment">// @author       xiongmao</span><span class="hljs-comment">// @match        *://*.chaoxing.com/*</span><span class="hljs-comment">// @match        *://*.edu.cn/*</span><span class="hljs-comment">// @connect      api.xmlm8.com</span><span class="hljs-comment">// @run-at       document-end</span><span class="hljs-comment">// @grant        unsafeWindow</span><span class="hljs-comment">// @grant        GM_xmlhttpRequest</span><span class="hljs-comment">// @grant        GM_setClipboard</span><span class="hljs-comment">// @license      MIT</span><span class="hljs-comment">// ==/UserScript==</span><span class="hljs-comment">// 设置修改后，需要刷新或重新打开网课页面才会生效</span><span class="hljs-keyword">var</span> setting = {    <span class="hljs-comment">// 8E3 == 8000，科学记数法，表示毫秒数</span>    time: <span class="hljs-number">8E3</span> <span class="hljs-comment">// 默认响应速度为8秒，不建议小于5秒</span>    ,<span class="hljs-attr">token</span>: <span class="hljs-string">''</span> <span class="hljs-comment">// 捐助用户可以使用定制功能，更精准的匹配答案，此处填写捐助后获取的识别码</span>    ,<span class="hljs-attr">review</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 复习模式，完整挂机视频(音频)时长，支持挂机任务点已完成的视频和音频，默认关闭</span>    ,<span class="hljs-attr">queue</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 队列模式，开启后任务点逐一完成，关闭则单页面所有任务点同时进行，默认开启</span>    <span class="hljs-comment">// 1代表开启，0代表关闭</span>    ,<span class="hljs-attr">video</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 视频支持后台、切换窗口不暂停，支持多视频，默认开启</span>    ,<span class="hljs-attr">work</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 自动答题功能(章节测验)，作业需要手动开启查询，高准确率，默认开启</span>    ,<span class="hljs-attr">audio</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 音频自动播放，与视频功能共享vol和rate参数，默认开启</span>    ,<span class="hljs-attr">book</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 图书阅读任务点，非课程阅读任务点，默认开启</span>    ,<span class="hljs-attr">docs</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 文档阅读任务点，PPT类任务点自动完成阅读任务，默认开启</span>    <span class="hljs-comment">// 本区域参数，上方为任务点功能，下方为独立功能</span>    ,<span class="hljs-attr">jump</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 自动切换任务点、章节、课程(需要配置course参数)，默认开启</span>    ,<span class="hljs-attr">read</span>: <span class="hljs-string">'0'</span> <span class="hljs-comment">// 挂机课程阅读时间，单位是分钟，'65'代表挂机65分钟，请手动打开阅读页面，默认'0'分钟</span>    ,<span class="hljs-attr">face</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 解除面部识别(不支持二维码类面部采集)，此功能仅为临时解除，默认关闭</span>    ,<span class="hljs-attr">total</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 显示课程进度的统计数据，在学习进度页面的上方展示，默认关闭</span>    <span class="hljs-comment">// 仅开启video(audio)时，修改此处才会生效</span>    ,<span class="hljs-attr">line</span>: <span class="hljs-string">'公网1'</span> <span class="hljs-comment">// 视频播放的默认资源线路，此功能适用于系统默认线路无资源，默认'公网1'</span>    ,<span class="hljs-attr">http</span>: <span class="hljs-string">'标清'</span> <span class="hljs-comment">// 视频播放的默认清晰度，无效参数则使用系统默认清晰度，默认'标清'</span>    <span class="hljs-comment">// 本区域参数，上方为video功能独享，下方为audio功能共享</span>    ,<span class="hljs-attr">vol</span>: <span class="hljs-string">'0'</span> <span class="hljs-comment">// 默认音量的百分数，设定范围：[0,100]，'0'为静音，默认'0'</span>    ,<span class="hljs-attr">rate</span>: <span class="hljs-string">'3'</span> <span class="hljs-comment">// 视频播放默认倍率，参数范围0∪[0.0625,16]，'0'为秒过，默认'1'倍</span>    <span class="hljs-comment">// 仅开启work时，修改此处才会生效</span>    ,<span class="hljs-attr">auto</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 答题完成后自动提交，默认关闭 改为1开启</span>    ,<span class="hljs-attr">none</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 无匹配答案时执行默认操作，关闭后若题目无匹配答案则会暂时保存已作答的题目，默认开启</span>    ,<span class="hljs-attr">scale</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 富文本编辑器高度自动拉伸，用于文本类题目，答题框根据内容自动调整大小，默认关闭</span>    <span class="hljs-comment">// 仅开启jump时，修改此处才会生效</span>    ,<span class="hljs-attr">course</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 当前课程完成后自动切换课程，仅支持按照根目录课程顺序切换，默认开启</span>    ,<span class="hljs-attr">lock</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 跳过未开放(图标是锁)的章节，即闯关模式或定时发放的任务点，默认开启</span>    <span class="hljs-comment">// 自动登录功能配置区</span>    ,<span class="hljs-attr">school</span>: <span class="hljs-string">'账号为手机号可以不修改此参数'</span> <span class="hljs-comment">// 学校/单位/机构码，要求完整有效可查询，例如'清华大学'</span>    ,<span class="hljs-attr">username</span>: <span class="hljs-string">''</span> <span class="hljs-comment">// 学号/工号/借书证号(邮箱/手机号/账号)，例如'2018010101'，默认''</span>    ,<span class="hljs-attr">password</span>: <span class="hljs-string">''</span> <span class="hljs-comment">// 密码，例如'123456'，默认''</span>},_self = unsafeWindow,url = location.pathname,top = _self;<span class="hljs-keyword">if</span> (url != <span class="hljs-string">'/studyApp/studying'</span> &amp;&amp; top != _self.top) <span class="hljs-built_in">document</span>.domain = location.host.replace(<span class="hljs-regexp">/.+?\./</span>, <span class="hljs-string">''</span>);<span class="hljs-keyword">try</span> {    <span class="hljs-keyword">while</span> (top != _self.top) {        top = top.parent.document ? top.parent : _self.top;        <span class="hljs-keyword">if</span> (top.location.pathname == <span class="hljs-string">'/mycourse/studentstudy'</span>) <span class="hljs-keyword">break</span>;    }} <span class="hljs-keyword">catch</span> (err) {    <span class="hljs-comment">// console.log(err);</span>    top = _self;}<span class="hljs-keyword">var</span> $ = _self.jQuery || top.jQuery,parent = _self == top ? self : _self.parent,Ext = _self.Ext || parent.Ext || {},UE = _self.UE,vjs = _self.videojs;<span class="hljs-built_in">String</span>.prototype.toCDB = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.replace(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[\uff01-\uff5e]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>) </span>{        <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(str.charCodeAt(<span class="hljs-number">0</span>) - <span class="hljs-number">65248</span>);    }).replace(<span class="hljs-regexp">/[“”]/g</span>, <span class="hljs-string">'"'</span>).replace(<span class="hljs-regexp">/[‘’]/g</span>, <span class="hljs-string">"'"</span>).replace(<span class="hljs-regexp">/。/g</span>, <span class="hljs-string">'.'</span>);};setting.normal = <span class="hljs-string">''</span>; <span class="hljs-comment">// ':visible'</span><span class="hljs-comment">// setting.time += Math.ceil(setting.time * Math.random()) - setting.time / 2;</span>setting.job = [<span class="hljs-string">':not(*)'</span>];setting.video &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/video/index.html"]'</span>);setting.work &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/work/index.html"]'</span>);setting.audio &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/audio/index.html"]'</span>);setting.book &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/innerbook/index.html"]'</span>);setting.docs &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/ppt/index.html"]'</span>, <span class="hljs-string">'iframe[src*="/pdf/index.html"]'</span>);setting.tip = !setting.queue || top != _self &amp;&amp; jobSort($ || Ext.query);<span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/mycourse/studentstudy'</span>) {    _self.checkMobileBrowerLearn = $.noop;    <span class="hljs-keyword">var</span> classId = location.search.match(<span class="hljs-regexp">/cla[zs]{2}id=(\d+)/i</span>)[<span class="hljs-number">1</span>] || <span class="hljs-number">0</span>,    courseId = _self.courseId || location.search.match(<span class="hljs-regexp">/courseId=(\d+)/i</span>)[<span class="hljs-number">1</span>] || <span class="hljs-number">0</span>;    setting.lock || $(<span class="hljs-string">'#coursetree'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'[onclick*=void], [href*=void]'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        _self.getTeacherAjax(courseId, classId, $(<span class="hljs-keyword">this</span>).parent().attr(<span class="hljs-string">'id'</span>).slice(<span class="hljs-number">3</span>));    });} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ananas/modules/video/index.html'</span> &amp;&amp; setting.video) {    <span class="hljs-keyword">if</span> (setting.review) _self.greenligth = Ext.emptyFn;    checkPlayer(_self.supportH5Video());} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/work/doHomeWorkNew'</span> || url == <span class="hljs-string">'/api/work'</span> || url == <span class="hljs-string">'/work/addStudentWorkNewWeb'</span>) {    <span class="hljs-keyword">if</span> (!UE) {        <span class="hljs-keyword">var</span> len = ($ || Ext.query || <span class="hljs-built_in">Array</span>)(<span class="hljs-string">'font:contains(未登录)'</span>, <span class="hljs-built_in">document</span>).length;        setTimeout(len == <span class="hljs-number">1</span> ? top.location.reload : parent.greenligth, setting.time);    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setting.work) {        setTimeout(relieveLimit, <span class="hljs-number">0</span>);        beforeFind();    }} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ananas/modules/audio/index.html'</span> &amp;&amp; setting.audio) {    <span class="hljs-keyword">if</span> (setting.review) _self.greenligth = Ext.emptyFn;    _self.videojs = hookAudio;    hookAudio.xhr = vjs.xhr;} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ananas/modules/innerbook/index.html'</span> &amp;&amp; setting.book &amp;&amp; setting.tip) {    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        _self.setting ? _self.top.onchangepage(_self.getFrameAttr(<span class="hljs-string">'end'</span>)) : _self.greenligth();    }, setting.time);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.match(<span class="hljs-regexp">/^\/ananas\/modules\/(ppt|pdf)\/index\.html$/</span>) &amp;&amp; setting.docs &amp;&amp; setting.tip) {    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        _self.setting ? _self.finishJob() : _self.greenligth();    }, setting.time);    frameElement.setAttribute(<span class="hljs-string">'download'</span>, <span class="hljs-number">1</span>);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/knowledge/cards'</span>) {    $ &amp;&amp; checkToNext();} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.match(<span class="hljs-regexp">/^\/(course|zt)\/\d+\.html$/</span>)) {    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        +setting.read &amp;&amp; _self.sendLogs &amp;&amp; $(<span class="hljs-string">'.course_section:eq(0) .chapterText'</span>).click();    }, setting.time);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ztnodedetailcontroller/visitnodedetail'</span>) {    setting.read *= <span class="hljs-number">60</span> / $(<span class="hljs-string">'.course_section'</span>).length;    setting.read &amp;&amp; _self.sendLogs &amp;&amp; autoRead();} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/mycourse/studentcourse'</span>) {    <span class="hljs-keyword">var</span> gv = location.search.match(<span class="hljs-regexp">/d=\d+&amp;/g</span>);    setting.total &amp;&amp; $(<span class="hljs-string">'&lt;a&gt;'</span>, {        href: <span class="hljs-string">'/moocAnalysis/chapterStatisticByUser?classI'</span> + gv[<span class="hljs-number">1</span>] + <span class="hljs-string">'courseI'</span> + gv[<span class="hljs-number">0</span>] + <span class="hljs-string">'userId='</span> + _self.getCookie(<span class="hljs-string">'_uid'</span>) + <span class="hljs-string">'&amp;ut=s'</span>,        target: <span class="hljs-string">'_blank'</span>,        title: <span class="hljs-string">'点击查看章节统计'</span>,        style: <span class="hljs-string">'margin: 0 25px;'</span>,        html: <span class="hljs-string">'本课程共'</span> + $(<span class="hljs-string">'.icon'</span>).length + <span class="hljs-string">'节，剩余'</span> + $(<span class="hljs-string">'em:not(.openlock)'</span>).length + <span class="hljs-string">'节未完成'</span>    }).appendTo(<span class="hljs-string">'.zt_logo'</span>).parent().width(<span class="hljs-string">'auto'</span>);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.match(<span class="hljs-regexp">/^\/visit\/(courses|interaction)$/</span>)) {    setting.face &amp;&amp; $(<span class="hljs-string">'.zmodel'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'[onclick^=openFaceTip]'</span>, DisplayURL);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.host.match(<span class="hljs-regexp">/^passport2/</span>)) {    setting.username &amp;&amp; getSchoolId();} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.hostname == <span class="hljs-string">'i.mooc.chaoxing.com'</span>) {    _self.layui.use(<span class="hljs-string">'layer'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">this</span>.layer.open({<span class="hljs-attr">content</span>: <span class="hljs-string">'拖动进度条、倍速播放、秒过会导致不良记录！题库在慢慢补充，搜不到的题目系统会在次日进行自动补充'</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">'超星网课助手提示'</span>, <span class="hljs-attr">btn</span>: <span class="hljs-string">'我已知悉'</span>, <span class="hljs-attr">offset</span>: <span class="hljs-string">'t'</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>});    });} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/widget/pcvote/goStudentVotePage'</span>) {    $(<span class="hljs-string">':checked'</span>).click();    $(<span class="hljs-string">'.StudentTimu'</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{        <span class="hljs-keyword">var</span> ans = _self.questionlist[index].answer;        $(<span class="hljs-string">':radio, :checkbox'</span>, <span class="hljs-keyword">this</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{            ans[num].isanswer &amp;&amp; <span class="hljs-keyword">this</span>.click();        });        $(<span class="hljs-string">':text'</span>, <span class="hljs-keyword">this</span>).val(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{            <span class="hljs-keyword">return</span> $(ans[num].content).text().trim();        });    });} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/work/selectWorkQuestionYiPiYue'</span>) {    submitAnswer(getIframe().parent(), $.extend(<span class="hljs-literal">true</span>, [], parent._data));}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIframe</span>(<span class="hljs-params">tip, win, job</span>) </span>{    <span class="hljs-keyword">if</span> (!$) <span class="hljs-keyword">return</span> Ext.get(frameElement || []).parent().child(<span class="hljs-string">'.ans-job-icon'</span>) || Ext.get([]);    <span class="hljs-keyword">do</span> {        win = win ? win.parent : _self;        job = $(win.frameElement).prevAll(<span class="hljs-string">'.ans-job-icon'</span>);    } <span class="hljs-keyword">while</span> (!job.length &amp;&amp; win.parent.frameElement);    <span class="hljs-keyword">return</span> tip ? win : job;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jobSort</span>(<span class="hljs-params">$</span>) </span>{    <span class="hljs-keyword">var</span> fn = $.fn ? [getIframe(<span class="hljs-number">1</span>), <span class="hljs-string">'length'</span>] : [self, <span class="hljs-string">'dom'</span>],    sel = setting.job.join(<span class="hljs-string">', :not(.ans-job-finished) &gt; .ans-job-icon'</span> + setting.normal + <span class="hljs-string">' ~ '</span>);    <span class="hljs-keyword">if</span> ($(sel, fn[<span class="hljs-number">0</span>].parent.document)[<span class="hljs-number">0</span>] == fn[<span class="hljs-number">0</span>].frameElement) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span> (!getIframe()[fn[<span class="hljs-number">1</span>]] || getIframe().parent().is(<span class="hljs-string">'.ans-job-finished'</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        $(sel, fn[<span class="hljs-number">0</span>].parent.document)[<span class="hljs-number">0</span>] == fn[<span class="hljs-number">0</span>].frameElement &amp;&amp; fn[<span class="hljs-number">0</span>].location.reload();    }, setting.time);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPlayer</span>(<span class="hljs-params">tip</span>) </span>{    _self.videojs = hookVideo;    hookVideo.xhr = vjs.xhr;    Ext.isSogou = Ext.isIos = Ext.isAndroid = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">var</span> data = Ext.decode(_self.config(<span class="hljs-string">'data'</span>)) || {};    <span class="hljs-keyword">delete</span> data.danmaku;    data.doublespeed = <span class="hljs-number">1</span>;    frameElement.setAttribute(<span class="hljs-string">'data'</span>, Ext.encode(data));    <span class="hljs-keyword">if</span> (tip) <span class="hljs-keyword">return</span>;    _self.supportH5Video = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;};    alert(<span class="hljs-string">'此浏览器不支持html5播放器，请更换浏览器'</span>);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hookVideo</span>(<span class="hljs-params"></span>) </span>{    _self.alert = <span class="hljs-built_in">console</span>.log;    <span class="hljs-keyword">var</span> config = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>],    line = Ext.Array.filter(Ext.Array.map(config.playlines, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) </span>{        <span class="hljs-keyword">return</span> value.label == setting.line &amp;&amp; index;    }), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{        <span class="hljs-keyword">return</span> Ext.isNumber(value);    })[<span class="hljs-number">0</span>] || <span class="hljs-number">0</span>,    http = Ext.Array.filter(config.sources, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{        <span class="hljs-keyword">return</span> value.label == setting.http;    })[<span class="hljs-number">0</span>];    config.playlines.unshift(config.playlines[line]);    config.playlines.splice(line + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);    config.plugins.videoJsResolutionSwitcher.default = http ? http.res : <span class="hljs-number">360</span>;    config.plugins.studyControl.enableSwitchWindow = <span class="hljs-number">1</span>;    config.plugins.timelineObjects.url = <span class="hljs-string">'/richvideo/initdatawithviewer?'</span>;    config.plugins.seekBarControl.enableFastForward = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (!setting.queue) <span class="hljs-keyword">delete</span> config.plugins.studyControl;    <span class="hljs-comment">// config.preload = setting.tip ? 'auto' : 'none';</span>    <span class="hljs-keyword">var</span> player = vjs.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>),    a = <span class="hljs-string">'&lt;a href="https://d0.ananas.chaoxing.com/download/'</span> + _self.config(<span class="hljs-string">'objectid'</span>) + <span class="hljs-string">'" target="_blank"&gt;'</span>,    img = <span class="hljs-string">'&lt;img src="https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb" style="margin: 6px 0 0 6px;"&gt;'</span>;    player.volume(<span class="hljs-built_in">Math</span>.round(setting.vol) / <span class="hljs-number">100</span> || <span class="hljs-number">0</span>);    Ext.get(player.controlBar.addChild(<span class="hljs-string">'Button'</span>).el_).setHTML(a + img + <span class="hljs-string">'&lt;/a&gt;'</span>).dom.title = <span class="hljs-string">'下载视频'</span>;    player.on(<span class="hljs-string">'loadstart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.tip &amp;&amp; <span class="hljs-keyword">this</span>.play().catch(Ext.emptyFn);        <span class="hljs-keyword">this</span>.playbackRate(setting.rate &gt; <span class="hljs-number">16</span> || setting.rate &lt; <span class="hljs-number">0.0625</span> ? <span class="hljs-number">1</span> : setting.rate);    });    player.one([<span class="hljs-string">'loadedmetadata'</span>, <span class="hljs-string">'firstplay'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.two = setting.rate === <span class="hljs-string">'0'</span> &amp;&amp; setting.two &lt; <span class="hljs-number">1</span>;        setting.two &amp;&amp; config.plugins.seekBarControl.sendLog(<span class="hljs-keyword">this</span>.children_[<span class="hljs-number">0</span>], <span class="hljs-string">'ended'</span>, <span class="hljs-built_in">Math</span>.floor(<span class="hljs-keyword">this</span>.cache_.duration));    });    player.on(<span class="hljs-string">'ended'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        Ext.fly(frameElement).parent().addCls(<span class="hljs-string">'ans-job-finished'</span>);    });    <span class="hljs-keyword">return</span> player;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hookAudio</span>(<span class="hljs-params"></span>) </span>{    _self.alert = <span class="hljs-built_in">console</span>.log;    <span class="hljs-keyword">var</span> config = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>];    config.plugins.studyControl.enableSwitchWindow = <span class="hljs-number">1</span>;    config.plugins.seekBarControl.enableFastForward = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (!setting.queue) <span class="hljs-keyword">delete</span> config.plugins.studyControl;    <span class="hljs-keyword">var</span> player = vjs.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>),    a = <span class="hljs-string">'&lt;a href="https://d0.ananas.chaoxing.com/download/'</span> + _self.config(<span class="hljs-string">'objectid'</span>) + <span class="hljs-string">'" target="_blank"&gt;'</span>,    img = <span class="hljs-string">'&lt;img src="https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb" style="margin: 6px 0 0 6px;"&gt;'</span>;    player.volume(<span class="hljs-built_in">Math</span>.round(setting.vol) / <span class="hljs-number">100</span> || <span class="hljs-number">0</span>);    player.playbackRate(setting.rate &gt; <span class="hljs-number">16</span> || setting.rate &lt; <span class="hljs-number">0.0625</span> ? <span class="hljs-number">1</span> : setting.rate);    Ext.get(player.controlBar.addChild(<span class="hljs-string">'Button'</span>).el_).setHTML(a + img + <span class="hljs-string">'&lt;/a&gt;'</span>).dom.title = <span class="hljs-string">'下载音频'</span>;    player.on(<span class="hljs-string">'loadeddata'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.tip &amp;&amp; <span class="hljs-keyword">this</span>.play().catch(Ext.emptyFn);    });    player.one(<span class="hljs-string">'firstplay'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.rate === <span class="hljs-string">'0'</span> &amp;&amp; config.plugins.seekBarControl.sendLog(<span class="hljs-keyword">this</span>.children_[<span class="hljs-number">0</span>], <span class="hljs-string">'ended'</span>, <span class="hljs-built_in">Math</span>.floor(<span class="hljs-keyword">this</span>.cache_.duration));    });    player.on(<span class="hljs-string">'ended'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        Ext.fly(frameElement).parent().addCls(<span class="hljs-string">'ans-job-finished'</span>);    });    <span class="hljs-keyword">return</span> player;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">relieveLimit</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (setting.scale) _self.UEDITOR_CONFIG.scaleEnabled = <span class="hljs-literal">false</span>;    $.each(UE.instants, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">var</span> key = <span class="hljs-keyword">this</span>.key;        <span class="hljs-keyword">this</span>.ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{            <span class="hljs-keyword">this</span>.destroy();            UE.getEditor(key);        });    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beforeFind</span>(<span class="hljs-params"></span>) </span>{    setting.regl = parent.greenligth || $.noop;    <span class="hljs-keyword">if</span> ($.type(parent._data) == <span class="hljs-string">'array'</span>) <span class="hljs-keyword">return</span> setting.regl();    setting.div = $(        <span class="hljs-string">'&lt;div style="border: 2px dashed rgb(0, 85, 68); width: 330px; position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(70, 196, 38, 0.6); overflow-x: auto;"&gt;'</span> +            <span class="hljs-string">'&lt;span style="font-size: medium;"&gt;&lt;/span&gt;'</span> +            <span class="hljs-string">'&lt;div style="font-size: medium;"&gt;正在搜索答案...&lt;/div&gt;'</span> +            <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;暂停答题&lt;/button&gt;'</span> +            <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;'</span> + (setting.auto ? <span class="hljs-string">'取消本次自动提交'</span> : <span class="hljs-string">'开启本次自动提交'</span>) + <span class="hljs-string">'&lt;/button&gt;'</span> +            <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;重新查询&lt;/button&gt;'</span> +            <span class="hljs-string">'&lt;button&gt;折叠面板&lt;/button&gt;'</span> +            <span class="hljs-string">'&lt;div style="max-height: 300px; overflow-y: auto;"&gt;'</span> +                <span class="hljs-string">'&lt;table border="1" style="font-size: 12px;"&gt;'</span> +                    <span class="hljs-string">'&lt;thead&gt;'</span> +                        <span class="hljs-string">'&lt;tr&gt;'</span> +                            <span class="hljs-string">'&lt;th style="width: 25px; min-width: 25px;"&gt;题号&lt;/th&gt;'</span> +                            <span class="hljs-string">'&lt;th style="width: 60%; min-width: 130px;"&gt;题目（点击可复制）&lt;/th&gt;'</span> +                            <span class="hljs-string">'&lt;th style="min-width: 130px;"&gt;答案（点击可复制）&lt;/th&gt;'</span> +                        <span class="hljs-string">'&lt;/tr&gt;'</span> +                    <span class="hljs-string">'&lt;/thead&gt;'</span> +                    <span class="hljs-string">'&lt;tfoot style="display: none;"&gt;'</span> +                        <span class="hljs-string">'&lt;tr&gt;'</span> +                            <span class="hljs-string">'&lt;th colspan="3"&gt;答案提示框 已折叠&lt;/th&gt;'</span> +                        <span class="hljs-string">'&lt;/tr&gt;'</span> +                    <span class="hljs-string">'&lt;/tfoot&gt;'</span> +                    <span class="hljs-string">'&lt;tbody&gt;'</span> +                        <span class="hljs-string">'&lt;tr&gt;'</span> +                            <span class="hljs-string">'&lt;td colspan="3" style="display: none;"&gt;&lt;/td&gt;'</span> +                        <span class="hljs-string">'&lt;/tr&gt;'</span> +                    <span class="hljs-string">'&lt;/tbody&gt;'</span> +                <span class="hljs-string">'&lt;/table&gt;'</span> +            <span class="hljs-string">'&lt;/div&gt;'</span> +        <span class="hljs-string">'&lt;/div&gt;'</span>    ).appendTo(<span class="hljs-string">'body'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'button, td'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">var</span> len = $(<span class="hljs-keyword">this</span>).prevAll(<span class="hljs-string">'button'</span>).length;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.nodeName == <span class="hljs-string">'TD'</span>) {            $(<span class="hljs-keyword">this</span>).prev().length &amp;&amp; GM_setClipboard($(<span class="hljs-keyword">this</span>).text());        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$(<span class="hljs-keyword">this</span>).siblings().length) {            $(<span class="hljs-keyword">this</span>).parent().text(<span class="hljs-string">'正在搜索答案...'</span>);            setting.num++;        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) {            <span class="hljs-keyword">if</span> (setting.loop) {                clearInterval(setting.loop);                <span class="hljs-keyword">delete</span> setting.loop;                len = [<span class="hljs-string">'已暂停搜索'</span>, <span class="hljs-string">'继续答题'</span>];            } <span class="hljs-keyword">else</span> {                setting.loop = setInterval(findAnswer, setting.time);                len = [<span class="hljs-string">'正在搜索答案...'</span>, <span class="hljs-string">'暂停答题'</span>];            }            setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{                <span class="hljs-keyword">return</span> $(<span class="hljs-keyword">this</span>).data(<span class="hljs-string">'html'</span>) || len[<span class="hljs-number">0</span>];            }).removeData(<span class="hljs-string">'html'</span>);            $(<span class="hljs-keyword">this</span>).html(len[<span class="hljs-number">1</span>]);        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) {            setting.auto = !setting.auto;            $(<span class="hljs-keyword">this</span>).html(setting.auto ? <span class="hljs-string">'取消本次自动提交'</span> : <span class="hljs-string">'开启本次自动提交'</span>);        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">2</span>) {            parent.location.reload();        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">3</span>) {            setting.div.find(<span class="hljs-string">'tbody, tfoot'</span>).toggle();        }    }).find(<span class="hljs-string">'table, td, th'</span>).css(<span class="hljs-string">'border'</span>, <span class="hljs-string">'1px solid'</span>).end();    setting.lose = setting.num = <span class="hljs-number">0</span>;    setting.data = parent._data = [];    setting.over = <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;跳过此题&lt;/button&gt;'</span>;    setting.curs = $(<span class="hljs-string">'script:contains(courseName)'</span>, top.document).text().match(<span class="hljs-regexp">/courseName:\'(.+?)\'|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">'h1'</span>).text().trim() || <span class="hljs-string">'无'</span>;    setting.loop = setInterval(findAnswer, setting.time);    <span class="hljs-keyword">var</span> tip = ({<span class="hljs-attr">undefined</span>: <span class="hljs-string">'任务点排队中'</span>, <span class="hljs-attr">null</span>: <span class="hljs-string">'等待切换中'</span>})[setting.tip];    tip &amp;&amp; setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).data(<span class="hljs-string">'html'</span>, tip).siblings(<span class="hljs-string">'button:eq(0)'</span>).click();}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findAnswer</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (setting.num &gt;= $(<span class="hljs-string">'.TiMu'</span>).length) {        <span class="hljs-keyword">var</span> arr = setting.lose ? [<span class="hljs-string">'共有 &lt;font color="red"&gt;'</span> + setting.lose + <span class="hljs-string">'&lt;/font&gt; 道题目待完善（已深色标注）'</span>, saveThis] : [<span class="hljs-string">'答题已完成'</span>, submitThis];        setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).data(<span class="hljs-string">'html'</span>, arr[<span class="hljs-number">0</span>]).siblings(<span class="hljs-string">'button:eq(0)'</span>).hide().click();        <span class="hljs-keyword">return</span> setTimeout(arr[<span class="hljs-number">1</span>], setting.time);    }    <span class="hljs-keyword">var</span> $TiMu = $(<span class="hljs-string">'.TiMu'</span>).eq(setting.num),    question = filterImg($TiMu.find(<span class="hljs-string">'.Zy_TItle:eq(0) .clearfix'</span>)).replace(<span class="hljs-regexp">/^【.*?】\s*/</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/\s*（\d+\.\d+分）$/</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[(]\s*[)]。$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/（\s*）。$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[(]\s*[)]$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/（\s*）$/</span>,<span class="hljs-string">''</span>),    type = $TiMu.find(<span class="hljs-string">'input[name^=answertype]:eq(0)'</span>).val() || <span class="hljs-string">'-1'</span>;    <span class="hljs-comment">//setting.div.children('div:eq(0)').text(encodeURIComponent(question)+'正在搜索答案...');</span>    GM_xmlhttpRequest({        method: <span class="hljs-string">'GET'</span>,        url: <span class="hljs-string">'http://api.xmlm8.com/tp/tk.php?t='</span>+ <span class="hljs-built_in">encodeURIComponent</span>(question),        headers: {            <span class="hljs-string">'Content-type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span>        },        timeout: setting.time,        onload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) </span>{            <span class="hljs-keyword">if</span> (!setting.loop) {            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">200</span>) {                <span class="hljs-keyword">var</span> obj = $.parseJSON(xhr.responseText) || {};                <span class="hljs-keyword">if</span> (obj.code == <span class="hljs-number">1</span>) {                    setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).text(<span class="hljs-string">'正在搜索答案...'</span>);                    <span class="hljs-keyword">var</span> td = <span class="hljs-string">'&lt;td style="border: 1px solid;'</span>,                    answer = <span class="hljs-built_in">String</span>(obj.answer).replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">'&amp;amp;'</span>).replace(<span class="hljs-regexp">/&lt;(?!img)/g</span>, <span class="hljs-string">'&amp;lt;'</span>);                    obj.answer = <span class="hljs-regexp">/^http/</span>.test(answer) ? <span class="hljs-string">'&lt;img src="'</span> + obj.answer + <span class="hljs-string">'"&gt;'</span> : obj.answer;                    $(                        <span class="hljs-string">'&lt;tr&gt;'</span> +                            td + <span class="hljs-string">' text-align: center;"&gt;'</span> + $TiMu.find(<span class="hljs-string">'.Zy_TItle:eq(0) i'</span>).text().trim() + <span class="hljs-string">'&lt;/td&gt;'</span> +                            td + <span class="hljs-string">'" title="点击可复制"&gt;'</span> + (question.match(<span class="hljs-string">'&lt;img'</span>) ? question : question.replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">'&amp;amp;'</span>).replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">'&amp;lt'</span>)) + <span class="hljs-string">'&lt;/td&gt;'</span> +                            td + <span class="hljs-string">'" title="点击可复制"&gt;'</span> + (<span class="hljs-regexp">/^http/</span>.test(answer) ? obj.answer : <span class="hljs-string">''</span>) + answer + <span class="hljs-string">'&lt;/td&gt;'</span> +                        <span class="hljs-string">'&lt;/tr&gt;'</span>                    ).appendTo(setting.div.find(<span class="hljs-string">'tbody'</span>)).css(<span class="hljs-string">'background-color'</span>, fillAnswer($TiMu.find(<span class="hljs-string">'ul:eq(0)'</span>).find(<span class="hljs-string">'li'</span>), obj, type) ? <span class="hljs-string">''</span> : <span class="hljs-string">'rgba(0, 150, 136, 0.6)'</span>);                    setting.data[setting.num++] = {                        code: obj.code &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>,                        question: question,                        option: obj.answer,                        type: <span class="hljs-built_in">Number</span>(type)                    };                } <span class="hljs-keyword">else</span> {                    setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(setting.over + obj.answer || setting.over + <span class="hljs-string">'服务器繁忙，正在重试...'</span>);                }                setting.div.children(<span class="hljs-string">'span'</span>).html(obj.msg || <span class="hljs-string">''</span>);            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">403</span>) {                <span class="hljs-keyword">var</span> html = xhr.responseText.indexOf(<span class="hljs-string">'{'</span>) ? <span class="hljs-string">'请求过于频繁，建议稍后再试'</span> : $.parseJSON(xhr.responseText).data;                setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).data(<span class="hljs-string">'html'</span>, html).siblings(<span class="hljs-string">'button:eq(0)'</span>).click();            } <span class="hljs-keyword">else</span> {                setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(setting.over + <span class="hljs-string">'服务器异常，正在重试...'</span>);            }        },        ontimeout: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{            setting.loop &amp;&amp; setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(setting.over + <span class="hljs-string">'服务器超时，正在重试...'</span>);        }    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fillAnswer</span>(<span class="hljs-params">$li, obj, type</span>) </span>{    <span class="hljs-keyword">var</span> $input = $li.find(<span class="hljs-string">':radio, :checkbox'</span>),    str = <span class="hljs-built_in">String</span>(obj.answer).toCDB() || <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString(),    data = str.split(<span class="hljs-regexp">/#|\x01|\|/</span>),    opt = obj.opt || str,    state = setting.lose;    <span class="hljs-comment">// $li.find(':radio:checked').prop('checked', false);</span>    obj.code &gt; <span class="hljs-number">0</span> &amp;&amp; $input.each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value == <span class="hljs-string">'true'</span>) {            data.join().match(<span class="hljs-regexp">/(^|,)(正确|是|对|√|T|ri)(,|$)/</span>) &amp;&amp; <span class="hljs-keyword">this</span>.click();        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value == <span class="hljs-string">'false'</span>) {            data.join().match(<span class="hljs-regexp">/(^|,)(错误|否|错|×|F|wr)(,|$)/</span>) &amp;&amp; <span class="hljs-keyword">this</span>.click();        } <span class="hljs-keyword">else</span> {            <span class="hljs-keyword">var</span> tip = filterImg($li.eq(index).find(<span class="hljs-string">'.after'</span>)).toCDB() || <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toString();            <span class="hljs-built_in">Boolean</span>($.inArray(tip, data) + <span class="hljs-number">1</span> || (type == <span class="hljs-string">'1'</span> &amp;&amp; str.indexOf(tip) + <span class="hljs-number">1</span>)) == <span class="hljs-keyword">this</span>.checked || <span class="hljs-keyword">this</span>.click();        }    }).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^A?B?C?D?E?F?G?$/</span>.test(opt)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-built_in">Boolean</span>(opt.match(<span class="hljs-keyword">this</span>.value)) == <span class="hljs-keyword">this</span>.checked || <span class="hljs-keyword">this</span>.click();    });    <span class="hljs-keyword">if</span> (type.match(<span class="hljs-regexp">/^[013]$/</span>)) {        $input.is(<span class="hljs-string">':checked'</span>) || (setting.none ? ($input[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * $input.length)] || $()).click() : setting.lose++);    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.match(<span class="hljs-regexp">/^(2|[4-9]|1[08])$/</span>)) {        data = <span class="hljs-built_in">String</span>(obj.answer).split(<span class="hljs-regexp">/#|\x01|\|/</span>);        str = $li.end().find(<span class="hljs-string">'textarea'</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{            index = (obj.code &gt; <span class="hljs-number">0</span> &amp;&amp; data[index]) || <span class="hljs-string">''</span>;            UE.getEditor(<span class="hljs-keyword">this</span>.name).setContent(index.trim());        }).length;        (obj.code &gt; <span class="hljs-number">0</span> &amp;&amp; data.length == str) || setting.none || setting.lose++;    } <span class="hljs-keyword">else</span> {        setting.none || setting.lose++;    }    <span class="hljs-keyword">return</span> state == setting.lose;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveThis</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (!setting.auto) <span class="hljs-keyword">return</span> setTimeout(saveThis, setting.time);    setting.div.children(<span class="hljs-string">'button:lt(3)'</span>).hide().eq(<span class="hljs-number">1</span>).click();    _self.alert = <span class="hljs-built_in">console</span>.log;    $(<span class="hljs-string">'#tempsave'</span>).click();    setting.regl();}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">submitThis</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (!setting.auto) {    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">'.Btn_blue_1:visible'</span>).length) {        setting.div.children(<span class="hljs-string">'button:lt(3)'</span>).hide().eq(<span class="hljs-number">1</span>).click();        <span class="hljs-keyword">return</span> setting.regl();    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ($(<span class="hljs-string">'#confirmSubWin:visible'</span>).length) {        <span class="hljs-keyword">var</span> btn = $(<span class="hljs-string">'#tipContent + * &gt; a'</span>).offset() || {<span class="hljs-attr">top</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>},        mouse = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">'MouseEvents'</span>);        btn = [btn.left + <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">46</span>), btn.top + <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">26</span>)];        mouse.initMouseEvent(<span class="hljs-string">'click'</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-built_in">document</span>.defaultView, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, btn[<span class="hljs-number">0</span>], btn[<span class="hljs-number">1</span>], <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);        _self.event = $.extend(<span class="hljs-literal">true</span>, {}, mouse);        <span class="hljs-keyword">delete</span> _self.event.isTrusted;        _self.form1submit();    } <span class="hljs-keyword">else</span> {        $(<span class="hljs-string">'.Btn_blue_1'</span>)[<span class="hljs-number">0</span>].click();    }    setTimeout(submitThis, <span class="hljs-built_in">Math</span>.ceil(setting.time * <span class="hljs-built_in">Math</span>.random()) * <span class="hljs-number">2</span>);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkToNext</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">var</span> $tip = $(setting.job.join(<span class="hljs-string">', '</span>), <span class="hljs-built_in">document</span>).prevAll(<span class="hljs-string">'.ans-job-icon'</span> + setting.normal);    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        $tip.parent(<span class="hljs-string">':not(.ans-job-finished)'</span>).length || setting.jump &amp;&amp; toNext();    }, setting.time);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNext</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">var</span> $cur = $(<span class="hljs-string">'#cur'</span> + $(<span class="hljs-string">'#chapterIdid'</span>).val()),    $tip = $(<span class="hljs-string">'span.currents ~ span'</span>),    sel = setting.review ? <span class="hljs-string">'html'</span> : <span class="hljs-string">'.blue'</span>;    <span class="hljs-keyword">if</span> (!$cur.has(sel).length &amp;&amp; $tip.length) <span class="hljs-keyword">return</span> $tip.eq(<span class="hljs-number">0</span>).click();    $tip = $(<span class="hljs-string">'.roundpointStudent, .roundpoint'</span>).parent();    $tip = $tip.slice($tip.index($cur) + <span class="hljs-number">1</span>).not(<span class="hljs-string">':has('</span> + sel + <span class="hljs-string">')'</span>);    $tip.not(setting.lock ? <span class="hljs-string">':has(.lock)'</span> : <span class="hljs-string">'html'</span>).find(<span class="hljs-string">'span'</span>).eq(<span class="hljs-number">0</span>).click();    $tip.length || setting.course &amp;&amp; switchCourse();}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">switchCourse</span>(<span class="hljs-params"></span>) </span>{    GM_xmlhttpRequest({        method: <span class="hljs-string">'GET'</span>,        url: <span class="hljs-string">'/visit/courses/study?isAjax=true&amp;fileId=0&amp;debug='</span>,        headers: {            <span class="hljs-string">'Referer'</span>: location.origin + <span class="hljs-string">'/visit/courses'</span>,            <span class="hljs-string">'X-Requested-With'</span>: <span class="hljs-string">'XMLHttpRequest'</span>        },        onload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) </span>{            <span class="hljs-keyword">var</span> list = $(<span class="hljs-string">'h3 a[target]'</span>, xhr.responseText).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{                <span class="hljs-keyword">return</span> $(<span class="hljs-keyword">this</span>).attr(<span class="hljs-string">'href'</span>);            }),            index = list.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.match(top.courseId) &amp;&amp; index;            }).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{                <span class="hljs-keyword">return</span> $.isNumeric(<span class="hljs-keyword">this</span>);            })[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span> || <span class="hljs-number">0</span>;            setting.course = list[index] ? goCourse(list[index]) : <span class="hljs-number">0</span>;        }    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goCourse</span>(<span class="hljs-params">url</span>) </span>{    GM_xmlhttpRequest({        method: <span class="hljs-string">'GET'</span>,        url: url,        onload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) </span>{            $.globalEval(<span class="hljs-string">'location.href = "'</span> + $(<span class="hljs-string">'.articlename a[href]'</span>, xhr.responseText).attr(<span class="hljs-string">'href'</span>) + <span class="hljs-string">'";'</span>);        }    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">autoRead</span>(<span class="hljs-params"></span>) </span>{    $(<span class="hljs-string">'html, body'</span>).animate({        scrollTop: $(<span class="hljs-built_in">document</span>).height() - $(<span class="hljs-built_in">window</span>).height()    }, <span class="hljs-built_in">Math</span>.round(setting.read) * <span class="hljs-number">1E3</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        $(<span class="hljs-string">'.nodeItem.r i'</span>).click();    }).one(<span class="hljs-string">'click'</span>, <span class="hljs-string">'#top'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{        $(event.delegateTarget).stop();    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DisplayURL</span>(<span class="hljs-params"></span>) </span>{    _self.WAY.box.hide();    <span class="hljs-keyword">var</span> $li = $(<span class="hljs-keyword">this</span>).closest(<span class="hljs-string">'li'</span>);    $.<span class="hljs-keyword">get</span>('/visit/goToCourseByFace', {        courseId: $li.find(<span class="hljs-string">'input[name=courseId]'</span>).val(),        clazzId: $li.find(<span class="hljs-string">'input[name=classId]'</span>).val()    }, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{        $li.find(<span class="hljs-string">'[onclick^=openFaceTip]'</span>).removeAttr(<span class="hljs-string">'onclick'</span>).attr({            target: <span class="hljs-string">'_blank'</span>,            href: $(data).filter(<span class="hljs-string">'script:last'</span>).text().match(<span class="hljs-regexp">/n\("(.+?)"/</span>)[<span class="hljs-number">1</span>]        });        alert(<span class="hljs-string">'本课程已临时解除面部识别'</span>);    }, <span class="hljs-string">'html'</span>);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSchoolId</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">var</span> school = <span class="hljs-regexp">/^1\d{10}$/</span>.test(setting.username) ? <span class="hljs-string">''</span> : setting.school;    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(school)) <span class="hljs-keyword">return</span> setTimeout(toLogin, setting.time, school);    <span class="hljs-keyword">if</span> (school == <span class="hljs-string">'账号为手机号可以不修改此参数'</span>) <span class="hljs-keyword">return</span> alert(<span class="hljs-string">'请修改school参数'</span>);    $.getJSON(<span class="hljs-string">'/org/searchUnis?filter='</span> + <span class="hljs-built_in">encodeURI</span>(school) + <span class="hljs-string">'&amp;product=44'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{        <span class="hljs-keyword">if</span> (!data.result) <span class="hljs-keyword">return</span> alert(<span class="hljs-string">'学校查询错误'</span>);        <span class="hljs-keyword">var</span> msg = $.grep(data.froms, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{            <span class="hljs-keyword">return</span> value.name == school;        })[<span class="hljs-number">0</span>];        msg ? setTimeout(toLogin, setting.time, msg.schoolid) : alert(<span class="hljs-string">'学校名称不完整'</span>);    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toLogin</span>(<span class="hljs-params">fid</span>) </span>{    GM_xmlhttpRequest({        method: <span class="hljs-string">'GET'</span>,        url: <span class="hljs-string">'/api/login?name='</span> + setting.username + <span class="hljs-string">'&amp;pwd='</span> + setting.password + <span class="hljs-string">'&amp;schoolid='</span> + fid + <span class="hljs-string">'&amp;verify=0'</span>,        onload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) </span>{            <span class="hljs-keyword">var</span> obj = $.parseJSON(xhr.responseText) || {};            obj.result ? location.href = <span class="hljs-built_in">decodeURIComponent</span>($(<span class="hljs-string">'#ref, #refer_0x001'</span>).val()) : alert(obj.errorMsg || <span class="hljs-string">'Error'</span>);        }    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">submitAnswer</span>(<span class="hljs-params">$job, data</span>) </span>{    $job.removeClass(<span class="hljs-string">'ans-job-finished'</span>);    data = data.length ? $(data) : $(<span class="hljs-string">'.TiMu'</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">var</span> title = filterImg($(<span class="hljs-string">'.Zy_TItle .clearfix'</span>, <span class="hljs-keyword">this</span>));        <span class="hljs-keyword">return</span> {            question: title.replace(<span class="hljs-regexp">/^【.*?】\s*/</span>, <span class="hljs-string">''</span>),            type: ({单选题: <span class="hljs-number">0</span>, 多选题: <span class="hljs-number">1</span>, 填空题: <span class="hljs-number">2</span>, 判断题: <span class="hljs-number">3</span>})[title.match(<span class="hljs-regexp">/^【(.*?)】|$/</span>)[<span class="hljs-number">1</span>]]        };    });    data = $.grep(data.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{        <span class="hljs-keyword">var</span> $TiMu = $(<span class="hljs-string">'.TiMu'</span>).eq(index);        <span class="hljs-keyword">if</span> (!($.isPlainObject(<span class="hljs-keyword">this</span>) &amp;&amp; <span class="hljs-keyword">this</span>.type &lt; <span class="hljs-number">4</span> &amp;&amp; $TiMu.find(<span class="hljs-string">'.fr'</span>).length)) {            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.type == <span class="hljs-number">2</span>) {            <span class="hljs-keyword">var</span> $ans = $TiMu.find(<span class="hljs-string">'.Py_tk, .Py_answer'</span>).eq(<span class="hljs-number">0</span>);            <span class="hljs-keyword">if</span> (!$TiMu.find(<span class="hljs-string">'.cuo'</span>).length &amp;&amp; <span class="hljs-keyword">this</span>.code) {                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$ans.find(<span class="hljs-string">'.cuo'</span>).length) {                <span class="hljs-keyword">this</span>.option = $ans.find(<span class="hljs-string">'.clearfix'</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{                    <span class="hljs-keyword">return</span> $(<span class="hljs-keyword">this</span>).text().trim();                }).get().join(<span class="hljs-string">'#'</span>) || <span class="hljs-string">'无'</span>;            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.code) {                <span class="hljs-keyword">this</span>.code = <span class="hljs-number">-1</span>;            } <span class="hljs-keyword">else</span> {                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            }        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.type == <span class="hljs-number">3</span>) {            <span class="hljs-keyword">var</span> ans = $TiMu.find(<span class="hljs-string">'.font20:last'</span>).text();            <span class="hljs-keyword">if</span> ($TiMu.find(<span class="hljs-string">'.cuo'</span>).length) {                <span class="hljs-keyword">this</span>.option = ({<span class="hljs-string">'√'</span>: <span class="hljs-string">'错误'</span>, <span class="hljs-string">'×'</span>: <span class="hljs-string">'正确'</span>})[ans] || <span class="hljs-string">'无'</span>;            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.code) {                <span class="hljs-keyword">this</span>.option = ({<span class="hljs-string">'√'</span>: <span class="hljs-string">'正确'</span>, <span class="hljs-string">'×'</span>: <span class="hljs-string">'错误'</span>})[ans] || <span class="hljs-string">'无'</span>;            } <span class="hljs-keyword">else</span> {                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            }        } <span class="hljs-keyword">else</span> {            <span class="hljs-keyword">var</span> text = $TiMu.find(<span class="hljs-string">'.Py_answer &gt; span:eq(0)'</span>).text();            <span class="hljs-keyword">if</span> ($TiMu.find(<span class="hljs-string">'.dui'</span>).length &amp;&amp; <span class="hljs-keyword">this</span>.code &amp;&amp; !<span class="hljs-regexp">/^A?B?C?D?E?F?G?$/</span>.test(<span class="hljs-keyword">this</span>.option)) {                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ($TiMu.find(<span class="hljs-string">'.dui'</span>).length || text.match(<span class="hljs-string">'正确答案'</span>)) {                text = text.match(<span class="hljs-regexp">/[A-G]/gi</span>) || [];                <span class="hljs-keyword">this</span>.option = $.map(text, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{                    <span class="hljs-keyword">return</span> filterImg($TiMu.find(<span class="hljs-string">'.fl:contains('</span> + value + <span class="hljs-string">') + a'</span>));                }).join(<span class="hljs-string">'#'</span>) || <span class="hljs-string">'无'</span>;                <span class="hljs-keyword">this</span>.key = text.join(<span class="hljs-string">''</span>);            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.code) {                <span class="hljs-keyword">this</span>.code = <span class="hljs-number">-1</span>;            } <span class="hljs-keyword">else</span> {                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            }        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;    }), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{        <span class="hljs-keyword">return</span> value &amp;&amp; value.option != <span class="hljs-string">'无'</span>;    });    setting.curs = $(<span class="hljs-string">'script:contains(courseName)'</span>, top.document).text().match(<span class="hljs-regexp">/courseName:\'(.+?)\'|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">'h1'</span>).text().trim() || <span class="hljs-string">'无'</span>;    data.length &amp;&amp; GM_xmlhttpRequest({        method: <span class="hljs-string">'POST'</span>,        url: <span class="hljs-string">'http://mooc.forestpolice.org/upload/cx/'</span> + (setting.token || <span class="hljs-number">0</span>) + <span class="hljs-string">'/?workRelationId='</span> + $(<span class="hljs-string">'#workId'</span>).val(),        headers: {            <span class="hljs-string">'Content-type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span>        },        data: <span class="hljs-string">'course='</span> + <span class="hljs-built_in">encodeURIComponent</span>(setting.curs) + <span class="hljs-string">'&amp;data='</span> + <span class="hljs-built_in">encodeURIComponent</span>((Ext.encode || <span class="hljs-built_in">JSON</span>.stringify)(data)) + <span class="hljs-string">'&amp;id='</span> + $(<span class="hljs-string">'#jobid'</span>).val().slice(<span class="hljs-number">5</span>)    });    $job.addClass(<span class="hljs-string">'ans-job-finished'</span>);}<span class="hljs-comment">/*</span><span class="hljs-comment">function filterImg(dom) {</span><span class="hljs-comment">    return $(dom).clone().find('img[src]').replaceWith(function() {</span><span class="hljs-comment">        return $('&lt;p&gt;&lt;/p&gt;').text('&lt;img src="' + $(this).attr('src') + '"&gt;');</span><span class="hljs-comment">    }).end().find('iframe[src]').replaceWith(function() {</span><span class="hljs-comment">        return $('&lt;p&gt;&lt;/p&gt;').text('&lt;iframe src="' + $(this).attr('src') + '"&gt;&lt;/irame&gt;');</span><span class="hljs-comment">    }).end().text().trim();</span><span class="hljs-comment">}</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterImg</span>(<span class="hljs-params">dom</span>) </span>{    <span class="hljs-keyword">return</span> $(dom).clone().find(<span class="hljs-string">'img[src]'</span>).replaceWith(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">return</span> $(<span class="hljs-string">'&lt;p&gt;&lt;/p&gt;'</span>).text(<span class="hljs-string">''</span>);    }).end().find(<span class="hljs-string">'iframe[src]'</span>).replaceWith(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">return</span> $(<span class="hljs-string">'&lt;p&gt;&lt;/p&gt;'</span>).text(<span class="hljs-string">''</span>);    }).end().text().trim();}</code></pre></div><h1 id="脚本②"><a href="#脚本②" class="headerlink" title="脚本②"></a>脚本②</h1><div class="hljs"><pre><code class="hljs js">超星学习通油猴脚本<span class="hljs-comment">// ==UserScript==</span><span class="hljs-comment">// @name         超星网课助手(改)(查题可用)</span><span class="hljs-comment">// @version      4.5.7</span><span class="hljs-comment">// @namespace    coder_tq</span><span class="hljs-comment">// @description  自动挂机看尔雅MOOC，支持视频、音频、文档、图书自动完成，章节测验自动答题提交，支持自动切换任务点、挂机阅读时长、自动登录等，解除各类功能限制，开放自定义参数</span><span class="hljs-comment">// @author       coder_tq</span><span class="hljs-comment">// @match        *://*.chaoxing.com/*</span><span class="hljs-comment">// @match        *://*.edu.cn/*</span><span class="hljs-comment">// @match        *://*.nbdlib.cn/*</span><span class="hljs-comment">// @match        *://*.hnsyu.net/*</span><span class="hljs-comment">// @connect      cx.beaa.cn</span><span class="hljs-comment">// @connect      cx.icodef.com</span><span class="hljs-comment">// @run-at       document-end</span><span class="hljs-comment">// @grant        unsafeWindow</span><span class="hljs-comment">// @grant        GM_xmlhttpRequest</span><span class="hljs-comment">// @grant        GM_setValue</span><span class="hljs-comment">// @grant        GM_getValue</span><span class="hljs-comment">// @grant        GM_setClipboard</span><span class="hljs-comment">// @license      MIT</span><span class="hljs-comment">// ==/UserScript==</span><span class="hljs-comment">// 设置修改后，需要刷新或重新打开网课页面才会生效</span><span class="hljs-keyword">var</span> setting = {    <span class="hljs-comment">// 5E3 == 5000，科学记数法，表示毫秒数</span>    time: <span class="hljs-number">5E3</span> <span class="hljs-comment">// 默认响应速度为5秒，不建议小于5秒</span>    ,<span class="hljs-attr">token</span>: <span class="hljs-string">''</span> <span class="hljs-comment">// token可以增加并发次数，用来打码，采集题库奖励</span>    ,<span class="hljs-attr">review</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 复习模式，完整挂机视频(音频)时长，支持挂机任务点已完成的视频和音频，默认关闭</span>    ,<span class="hljs-attr">queue</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 队列模式，开启后任务点逐一完成，关闭则单页面所有任务点同时进行，默认开启</span>    <span class="hljs-comment">// 1代表开启，0代表关闭</span>    ,<span class="hljs-attr">video</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 视频支持后台、切换窗口不暂停，支持多视频，默认开启</span>    ,<span class="hljs-attr">work</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 自动答题功能(章节测验)，作业需要手动开启查询，高准确率，默认开启</span>    ,<span class="hljs-attr">audio</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 音频自动播放，与视频功能共享vol和rate参数，默认开启</span>    ,<span class="hljs-attr">book</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 图书阅读任务点，非课程阅读任务点，默认开启</span>    ,<span class="hljs-attr">docs</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 文档阅读任务点，PPT类任务点自动完成阅读任务，默认开启</span>    <span class="hljs-comment">// 本区域参数，上方为任务点功能，下方为独立功能</span>    ,<span class="hljs-attr">jump</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 自动切换任务点、章节、课程(需要配置course参数)，默认开启</span>    ,<span class="hljs-attr">read</span>: <span class="hljs-string">'65'</span> <span class="hljs-comment">// 挂机课程阅读时间，单位是分钟，'65'代表挂机65分钟，请手动打开阅读页面，默认'65'分钟</span>    ,<span class="hljs-attr">face</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 解除面部识别(不支持二维码类面部采集)，此功能仅为临时解除，默认开启</span>    ,<span class="hljs-attr">total</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 显示课程进度的统计数据，在学习进度页面的上方展示，默认开启</span>    <span class="hljs-comment">// 仅开启video(audio)时，修改此处才会生效</span>    ,<span class="hljs-attr">line</span>: <span class="hljs-string">'公网1'</span> <span class="hljs-comment">// 视频播放的默认资源线路，此功能适用于系统默认线路无资源，默认'公网1'</span>    ,<span class="hljs-attr">http</span>: <span class="hljs-string">'标清'</span> <span class="hljs-comment">// 视频播放的默认清晰度，无效参数则使用系统默认清晰度，默认'标清'</span>    <span class="hljs-comment">// 本区域参数，上方为video功能独享，下方为audio功能共享</span>    ,<span class="hljs-attr">vol</span>: <span class="hljs-string">'0'</span> <span class="hljs-comment">// 默认音量的百分数，设定范围：[0,100]，'0'为静音，默认'0'</span>    ,<span class="hljs-attr">rate</span>: <span class="hljs-string">'3'</span> <span class="hljs-comment">// 视频播放默认倍率，参数范围0∪[0.0625,16]，'0'为秒过，默认'1'倍</span>    <span class="hljs-comment">// 仅开启work时，修改此处才会生效</span>    ,<span class="hljs-attr">auto</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 答题完成后自动提交，默认关闭</span>    ,<span class="hljs-attr">none</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 无匹配答案时执行默认操作，关闭后若题目无匹配答案则会暂时保存已作答的题目，默认开启</span>    ,<span class="hljs-attr">scale</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 富文本编辑器高度自动拉伸，用于文本类题目，答题框根据内容自动调整大小，默认关闭</span>    <span class="hljs-comment">// 仅开启jump时，修改此处才会生效</span>    ,<span class="hljs-attr">course</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 当前课程完成后自动切换课程，仅支持按照根目录课程顺序切换，默认开启</span>    ,<span class="hljs-attr">lock</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 跳过未开放(图标是锁)的章节，即闯关模式或定时发放的任务点，默认开启</span>    <span class="hljs-comment">// 自动登录功能配置区</span>    ,<span class="hljs-attr">school</span>: <span class="hljs-string">'账号为手机号可以不修改此参数'</span> <span class="hljs-comment">// 学校/单位/机构码，要求完整有效可查询，例如'清华大学'</span>    ,<span class="hljs-attr">username</span>: <span class="hljs-string">''</span> <span class="hljs-comment">// 学号/工号/借书证号(邮箱/手机号/账号)，例如'2018010101'，默认''</span>    ,<span class="hljs-attr">password</span>: <span class="hljs-string">''</span> <span class="hljs-comment">// 密码，例如'123456'，默认''</span>    <span class="hljs-comment">// 题库接口配置区</span>    ,<span class="hljs-attr">tk_num</span>: <span class="hljs-number">0</span> <span class="hljs-comment">// 题库接口，默认0</span>},    _self = unsafeWindow,    url = location.pathname,    top = _self;setting.tk_num = GM_getValue(<span class="hljs-string">'tk_num'</span>);setting.tk_num = setting.tk_num == <span class="hljs-literal">undefined</span> ? <span class="hljs-number">1</span>:setting.tk_num;setting.tk_num = <span class="hljs-built_in">isNaN</span>(setting.tk_num)? <span class="hljs-number">1</span>:setting.tk_num;<span class="hljs-keyword">if</span> (url != <span class="hljs-string">'/studyApp/studying'</span> &amp;&amp; top != _self.top) <span class="hljs-built_in">document</span>.domain = location.host.replace(<span class="hljs-regexp">/.+?\./</span>, <span class="hljs-string">''</span>);<span class="hljs-keyword">try</span> {    <span class="hljs-keyword">while</span> (top != _self.top) {        top = top.parent.document ? top.parent : _self.top;        <span class="hljs-keyword">if</span> (top.location.pathname == <span class="hljs-string">'/mycourse/studentstudy'</span>) <span class="hljs-keyword">break</span>;    }} <span class="hljs-keyword">catch</span> (err) {    <span class="hljs-comment">// console.log(err);</span>    top = _self;}<span class="hljs-keyword">var</span> $ = _self.jQuery || top.jQuery,    parent = _self == top ? self : _self.parent,    Ext = _self.Ext || parent.Ext || {},    UE = _self.UE,    vjs = _self.videojs;<span class="hljs-built_in">String</span>.prototype.toCDB = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.replace(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[\uff01-\uff5e]/g</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>) </span>{        <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(str.charCodeAt(<span class="hljs-number">0</span>) - <span class="hljs-number">65248</span>);    }).replace(<span class="hljs-regexp">/[“”]/g</span>, <span class="hljs-string">'"'</span>).replace(<span class="hljs-regexp">/[‘’]/g</span>, <span class="hljs-string">"'"</span>).replace(<span class="hljs-regexp">/。/g</span>, <span class="hljs-string">'.'</span>);};setting.normal = <span class="hljs-string">''</span>; <span class="hljs-comment">// ':visible'</span><span class="hljs-comment">// setting.time += Math.ceil(setting.time * Math.random()) - setting.time / 2;</span>setting.job = [<span class="hljs-string">':not(*)'</span>];setting.video &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/video/index.html"]'</span>);setting.work &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/work/index.html"]'</span>);setting.audio &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/audio/index.html"]'</span>);setting.book &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/innerbook/index.html"]'</span>);setting.docs &amp;&amp; setting.job.push(<span class="hljs-string">'iframe[src*="/ppt/index.html"]'</span>, <span class="hljs-string">'iframe[src*="/pdf/index.html"]'</span>);setting.tip = !setting.queue || top != _self &amp;&amp; jobSort($ || Ext.query);<span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/mycourse/studentstudy'</span>) {    _self.checkMobileBrowerLearn = $.noop;    <span class="hljs-keyword">var</span> classId = location.search.match(<span class="hljs-regexp">/cla[zs]{2}id=(\d+)/i</span>)[<span class="hljs-number">1</span>] || <span class="hljs-number">0</span>,        courseId = _self.courseId || location.search.match(<span class="hljs-regexp">/courseId=(\d+)/i</span>)[<span class="hljs-number">1</span>] || <span class="hljs-number">0</span>;    setting.lock || $(<span class="hljs-string">'#coursetree'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'[onclick*=void], [href*=void]'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        _self.getTeacherAjax(courseId, classId, $(<span class="hljs-keyword">this</span>).parent().attr(<span class="hljs-string">'id'</span>).slice(<span class="hljs-number">3</span>));    });} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ananas/modules/video/index.html'</span> &amp;&amp; setting.video) {    <span class="hljs-keyword">if</span> (setting.review) _self.greenligth = Ext.emptyFn;    checkPlayer(_self.supportH5Video());} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/work/doHomeWorkNew'</span> || url == <span class="hljs-string">'/api/work'</span> || url == <span class="hljs-string">'/work/addStudentWorkNewWeb'</span>) {    <span class="hljs-keyword">if</span> (!UE) {        <span class="hljs-keyword">var</span> len = ($ || Ext.query || <span class="hljs-built_in">Array</span>)(<span class="hljs-string">'font:contains(未登录)'</span>, <span class="hljs-built_in">document</span>).length;        setTimeout(len == <span class="hljs-number">1</span> ? top.location.reload : parent.greenligth, setting.time);    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setting.work) {        setTimeout(relieveLimit, <span class="hljs-number">0</span>);        beforeFind();    }} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ananas/modules/audio/index.html'</span> &amp;&amp; setting.audio) {    <span class="hljs-keyword">if</span> (setting.review) _self.greenligth = Ext.emptyFn;    _self.videojs = hookAudio;    hookAudio.xhr = vjs.xhr;} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ananas/modules/innerbook/index.html'</span> &amp;&amp; setting.book &amp;&amp; setting.tip) {    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        _self.setting ? _self.top.onchangepage(_self.getFrameAttr(<span class="hljs-string">'end'</span>)) : _self.greenligth();    }, setting.time);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.match(<span class="hljs-regexp">/^\/ananas\/modules\/(ppt|pdf)\/index\.html$/</span>) &amp;&amp; setting.docs &amp;&amp; setting.tip) {    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        _self.setting ? _self.finishJob() : _self.greenligth();    }, setting.time);    frameElement.setAttribute(<span class="hljs-string">'download'</span>, <span class="hljs-number">1</span>);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/knowledge/cards'</span>) {    $ &amp;&amp; checkToNext();} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.match(<span class="hljs-regexp">/^\/(course|zt)\/\d+\.html$/</span>)) {    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        +setting.read &amp;&amp; _self.sendLogs &amp;&amp; $(<span class="hljs-string">'.course_section:eq(0) .chapterText'</span>).click();    }, setting.time);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/ztnodedetailcontroller/visitnodedetail'</span>) {    setting.read *= <span class="hljs-number">60</span> / $(<span class="hljs-string">'.course_section'</span>).length;    setting.read &amp;&amp; _self.sendLogs &amp;&amp; autoRead();} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/mycourse/studentcourse'</span>) {    <span class="hljs-keyword">var</span> gv = location.search.match(<span class="hljs-regexp">/d=\d+&amp;/g</span>);    setting.total &amp;&amp; $(<span class="hljs-string">'&lt;a&gt;'</span>, {        href: <span class="hljs-string">'/moocAnalysis/chapterStatisticByUser?classI'</span> + gv[<span class="hljs-number">1</span>] + <span class="hljs-string">'courseI'</span> + gv[<span class="hljs-number">0</span>] + <span class="hljs-string">'userId='</span> + _self.getCookie(<span class="hljs-string">'_uid'</span>) + <span class="hljs-string">'&amp;ut=s'</span>,        target: <span class="hljs-string">'_blank'</span>,        title: <span class="hljs-string">'点击查看章节统计'</span>,        style: <span class="hljs-string">'margin: 0 25px;'</span>,        html: <span class="hljs-string">'本课程共'</span> + $(<span class="hljs-string">'.icon'</span>).length + <span class="hljs-string">'节，剩余'</span> + $(<span class="hljs-string">'em:not(.openlock)'</span>).length + <span class="hljs-string">'节未完成'</span>    }).appendTo(<span class="hljs-string">'.zt_logo'</span>).parent().width(<span class="hljs-string">'auto'</span>);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url.match(<span class="hljs-regexp">/^\/visit\/(courses|interaction)$/</span>)) {    setting.face &amp;&amp; $(<span class="hljs-string">'.zmodel'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'[onclick^=openFaceTip]'</span>, DisplayURL);} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.host.match(<span class="hljs-regexp">/^passport2/</span>)) {    setting.username &amp;&amp; getSchoolId();} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (location.hostname == <span class="hljs-string">'i.mooc.chaoxing.com'</span>) {    _self.layui.use(<span class="hljs-string">'layer'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">this</span>.layer.open({<span class="hljs-attr">content</span>: <span class="hljs-string">'拖动进度条、倍速播放、秒过会导致不良记录！题库在慢慢补充，搜不到的题目系统会在次日进行自动补充'</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">'超星网课助手提示'</span>, <span class="hljs-attr">btn</span>: <span class="hljs-string">'我已知悉'</span>, <span class="hljs-attr">offset</span>: <span class="hljs-string">'t'</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>});    });} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/widget/pcvote/goStudentVotePage'</span>) {    $(<span class="hljs-string">':checked'</span>).click();    $(<span class="hljs-string">'.StudentTimu'</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>{        <span class="hljs-keyword">var</span> ans = _self.questionlist[index].answer;        $(<span class="hljs-string">':radio, :checkbox'</span>, <span class="hljs-keyword">this</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{            ans[num].isanswer &amp;&amp; <span class="hljs-keyword">this</span>.click();        });        $(<span class="hljs-string">':text'</span>, <span class="hljs-keyword">this</span>).val(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) </span>{            <span class="hljs-keyword">return</span> $(ans[num].content).text().trim();        });    });} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url == <span class="hljs-string">'/work/selectWorkQuestionYiPiYue'</span>) {    submitAnswer(getIframe().parent(), $.extend(<span class="hljs-literal">true</span>, [], parent._data));}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIframe</span>(<span class="hljs-params">tip, win, job</span>) </span>{    <span class="hljs-keyword">if</span> (!$) <span class="hljs-keyword">return</span> Ext.get(frameElement || []).parent().child(<span class="hljs-string">'.ans-job-icon'</span>) || Ext.get([]);    <span class="hljs-keyword">do</span> {        win = win ? win.parent : _self;        job = $(win.frameElement).prevAll(<span class="hljs-string">'.ans-job-icon'</span>);    } <span class="hljs-keyword">while</span> (!job.length &amp;&amp; win.parent.frameElement);    <span class="hljs-keyword">return</span> tip ? win : job;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jobSort</span>(<span class="hljs-params">$</span>) </span>{    <span class="hljs-keyword">var</span> fn = $.fn ? [getIframe(<span class="hljs-number">1</span>), <span class="hljs-string">'length'</span>] : [self, <span class="hljs-string">'dom'</span>],        sel = setting.job.join(<span class="hljs-string">', :not(.ans-job-finished) &gt; .ans-job-icon'</span> + setting.normal + <span class="hljs-string">' ~ '</span>);    <span class="hljs-keyword">if</span> ($(sel, fn[<span class="hljs-number">0</span>].parent.document)[<span class="hljs-number">0</span>] == fn[<span class="hljs-number">0</span>].frameElement) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-keyword">if</span> (!getIframe()[fn[<span class="hljs-number">1</span>]] || getIframe().parent().is(<span class="hljs-string">'.ans-job-finished'</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        $(sel, fn[<span class="hljs-number">0</span>].parent.document)[<span class="hljs-number">0</span>] == fn[<span class="hljs-number">0</span>].frameElement &amp;&amp; fn[<span class="hljs-number">0</span>].location.reload();    }, setting.time);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPlayer</span>(<span class="hljs-params">tip</span>) </span>{    _self.videojs = hookVideo;    hookVideo.xhr = vjs.xhr;    Ext.isSogou = Ext.isIos = Ext.isAndroid = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">var</span> data = Ext.decode(_self.config(<span class="hljs-string">'data'</span>)) || {};    <span class="hljs-keyword">delete</span> data.danmaku;    data.doublespeed = <span class="hljs-number">1</span>;    frameElement.setAttribute(<span class="hljs-string">'data'</span>, Ext.encode(data));    <span class="hljs-keyword">if</span> (tip) <span class="hljs-keyword">return</span>;    _self.supportH5Video = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;};    alert(<span class="hljs-string">'此浏览器不支持html5播放器，请更换浏览器'</span>);}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hookVideo</span>(<span class="hljs-params"></span>) </span>{    _self.alert = <span class="hljs-built_in">console</span>.log;    <span class="hljs-keyword">var</span> config = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>],        line = Ext.Array.filter(Ext.Array.map(config.playlines, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) </span>{            <span class="hljs-keyword">return</span> value.label == setting.line &amp;&amp; index;        }), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{            <span class="hljs-keyword">return</span> Ext.isNumber(value);        })[<span class="hljs-number">0</span>] || <span class="hljs-number">0</span>,        http = Ext.Array.filter(config.sources, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) </span>{            <span class="hljs-keyword">return</span> value.label == setting.http;        })[<span class="hljs-number">0</span>];    config.playlines.unshift(config.playlines[line]);    config.playlines.splice(line + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);    config.plugins.videoJsResolutionSwitcher.default = http ? http.res : <span class="hljs-number">360</span>;    config.plugins.studyControl.enableSwitchWindow = <span class="hljs-number">1</span>;    config.plugins.timelineObjects.url = <span class="hljs-string">'/richvideo/initdatawithviewer?'</span>;    config.plugins.seekBarControl.enableFastForward = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (!setting.queue) <span class="hljs-keyword">delete</span> config.plugins.studyControl;    <span class="hljs-comment">// config.preload = setting.tip ? 'auto' : 'none';</span>    <span class="hljs-keyword">var</span> player = vjs.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>),        a = <span class="hljs-string">'&lt;a href="https://d0.ananas.chaoxing.com/download/'</span> + _self.config(<span class="hljs-string">'objectid'</span>) + <span class="hljs-string">'" target="_blank"&gt;'</span>,        img = <span class="hljs-string">'&lt;img src="https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb" style="margin: 6px 0 0 6px;"&gt;'</span>;    player.volume(<span class="hljs-built_in">Math</span>.round(setting.vol) / <span class="hljs-number">100</span> || <span class="hljs-number">0</span>);    Ext.get(player.controlBar.addChild(<span class="hljs-string">'Button'</span>).el_).setHTML(a + img + <span class="hljs-string">'&lt;/a&gt;'</span>).dom.title = <span class="hljs-string">'下载视频'</span>;    player.on(<span class="hljs-string">'loadstart'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.tip &amp;&amp; <span class="hljs-keyword">this</span>.play().catch(Ext.emptyFn);        <span class="hljs-keyword">this</span>.playbackRate(setting.rate &gt; <span class="hljs-number">16</span> || setting.rate &lt; <span class="hljs-number">0.0625</span> ? <span class="hljs-number">1</span> : setting.rate);    });    player.one([<span class="hljs-string">'loadedmetadata'</span>, <span class="hljs-string">'firstplay'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.two = setting.rate === <span class="hljs-string">'0'</span> &amp;&amp; setting.two &lt; <span class="hljs-number">1</span>;        setting.two &amp;&amp; config.plugins.seekBarControl.sendLog(<span class="hljs-keyword">this</span>.children_[<span class="hljs-number">0</span>], <span class="hljs-string">'ended'</span>, <span class="hljs-built_in">Math</span>.floor(<span class="hljs-keyword">this</span>.cache_.duration));    });    player.on(<span class="hljs-string">'ended'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        Ext.fly(frameElement).parent().addCls(<span class="hljs-string">'ans-job-finished'</span>);    });    <span class="hljs-keyword">return</span> player;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hookAudio</span>(<span class="hljs-params"></span>) </span>{    _self.alert = <span class="hljs-built_in">console</span>.log;    <span class="hljs-keyword">var</span> config = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>];    config.plugins.studyControl.enableSwitchWindow = <span class="hljs-number">1</span>;    config.plugins.seekBarControl.enableFastForward = <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span> (!setting.queue) <span class="hljs-keyword">delete</span> config.plugins.studyControl;    <span class="hljs-keyword">var</span> player = vjs.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>),        a = <span class="hljs-string">'&lt;a href="https://d0.ananas.chaoxing.com/download/'</span> + _self.config(<span class="hljs-string">'objectid'</span>) + <span class="hljs-string">'" target="_blank"&gt;'</span>,        img = <span class="hljs-string">'&lt;img src="https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb" style="margin: 6px 0 0 6px;"&gt;'</span>;    player.volume(<span class="hljs-built_in">Math</span>.round(setting.vol) / <span class="hljs-number">100</span> || <span class="hljs-number">0</span>);    player.playbackRate(setting.rate &gt; <span class="hljs-number">16</span> || setting.rate &lt; <span class="hljs-number">0.0625</span> ? <span class="hljs-number">1</span> : setting.rate);    Ext.get(player.controlBar.addChild(<span class="hljs-string">'Button'</span>).el_).setHTML(a + img + <span class="hljs-string">'&lt;/a&gt;'</span>).dom.title = <span class="hljs-string">'下载音频'</span>;    player.on(<span class="hljs-string">'loadeddata'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.tip &amp;&amp; <span class="hljs-keyword">this</span>.play().catch(Ext.emptyFn);    });    player.one(<span class="hljs-string">'firstplay'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        setting.rate === <span class="hljs-string">'0'</span> &amp;&amp; config.plugins.seekBarControl.sendLog(<span class="hljs-keyword">this</span>.children_[<span class="hljs-number">0</span>], <span class="hljs-string">'ended'</span>, <span class="hljs-built_in">Math</span>.floor(<span class="hljs-keyword">this</span>.cache_.duration));    });    player.on(<span class="hljs-string">'ended'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        Ext.fly(frameElement).parent().addCls(<span class="hljs-string">'ans-job-finished'</span>);    });    <span class="hljs-keyword">return</span> player;}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">relieveLimit</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (setting.scale) _self.UEDITOR_CONFIG.scaleEnabled = <span class="hljs-literal">false</span>;    $.each(UE.instants, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">var</span> key = <span class="hljs-keyword">this</span>.key;        <span class="hljs-keyword">this</span>.ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{            <span class="hljs-keyword">this</span>.destroy();            UE.getEditor(key);        });    });}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">beforeFind</span>(<span class="hljs-params"></span>) </span>{    setting.regl = parent.greenligth || $.noop;    <span class="hljs-keyword">if</span> ($.type(parent._data) == <span class="hljs-string">'array'</span>) <span class="hljs-keyword">return</span> setting.regl();    setting.div = $(        <span class="hljs-string">'&lt;div style="border: 2px dashed rgb(0, 85, 68); width: 330px; position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(70, 196, 38, 0.6); overflow-x: auto;"&gt;'</span> +        <span class="hljs-string">'&lt;span style="font-size: medium;"&gt;&lt;/span&gt;'</span> +        <span class="hljs-string">'&lt;div style="font-size: medium;"&gt;正在搜索答案...&lt;/div&gt;'</span> +        <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;暂停答题&lt;/button&gt;'</span> +        <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;'</span> + (setting.auto ? <span class="hljs-string">'取消本次自动提交'</span> : <span class="hljs-string">'开启本次自动提交'</span>) + <span class="hljs-string">'&lt;/button&gt;'</span> +        <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;重新查询&lt;/button&gt;'</span> +        <span class="hljs-string">'&lt;button&gt;折叠面板&lt;/button&gt;&lt;br&gt;'</span> +        <span class="hljs-string">'&lt;div style="font-size: medium;"&gt;当前查题接口:'</span>+ (setting.tk_num%<span class="hljs-number">2</span>+<span class="hljs-number">1</span>) + <span class="hljs-string">'&lt;/div&gt;'</span> +        <span class="hljs-string">'&lt;button id = "next_tk"&gt;切换为下一个查题接口&lt;/button&gt;'</span> +        <span class="hljs-string">'&lt;div style="max-height: 300px; overflow-y: auto;"&gt;'</span> +        <span class="hljs-string">'&lt;table border="1" style="font-size: 12px;"&gt;'</span> +        <span class="hljs-string">'&lt;thead&gt;'</span> +        <span class="hljs-string">'&lt;tr&gt;'</span> +        <span class="hljs-string">'&lt;th style="width: 25px; min-width: 25px;"&gt;题号&lt;/th&gt;'</span> +        <span class="hljs-string">'&lt;th style="width: 60%; min-width: 130px;"&gt;题目（点击可复制）&lt;/th&gt;'</span> +        <span class="hljs-string">'&lt;th style="min-width: 130px;"&gt;答案（点击可复制）&lt;/th&gt;'</span> +        <span class="hljs-string">'&lt;/tr&gt;'</span> +        <span class="hljs-string">'&lt;/thead&gt;'</span> +        <span class="hljs-string">'&lt;tfoot style="display: none;"&gt;'</span> +        <span class="hljs-string">'&lt;tr&gt;'</span> +        <span class="hljs-string">'&lt;th colspan="3"&gt;答案提示框 已折叠&lt;/th&gt;'</span> +        <span class="hljs-string">'&lt;/tr&gt;'</span> +        <span class="hljs-string">'&lt;/tfoot&gt;'</span> +        <span class="hljs-string">'&lt;tbody&gt;'</span> +        <span class="hljs-string">'&lt;tr&gt;'</span> +        <span class="hljs-string">'&lt;td colspan="3" style="display: none;"&gt;&lt;/td&gt;'</span> +        <span class="hljs-string">'&lt;/tr&gt;'</span> +        <span class="hljs-string">'&lt;/tbody&gt;'</span> +        <span class="hljs-string">'&lt;/table&gt;'</span> +        <span class="hljs-string">'&lt;/div&gt;'</span> +        <span class="hljs-string">'&lt;/div&gt;'</span>    ).appendTo(<span class="hljs-string">'body'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-string">'button, td'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{        <span class="hljs-keyword">var</span> len = $(<span class="hljs-keyword">this</span>).prevAll(<span class="hljs-string">'button'</span>).length;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.nodeName == <span class="hljs-string">'TD'</span>) {            $(<span class="hljs-keyword">this</span>).prev().length &amp;&amp; GM_setClipboard($(<span class="hljs-keyword">this</span>).text());        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!$(<span class="hljs-keyword">this</span>).siblings().length) {            $(<span class="hljs-keyword">this</span>).parent().text(<span class="hljs-string">'正在搜索答案...'</span>);            setting.num++;        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) {            <span class="hljs-keyword">if</span> (setting.loop) {                clearInterval(setting.loop);                <span class="hljs-keyword">delete</span> setting.loop;                len = [<span class="hljs-string">'已暂停搜索'</span>, <span class="hljs-string">'继续答题'</span>];            } <span class="hljs-keyword">else</span> {                setting.loop = setInterval(findAnswer, setting.time);                len = [<span class="hljs-string">'正在搜索答案...'</span>, <span class="hljs-string">'暂停答题'</span>];            }            setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{                <span class="hljs-keyword">return</span> $(<span class="hljs-keyword">this</span>).data(<span class="hljs-string">'html'</span>) || len[<span class="hljs-number">0</span>];            }).removeData(<span class="hljs-string">'html'</span>);            $(<span class="hljs-keyword">this</span>).html(len[<span class="hljs-number">1</span>]);        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) {            setting.auto = !setting.auto;            $(<span class="hljs-keyword">this</span>).html(setting.auto ? <span class="hljs-string">'取消本次自动提交'</span> : <span class="hljs-string">'开启本次自动提交'</span>);        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">2</span>) {            parent.location.reload();        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">3</span>) {            setting.div.find(<span class="hljs-string">'tbody, tfoot'</span>).toggle();        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">4</span>) {            setting.tk_num++;            GM_setValue(<span class="hljs-string">'tk_num'</span>,setting.tk_num);            setting.tk_num = GM_getValue(<span class="hljs-string">'tk_num'</span>);            <span class="hljs-built_in">console</span>.log(setting.tk_num);            parent.location.reload();        }    }).find(<span class="hljs-string">'table, td, th'</span>).css(<span class="hljs-string">'border'</span>, <span class="hljs-string">'1px solid'</span>).end();    setting.lose = setting.num = <span class="hljs-number">0</span>;    setting.data = parent._data = [];    setting.over = <span class="hljs-string">'&lt;button style="margin-right: 10px;"&gt;跳过此题&lt;/button&gt;'</span>;    setting.curs = $(<span class="hljs-string">'script:contains(courseName)'</span>, top.document).text().match(<span class="hljs-regexp">/courseName:\'(.+?)\'|$/</span>)[<span class="hljs-number">1</span>] || $(<span class="hljs-string">'h1'</span>).text().trim() || <span class="hljs-string">'无'</span>;    setting.loop = setInterval(findAnswer, setting.time);    <span class="hljs-keyword">var</span> tip = ({<span class="hljs-attr">undefined</span>: <span class="hljs-string">'任务点排队中'</span>, <span class="hljs-attr">null</span>: <span class="hljs-string">'等待切换中'</span>})[setting.tip];    tip &amp;&amp; setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).data(<span class="hljs-string">'html'</span>, tip).siblings(<span class="hljs-string">'button:eq(0)'</span>).click();}<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findAnswer</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (setting.num &gt;= $(<span class="hljs-string">'.TiMu'</span>).length) {        <span class="hljs-keyword">var</span> arr = setting.lose ? [<span class="hljs-string">'共有 &lt;font color="red"&gt;'</span> + setting.lose + <span class="hljs-string">'&lt;/font&gt; 道题目待完善（已深色标注）'</span>, saveThis] : [<span class="hljs-string">'答题已完成'</span>, submitThis];        setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).data(<span class="hljs-string">'html'</span>, arr[<span class="hljs-number">0</span>]).siblings(<span class="hljs-string">'button:eq(0)'</span>).hide().click();        <span class="hljs-keyword">return</span> setTimeout(arr[<span class="hljs-number">1</span>], setting.time);    }    <span class="hljs-keyword">var</span> $TiMu = $(<span class="hljs-string">'.TiMu'</span>).eq(setting.num),        question = filterImg($TiMu.find(<span class="hljs-string">'.Zy_TItle:eq(0) .clearfix'</span>)).replace(<span class="hljs-regexp">/^【.*?】\s*/</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/\s*（\d+\.\d+分）$/</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[(]\s*[)]。$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/（\s*）。$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/[(]\s*[)]$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/（\s*）$/</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-regexp">/。$/</span>,<span class="hljs-string">''</span>),        type = $TiMu.find(<span class="hljs-string">'input[name^=answertype]:eq(0)'</span>).val() || <span class="hljs-string">'-1'</span>;    <span class="hljs-comment">//setting.div.children('div:eq(0)').text(encodeURIComponent(question)+'正在搜索答案...');</span>    <span class="hljs-keyword">switch</span>(setting.tk_num%<span class="hljs-number">2</span>)    {        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:{            GM_xmlhttpRequest({                method: <span class="hljs-string">'POST'</span>,                url: <span class="hljs-string">'http://cx.icodef.com/wyn-nb'</span>,                headers: {                    <span class="hljs-string">'Content-type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span>,                    <span class="hljs-string">'Authorization'</span>: setting.token,                },                data: <span class="hljs-string">'question='</span> + <span class="hljs-built_in">encodeURIComponent</span>(question) + <span class="hljs-string">'&amp;type='</span> + type + <span class="hljs-string">'&amp;id='</span> + ($(<span class="hljs-string">'#workLibraryId'</span>).val() || $(<span class="hljs-string">'#oldWorkId'</span>).val()),                timeout: setting.time,                onload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) </span>{                    <span class="hljs-keyword">if</span> (!setting.loop) {                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">200</span>) {                        <span class="hljs-keyword">var</span> obj = $.parseJSON(xhr.responseText) || {};                        obj.answer = obj.data;                        <span class="hljs-keyword">if</span> (obj.code) {                            setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).text(<span class="hljs-string">'正在搜索答案...'</span>);                            <span class="hljs-keyword">var</span> td = <span class="hljs-string">'&lt;td style="border: 1px solid;'</span>,                                answer = <span class="hljs-built_in">String</span>(obj.answer).replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">'&amp;amp;'</span>).replace(<span class="hljs-regexp">/&lt;(?!img)/g</span>, <span class="hljs-string">'&amp;lt;'</span>);                            obj.answer = <span class="hljs-regexp">/^http/</span>.test(answer) ? <span class="hljs-string">'&lt;img src="'</span> + obj.answer + <span class="hljs-string">'"&gt;'</span> : obj.answer;                            $(                                <span class="hljs-string">'&lt;tr&gt;'</span> +                                td + <span class="hljs-string">' text-align: center;"&gt;'</span> + $TiMu.find(<span class="hljs-string">'.Zy_TItle:eq(0) i'</span>).text().trim() + <span class="hljs-string">'&lt;/td&gt;'</span> +                                td + <span class="hljs-string">'" title="点击可复制"&gt;'</span> + (question.match(<span class="hljs-string">'&lt;img'</span>) ? question : question.replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">'&amp;amp;'</span>).replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">'&amp;lt'</span>)) + <span class="hljs-string">'&lt;/td&gt;'</span> +                                td + <span class="hljs-string">'" title="点击可复制"&gt;'</span> + (<span class="hljs-regexp">/^http/</span>.test(answer) ? obj.answer : <span class="hljs-string">''</span>) + answer + <span class="hljs-string">'&lt;/td&gt;'</span> +                                <span class="hljs-string">'&lt;/tr&gt;'</span>                            ).appendTo(setting.div.find(<span class="hljs-string">'tbody'</span>)).css(<span class="hljs-string">'background-color'</span>, fillAnswer($TiMu.find(<span class="hljs-string">'ul:eq(0)'</span>).find(<span class="hljs-string">'li'</span>), obj, type) ? <span class="hljs-string">''</span> : <span class="hljs-string">'rgba(0, 150, 136, 0.6)'</span>);                            setting.data[setting.num++] = {                                code: obj.code &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>,                                question: question,                                option: obj.answer,                                type: <span class="hljs-built_in">Number</span>(type)                            };                        } <span class="hljs-keyword">else</span> {                            setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(obj.answer || setting.over + <span class="hljs-string">'服务器繁忙，正在重试...'</span>);                        }                        setting.div.children(<span class="hljs-string">'span'</span>).html(obj.msg || <span class="hljs-string">''</span>);                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">403</span>) {                        <span class="hljs-keyword">var</span> html = xhr.responseText.indexOf(<span class="hljs-string">'{'</span>) ? <span class="hljs-string">'请求过于频繁，单击下面的切换题库接口按钮试试吧'</span> : $.parseJSON(xhr.responseText).data;                        setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).data(<span class="hljs-string">'html'</span>, html).siblings(<span class="hljs-string">'button:eq(0)'</span>).click();                    } <span class="hljs-keyword">else</span> {                        setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(<span class="hljs-string">'题库异常，单击下面的切换题库接口按钮试试吧...'</span>);                    }                },                ontimeout: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{                    setting.loop &amp;&amp; setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).html(setting.over + <span class="hljs-string">'服务器超时，正在重试...'</span>);                }            });        }; <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:{            GM_xmlhttpRequest({                method: <span class="hljs-string">'POST'</span>,                url: <span class="hljs-string">'http://cx.beaa.cn/cx.php'</span>,                headers: {                    <span class="hljs-string">'Content-type'</span>: <span class="hljs-string">'application/x-www-form-urlencoded'</span>,                },                data: <span class="hljs-string">'content='</span> + <span class="hljs-built_in">encodeURIComponent</span>(question.replace(<span class="hljs-regexp">/^&lt;img src="/</span>,<span class="hljs-string">""</span>).replace(<span class="hljs-regexp">/"&gt;$/</span>,<span class="hljs-string">""</span>)),                timeout: setting.time,                onload: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">xhr</span>) </span>{                    <span class="hljs-keyword">if</span> (!setting.loop) {                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.status == <span class="hljs-number">200</span>) {                        <span class="hljs-keyword">var</span> obj = $.parseJSON(xhr.responseText.replace(<span class="hljs-regexp">/^操作数据失败！/</span>,<span class="hljs-string">''</span>)) || {};                        <span class="hljs-keyword">if</span> (obj.code) {                            setting.div.children(<span class="hljs-string">'div:eq(0)'</span>).text(<span class="hljs-string">'正在搜索答案...'</span>);                            <span class="hljs-keyword">var</span> td = <span class="hljs-string">'&lt;td style="border: 1px solid;'</span>,                                answer = S</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;脚本①&quot;&gt;&lt;a href=&quot;#脚本①&quot; class=&quot;headerlink&quot; title=&quot;脚本①&quot;&gt;&lt;/a&gt;脚本①&lt;/h1&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs js&quot;&gt;&lt;span
      
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Beyond Compare 4解除到期限制的技巧</title>
    <link href="https://melodyjerry.github.io/blog/2020/06/08/Beyond%20Compare%204%E8%A7%A3%E9%99%A4%E5%88%B0%E6%9C%9F%E9%99%90%E5%88%B6%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    <id>https://melodyjerry.github.io/blog/2020/06/08/Beyond%20Compare%204%E8%A7%A3%E9%99%A4%E5%88%B0%E6%9C%9F%E9%99%90%E5%88%B6%E7%9A%84%E6%8A%80%E5%B7%A7/</id>
    <published>2020-06-08T14:50:00.000Z</published>
    <updated>2020-07-10T06:46:17.181Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>如果提示 这个授权密钥已被吊销 ，删除 C:\Users\Administrator\AppData\Roaming\Scooter Software\Beyond Compare 4 目录下的文件即可（将Administrator换成自己的用户名）</p></li><li><p>如果没有输入激活码，且试用30天已到期，可以删除安装目录下 的 BCUnrar.dll 文件，发现又可以使用了，不过依然是试用。<br>也可以删除注册表 \HKEY_CURRENT_USER\Software\ScooterSoftware\Beyond Compare 4\CacheId ，也能够继续使用，且不会到期。</p></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果提示 这个授权密钥已被吊销 ，删除 C:\Users\Administrator\AppData\Roaming\Scooter Software\Beyond Compare 4 目录下的文件即可（将Administrator换成自己的用户名）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果没有输入激活码，且试用30天已到期，可以删除安装目录下 的 BCUnrar.dll 文件，发现又可以使用了，不过依然是试用。&lt;br&gt;也可以删除注册表 \HKEY_CURRENT_USER\Software\ScooterSoftware\Beyond Compare 4\CacheId ，也能够继续使用，且不会到期。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java 常用资源工具集合</title>
    <link href="https://melodyjerry.github.io/blog/2020/06/08/Java%20%E5%B8%B8%E7%94%A8%E8%B5%84%E6%BA%90%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/"/>
    <id>https://melodyjerry.github.io/blog/2020/06/08/Java%20%E5%B8%B8%E7%94%A8%E8%B5%84%E6%BA%90%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</id>
    <published>2020-06-08T06:14:00.000Z</published>
    <updated>2020-07-10T06:46:17.294Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="http://rrd.me/emdDq" target="_blank" rel="noopener">http://rrd.me/emdDq</a></p><a id="more"></a><p>搜索资源网站<br>学习技术过程我们经常需要使用搜索引擎来检索资料，国内常用的也就是某度了。</p><p>当然有条件的话，搜索引擎首先还是推荐使用 Google，如果没办法使用，可以使用以下几个作为备用：</p><p>Bing<br>Bing 国际版：<a href="https://cn.bing.com/" target="_blank" rel="noopener">https://cn.bing.com/</a></p><p>比某度好用，之前还被停用了几天，最近可以了。</p><p>DuckDuckGo<br>DuckDuckGo：<a href="https://duckduckgo.com/" target="_blank" rel="noopener">https://duckduckgo.com/</a></p><p>从官网的介绍来看这个搜索引擎不收集用户信息，而且没有广告。</p><p>Stack Overflow<br>Stack Overflow：<a href="https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a></p><p>我们如果常用 Google，很多技术问题的答案就在这个网站上，如果你无法使用 Google 可以在这个网站上直接检索就好了。</p><p>Gitlogs<br>Gitlogs：<a href="https://www.gitlogs.com/" target="_blank" rel="noopener">https://www.gitlogs.com/</a></p><p>Gitlogs 是专门针对 GitHub 项目的搜索引擎，我们通过他可以快速找到想要项目。</p><p>jiumo search<br>文档搜索引擎 jiumo search 鸠摩搜书：<a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">https://www.jiumodiary.com/</a></p><p>可以用来找一些技术文档手册，很多在百度网盘里。</p><p>Ebooke<br>Ebooke：<a href="https://ebookee.org/" target="_blank" rel="noopener">https://ebookee.org/</a></p><p>Ebookee 是一个基于互联网并提供免费电子图书下载的搜索引擎网站。</p><p>Iconfinder<br>图标搜索：<a href="https://www.iconfinder.com/" target="_blank" rel="noopener">https://www.iconfinder.com/</a></p><p>用来查找 logo 图片。</p><p>TinEye<br>TinEye：<a href="https://www.tineye.com" target="_blank" rel="noopener">https://www.tineye.com</a></p><p>用图片来检索图片，我们可以上传图片或输入图片的 URL 来检索。</p><p>SemanticScholar<br>SemanticScholar：<a href="https://www.semanticscholar.org/" target="_blank" rel="noopener">https://www.semanticscholar.org/</a></p><p>SemanticScholar 是一个免费学术搜索引擎，其检索结果来自于期刊、学术会议资料或者是学术机构的文献。</p><p>LibreStock<br>LibreStock：<a href="https://librestock.com/" target="_blank" rel="noopener">https://librestock.com/</a></p><p>LibreStock 上可以检索一些优质的高清图片。</p><p>CC Search<br>CC Search：<a href="https://ccsearch.creativecommons.org/" target="_blank" rel="noopener">https://ccsearch.creativecommons.org/</a></p><p>CC Search 上搜索到的图片资源都是无版权的，我们可以免费的使用。</p><p>Pexels<br>Pexels：<a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a></p><p>高质量的图片网站，可以免费使用。</p><p>Unsplash<br>Unsplash：<a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></p><p>免费高清素材网站。</p><p>The App Store<br>The App Store：<a href="https://theappstore.org/" target="_blank" rel="noopener">https://theappstore.org/</a></p><p>The App Store 是一个针对苹果手机、iPad、Mac 设备的应用搜索工具。</p><p>工具类<br>图片相关工具<br>TinyPNG：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></p><p>免费的在线图片压缩工具，压缩率高，无损画质，直接拖拽使用，很方便。</p><p>picdiet：<a href="https://www.picdiet.com/zh-cn" target="_blank" rel="noopener">https://www.picdiet.com/zh-cn</a></p><p>独特且强悍的JavaScript 算法，能极速压缩 80% 的图片大小，而不损害其质量。</p><p>SmartResize：</p><p><a href="https://www.smartresize.com/zh-cn" target="_blank" rel="noopener">https://www.smartresize.com/zh-cn</a></p><p>这个工具基于 javascript+HTML5 编写而成的，是一个批量裁剪缩放图片的神器！</p><p>正则表达式相关工具<br>以下两个工具以图形的方式来展示正则表达式，更易于理解：</p><p><a href="https://regexr.com/" target="_blank" rel="noopener">https://regexr.com/</a></p><p><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" target="_blank" rel="noopener">https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24</a></p><p>文件转换转换工具<br>以下资源支持各种格式（PDF、图片、Word）相互转换。</p><p><a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></p><p><a href="https://convertio.co/zh/" target="_blank" rel="noopener">https://convertio.co/zh/</a></p><p><a href="https://www.online-convert.com/" target="_blank" rel="noopener">https://www.online-convert.com/</a></p><p><a href="https://www.pdftoword.com/" target="_blank" rel="noopener">https://www.pdftoword.com/</a></p><p><a href="https://tools.pdf24.org/zh/" target="_blank" rel="noopener">https://tools.pdf24.org/zh/</a></p><p><a href="https://cn.office-converter.com/" target="_blank" rel="noopener">https://cn.office-converter.com/</a></p><p>在线编译器<br>包含前后端（php、java、c等）都可以在线运行测试</p><p><a href="https://rextester.com/" target="_blank" rel="noopener">https://rextester.com/</a></p><p><a href="https://www.onlinegdb.com/" target="_blank" rel="noopener">https://www.onlinegdb.com/</a></p><p><a href="https://c.runoob.com/" target="_blank" rel="noopener">https://c.runoob.com/</a></p><p>HTML、CSS、JS、设计类的工具<br>JSFiddle: <a href="https://jsfiddle.net/" target="_blank" rel="noopener">https://jsfiddle.net/</a></p><p>CodePen: <a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a></p><p>Runoob: <a href="https://c.runoob.com/front-end/61" target="_blank" rel="noopener">https://c.runoob.com/front-end/61</a></p><p>JSON 解析器: <a href="https://c.runoob.com/front-end/53" target="_blank" rel="noopener">https://c.runoob.com/front-end/53</a></p><p>在线 PS: <a href="http://www.kantu.com/" target="_blank" rel="noopener">http://www.kantu.com/</a></p><p>表格转换工具: <a href="https://tableconvert.com/" target="_blank" rel="noopener">https://tableconvert.com/</a></p><p>支持的 Markdown、HTML table、CSV 和 Excel 的相互转换。</p><p>DesignCap: <a href="https://www.designcap.com/" target="_blank" rel="noopener">https://www.designcap.com/</a></p><p>在线设计海报，内置众多模板及素材。</p><p>思维导图工具<br>推荐几款绘图工具：</p><p>Xmind：<a href="https://www.xmind.cn/" target="_blank" rel="noopener">https://www.xmind.cn/</a></p><p>跨平台、跨终端，拥有全功能的思维导图软件。</p><p>ProcessOn：<a href="https://www.processon.com/" target="_blank" rel="noopener">https://www.processon.com/</a></p><p>免费在线作图，实时协作，支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图等。</p><p>MindMaster：<a href="https://www.edrawsoft.cn/mindmaster/" target="_blank" rel="noopener">https://www.edrawsoft.cn/mindmaster/</a></p><p>多平台思维导图软件，可用于Windows，Mac和Linux等桌面环境，也可以在线使用或在苹果，安卓等移动端上使用。</p><p>MindMeister：<a href="https://www.mindmeister.com/zh" target="_blank" rel="noopener">https://www.mindmeister.com/zh</a></p><p>在线思维导图工具，已有超过1000万个用户。</p><p>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a> 简洁的在线思维导图工具</p><p>Gliffy：<a href="https://www.gliffy.com/" target="_blank" rel="noopener">https://www.gliffy.com/</a></p><p>我们可以在 Chrome 浏览器上安装 gliffy 插件。</p><p>可以在线创建流程图、UML图、线框图、BPNM、组织架构图等。</p><p>文档笔记平台<br>推荐几个常用的国内外云笔记平台，比较常用的应该是印象、有道、石墨，有一些国外的访问速度比较慢，影响体验。</p><p>现在用云笔记的人应该蛮多的，可以总结归纳自己的一些知识储备或者相关的业务资料，加上他们自带的跨平台特性，用起来还是很方便的。</p><p>印象笔记：<a href="https://www.yinxiang.com/" target="_blank" rel="noopener">https://www.yinxiang.com/</a></p><p>有道笔记：<a href="https://note.youdao.com/" target="_blank" rel="noopener">https://note.youdao.com/</a></p><p>OneNote：<a href="https://www.onenote.com/" target="_blank" rel="noopener">https://www.onenote.com/</a></p><p>幕布：<a href="https://mubu.com/" target="_blank" rel="noopener">https://mubu.com/</a></p><p>为知笔记：<a href="https://www.wiz.cn/" target="_blank" rel="noopener">https://www.wiz.cn/</a></p><p>石墨文档：<a href="https://shimo.im/" target="_blank" rel="noopener">https://shimo.im/</a></p><p>Google keep：<a href="https://keep.google.com/" target="_blank" rel="noopener">https://keep.google.com/</a></p><p>Simplenote：<a href="https://simplenote.com/" target="_blank" rel="noopener">https://simplenote.com/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来源：&lt;a href=&quot;http://rrd.me/emdDq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://rrd.me/emdDq&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java比较两个List集合的方法</title>
    <link href="https://melodyjerry.github.io/blog/2020/06/08/Java%E5%AE%9E%E7%8E%B0%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAList%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/"/>
    <id>https://melodyjerry.github.io/blog/2020/06/08/Java%E5%AE%9E%E7%8E%B0%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAList%E9%9B%86%E5%90%88%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/</id>
    <published>2020-06-08T05:27:00.000Z</published>
    <updated>2020-07-10T06:46:17.505Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 比较两个List集合是否相等</span><span class="hljs-comment"> * &lt;p&gt;注：1. 如果一个List的引用为&lt;code&gt;null&lt;/code&gt;，或者其包含的元素个数为0，那么该List在本逻辑处理中都算作空；</span><span class="hljs-comment"> * &lt;p&gt;2. 泛型参数E涉及到对象，所以需要确保正确实现了对应对象的&lt;code&gt;equal()&lt;/code&gt;方法。</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list1</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list2</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt;<span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isListEqual</span><span class="hljs-params">(List&lt;E&gt; list1, List&lt;E&gt; list2)</span> </span>{<span class="hljs-comment">// 两个list引用相同（包括两者都为空指针的情况）</span><span class="hljs-keyword">if</span> (list1 == list2) {<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;}<span class="hljs-comment">// 两个list都为空（包括空指针、元素个数为0）</span><span class="hljs-keyword">if</span> ((list1 == <span class="hljs-keyword">null</span> &amp;&amp; list2 != <span class="hljs-keyword">null</span> &amp;&amp; list2.size() == <span class="hljs-number">0</span>)|| (list2 == <span class="hljs-keyword">null</span> &amp;&amp; list1 != <span class="hljs-keyword">null</span> &amp;&amp; list1.size() == <span class="hljs-number">0</span>)) {<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;}<span class="hljs-comment">// 两个list元素个数不相同</span><span class="hljs-keyword">if</span> (list1.size() != list2.size()) {<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;}<span class="hljs-comment">// 两个list元素个数已经相同，再比较两者内容</span><span class="hljs-comment">// 采用这种可以忽略list中的元素的顺序</span><span class="hljs-comment">// 涉及到对象的比较是否相同时，确保实现了equals()方法</span><span class="hljs-keyword">if</span> (!list1.containsAll(list2)) {<span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;}<span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; }</code></pre></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>参考文章<a href="https://blog.csdn.net/zc274456223/article/details/77943156" target="_blank" rel="noopener">两个List比较内容是否一样</a>和<a href="https://www.jb51.net/article/149311.htm" target="_blank" rel="noopener">Java判断2个List集合是否相等(不考虑元素的顺序)</a>写的，主要对文章讲到的比较算法的具体实现进行了完善改造。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt; * 比较两个Li
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
</feed>
