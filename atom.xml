<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-08-27T05:55:24.186Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【狂神说Java】JavaWeb-文件上传</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91JavaWeb-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91JavaWeb-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-08-27T05:52:05.548Z</published>
    <updated>2020-08-27T05:55:24.186Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，以免以下几个包导错</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.ProgressListener;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</code></pre></div><p><strong>源码：</strong></p><p>FileSerlvet类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chen;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.ProgressListener;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Servlet implementation class FileSerlvet</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSerlvet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span><span class="hljs-comment"> *      response)</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><span class="hljs-function"><span class="hljs-keyword">throws</span> ServletException, IOException </span>{<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-comment">// response.getWriter().append("Served at: ").append(request.getContextPath());</span><span class="hljs-comment">// 判断上传的文件普通表单还是带文件的表单</span><span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) {<span class="hljs-keyword">return</span>;<span class="hljs-comment">//终止方法运行,说明这是一个普通的表单,直接返回</span>}    <span class="hljs-comment">//创建上传文件的保存路径,建议在WEB-INF路径下,安全,用户无法直接访间上传的文件;</span>    String uploadPath =<span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/upload"</span>);    File uploadFile = <span class="hljs-keyword">new</span> File(uploadPath);    <span class="hljs-keyword">if</span> (!uploadFile.exists()){    uploadFile.mkdir(); <span class="hljs-comment">//创建这个月录</span>    }<span class="hljs-comment">// 创建上传文件的保存路径，建议在WEB-INF路径下，安全，用户无法直接访问上传的文件</span>String tmpPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/tmp"</span>);File file = <span class="hljs-keyword">new</span> File(tmpPath);<span class="hljs-keyword">if</span> (!file.exists()) {file.mkdir();<span class="hljs-comment">//创建临时目录</span>}<span class="hljs-comment">// 处理上传的文件,一般都需要通过流来获取,我们可以使用 request, getInputstream(),原生态的文件上传流获取,十分麻烦</span><span class="hljs-comment">// 但是我们都建议使用 Apache的文件上传组件来实现, common-fileupload,它需要旅 commons-io组件;</span><span class="hljs-keyword">try</span> {<span class="hljs-comment">// 创建DiskFileItemFactory对象，处理文件路径或者大小限制</span>DiskFileItemFactory factory = getDiskFileItemFactory(file);<span class="hljs-comment">/*</span><span class="hljs-comment"> * //通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件 factory.setSizeThreshold(1024 *</span><span class="hljs-comment"> * 1024); //缓存区大小为1M factory.setRepository (file);//临时目录的保存目录,需要一个File</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 2、获取ServletFileUpload</span>ServletFileUpload upload = getServletFileUpload(factory);<span class="hljs-comment">// 3、处理上传文件</span><span class="hljs-comment">// 把前端请求解析，封装成FileItem对象，需要从ServletFileUpload对象中获取</span>String msg = uploadParseRequest(upload, request, uploadPath);<span class="hljs-comment">// Servlet请求转发消息</span>System.out.println(msg);<span class="hljs-keyword">if</span>(msg == <span class="hljs-string">"文件上传成功!"</span>) {<span class="hljs-comment">// Servlet请求转发消息</span>request.setAttribute(<span class="hljs-string">"msg"</span>,msg);request.getRequestDispatcher(<span class="hljs-string">"info.jsp"</span>).forward(request, response);}<span class="hljs-keyword">else</span> {msg =<span class="hljs-string">"请上传文件"</span>;request.setAttribute(<span class="hljs-string">"msg"</span>,msg);request.getRequestDispatcher(<span class="hljs-string">"info.jsp"</span>).forward(request, response);}} <span class="hljs-keyword">catch</span> (FileUploadException e) {<span class="hljs-comment">// TODO 自动生成的 catch 块</span>e.printStackTrace();}}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiskFileItemFactory <span class="hljs-title">getDiskFileItemFactory</span><span class="hljs-params">(File file)</span> </span>{DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<span class="hljs-comment">// 通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件中;</span>factory.setSizeThreshold(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<span class="hljs-comment">// 缓冲区大小为1M</span>factory.setRepository(file);<span class="hljs-comment">// 临时目录的保存目录,需要一个file</span><span class="hljs-keyword">return</span> factory;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServletFileUpload <span class="hljs-title">getServletFileUpload</span><span class="hljs-params">(DiskFileItemFactory factory)</span> </span>{ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload(factory);<span class="hljs-comment">// 监听长传进度</span>upload.setProgressListener(<span class="hljs-keyword">new</span> ProgressListener() {<span class="hljs-comment">// pBYtesRead:已读取到的文件大小</span><span class="hljs-comment">// pContextLength:文件大小</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">long</span> pBytesRead, <span class="hljs-keyword">long</span> pContentLength, <span class="hljs-keyword">int</span> pItems)</span> </span>{System.out.println(<span class="hljs-string">"总大小："</span> + pContentLength + <span class="hljs-string">"已上传："</span> + pBytesRead);}});<span class="hljs-comment">// 处理乱码问题</span>upload.setHeaderEncoding(<span class="hljs-string">"UTF-8"</span>);<span class="hljs-comment">// 设置单个文件的最大值</span>upload.setFileSizeMax(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>);<span class="hljs-comment">// 设置总共能够上传文件的大小</span><span class="hljs-comment">// 1024 = 1kb * 1024 = 1M * 10 = 10м</span><span class="hljs-keyword">return</span> upload;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">uploadParseRequest</span><span class="hljs-params">(ServletFileUpload upload, HttpServletRequest request, String uploadPath)</span></span><span class="hljs-function"><span class="hljs-keyword">throws</span> FileUploadException, IOException </span>{String msg = <span class="hljs-string">""</span>;<span class="hljs-comment">// 把前端请求解析，封装成FileItem对象</span>List&lt;FileItem&gt; fileItems = upload.parseRequest(request);<span class="hljs-keyword">for</span> (FileItem fileItem : fileItems) {<span class="hljs-keyword">if</span> (fileItem.isFormField()) {<span class="hljs-comment">// 判断上传的文件是普通的表单还是带文件的表单</span><span class="hljs-comment">// getFieldName指的是前端表单控件的name;</span>String name = fileItem.getFieldName();String value = fileItem.getString(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">// 处理乱码</span>System.out.println(name + <span class="hljs-string">": "</span> + value);} <span class="hljs-keyword">else</span> {<span class="hljs-comment">// 判断它是上传的文件</span><span class="hljs-comment">// ============处理文件==============</span><span class="hljs-comment">// 拿到文件名</span>String uploadFileName = fileItem.getName();System.out.println(<span class="hljs-string">"上传的文件名: "</span> + uploadFileName);<span class="hljs-keyword">if</span> (uploadFileName.trim().equals(<span class="hljs-string">""</span>) || uploadFileName == <span class="hljs-keyword">null</span>) {<span class="hljs-keyword">continue</span>;}<span class="hljs-comment">// 获得上传的文件名/images/girl/paojie.png</span>String fileName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">"/"</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获得文件的后缀名</span>String fileExtName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">"."</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">/*</span><span class="hljs-comment"> * 如果文件后缀名fileExtName不是我们所需要的 就直按return.不处理,告诉用户文件类型不对。</span><span class="hljs-comment"> */</span>System.out.println(<span class="hljs-string">"文件信息[件名: "</span> + fileName + <span class="hljs-string">" ---文件类型"</span> + fileExtName + <span class="hljs-string">"]"</span>);<span class="hljs-comment">// 可以使用UID（唯一识别的通用码),保证文件名唯</span><span class="hljs-comment">// 0UID. randomUUID(),随机生一个唯一识别的通用码;</span>String uuidPath = UUID.randomUUID().toString();<span class="hljs-comment">// ================处理文件完毕==============</span><span class="hljs-comment">// 存到哪? uploadPath</span><span class="hljs-comment">// 文件真实存在的路径realPath</span>String realPath = uploadPath + <span class="hljs-string">"/"</span> + uuidPath;<span class="hljs-comment">// 给每个文件创建一个对应的文件夹</span>File realPathFile = <span class="hljs-keyword">new</span> File(realPath);<span class="hljs-keyword">if</span> (!realPathFile.exists()) {realPathFile.mkdir();}<span class="hljs-comment">// ==============存放地址完毕==============</span><span class="hljs-comment">// 获得文件上传的流</span>InputStream inputStream = fileItem.getInputStream();<span class="hljs-comment">// 创建一个文件输出流</span><span class="hljs-comment">// realPath =真实的文件夹;</span><span class="hljs-comment">// 差了一个文件;加上翰出文件的名产"/"+uuidFileName</span>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(realPath + <span class="hljs-string">"/"</span> + fileName);<span class="hljs-comment">// 创建一个缓冲区</span><span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<span class="hljs-comment">// 判断是否读取完毕</span><span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<span class="hljs-comment">// 如果大于0说明还存在数据;</span><span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) {fos.write(buffer, <span class="hljs-number">0</span>, len);}<span class="hljs-comment">// 关闭流</span>fos.close();inputStream.close();msg = <span class="hljs-string">"文件上传成功!"</span>;fileItem.delete(); <span class="hljs-comment">// 上传成功,清除临时文件</span><span class="hljs-comment">//=============文件传输完成=============</span>}}<span class="hljs-keyword">return</span> msg;}}</code></pre></div><p>注册xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.chen.FileSerlvet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/upload.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></code></pre></div><p>导入依赖的jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>index.jsp</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%--</span></span><span class="hljs-tag"><span class="hljs-attr">GET</span>：上传文件大小有限制</span><span class="hljs-tag"><span class="hljs-attr">POST</span>：上传文件大小没有限制</span><span class="hljs-tag"> ${<span class="hljs-attr">pageContext.request.contextPath</span>}</span><span class="hljs-tag"> <span class="hljs-attr">--</span>%&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"upload.do"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>上传用户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>info.jsp</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span>%&gt;</span><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=request.getAttribute("msg")%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下，以免以下几个包导错&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.fileupload.
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】Spring5笔记存档</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91Spring5%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91Spring5%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/</id>
    <published>2020-08-27T05:52:05.530Z</published>
    <updated>2020-08-27T05:55:24.267Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV1WE411d7Dv" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1WE411d7Dv</a></p><a id="more"></a><hr><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDEwMjUxMzkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br>spring官网： <a href="https://spring.io/projects/spring-framework#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-framework#overview</a></p><p>官方下载： <a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><p>GitHub： <a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><p>Spring Web MVC： <a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.7.RELEASE" target="_blank" rel="noopener">spring-webmvc最新版</a></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li>Spring是一个开源的免费框架（容器）！</li><li>Spring是一个轻量级的非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持</li></ul><p>开源免费容器，轻量级非侵入式，控制反转，面向切面，支持事务，支持框架整合</p><p>Spring是一个轻量级的控制反转(IOC)和面向切面(AOP)编程的框架</p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvU3ByaW5nNyVFNSVBNCVBNyVFNiVBOCVBMSVFNSU5RCU5Ny5wbmc?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1-4、扩展"><a href="#1-4、扩展" class="headerlink" title="1.4、扩展"></a>1.4、扩展</h3><p>现代化的java开发 -&gt; 基于Spring的开发</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDEwMzA4MjAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDEwMzE0Mjk1MTQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801031429514"></p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><p>传统的调用</p><ol><li><p>UserDao</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>{<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div></li><li><p>UserDaoImp</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"默认获取用户数据"</span>);}}</code></pre></div></li><li><p>UserSevice</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div></li><li><p>UserServiceImp</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<span class="hljs-keyword">import</span> dao.UserDao;<span class="hljs-keyword">import</span> dao.UserDaoImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>{UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{userDao.getUser();}}</code></pre></div></li></ol><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle0;<span class="hljs-keyword">import</span> Service.UserService;<span class="hljs-keyword">import</span> Service.UserServiceImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest0</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">// 用户实际调用的是业务层，dao层他们不需要接触</span>UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();userService.getUser();}}</code></pre></div><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjI3NDI1ODEucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801122742581"><br>改良：我们使用一个Set接口实现。已经发生了革命性的变化！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//在Service层的实现类(UserServiceImpl)增加一个Set()方法</span><span class="hljs-comment">//利用set动态实现值的注入！</span><span class="hljs-keyword">private</span> UserDao userDao;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>{    <span class="hljs-keyword">this</span>.userDao = userDao;}</code></pre></div><p>set() 方法实际上是动态改变了 UserDao userDao 的 初始化部分（<strong>new UserDaoImpl()</strong>）</p><p>测试中加上</p><div class="hljs"><pre><code class="hljs java">((UserServiceImpl)userService).setUserDao(<span class="hljs-keyword">new</span> UserDaoImpl());</code></pre></div><ul><li>之前，程序是主动创建对象！<strong>控制权在程序猿手上</strong>！</li><li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！（<strong>主动权在客户手上</strong>）</li></ul><p>本质上解决了问题，程序员不用再去管理对象的创建</p><p>系统的耦合性大大降低，可以更专注在业务的实现上</p><p>这是IOC（控制反转）的原型，反转(理解)：主动权交给了用户</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjI4MDU3NjkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801122805769"></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjM1MTg5NzQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123518974"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDExMjMyMzUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjMzNDgyMDcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123348207"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjM0NTA4OTcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123450897"></p><h2 id="3、HolleSpring"><a href="#3、HolleSpring" class="headerlink" title="3、HolleSpring"></a>3、HolleSpring</h2><p>在父模块中导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>pojo的Hello.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>{<span class="hljs-keyword">private</span> String str;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> str;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>{<span class="hljs-keyword">this</span>.str = str;}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"Holle [str="</span> + str + <span class="hljs-string">"]"</span>;}}</code></pre></div><p>在resource里面的xml配置</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--在Spring中创建对象，在Spring这些都称为bean</span><span class="hljs-comment">    类型 变量名 = new 类型();</span><span class="hljs-comment">    Holle holle = new Holle();</span><span class="hljs-comment">    </span><span class="hljs-comment">    bean = 对象(holle)</span><span class="hljs-comment">    id = 变量名(holle)</span><span class="hljs-comment">    class = new的对象(new Holle();)</span><span class="hljs-comment">    property 相当于给对象中的属性设值,让str="Spring"</span><span class="hljs-comment">    --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Hello"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"str"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Spring"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类MyTest</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle1;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> pojo.Hello;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//获取Spring的上下文对象</span>ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<span class="hljs-comment">//我们的对象下能在都在spring·中管理了，我们要使用，直接取出来就可以了</span>Hello holle = (Hello) context.getBean(<span class="hljs-string">"hello"</span>);System.out.println(holle.toString());}}</code></pre></div><p>核心用set注入，所以必须要有下面的se()方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//Hello类</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>{<span class="hljs-keyword">this</span>.str = str;}</code></pre></div><p><strong>思考：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExNjUxNTYyNTkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801165156259"><br>IOC：对象由Spring 来创建，管理，装配！</p><p><strong>弹幕评论里面的理解：</strong></p><p>原来这套程序是：你写好菜单买好菜，客人来了自己把菜炒好招待，就相当于你请人吃饭<br>现在这套程序是：你告诉楼下餐厅，你要哪些菜，客人来的时候，餐厅把做好的你需要的菜送上来<br>IoC：炒菜这件事，不再由你自己来做，而是委托给了第三方__餐厅来做</p><p>此时的区别就是，如果我还需要做其他的菜，我不需要自己搞菜谱买材料再做好，而是告诉餐厅，我要什么菜，什么时候要，你做好送来</p><p>.</p><p>在前面第一个module试试引入Spring</p><div class="hljs"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;&lt;beans xmlns=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>       xmlns:xsi=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi:schemaLocation=<span class="hljs-string">"http://www.springframework.org/schema/beans</span><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;    &lt;bean id="userDaomSql" class="dao.UserDaoMysqlImpl"&gt;&lt;/bean&gt;    &lt;bean id=<span class="hljs-string">"userServiceImpl"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"service.UserServiceImp"</span>&gt;        &lt;!--ref引用spring中已经创建很好的对象--&gt;        &lt;!--value是一个具体的值,基本数据类型--&gt;        &lt;property name=<span class="hljs-string">"userDao"</span> ref=<span class="hljs-string">"userDaomSql"</span>/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre></div><p>第一个module改良后测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle0;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> service.UserServiceImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest0</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(<span class="hljs-string">"userServiceImpl"</span>);userServiceImpl.getUser();}}</code></pre></div><p><strong>总结：</strong></p><p>所有的类都要装配的beans.xml 里面；</p><p>所有的bean 都要通过容器去取；</p><p>容器里面取得的bean，拿出来就是一个对象，用对象调用方法即可；</p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><ol><li>使用无参构造创建对象，默认。</li><li>使用有参构造（如下）</li></ol><p>下标赋值</p><p>index指的是有参构造中参数的下标，下标从0开始;</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>类型赋值（不建议使用）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"kuang"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>直接通过参数名（掌握）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"kuang"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 比如参数名是name，则有name="具体值" --&gt;</span></code></pre></div><p>注册bean之后就对象的初始化了（<strong>类似 new 类名()</strong>）</p><p>弹幕评论：</p><p>name方式还需要无参构造和set方法,index和type只需要有参构造</p><p>就算是new 两个对象，也是只有一个实例（<strong>单例模式：全局唯一</strong>）</p><div class="hljs"><pre><code class="hljs java">User user = (User) context.getBean(<span class="hljs-string">"user"</span>);User user2 = (User) context.getBean(<span class="hljs-string">"user"</span>);system.out.println(user == user2)<span class="hljs-comment">//结果为true</span></code></pre></div><p>总结：在配置文件加载的时候，容器(&lt; bean&gt;)中管理的对象就已经初始化了</p><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"userLove"</span>/&gt;</span><span class="hljs-comment">&lt;!-- 使用时</span><span class="hljs-comment">User user2 = (User) context.getBean("userLove");</span><span class="hljs-comment">--&gt;</span></code></pre></div><h3 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--id：bean的唯一标识符，也就是相当于我们学的对象名</span><span class="hljs-comment">class：bean对象所对应的会限定名：包名+类型</span><span class="hljs-comment">name：也是别名，而且name可以同时取多个别名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"u1 u2,u3;u4"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 使用时</span><span class="hljs-comment">User user2 = (User) context.getBean("u1");</span><span class="hljs-comment">--&gt;</span></code></pre></div><h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>import一般用于团队开发使用，它可以将多个配置文件，导入合并为一个</p><p>假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要注册在不同的bean中，我们可以利<br>用import将所有人的beans.xml合并为一个总的！</p><ul><li><p>张三(beans.xm1)</p></li><li><p>李四(beans2.xm1)</p></li><li><p>王五(beans3.xm1)</p></li><li><p>applicationContext.xml</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans.xm1"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans2.xml"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans3.xm1"</span>/&gt;</span></code></pre></div></li></ul><p><strong>使用的时候，直接使用总的配置就可以了</strong></p><p>弹幕评论：</p><p>按照在总的xml中的导入顺序来进行创建，后导入的会重写先导入的，最终实例化的对象会是后导入xml中的那个</p><h2 id="6、依赖注入（DI）"><a href="#6、依赖注入（DI）" class="headerlink" title="6、依赖注入（DI）"></a>6、依赖注入（DI）</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><p>第4点有提到</p><h3 id="6-2、set方式注入【重点】"><a href="#6-2、set方式注入【重点】" class="headerlink" title="6.2、set方式注入【重点】"></a>6.2、set方式注入【重点】</h3><p>依赖注入：set注入！</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul><p>【环境搭建】</p><ol><li><p>复杂类型</p><p> Address类</p></li><li><p>真实测试对象</p><p> Student类</p></li><li><p>beans.xml</p></li><li><p>测试</p><p> MyTest3</p></li></ol><p>Student类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-meta">@Get</span><span class="hljs-meta">@Set</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<span class="hljs-comment">//别忘了写get和set方法（用lombok注解也行）</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Address address;    <span class="hljs-keyword">private</span> String[] books;    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; card;    <span class="hljs-keyword">private</span> Set&lt;String&gt; game;    <span class="hljs-keyword">private</span> Properties infor;    <span class="hljs-keyword">private</span> String wife;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Student{"</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", address="</span> + address.toString() +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", books="</span> + Arrays.toString(books) +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", hobbies="</span> + hobbies +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", card="</span> + card +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", game="</span> + game +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", infor="</span> + infor +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", wife='"</span> + wife + <span class="hljs-string">'\''</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>Address类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>{    <span class="hljs-keyword">private</span> String address;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> address;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>{        <span class="hljs-keyword">this</span>.address = address;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Address{"</span> +                <span class="hljs-string">"address='"</span> + address + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>beans.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Address"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"address你好"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Student"</span>&gt;</span><span class="hljs-comment">&lt;!--第一种，普通值注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"name你好"</span> /&gt;</span><span class="hljs-comment">&lt;!--第二种，ref注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"address"</span> /&gt;</span><span class="hljs-comment">&lt;!--数组注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"books"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--list列表注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobbies"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--map键值对注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"card"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--set(可去重)注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"game"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>wangzhe<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lol<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>galname<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--空指针null注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"wife"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--properties常量注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"infor"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"id"</span>&gt;</span>20200802<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"name"</span>&gt;</span>cbh<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>MyTest3</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> pojo.Student;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest3</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);Student stu = (Student) context.getBean(<span class="hljs-string">"student"</span>);System.out.println(stu.toString());}}</code></pre></div><h3 id="6-3、拓展注入"><a href="#6-3、拓展注入" class="headerlink" title="6.3、拓展注入"></a>6.3、拓展注入</h3><p>官方文档位置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDI3MTcyMTYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802142717216"></p><p>pojo增加User类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{        }<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">super</span>();<span class="hljs-keyword">this</span>.name = name;<span class="hljs-keyword">this</span>.id = id;}<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> name;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<span class="hljs-keyword">this</span>.name = name;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> id;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">this</span>.id = id;}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"User [name="</span> + name + <span class="hljs-string">", id="</span> + id + <span class="hljs-string">"]"</span>;}}</code></pre></div><p>注意： beans 里面加上这下面两行</p><p>使用p和c命名空间需要导入xml约束</p><p>xmlns:p=“<a href="http://www.springframework.org/schema/p”" target="_blank" rel="noopener">http://www.springframework.org/schema/p”</a><br>xmlns:c=“<a href="http://www.springframework.org/schema/c”" target="_blank" rel="noopener">http://www.springframework.org/schema/c”</a></p><div class="hljs"><pre><code class="hljs xml">?xml version="1.0" encoding="UTF-8"?&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--p命名空间注入/set注入，可以直接注入属性的值-》property--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">p:id</span>=<span class="hljs-string">"20"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--c命名空间，通过构造器注入，需要写入有参和无参构造方法-》construct-args--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cbh"</span> <span class="hljs-attr">c:id</span>=<span class="hljs-string">"22"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java">ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);User user = context.getBean(<span class="hljs-string">"user"</span>,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//确定class对象，就不用再强转了</span>System.out.println(user.toString());</code></pre></div><h3 id="6-4、Bean作用域"><a href="#6-4、Bean作用域" class="headerlink" title="6.4、Bean作用域"></a>6.4、Bean作用域</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM0MDExNjUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143401165"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDMzNDI1ODYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143342586"></p><ol><li><p>单例模式（默认）</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"singleton"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM4MDIwMDUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143802005"><br>弹幕评论：单例模式是把对象放在pool中，需要再取出来，使用的都是同一个对象实例</p><ol><li><p>原型模式: 每次从容器中get的时候，都产生一个新对象！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM4MjYyMjcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143826227"></p><ol><li>其余的request、session、application这些只能在web开放中使用！</li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找，并自动给bean装配属性</li></ul><p>在Spring中有三种装配的方式</p><ol><li><p>在xml中显示配置</p></li><li><p>在java中显示配置</p></li><li><p>隐式的自动装配bean 【重要】</p></li><li><p>环境搭建：一个人有两个宠物</p></li><li><p>byType自动装配：byType会自动查找，和自己对象set方法参数的类型相同的bean</p><p> 保证所有的class唯一(类为全局唯一)</p></li><li><p>byName自动装配：byName会自动查找，和自己对象set对应的值对应的id</p><p> 保证所有id唯一，并且和set注入的值一致</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 找不到id和多个相同class --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span>找不到 id=cat，且有两个Cat</code></pre></div></li></ol><h3 id="7-1测试：自动装配"><a href="#7-1测试：自动装配" class="headerlink" title="7.1测试：自动装配"></a>7.1测试：自动装配</h3><p>pojo的Cat类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shut</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"miao"</span>);    }}</code></pre></div><p>pojo的Dog类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shut</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"wow"</span>);    }}</code></pre></div><p>pojo的People类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{        <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> cat;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCat</span><span class="hljs-params">(Cat cat)</span> </span>{        <span class="hljs-keyword">this</span>.cat = cat;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> dog;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDog</span><span class="hljs-params">(Dog dog)</span> </span>{        <span class="hljs-keyword">this</span>.dog = dog;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +                <span class="hljs-string">"cat="</span> + cat +                <span class="hljs-string">", dog="</span> + dog +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>xml配置 -&gt; byType 自动装配</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Dog"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--byType会在容器自动查找，和自己对象属性相同的bean</span><span class="hljs-comment">例如，Dog dog; 那么就会查找pojo的Dog类，再进行自动装配</span><span class="hljs-comment">--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.People"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cbh"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>xml配置 -&gt; byName 自动装配</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Dog"</span>/&gt;</span><span class="hljs-comment">&lt;!--byname会在容器自动查找，和自己对象set方法的set后面的值对应的id</span><span class="hljs-comment">  例如:setDog()，取set后面的字符作为id，则要id = dog 才可以进行自动装配</span><span class="hljs-comment">  </span><span class="hljs-comment"> --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.People"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cbh"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>弹幕评论：byName只能取到小写，大写取不到</p><h3 id="7-2、使用注解实现自动装配"><a href="#7-2、使用注解实现自动装配" class="headerlink" title="7.2、使用注解实现自动装配"></a>7.2、使用注解实现自动装配</h3><p>jdk1.5支持的注解，spring2.5支持的注解</p><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.（翻译：基于注释的配置的引入提出了一个问题，即这种方法是否比XML“更好”）</p><ol><li>导入context约束</li></ol><p><strong>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context"</a></strong></p><ol><li>配置注解的支持：&lt; context:annotation-config/&gt;</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h4 id="7-2-1、-Autowired"><a href="#7-2-1、-Autowired" class="headerlink" title="7.2.1、@Autowired"></a>7.2.1、@Autowired</h4><p><strong>默认是byType方式，如果匹配不上，就会byName</strong></p><p>在属性上个使用，也可以在set上使用</p><p>我们可以不用编写set方法了，前提是自动装配的属性在Spring容器里，且要符合ByName 自动装配</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><blockquote><p>@Nullable 字段标记了这个注解，说明该字段可以为空</p><p>public name(@Nullable String name){</p><p>}</p></blockquote><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//源码</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Autowired { <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>; }</code></pre></div><p>如果定义了Autowire的require属性为false，说明这个对象可以为null，否则不允许为空（false表示找不到装配，不抛出异常）</p><h4 id="7-2-2、-Autowired-Qualifier"><a href="#7-2-2、-Autowired-Qualifier" class="headerlink" title="7.2.2、@Autowired+@Qualifier"></a>7.2.2、@Autowired+@Qualifier</h4><p><strong>@Autowired不能唯一装配时，需要@Autowired+@Qualifier</strong></p><p>如果@Autowired自动装配环境比较复杂。自动装配无法通过一个注解完成的时候，可以使用@Qualifier(value = “dog”)去配合使用，指定一个唯一的id对象</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier</span>(value = <span class="hljs-string">"dog"</span>)    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><p>弹幕评论：</p><p>如果xml文件中同一个对象被多个bean使用，Autowired无法按类型找到，可以用@Qualifier指定id查找</p><h4 id="7-2-3、-Resource"><a href="#7-2-3、-Resource" class="headerlink" title="7.2.3、@Resource"></a>7.2.3、@Resource</h4><p><strong>默认是byName方式，如果匹配不上，就会byType</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    Resource(name=<span class="hljs-string">"cat"</span>)    <span class="hljs-keyword">private</span> Cat cat;    Resource(name=<span class="hljs-string">"dog"</span>)    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><p>弹幕评论：</p><p>Autowired是byType，@Autowired+@Qualifier = byType || byName</p><p>Autowired是先byteType,如果唯一則注入，否则byName查找。resource是先byname,不符合再继续byType</p><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>@Resource和@Autowired的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】</li><li>@Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li><li>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byname的方式实现</li></ul><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在spring4之后，使用注解开发，必须要保证aop包的导入<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIyMDE5MjQ0OTAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802201924490"><br>使用注解需要导入contex的约束</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="8-1、bean"><a href="#8-1、bean" class="headerlink" title="8.1、bean"></a>8.1、bean</h3><p>弹幕评论：<br>有了&lt; context:component-scan&gt;，另一个&lt; context:annotation-config/&gt;标签可以移除掉，因为已经被包含进去了。</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定要扫描的包，这个包下面的注解才会生效</span><span class="hljs-comment">别只扫一个com.kuang.pojo包--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>1234//@Component 组件//等价于<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">classs</span>"<span class="hljs-attr">pojo.User</span>"/&gt;</span> @Componentpublic class User {       public String name ="秦疆";}</code></pre></div><h3 id="8-2、属性如何注入-value"><a href="#8-2、属性如何注入-value" class="headerlink" title="8.2、属性如何注入@value"></a>8.2、属性如何注入@value</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{     <span class="hljs-comment">//相当于&lt;property name="name" value="kuangshen"/&gt; </span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)     <span class="hljs-keyword">public</span> String name;         <span class="hljs-comment">//也可以放在set方法上面</span>    <span class="hljs-comment">//@value("kuangshen")</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{         <span class="hljs-keyword">this</span>.name = name;     }}</code></pre></div><h3 id="8-3、衍生的注解"><a href="#8-3、衍生的注解" class="headerlink" title="8.3、衍生的注解"></a>8.3、衍生的注解</h3><p>@Component有几个衍生注解，会按照web开发中，mvc架构中分层。</p><ul><li>dao （@Repository）</li><li>service（@Service）</li><li>controller（@Controller）</li></ul><p><strong>这四个注解的功能是一样的，都是代表将某个类注册到容器中</strong></p><h3 id="8-4、自动装配置"><a href="#8-4、自动装配置" class="headerlink" title="8.4、自动装配置"></a>8.4、自动装配置</h3><p>@Autowired：默认是byType方式，如果匹配不上，就会byName</p><p>@Nullable：字段标记了这个注解，说明该字段可以为空</p><p>@Resource：默认是byName方式，如果匹配不上，就会byType</p><h3 id="8-5、作用域-scope"><a href="#8-5、作用域-scope" class="headerlink" title="8.5、作用域@scope"></a>8.5、作用域@scope</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//原型模式prototype，单例模式singleton</span><span class="hljs-comment">//scope("prototype")相当于&lt;bean scope="prototype"&gt;&lt;/bean&gt;</span><span class="hljs-meta">@Component</span> <span class="hljs-meta">@scope</span>(<span class="hljs-string">"prototype"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{         <span class="hljs-comment">//相当于&lt;property name="name" value="kuangshen"/&gt; </span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)     <span class="hljs-keyword">public</span> String name;         <span class="hljs-comment">//也可以放在set方法上面</span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{         <span class="hljs-keyword">this</span>.name = name;     }}</code></pre></div><h3 id="8-6、小结"><a href="#8-6、小结" class="headerlink" title="8.6、小结"></a>8.6、小结</h3><p><strong>xml与注解：</strong></p><ul><li>xml更加万能，维护简单，适用于任何场合</li><li>注解，不是自己的类使用不了，维护复杂</li></ul><p><strong>最佳实践：</strong></p><ul><li>xml用来管理bean</li><li>注解只用来完成属性的注入</li><li>要开启注解支持</li></ul><h2 id="9、使用Java的方式配置Spring"><a href="#9、使用Java的方式配置Spring" class="headerlink" title="9、使用Java的方式配置Spring"></a>9、使用Java的方式配置Spring</h2><p>不使用Spring的xml配置，完全交给java来做！</p><p>Spring的一个子项目，在spring4之后，，，它成为了核心功能</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIyMTU3NTI4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802215752868"><br><strong>实体类：pojo的User.java</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这里这个注解的意思,就是说明这个类被Spring接管了,注册到了容器中 </span><span class="hljs-meta">@component</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{     <span class="hljs-keyword">private</span> String name;        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{     <span class="hljs-keyword">return</span> name;     }     <span class="hljs-comment">//属性注入值</span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"QINJIANG')  </span><span class="hljs-string">    public void setName(String name) { </span><span class="hljs-string">    this.name = name; </span><span class="hljs-string">    } </span><span class="hljs-string">    @Override </span><span class="hljs-string">    public String toString() { </span><span class="hljs-string">        return "</span>user{<span class="hljs-string">" + </span><span class="hljs-string">        "</span>name=<span class="hljs-string">'" + name + '</span>\<span class="hljs-string">''</span>+         <span class="hljs-string">'}'</span>;     } }</code></pre></div><p>弹幕评论：要么使用@Bean，要么使用@Component和ComponentScan，两种效果一样</p><p><strong>配置文件：config中的kuang.java</strong></p><p>@Import(KuangConfig2.class)，用@import来包含KuangConfig2.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这个也会Spring容器托管,注册到容器中,因为他本米就是一个@Component </span><span class="hljs-comment">// @Configuration表这是一个配置类,就像我们之前看的beans.xml，类似于&lt;beans&gt;标签</span><span class="hljs-meta">@Configuration</span> <span class="hljs-meta">@componentScan</span>(<span class="hljs-string">"com.Kuang.pojo"</span>) <span class="hljs-comment">//开启扫描</span><span class="hljs-comment">//@Import(KuangConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KuangConfig</span> </span>{     <span class="hljs-comment">//注册一个bean , 就相当于我们之前写的一个bean 标签 </span>    <span class="hljs-comment">//这个方法的名字,就相当于bean 标签中的 id 属性 -&gt;getUser</span>    <span class="hljs-comment">//这个方法的返同值,就相当于bean 标签中的class 属性 -&gt;User</span>        <span class="hljs-comment">//@Bean </span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//就是返回要注入到bean的对象! </span>    } }</code></pre></div><p>弹幕评论：ComponentScan、@Component(“pojo”) 这两个注解配合使用</p><p><strong>测试类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[ ] args)</span> </span>{     <span class="hljs-comment">//如果完全使用了配置类方式去做,我们就只能通过 Annotationconfig 上下文来获取容器,通过配置类的class对象加载! </span>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.Class); <span class="hljs-comment">//class对象</span>    User getUser =(User)context.getBean( <span class="hljs-string">"getUser"</span>); <span class="hljs-comment">//方法名getUser</span>    System.out.Println(getUser.getName());     } }</code></pre></div><p><strong>会创建两个相同对象问题的说明：</strong></p><p><strong>弹幕总结 - -&gt; @Bean是相当于&lt; bean&gt;标签创建的对象，而我们之前学的@Component是通过spring自动创建的这个被注解声明的对象，所以这里相当于有两个User对象被创建了。一个是bean标签创建的（@Bean），一个是通过扫描然后使用@Component，spring自动创建的User对象，所以这里去掉@Bean这些东西，然后开启扫描。之后在User头上用@Component即可达到spring自动创建User对象了</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这个也会Spring容器托管,注册到容器中,因为他本米就是一个@Component </span><span class="hljs-comment">// @Configuration表这是一个配置类,就像我们之前看的beans.xml，类似于&lt;beans&gt;标签</span><span class="hljs-meta">@Configuration</span> <span class="hljs-meta">@componentScan</span>(<span class="hljs-string">"com.Kuang.pojo"</span>) <span class="hljs-comment">//开启扫描</span><span class="hljs-comment">//@Import(KuangConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KuangConfig</span> </span>{     <span class="hljs-comment">//注册一个bean , 就相当于我们之前写的一个bean 标签 </span>    <span class="hljs-comment">//这个方法的名字,就相当于bean 标签中的 id 属性 -&gt;getUser</span>    <span class="hljs-comment">//这个方法的返同值,就相当于bean 标签中的class 属性 -&gt;User</span>        <span class="hljs-comment">//@Bean </span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//就是返回要注入到bean的对象! </span>    } }</code></pre></div><p>弹幕评论：ComponentScan、@Component(“pojo”) 这两个注解配合使用</p><p><strong>测试类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[ ] args)</span> </span>{     <span class="hljs-comment">//如果完全使用了配置类方式去做,我们就只能通过 Annotationconfig 上下文来获取容器,通过配置类的class对象加载! </span>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.Class); <span class="hljs-comment">//class对象</span>    User getUser =(User)context.getBean( <span class="hljs-string">"getUser"</span>); <span class="hljs-comment">//方法名getUser</span>    System.out.Println(getUser.getName());     } }</code></pre></div><p><strong>会创建两个相同对象问题的说明：</strong></p><p><strong>弹幕总结 - -&gt; @Bean是相当于&lt; bean&gt;标签创建的对象，而我们之前学的@Component是通过spring自动创建的这个被注解声明的对象，所以这里相当于有两个User对象被创建了。一个是bean标签创建的（@Bean），一个是通过扫描然后使用@Component，spring自动创建的User对象，所以这里去掉@Bean这些东西，然后开启扫描。之后在User头上用@Component即可达到spring自动创建User对象了</strong></p><h2 id="10、动态代理"><a href="#10、动态代理" class="headerlink" title="10、动态代理"></a>10、动态代理</h2><p>代理模式是SpringAOP的底层</p><p>分类：动态代理和静态代理</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE0Mjc4NDYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803101427846"></p><h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE2MjE4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803101621868"><br>代码步骤：</p><p>1、接口</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Host</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>2、真实角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HostMaster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Host</span></span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"房东要出租房子"</span>);}}</code></pre></div><p>3、代理角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> </span>{<span class="hljs-keyword">public</span> Host host;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>{}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>{<span class="hljs-keyword">super</span>();<span class="hljs-keyword">this</span>.host = host;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{seeHouse();host.rent();fee();sign();}<span class="hljs-comment">//看房</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"看房子"</span>);}<span class="hljs-comment">//收费</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"收中介费"</span>);}<span class="hljs-comment">//合同</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sign</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"签合同"</span>);}}</code></pre></div><p>4、客户端访问代理角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle4_proxy;<span class="hljs-keyword">import</span> pojo.Host;<span class="hljs-keyword">import</span> pojo.HostMaster;<span class="hljs-keyword">import</span> pojo.Proxy;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//房东要出租房子</span>Host host = <span class="hljs-keyword">new</span> HostMaster();<span class="hljs-comment">//中介帮房东出租房子，但也收取一定费用（增加一些房东不做的操作）</span>Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<span class="hljs-comment">//看不到房东，但通过代理，还是租到了房子</span>proxy.rent();}}</code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDUyMjk0NzgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803105229478"><br>代码翻倍：几十个真实角色就得写几十个代理</p><p>AOP横向开发</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMTE1Mzk2MjEucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803111539621"></p><h3 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h3><p>动态代理和静态角色一样，动态代理底层是反射机制</p><p>动态代理类是动态生成的，不是我们直接写好的！</p><p>动态代理(两大类)：基于接口，基于类</p><ul><li>基于接口：JDK的动态代理【使用ing】</li><li>基于类：cglib</li><li>java字节码实现：javasisit</li></ul><p>了解两个类<br>1、Proxy：代理<br>2、InvocationHandler：调用处理程序<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMTI2MTk4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803112619868"></p><p>实例：</p><p>接口 Host.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Host</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>接口Host实现类 HostMaster.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//接口实现类</span><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HostMaster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Host</span></span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"房东要租房子"</span>);}}</code></pre></div><p>代理角色的处理程序类 ProxyInvocationHandler.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-comment">///用这个类，自动生成代理</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{<span class="hljs-comment">// Foo f =(Foo) Proxy.NewProxyInstance(Foo. Class.GetClassLoader(),</span><span class="hljs-comment">// new Class&lt;?&gt;[] { Foo.Class },</span><span class="hljs-comment">// handler);</span><span class="hljs-comment">// 被代理的接口</span><span class="hljs-keyword">public</span> HostMaster hostMaster ;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHostMaster</span><span class="hljs-params">(HostMaster hostMaster)</span> </span>{<span class="hljs-keyword">this</span>.hostMaster = hostMaster;}<span class="hljs-comment">// 得到生成的代理类 </span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">// newProxyInstance() -&gt; 生成代理对象，就不用再写具体的代理类了</span><span class="hljs-comment">// this.getClass().getClassLoader() -&gt; 找到加载类的位置</span><span class="hljs-comment">// hostMaster.getClass().getInterfaces() -&gt; 代理的具体接口</span><span class="hljs-comment">// this -&gt; 代表了接口InvocationHandler的实现类ProxyInvocationHandler</span><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), hostMaster.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);<span class="hljs-comment">// 处理代理实例并返回结果</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{seeHouse();<span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现的</span>        <span class="hljs-comment">// invoke()执行它真正要执行的方法</span>Object result = method.invoke(hostMaster, args);fee();<span class="hljs-keyword">return</span> result;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"看房子"</span>);}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"收中介费"</span>);}}</code></pre></div><p>用户类 My2.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle4_proxy;<span class="hljs-keyword">import</span> pojo2.Host;<span class="hljs-keyword">import</span> pojo2.Host2;<span class="hljs-keyword">import</span> pojo2.HostMaster;<span class="hljs-keyword">import</span> pojo2.ProxyInvocationHandler;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My2</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//真实角色</span>HostMaster hostMaster = <span class="hljs-keyword">new</span> HostMaster();        <span class="hljs-comment">//代理角色，现在没有；用代理角色的处理程序来实现Host接口的调用</span>ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();                <span class="hljs-comment">//pih -&gt; HostMaster接口类 -&gt; Host接口</span>pih.setHostMaster(hostMaster);        <span class="hljs-comment">//获取newProxyInstance动态生成代理类</span>Host proxy = (Host) pih.getProxy();proxy.rent();}}</code></pre></div><p>弹幕评论：<br>什么时候调用invoke方法的?<br>代理实例调用方法时invoke方法就会被调用，可以debug试试</p><p>改为<strong>万能代理类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">///用这个类，自动生代理</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{<span class="hljs-comment">// 被代理的接口</span><span class="hljs-keyword">public</span> Object target;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>{<span class="hljs-keyword">this</span>.target = target;}<span class="hljs-comment">// 得到生成的代理类 -&gt; 固定的代码</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);}<span class="hljs-comment">// 处理代理实例并返回结果</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{<span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现的</span><span class="hljs-comment">// invoke()执行它真正要执行的方法</span>Object result = method.invoke(target, args);<span class="hljs-keyword">return</span> result;}}</code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzMwMzU0ODQlMjAtJTIwJUU1JThBJUE4JUU2JTgwJTgxJUU0JUJCJUEzJUU3JTkwJTg2LnBuZw?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803133035484"></p><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzQ1MDIxNjklMjAtJTIwQU9QLnBuZw?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803134502169"></p><h3 id="11-2、AOP在Spring中的使用"><a href="#11-2、AOP在Spring中的使用" class="headerlink" title="11.2、AOP在Spring中的使用"></a>11.2、AOP在Spring中的使用</h3><p>提供声明式事务，允许用户自定义切面</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等…</li><li>切面(Aspect)：横切关注点 被模块化的特殊对象。即，它是一个类。（Log类）</li><li>通知(Advice)：切面必须要完成的工作。即，它是类中的一个方法。（Log类中的方法）</li><li>目标(Target)：被通知对象。（生成的代理类)</li><li>代理(Proxy)：向目标对象应用通知之后创建的对象。（生成的代理类）</li><li>切入点(PointCut)：切面通知执行的”地点”的定义。（最后两点：在哪个地方执行，比如：method.invoke()）</li><li>连接点(JointPoint)：与切入点匹配的执行点。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxNTQwNDM5MDkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803154043909"><br>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzU5Mzc0MzUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803135937435"><br><strong>即AOP在不改变原有代码的情况下，去增加新的功能。</strong>（代理）</p><h3 id="11-3、使用Spring实现AOP"><a href="#11-3、使用Spring实现AOP" class="headerlink" title="11.3、使用Spring实现AOP"></a>11.3、使用Spring实现AOP</h3><p>导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h4 id="11-3-1、方法一：使用原生spring接口"><a href="#11-3-1、方法一：使用原生spring接口" class="headerlink" title="11.3.1、方法一：使用原生spring接口"></a>11.3.1、方法一：使用原生spring接口</h4><p>springAPI接口实现</p><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.Log"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.AfterLog"</span>/&gt;</span><span class="hljs-comment">&lt;!--方式一，使用原生Spring API接口--&gt;</span>    <span class="hljs-comment">&lt;!--配置aop,还需要导入aop约束--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--切入点：expression:表达式，execution（要执行的位置）--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--UserServiceImpl.*(..) -》 UserServiceImpl类下的所以方法(参数)--&gt;</span>        <span class="hljs-comment">&lt;!--执行环绕增加--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 环绕,在id="pointcut"的前后切入 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>execution(返回类型，类名，方法名(参数)) -&gt; execution(* com.service.<em>,</em>(…))</p><p>UserService.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>UserService 的实现类 UserServiceImp.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"add增"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"delete删"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"update改"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"query查"</span>);    }}</code></pre></div><p>前置Log.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>{    <span class="hljs-comment">//method：要执行的目标对象的方法</span>    <span class="hljs-comment">//args：参数</span>    <span class="hljs-comment">//target：目标对象</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        System.out.println(target.getClass().getName()+<span class="hljs-string">"的"</span>+method.getName()+<span class="hljs-string">"被执行了"</span>);    }}</code></pre></div><p>后置AfterLog.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> org.springframework.aop.AfterReturningAdvice;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>{    <span class="hljs-comment">//returnVaule: 返回值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>{    System.out.println(<span class="hljs-string">"执行了"</span>+method.getName()+<span class="hljs-string">"方法，返回值是"</span>+returnValue);    }}</code></pre></div><p>测试类MyTest5</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> service.UserService;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><h4 id="11-3-2、方法二：自定义类实现AOP"><a href="#11-3-2、方法二：自定义类实现AOP" class="headerlink" title="11.3.2、方法二：自定义类实现AOP"></a>11.3.2、方法二：自定义类实现AOP</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>   <span class="hljs-comment">&lt;!--注册bean--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.Log"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.AfterLog"</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 方式二，自定义 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"diy.DiyPointcut"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>       <span class="hljs-comment">&lt;!--自定义切面--&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"diy"</span>&gt;</span>           <span class="hljs-comment">&lt;!--切入点--&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"point"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>/&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> diy;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcut</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"插入到前面"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"插入到后面"</span>);    }}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><h4 id="11-3-3、方法三：使用注解实现"><a href="#11-3-3、方法三：使用注解实现" class="headerlink" title="11.3.3、方法三：使用注解实现"></a>11.3.3、方法三：使用注解实现</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 注册 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--方式三，使用注解实现--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diyAnnotation"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"diy.DiyAnnotation"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 开启自动代理 </span><span class="hljs-comment">实现方式：默认JDK (proxy-targer-class="fasle")</span><span class="hljs-comment">     cgbin (proxy-targer-class="true")--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>DiyAnnotation.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> diy;<span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//标注这个类是一个切面</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyAnnotation</span> </span>{    <span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"=====方法执行前====="</span>);    }    <span class="hljs-meta">@After</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"=====方法执行后====="</span>);    }    <span class="hljs-comment">//在环绕增强中，我们可以给地暖管一个参数，代表我们要获取切入的点</span>    <span class="hljs-meta">@Around</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        System.out.println(<span class="hljs-string">"环绕前"</span>);        Object proceed = joinPoint.proceed();        System.out.println(<span class="hljs-string">"环绕后"</span>);    }}</code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><p>输出结果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxNzU2NDIwNjQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803175642064"></p><h2 id="12、整合mybatis"><a href="#12、整合mybatis" class="headerlink" title="12、整合mybatis"></a>12、整合mybatis</h2><p>mybatis-spring官网：<a href="https://mybatis.org/spring/zh/" target="_blank" rel="noopener">https://mybatis.org/spring/zh/</a></p><p><strong>mybatis的配置流程：</strong></p><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写Mapper.xmi</li><li>测试</li></ol><h3 id="12-1、mybatis-spring-方式一"><a href="#12-1、mybatis-spring-方式一" class="headerlink" title="12.1、mybatis-spring-方式一"></a>12.1、mybatis-spring-方式一</h3><ol><li>编写数据源配置</li><li>sqISessionFactory</li><li>sqISessionTemplate（相当于sqISession）</li><li>需要给接口加实现类【new】</li><li>将自己写的实现类，注入到Spring中</li><li>测试！</li></ol><p>先导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span><span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDQxMjMyMTA1NjAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="文件路径"><br><strong>编写顺序：</strong><br><strong>User -&gt; UserMapper -&gt; UserMapper.xml -&gt; spring-dao.xml -&gt; UserServiceImpl -&gt; applicationContext.xml -&gt; MyTest6</strong></p><p><strong>代码步骤：</strong></p><p>pojo实体类 User</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> String pwd;}</code></pre></div><p>mapper目录下的 UserMapper、UserMapperImpl、UserMapper.xml</p><p>接口UserMapper</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>UserMapperImpl</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>{<span class="hljs-comment">//我们的所有操作，在原来都使用sqlSession来执行，现在都使用SqlSessionTemplate；</span><span class="hljs-keyword">private</span> SqlSessionTemplate sqlSessionTemplate;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSessionTemplate</span><span class="hljs-params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>{<span class="hljs-keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;}<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{UserMapper mapper = sqlSessionTemplate.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-keyword">return</span> mapper.getUser();}}</code></pre></div><p>UserMapper.xml （狂神给面子才留下来的）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>        <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"mapper.UserMapper"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>select * from mybatis.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>resource目录下的 mybatis-config.xml、spring-dao.xml、applicationContext.xml</p><p>mybatis-config.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--开启日志--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><span class="hljs-comment">&lt;!--可以给实体类起别名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pojo"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>spring-dao.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--DataSource:使用Spring的数帮源替换Mybatis的配置 其他数据源：c3p0、dbcp、druid </span><span class="hljs-comment">这使用Spring提供的JDBC: org.springframework.jdbc.datasource --&gt;</span><span class="hljs-comment">&lt;!--data source --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"datasource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- sqlSessionTemplate 就是之前使用的：sqlsession --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 只能使用构造器注入sqlSessionFactory 原因：它没有set方法--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 导入spring-dao.xml --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mapper.UserMapperImpl"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionTemplate"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSession"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> mapper.UserMapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest6</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><h3 id="12-2、mybatis-spring-方式二"><a href="#12-2、mybatis-spring-方式二" class="headerlink" title="12.2、mybatis-spring-方式二"></a>12.2、mybatis-spring-方式二</h3><p>UserServiceImpl2</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">//继承SqlSessionDaoSupport 类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{        SqlSession sqlSession = getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> mapper.getUser();        <span class="hljs-comment">//或者一句话：return getSqlSession().getMapper(UserMapper.class).getUser();</span>    }}</code></pre></div><p>spring-dao.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--DataSource:使用Spring的数帮源替换Mybatis的配置 c3p0 dbcp druid </span><span class="hljs-comment">这使用Spring提供的JDBC: org.springframework.jdbc.datasource --&gt;</span><span class="hljs-comment">&lt;!--data source --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"datasource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 方法二：SqlSessionTemplate 可以不写了--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span> /&gt;</span><span class="hljs-comment">&lt;!-- 方法二 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mapper.UserMapperImpl2"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest6</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper2"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><h2 id="13-声明式事务"><a href="#13-声明式事务" class="headerlink" title="13. 声明式事务"></a>13. 声明式事务</h2><ul><li>把一组业务当成一个业务来做；要么都成功，要么都失败！</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题</li><li>确保完整性和一致性</li></ul><p>事务的ACID原则：<br>1、原子性<br>2、隔离性<br>3、一致性<br>4、持久性</p><p>ACID参考文章：<a href="https://www.cnblogs.com/malaikuangren/archive/2012/04/06/2434760.html" target="_blank" rel="noopener">https://www.cnblogs.com/malaikuangren/archive/2012/04/06/2434760.html</a></p><p>Spring中的事务管理</p><ul><li>声明式事务：AOP</li><li>编程式事务：需要再代码中，进行事务管理</li></ul><p><strong>声明式事务</strong></p><p>先导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span><span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p><strong>代码步骤：</strong></p><p>pojo实体类 User</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> String pwd;}</code></pre></div><p>mapper目录下的 UserMapper、UserMapperImpl、UserMapper.xml</p><p>接口UserMapper</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>; }</code></pre></div><p>UserMapperImpl</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>,<span class="hljs-string">"你好"</span>,<span class="hljs-string">"ok"</span>);    insertUser(user);    delUser(<span class="hljs-number">5</span>);        SqlSession sqlSession = getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> mapper.getUser();        <span class="hljs-comment">//或者return  getSqlSession().getMapper(UserMapper.class).getUser();</span>    }    <span class="hljs-comment">//插入</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span> </span>{<span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">insertUser</span>(<span class="hljs-title">user</span>)</span>;}<span class="hljs-comment">//删除</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">delUser</span>(<span class="hljs-title">id</span>)</span>;}}</code></pre></div><p>UserMapper.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>        <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"mapper.UserMapper"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>select * from mybatis.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insertUser"</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"pojo.User"</span> &gt;</span>insert into  mybatis.mybatis (id,name,pwd) values (#{id},#{name},#{pwd})<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"delUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"_int"</span>&gt;</span>deleteAAAAA from mybatis.mybatis where id = #{id}<span class="hljs-comment">&lt;!-- deleteAAAAA是故意写错的 --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>resource目录下的 mybatis-config.xml、spring-dao.xml、applicationContext.xml</p><p>mybatis-config.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-comment">&lt;!-- configuration --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--开启日志--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pojo"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>spring-dao.xml（已导入约束）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--data source --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"datasource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--声明式事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合aop实现事务织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的通知类--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span>        <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>        <span class="hljs-comment">&lt;!--新东西：配置事务的传播特性 propagation--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"add"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"delete"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"update"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span>            <span class="hljs-comment">&lt;!-- *号包含上面4个方法：</span><span class="hljs-comment">            &lt;tx:method name="*" propagation="REQUIRED"/&gt; --&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置事务切入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txpointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* mapper.*.*(..))"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"txpointcut"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mapper.UserMapperImpl"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> mapper.UserMapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest7</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><p><strong>思考：</strong><br>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况下；</li><li>如果不在spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目的开发中非常重要，涉及到数据的一致性和完整性问题！</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1WE411d7Dv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1WE411d7Dv&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】SpringMVC笔记存档</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91SpringMVC%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91SpringMVC%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/</id>
    <published>2020-08-27T05:52:05.512Z</published>
    <updated>2020-08-27T05:55:24.264Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV1aE41167Tu" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aE41167Tu</a></p><a id="more"></a><hr><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>ssm: mybatis + Spring + SpringMVC MVC三层架构</p><p>JavaSE:认真学习, 老师带，入门快<br>JavaWeb:认真学习,老师带,入门快<br>SSM框架:研究官方文档，锻炼自学能力，锻炼笔记能力，锻炼项目能力</p><p>SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p><p>SSM = JavaWeb做项目;</p><p>Spring: IOC和APO</p><p>SpringMVC: SpringMVC的执行流程!</p><p>SpringMVC : SSM框架整合!</p><p>Spring</p><p>MVC:模型(dao, service) 视图 (jsp)控制器 (Servlet)<br>dao<br>service<br>servlet :转发，重定向<br>jsp/html</p><p>前端数据传输实体类</p><p>实体类:用户名，密码，生日，爱好，… 20个</p><p>前端:用户名密码</p><p>pojo: User<br>vo: UserVo<br>dto:</p><p><strong>JSP:本质就是一个Servlet</strong></p><p>假设:你的项目的架构，是设计好的，还是演进的?</p><ul><li>Alibaba PHP</li><li>随着用户大， Java</li><li>王坚去 IOE MySQL</li><li>MySQL : MySQL–&gt; AliSQL. AliRedis</li><li>Allinone –微服务</li></ul><p>MVC :</p><p>MWM: M V VM ViewModel :双向绑定</p><h2 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h2><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331221325100-1165356814.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1-1、Model1时代"><a href="#1-1、Model1时代" class="headerlink" title="1.1、Model1时代"></a>1.1、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331221347503-978638377.png" srcset="/blog/img/loading.gif" alt="img"></p><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h3 id="1-2、Model2时代"><a href="#1-2、Model2时代" class="headerlink" title="1.2、Model2时代"></a>1.2、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331221406483-639584230.png" srcset="/blog/img/loading.gif" alt="img"></p><p>用户发请求</p><ol><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-3、回顾Servlet"><a href="#1-3、回顾Servlet" class="headerlink" title="1.3、回顾Servlet"></a>1.3、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！ pom依赖！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div></li><li><p>编写一个Servlet类，用来处理用户的请求</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<span class="hljs-comment">//实现Servlet接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{        <span class="hljs-comment">//取得参数</span>        String method = req.getParameter(<span class="hljs-string">"method"</span>);        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">"add"</span>)){            req.getSession().setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"执行了add方法"</span>);        }        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">"delete"</span>)){            req.getSession().setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"执行了delete方法"</span>);        }        <span class="hljs-comment">//业务逻辑</span>        <span class="hljs-comment">//视图跳转</span>        req.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/hello.jsp"</span>).forward(req,resp);    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{        doGet(req,resp);    }}</code></pre></div></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>在web.xml中注册Servlet</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/user<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li><li><p>配置Tomcat，并启动测试</p><ul><li>localhost:8080/user?method=add</li><li>localhost:8080/user?method=delete</li></ul></li><li><p>访问结果</p><p> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331212910583-2051430940.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222018441-1850931217.png" srcset="/blog/img/loading.gif" alt="img"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p>Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p><h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>Spring的web框架围绕DispatcherServlet设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222037711-828417064.png" srcset="/blog/img/loading.gif" alt="img"></p><p>SpringMVC的原理如下图所示：</p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222109176-906298972.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h3><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222126131-219513987.png" srcset="/blog/img/loading.gif" alt="img"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul><li>我们假设请求的url为 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/SpringMVC/hello</li><li><strong>如上url拆分成三部分：</strong></li><li><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080服务器域名</li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li></ul></li><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><p>在这里先听一遍原理，不理解没有关系，我们马上来写一个对应的代码实现大家就明白了，如果不明白，那就写10遍，没有笨人，只有懒人！</p><h2 id="3、HelloSpringMVC-配置版"><a href="#3、HelloSpringMVC-配置版" class="headerlink" title="3、HelloSpringMVC(配置版)"></a>3、HelloSpringMVC(配置版)</h2><ol><li><p>新建一个Moudle ， 添加web的支持！</p></li><li><p>确定导入了SpringMVC 的依赖！</p></li><li><p>配置web.xml ， 注册DispatcherServlet</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>    <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li><li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml说明，这里的名称要求是按照官方来的</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div></li><li><p>添加 处理映射器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></code></pre></div></li><li><p>添加 处理器适配器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></code></pre></div></li><li><p>添加 视图解析器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"InternalResourceViewResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!--前缀--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--后缀--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li><li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-comment">//注意：这里我们先导入Controller接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//ModelAndView 模型和视图</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span>        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"HelloSpringMVC1!，我是成博"</span>);        <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span>        mv.setViewName(<span class="hljs-string">"hello"</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> mv;    }    }</code></pre></div></li><li><p>将自己的类交给SpringIOC容器，注册bean</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"/hello"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.controller.HelloController"</span>/&gt;</span></code></pre></div></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>配置Tomcat 启动测试！</p></li></ol><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222531691-1302265141.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li><p>查看控制台输出，看一下是不是缺少了什么jar包。</p></li><li><p>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！（与classes同级目录）</p><p> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331212956858-1274463802.png" srcset="/blog/img/loading.gif" alt="img"></p></li><li><p>重启Tomcat 即可解决！</p></li></ol><p>小结：看这个估计大部分同学都能理解其中的原理了，但是我们实际开发才不会这么写，不然就疯了，还学这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓，到底有多么简单，看这个图就知道了。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331223102129-1564021137.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="4、使用注解开发SpringMVC（注解版）"><a href="#4、使用注解开发SpringMVC（注解版）" class="headerlink" title="4、使用注解开发SpringMVC（注解版）"></a>4、使用注解开发SpringMVC（注解版）</h2><p><strong>第一步:新建一个Moudle , 添加web支持！</strong>建立包结构 com.kuang.controller</p><p><strong>第二步:由于Maven可能存在资源过滤的问题，我们将配置完善</strong></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p><strong>第三步:在pom.xml文件引入相关的依赖</strong>：<br>主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p><strong>第四步:配置web.xml</strong></p><p>注意点：</p><ul><li><p>注意web.xml版本问题，要最新版！</p></li><li><p>注册DispatcherServlet</p></li><li><p>关联SpringMVC的配置文件</p></li><li><p>启动级别为1</p></li><li><p>映射路径为 / 【不要用/*，会404】</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div>  <div class="hljs"><pre><code class="hljs java">/ 和 <span class="hljs-comment">/* 的区别：</span><span class="hljs-comment">&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；</span><span class="hljs-comment">即：.jsp 不会进入spring的 DispatcherServlet类 。</span><span class="hljs-comment">&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，</span><span class="hljs-comment">会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</span></code></pre></div></li></ul><p><strong>第五步:添加Spring MVC配置文件</strong></p><ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    支持mvc注解驱动</span><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><span class="hljs-comment">        要想使@RequestMapping注解生效</span><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><span class="hljs-comment">     --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p><strong>第六步:创建Controller</strong></p><p>编写一个Java控制类： com.kuang.controller.HelloController , 注意编码规范</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/HelloController"</span>)<span class="hljs-comment">//多添加一级访问</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>{    <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-comment">//请求路径</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span> </span>{        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello,SpringMVC，我是成博"</span>);        <span class="hljs-comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    }}</code></pre></div><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul><p><strong>第七步:创建视图层</strong></p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象；</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;SpringMVC&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div><p><strong>第八步:配置Tomcat运行</strong></p><p>配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213100620-1365283722.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>OK，运行成功！</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h2 id="5、Controller-及-RestFul风格"><a href="#5、Controller-及-RestFul风格" class="headerlink" title="5、Controller 及 RestFul风格"></a>5、Controller 及 RestFul风格</h2><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><p>我们来看看有哪些方式可以实现：</p><h3 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-comment">//处理请求且返回一个模型与视图对象</span>    <span class="hljs-function">ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> Exception</span>;}</code></pre></div><p><strong>测试</strong></p><ol><li><p>新建一个Moudle，springmvc-04-controller 。 将刚才的03 拷贝一份, 我们进行操作！</p><ul><li>删掉HelloController</li><li>mvc的配置文件只留下 视图解析器！</li></ul></li><li><p>编写一个Controller类，ControllerTest1</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器</span><span class="hljs-comment">//注意点：不要导错包，实现Controller接口，重写方法；</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"Test1Controller"</span>);        mv.setViewName(<span class="hljs-string">"test"</span>);        <span class="hljs-keyword">return</span> mv;    }}</code></pre></div></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"/t1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.controller.ControllerTest1"</span>/&gt;</span></code></pre></div></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p></li></ol><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213134363-472773058.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>说明：</strong></p><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span></code></pre></div></li><li><p>增加一个ControllerTest2类，使用注解实现；</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><span class="hljs-comment">//代表这个类会被Spring按管</span><span class="hljs-comment">//被这个注解的类，中的所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析;</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span></span>{    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>{        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"ControllerTest2"</span>);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }}</code></pre></div></li><li><p>运行tomcat测试</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213150942-1828421815.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p>注解方式是平时使用的最多的方式！除了这两种之外还有其他的方式，大家想要自己研究的话，可以参考我的博客：<a href="https://www.cnblogs.com/hellokuangshen/p/11270742.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellokuangshen/p/11270742.html</a></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/h1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }}</code></pre></div><p>  访问路径：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080 / 项目名 / h1</p></li><li><p>同时注解类与方法</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/h1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }}</code></pre></div><p>  访问路径：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080 / 项目名/ admin /h1 , 需要先指定类的路径再指定方法的路径；</p></li></ul><h2 id="6、RestFul-风格-简洁，高效，安全"><a href="#6、RestFul-风格-简洁，高效，安全" class="headerlink" title="6、RestFul 风格(简洁，高效，安全)"></a>6、RestFul 风格(简洁，高效，安全)</h2><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><ul><li>资源：互联网所有的事物都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应 添加、 删除、修改、查询。</li></ul><p><strong>传统方式操作资源</strong> ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><ul><li><a href="http://127.0.0.1/item/queryItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</li><li><a href="http://127.0.0.1/item/saveItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/saveItem.action</a> 新增,POST</li><li><a href="http://127.0.0.1/item/updateItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/updateItem.action</a> 更新,POST</li><li><a href="http://127.0.0.1/item/deleteItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</li></ul><p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><ul><li><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 查询,GET</li><li><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 新增,POST</li><li><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 更新,PUT</li><li><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 删除,DELETE</li></ul><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>{}</code></pre></div></li><li><p>在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>{    <span class="hljs-comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span>    <span class="hljs-comment">//RestFul :  http://localhost : 8080/add/1/2</span>        <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/commit/{p1}/{p2}"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> p1, @PathVariable <span class="hljs-keyword">int</span> p2, Model model)</span></span>{                <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果："</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;            }    }</code></pre></div></li><li><p>我们来测试请求查看下<br> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213217087-619232504.png" srcset="/blog/img/loading.gif" alt="img"></p></li><li><p>思考：使用路径变量的好处？</p><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214609681-1237588624.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/commit/{p1}/{p2}"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> p1, @PathVariable String p2, Model model)</span></span>{    String result = p1+p2;    <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果："</span>+result);    <span class="hljs-comment">//返回视图位置</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div><p> <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214657561-1298821776.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/hello"</span>,method = {RequestMethod.POST})<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>{    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello!"</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：<br>  <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214714976-802588010.png" srcset="/blog/img/loading.gif" alt="img"></p></li><li><p>如果将POST修改为GET则正常了；</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是Get请求</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/hello"</span>,method = {RequestMethod.GET})<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>{    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello!"</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div><p>  <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214737681-664600385.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ul><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个： 组合注解</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><span class="hljs-meta">@PostMapping</span><span class="hljs-meta">@PutMapping</span><span class="hljs-meta">@DeleteMapping</span><span class="hljs-meta">@PatchMapping</span></code></pre></div><p>@GetMapping 是一个组合注解</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>{    <span class="hljs-comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span>    <span class="hljs-comment">//RestFul :  http://localhost : 8080/add/1/2</span>    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-comment">//@RequestMapping(value = "/commit/{p1}/{p2}",method = RequestMethod.GET)</span>    <span class="hljs-comment">//@GetMapping("/commit/{p1}/{p2}")</span>    <span class="hljs-meta">@GetMapping</span>(path = <span class="hljs-string">"/commit/{p1}/{p2}"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> p1, @PathVariable <span class="hljs-keyword">int</span> p2, Model model)</span></span>{                <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果："</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;      }    }</code></pre></div><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213251638-969968192.png" srcset="/blog/img/loading.gif" alt="img"></p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><p>平时使用的会比较多！</p><h3 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h3><p>场景一：<em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p><p>场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p><p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214504256-745544113.png" srcset="/blog/img/loading.gif" alt="img"></p><p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p><h2 id="7、SpringMVC：结果跳转三种方式-转发、重定向"><a href="#7、SpringMVC：结果跳转三种方式-转发、重定向" class="headerlink" title="7、SpringMVC：结果跳转三种方式(转发、重定向)"></a>7、SpringMVC：结果跳转三种方式(转发、重定向)</h2><h3 id="7-1、ModelAndView"><a href="#7-1、ModelAndView" class="headerlink" title="7.1、ModelAndView"></a>7.1、ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>对应的controller类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"ControllerTest1"</span>);        mv.setViewName(<span class="hljs-string">"test"</span>);        <span class="hljs-keyword">return</span> mv;    }}</code></pre></div><h3 id="7-2、ServletAPI"><a href="#7-2、ServletAPI" class="headerlink" title="7.2、ServletAPI"></a>7.2、ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p><ol><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultGo</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/result/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>{        rsp.getWriter().println(<span class="hljs-string">"Hello,Spring BY servlet API"</span>);    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/result/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>{        rsp.sendRedirect(<span class="hljs-string">"/index.jsp"</span>);    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/result/t3"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//转发</span>        req.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"/result/t3"</span>);        req.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/test.jsp"</span>).forward(req,rsp);    }}</code></pre></div><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213355173-975224060.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="7-3、SpringMVC"><a href="#7-3、SpringMVC" class="headerlink" title="7.3、SpringMVC"></a>7.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//转发</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/index.jsp"</span>;    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//转发二</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"forward:/index.jsp"</span>;    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm/t3"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//重定向</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;    }}</code></pre></div><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC2</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm2/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//转发</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm2/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//重定向</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;        <span class="hljs-comment">//return "redirect:hello.do"; //hello.do为另一个请求/</span>    }}</code></pre></div><h2 id="8、数据处理（接收请求参数及数据回显）"><a href="#8、数据处理（接收请求参数及数据回显）" class="headerlink" title="8、数据处理（接收请求参数及数据回显）"></a>8、数据处理（接收请求参数及数据回显）</h2><h3 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/hello?name=kuangshen</p><p>处理方法 :</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span></span>{    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p>后台输出 : kuangshen</p><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/hello?username=kuangshen</p><p>处理方法 :</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam("username") : username提交的域的名称 .</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String name)</span>{    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p>后台输出 :</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213420413-895694643.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><ol><li><p>实体类</p> <div class="hljs"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-comment">//构造</span>    <span class="hljs-comment">//get/set</span>    <span class="hljs-comment">//tostring()</span>}</code></pre></div></li><li><p>提交数据 : <a href="http://localhost:8080/user?name=kuangshen&amp;id=1&amp;age=15" target="_blank" rel="noopener">http://localhost:8080/user?name=kuangshen&amp;id=1&amp;age=15</a></p></li><li><p>处理方法 :</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">(User user)</span></span>{    System.out.println(user);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p> 后台输出 : User { id=1, name=’kuangshen’, age=15 }</p></li></ol><p><strong>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</strong></p><h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p><p>我们前面一直都是如此 . 就不过多解释</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"ControllerTest1"</span>);        mv.setViewName(<span class="hljs-string">"test"</span>);        <span class="hljs-keyword">return</span> mv;    }}</code></pre></div><p><strong>第二种 : 通过ModelMap</strong></p><p>ModelMap</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String name, ModelMap model)</span>{    <span class="hljs-comment">//封装要显示到视图中的数据</span>    <span class="hljs-comment">//相当于req.setAttribute("name",name);</span>    model.addAttribute(<span class="hljs-string">"name"</span>,name);    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p><strong>第三种 : 通过Model</strong></p><p>Model</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/ct2/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String name, Model model)</span>{    <span class="hljs-comment">//封装要显示到视图中的数据</span>    <span class="hljs-comment">//相当于req.setAttribute("name",name);</span>    model.addAttribute(<span class="hljs-string">"msg"</span>,name);    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>就对于新手而言简单来说使用区别就是：</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-attr">Model</span> <span class="hljs-string">只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><span class="hljs-attr">ModelMap</span> <span class="hljs-string">继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><span class="hljs-attr">ModelAndView</span> <span class="hljs-string">可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span></code></pre></div><p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p><h2 id="9、数据处理（乱码问题）"><a href="#9、数据处理（乱码问题）" class="headerlink" title="9、数据处理（乱码问题）"></a>9、数据处理（乱码问题）</h2><p>测试步骤：</p><ol><li><p>我们可以在首页编写一个提交的表单</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/e/t"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div></li><li><p>后台编写对应的处理类</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Encoding</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/e/t"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model,String name)</span></span>{        model.addAttribute(<span class="hljs-string">"msg"</span>,name); <span class="hljs-comment">//获取表单提交的值</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>; <span class="hljs-comment">//跳转到test页面显示输入的值</span>    }}</code></pre></div></li><li><p>输入中文测试，发现乱码<br> <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200402193540997-1854631524.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2.配置SpringMVC的乱码过滤--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre></div><p>有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><ol><li><p>修改tomcat配置文件 ： 设置编码！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">"utf-8"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8080"</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"HTTP/1.1"</span></span><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">"20000"</span></span><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">"8443"</span> /&gt;</span></code></pre></div></li><li><p>自定义过滤器</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.filter;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 解决get和post请求 全部乱码的过滤器</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>{    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>{    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{        <span class="hljs-comment">//处理response的字符编码</span>        HttpServletResponse myResponse=(HttpServletResponse) response;        myResponse.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);        <span class="hljs-comment">// 转型为与协议相关对象</span>        HttpServletRequest httpServletRequest = (HttpServletRequest) request;        <span class="hljs-comment">// 对request包装增强</span>        HttpServletRequest myrequest = <span class="hljs-keyword">new</span> MyRequest(httpServletRequest);        chain.doFilter(myrequest, response);    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>{    }}<span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>{    <span class="hljs-keyword">private</span> HttpServletRequest request;    <span class="hljs-comment">//是否编码的标记</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasEncode;    <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>{        <span class="hljs-keyword">super</span>(request);<span class="hljs-comment">// super必须写</span>        <span class="hljs-keyword">this</span>.request = request;    }    <span class="hljs-comment">// 对需要增强方法 进行覆盖</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getParameterMap</span><span class="hljs-params">()</span> </span>{        <span class="hljs-comment">// 先获得请求方式</span>        String method = request.getMethod();        <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">"post"</span>)) {            <span class="hljs-comment">// post请求</span>            <span class="hljs-keyword">try</span> {                <span class="hljs-comment">// 处理post乱码</span>                request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);                <span class="hljs-keyword">return</span> request.getParameterMap();            } <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) {                e.printStackTrace();            }        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">"get"</span>)) {            <span class="hljs-comment">// get请求</span>            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();            <span class="hljs-keyword">if</span> (!hasEncode) { <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span>                <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) {                    String[] values = parameterMap.get(parameterName);                    <span class="hljs-keyword">if</span> (values != <span class="hljs-keyword">null</span>) {                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) {                            <span class="hljs-keyword">try</span> {                                <span class="hljs-comment">// 处理get乱码</span>                                values[i] = <span class="hljs-keyword">new</span> String(values[i]                                        .getBytes(<span class="hljs-string">"ISO-8859-1"</span>), <span class="hljs-string">"utf-8"</span>);                            } <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) {                                e.printStackTrace();                            }                        }                    }                }                hasEncode = <span class="hljs-keyword">true</span>;            }            <span class="hljs-keyword">return</span> parameterMap;        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParameterMap();    }    <span class="hljs-comment">//取一个值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(String name)</span> </span>{        Map&lt;String, String[]&gt; parameterMap = getParameterMap();        String[] values = parameterMap.get(name);        <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span>) {            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        }        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span>    }    <span class="hljs-comment">//取所有值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String[] getParameterValues(String name) {        Map&lt;String, String[]&gt; parameterMap = getParameterMap();        String[] values = parameterMap.get(name);        <span class="hljs-keyword">return</span> values;    }}</code></pre></div></li></ol><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h2 id="10、JSON讲解"><a href="#10、JSON讲解" class="headerlink" title="10、JSON讲解"></a>10、JSON讲解</h2><h3 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><div class="hljs"><pre><code class="hljs json">{<span class="hljs-attr">"name"</span>: <span class="hljs-string">"QinJiang"</span>}{<span class="hljs-attr">"age"</span>: <span class="hljs-string">"3"</span>}{<span class="hljs-attr">"sex"</span>: <span class="hljs-string">"男"</span>}</code></pre></div><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><ul><li><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>  <div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">'Hello'</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">'World'</span>}; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "Hello", "b": "World"}'</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span></code></pre></div></li></ul><p><strong>JSON 和 JavaScript 对象互转</strong></p><ul><li><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>  <div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">'{"a": "Hello", "b": "World"}'</span>); <span class="hljs-comment">//结果是 {a: 'Hello', b: 'World'}</span></code></pre></div></li><li><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>  <div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify({<span class="hljs-attr">a</span>: <span class="hljs-string">'Hello'</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">'World'</span>});<span class="hljs-comment">//结果是 '{"a": "Hello", "b": "World"}'</span></code></pre></div></li></ul><p><strong>代码测试</strong></p><ol><li><p>新建一个module ，springmvc-05-json ， 添加web的支持</p></li><li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON_秦疆<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="actionscript"><span class="hljs-comment">//编写一个js的对象</span></span><span class="actionscript"><span class="hljs-keyword">var</span> user = {</span><span class="actionscript"> name:<span class="hljs-string">"成博"</span>,</span> age:3,<span class="actionscript"> sex:<span class="hljs-string">"男"</span></span>};<span class="actionscript"><span class="hljs-comment">//将js对象转换成json字符串</span></span><span class="javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(user);</span><span class="javascript"><span class="hljs-built_in">console</span>.log(str);</span><span class="actionscript"><span class="hljs-comment">//将json字符串转换为js对象</span></span><span class="javascript"><span class="hljs-keyword">var</span> user2 = <span class="hljs-built_in">JSON</span>.parse(str);</span><span class="javascript"><span class="hljs-built_in">console</span>.log(user2.age,user2.name,user2.sex);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>在IDEA中使用浏览器打开，查看控制台输出！</p><p> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213612113-1624858159.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><h3 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h3><h3 id="1-jackson"><a href="#1-jackson" class="headerlink" title="1.jackson"></a>1.jackson</h3><ul><li><p>Jackson应该是目前比较好的json解析工具了</p></li><li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p></li><li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div></li><li><p>配置SpringMVC需要的配置<br>  <strong>web.xml</strong></p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li></ul><p><strong>springmvc-servlet.xml</strong></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><ul><li><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-comment">//需要导入lombok</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> String sex;    }</code></pre></div></li><li><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p></li></ul><p>编写一个Controller；</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json1"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//创建一个对象</span>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str = mapper.writeValueAsString(user);        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>        <span class="hljs-keyword">return</span> str;    }}</code></pre></div><ul><li>配置Tomcat ， 启动测试一下！</li></ul><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/json1</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213642133-500236017.png" srcset="/blog/img/loading.gif" alt="img"></p><ul><li><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p></li><li><p>通过@RequestMaping的produces属性来实现，修改下代码</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/json1"</span>,produces = <span class="hljs-string">"application/json;charset=utf-8"</span>)</code></pre></div></li><li><p>再次测试， <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/json1 ， 乱码问题OK！</p><p>  <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213702188-1592450222.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ul><p>【注意：使用json记得处理乱码问题】</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><div class="hljs"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--JSON乱码问题配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">"true"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"objectMapper"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"failOnEmptyBeans"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span></code></pre></div><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-comment">//produces:指定响应体返回类型和编码</span>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/json1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//创建一个对象</span>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str = mapper.writeValueAsString(user);        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>        <span class="hljs-keyword">return</span> str;    }}</code></pre></div><p>启动tomcat测试，结果都正常输出！</p><h3 id="测试集合输出"><a href="#测试集合输出" class="headerlink" title="测试集合输出"></a>测试集合输出</h3><p>增加一个新的方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json2"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//创建一个对象</span>    User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆4号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();    list.add(user1);    list.add(user2);    list.add(user3);    list.add(user4);    <span class="hljs-comment">//将我们的对象解析成为json格式</span>    String str = mapper.writeValueAsString(list);    <span class="hljs-keyword">return</span> str;}</code></pre></div><p>运行结果 : 十分完美，没有任何问题！</p><h3 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h3><p>增加一个新的方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json3"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//创建时间一个对象，java.util.Date</span>    Date date = <span class="hljs-keyword">new</span> Date();    <span class="hljs-comment">//将我们的对象解析成为json格式</span>    String str = mapper.writeValueAsString(date);    <span class="hljs-keyword">return</span> str;}</code></pre></div><p>运行结果 :</p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json4"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//不使用时间戳的方式</span>    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">//自定义日期格式对象</span>    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);    <span class="hljs-comment">//指定日期格式</span>    mapper.setDateFormat(sdf);    Date date = <span class="hljs-keyword">new</span> Date();    String str = mapper.writeValueAsString(date);    <span class="hljs-keyword">return</span> str;}</code></pre></div><p>运行结果 : 成功的输出了时间！</p><p><strong><em>时间戳格式化，老手艺不能丢</em></strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json6"</span>)  <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{      ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();      Date date = <span class="hljs-keyword">new</span> Date();      <span class="hljs-comment">//自定义日期的格式</span>      SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);      <span class="hljs-comment">// objectMapper,时间解析后的默认格式为: Timestamp, 时间裁</span>      <span class="hljs-keyword">return</span> mapper.writeValueAsString(sdf.format(date));  }</code></pre></div><h3 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h3><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.utils;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>{        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>{        <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object,String dateFormat)</span> </span>{        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//不使用时间差的方式</span>        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);        <span class="hljs-comment">//自定义日期格式对象</span>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);        <span class="hljs-comment">//指定日期格式</span>        mapper.setDateFormat(sdf);        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);        } <span class="hljs-keyword">catch</span> (JsonProcessingException e) {            e.printStackTrace();        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }}</code></pre></div><p>我们使用工具类，代码就更加简洁了！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json5"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    Date date = <span class="hljs-keyword">new</span> Date();    String json = JsonUtils.getJson(date);    <span class="hljs-keyword">return</span> json;}</code></pre></div><p>大工告成！完美！</p><h3 id="2-FastJson"><a href="#2-FastJson" class="headerlink" title="2.FastJson"></a>2.FastJson</h3><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>fastjson 三个主要的类：</p><ul><li>【JSONObject 代表 json 对象 】<ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li>【JSONArray 代表 json 对象数组】<ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li>【JSON 代表 JSONObject和JSONArray的转化】<ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">import</span> com.kuang.pojo.User;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonDemo</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//创建一个对象</span>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆4号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();        list.add(user1);        list.add(user2);        list.add(user3);        list.add(user4);        System.out.println(<span class="hljs-string">"*******Java对象 转 JSON字符串*******"</span>);        String str1 = JSON.toJSONString(list);        System.out.println(<span class="hljs-string">"JSON.toJSONString(list)==&gt;"</span>+str1);        String str2 = JSON.toJSONString(user1);        System.out.println(<span class="hljs-string">"JSON.toJSONString(user1)==&gt;"</span>+str2);        System.out.println(<span class="hljs-string">"\n****** JSON字符串 转 Java对象*******"</span>);        User jp_user1=JSON.parseObject(str2,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        System.out.println(<span class="hljs-string">"JSON.parseObject(str2,User.class)==&gt;"</span>+jp_user1);        System.out.println(<span class="hljs-string">"\n****** Java对象 转 JSON对象 ******"</span>);        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);        System.out.println(<span class="hljs-string">"(JSONObject) JSON.toJSON(user2)==&gt;"</span>+jsonObject1.getString(<span class="hljs-string">"name"</span>));        System.out.println(<span class="hljs-string">"\n****** JSON对象 转 Java对象 ******"</span>);        User to_java_user = JSON.toJavaObject(jsonObject1, User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        System.out.println(<span class="hljs-string">"JSON.toJavaObject(jsonObject1, User.class)==&gt;"</span>+to_java_user);    }}</code></pre></div><p>例题：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json8"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{        <span class="hljs-comment">//创建一个对象</span>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆4号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();        list.add(user1);        list.add(user2);        list.add(user3);        list.add(user4);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str1 = JSON.toJSONString(list);        <span class="hljs-keyword">return</span> str1;    }</code></pre></div><p>测试：</p><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/json8</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213729633-854108693.png" srcset="/blog/img/loading.gif" alt="img"></p><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p><h2 id="11、Ajax技术"><a href="#11、Ajax技术" class="headerlink" title="11、Ajax技术"></a>11、Ajax技术</h2><h3 id="11-1、AJAX初体验"><a href="#11-1、AJAX初体验" class="headerlink" title="11.1、AJAX初体验"></a>11.1、AJAX初体验</h3><p>异步可理解为局部刷新，同步指需要按部就班地完成一整套流程</p><ul><li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li><li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li><li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</li><li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li><li>就和国内百度的搜索框一样：<br>  <img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3986165583.png" srcset="/blog/img/loading.gif" alt="1570200763067.png"></li><li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li><li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li></ul><h3 id="伪造Ajax"><a href="#伪造Ajax" class="headerlink" title="伪造Ajax"></a>伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。 iframe标签</p><ol><li><p>新建一个module ： sspringmvc-06-ajax ， 导入web支持！</p></li><li><p>编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>kuangshen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><span class="javascript"> <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><span class="javascript"> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'currentTime'</span>).innerText = myDate.getTime();</span>};<span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LoadPage</span><span class="hljs-params">()</span></span>{</span><span class="javascript"> <span class="hljs-keyword">var</span> targetUrl =  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'url'</span>).value;</span><span class="javascript"> <span class="hljs-built_in">console</span>.log(targetUrl);</span><span class="javascript"> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"iframePosition"</span>).src = targetUrl;</span>}<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入要加载的地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"currentTime"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"https://www.baidu.com/"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"LoadPage()"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载页面位置：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"iframePosition"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%;height: 500px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>使用IDEA开浏览器测试一下！</p></li></ol><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><ul><li>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</li><li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery 不是生产者，而是大自然搬运工。</li><li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><div class="hljs"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jQuery.ajax(...)</span><span class="hljs-keyword"> </span>      部分参数：              url：请求地址             type：请求方式，GET、POST（<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>之后用method）          headers：请求头             data：要发送的数据      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">"application/x-www-form-urlencoded; charset=UTF-8"</span>)            async：是否异步          timeout：设置请求超时时间（毫秒）       <span class="hljs-keyword">beforeSend：发送请求前执行的函数(全局)</span><span class="hljs-keyword"> </span>        complete：完成之后执行的回调函数(全局)          success：成功之后执行的回调函数(全局)            error：失败之后执行的回调函数(全局)          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型         dataType：将服务器端返回的数据转换成指定类型            <span class="hljs-string">"xml"</span>: 将服务器端返回的内容转换成xml格式           <span class="hljs-string">"text"</span>: 将服务器端返回的内容转换成普通文本格式           <span class="hljs-string">"html"</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含<span class="hljs-keyword">JavaScript标签，则会尝试去执行。</span><span class="hljs-keyword"> </span>        <span class="hljs-string">"script"</span>: 尝试将返回值当作<span class="hljs-keyword">JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><span class="hljs-keyword"> </span>          <span class="hljs-string">"json"</span>: 将服务器端返回的内容转换成相应的<span class="hljs-keyword">JavaScript对象</span><span class="hljs-keyword"> </span>         <span class="hljs-string">"jsonp"</span>: <span class="hljs-keyword">JSONP </span>格式使用 <span class="hljs-keyword">JSONP </span>形式调用函数时，如 <span class="hljs-string">"myurl?callback=?"</span> <span class="hljs-keyword">jQuery </span>将自动替换 ? 为正确的函数名，以执行回调函数</code></pre></div><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><ol><li><p>配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div></li><li><p>编写一个AjaxController</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/a1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>{        <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.equals(name)){            response.getWriter().print(<span class="hljs-string">"true"</span>);        }<span class="hljs-keyword">else</span>{            response.getWriter().print(<span class="hljs-string">"false"</span>);        }    }}</code></pre></div></li><li><p>导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div></li><li><p>编写index.jsp测试</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;    &lt;%--&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;--%&gt;    &lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        <span class="hljs-function">function <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>{            $.post({                url:<span class="hljs-string">"${pageContext.request.contextPath}/a1"</span>,                data:{<span class="hljs-string">'name'</span>:$(<span class="hljs-string">"#txtName"</span>).val()},                success:function (data,status) {                    alert(data);                    alert(status);                }            });        }    &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;%--onblur：失去焦点触发事件--%&gt;  用户名:&lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"txtName"</span> onblur=<span class="hljs-string">"a1()"</span>/&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>启动tomcat测试！ 打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p></li></ol><hr><h3 id="11-2、AJAX异步加载数据"><a href="#11-2、AJAX异步加载数据" class="headerlink" title="11.2、AJAX异步加载数据"></a>11.2、AJAX异步加载数据</h3><h3 id="Springmvc实现"><a href="#Springmvc实现" class="headerlink" title="Springmvc实现"></a>Springmvc实现</h3><p>实体类user</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> String sex;}</code></pre></div><p>我们来获取一个集合对象，展示到前端页面</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/a2"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">ajax2</span><span class="hljs-params">()</span></span>{    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>,<span class="hljs-number">3</span>,<span class="hljs-string">"男"</span>));    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>,<span class="hljs-number">3</span>,<span class="hljs-string">"男"</span>));    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>,<span class="hljs-number">3</span>,<span class="hljs-string">"男"</span>));    <span class="hljs-keyword">return</span> list; <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span>}</code></pre></div><p>前端页面</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=<span class="hljs-string">"button"</span> id=<span class="hljs-string">"btn"</span> value=<span class="hljs-string">"获取数据"</span>/&gt;&lt;table width=<span class="hljs-string">"80%"</span> align=<span class="hljs-string">"center"</span>&gt;    &lt;tr&gt;        &lt;td&gt;姓名&lt;/td&gt;        &lt;td&gt;年龄&lt;/td&gt;        &lt;td&gt;性别&lt;/td&gt;    &lt;/tr&gt;    &lt;tbody id=<span class="hljs-string">"content"</span>&gt;    &lt;/tbody&gt;&lt;/table&gt;&lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;&lt;script&gt;    $(function () {        $(<span class="hljs-string">"#btn"</span>).click(function () {            $.post(<span class="hljs-string">"${pageContext.request.contextPath}/a2"</span>,function (data) {                console.log(data)                <span class="hljs-keyword">var</span> html=<span class="hljs-string">""</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) {                    html+= <span class="hljs-string">"&lt;tr&gt;"</span> +                        <span class="hljs-string">"&lt;td&gt;"</span> + data[i].name + <span class="hljs-string">"&lt;/td&gt;"</span> +                        <span class="hljs-string">"&lt;td&gt;"</span> + data[i].age + <span class="hljs-string">"&lt;/td&gt;"</span> +                        <span class="hljs-string">"&lt;td&gt;"</span> + data[i].sex + <span class="hljs-string">"&lt;/td&gt;"</span> +                        <span class="hljs-string">"&lt;/tr&gt;"</span>                }                $(<span class="hljs-string">"#content"</span>).html(html);            });        })    })&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><h3 id="11-3、AJAX验证用户名体验"><a href="#11-3、AJAX验证用户名体验" class="headerlink" title="11.3、AJAX验证用户名体验"></a>11.3、AJAX验证用户名体验</h3><h3 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h3><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/a3"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name,String pwd)</span></span>{    String msg = <span class="hljs-string">""</span>;    <span class="hljs-comment">//模拟数据库中存在数据</span>    <span class="hljs-keyword">if</span> (name!=<span class="hljs-keyword">null</span>){        <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.equals(name)){            msg = <span class="hljs-string">"OK"</span>;        }<span class="hljs-keyword">else</span> {            msg = <span class="hljs-string">"用户名输入错误"</span>;        }    }    <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-keyword">null</span>){        <span class="hljs-keyword">if</span> (<span class="hljs-string">"123456"</span>.equals(pwd)){            msg = <span class="hljs-string">"OK"</span>;        }<span class="hljs-keyword">else</span> {            msg = <span class="hljs-string">"密码输入有误"</span>;        }    }    <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span>}</code></pre></div><p>前端页面 login.jsp</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;ajax&lt;/title&gt;    &lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        <span class="hljs-function">function <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>{            $.post({                url:<span class="hljs-string">"${pageContext.request.contextPath}/a3"</span>,                data:{<span class="hljs-string">'name'</span>:$(<span class="hljs-string">"#name"</span>).val()},                success:function (data) {                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">'OK'</span>){                        $(<span class="hljs-string">"#userInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"green"</span>);                    }<span class="hljs-keyword">else</span> {                        $(<span class="hljs-string">"#userInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"red"</span>);                    }                    $(<span class="hljs-string">"#userInfo"</span>).html(data);                }            });        }        <span class="hljs-function">function <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>{            $.post({                url:<span class="hljs-string">"${pageContext.request.contextPath}/a3"</span>,                data:{<span class="hljs-string">'pwd'</span>:$(<span class="hljs-string">"#pwd"</span>).val()},                success:function (data) {                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">'OK'</span>){                        $(<span class="hljs-string">"#pwdInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"green"</span>);                    }<span class="hljs-keyword">else</span> {                        $(<span class="hljs-string">"#pwdInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"red"</span>);                    }                    $(<span class="hljs-string">"#pwdInfo"</span>).html(data);                }            });        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;    用户名:&lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"name"</span> onblur=<span class="hljs-string">"a1()"</span>/&gt;    &lt;span id="userInfo"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    密码:&lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"pwd"</span> onblur=<span class="hljs-string">"a2()"</span>/&gt;    &lt;span id="pwdInfo"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3300712039.png" srcset="/blog/img/loading.gif" alt="1570203565381.png"></p><h3 id="11-4、补充，自己看看"><a href="#11-4、补充，自己看看" class="headerlink" title="11.4、补充，自己看看"></a>11.4、补充，自己看看</h3><h3 id="获取baidu接口Demo"><a href="#获取baidu接口Demo" class="headerlink" title="获取baidu接口Demo"></a>获取baidu接口Demo</h3><div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE HTML&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=utf-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSONP百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">        <span class="hljs-selector-id">#q</span>{</span>            width: 500px;            height: 30px;<span class="css">            <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ddd</span>;</span>            line-height: 30px;            display: block;            margin: 0 auto;            padding: 0 10px;            font-size: 14px;        }<span class="css">        <span class="hljs-selector-id">#ul</span>{</span>            width: 520px;            list-style: none;            margin: 0 auto;            padding: 0;<span class="css">            <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ddd</span>;</span>            margin-top: -1px;            display: none;        }<span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span>{</span>            line-height: 30px;            padding: 0 10px;        }<span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>{</span><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#f60</span>;</span><span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>        }    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-comment">// 2.步骤二</span></span><span class="actionscript">        <span class="hljs-comment">// 定义demo函数 (分析接口、数据)</span></span><span class="actionscript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span><span class="hljs-params">(data)</span></span>{</span><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'ul'</span>);</span><span class="actionscript">            <span class="hljs-keyword">var</span> html = <span class="hljs-string">''</span>;</span><span class="actionscript">            <span class="hljs-comment">// 如果搜索数据存在 把内容添加进去</span></span>            if (data.s.length) {<span class="actionscript">                <span class="hljs-comment">// 隐藏掉的ul显示出来</span></span><span class="actionscript">                Ul.style.display = <span class="hljs-string">'block'</span>;</span><span class="actionscript">                <span class="hljs-comment">// 搜索到的数据循环追加到li里</span></span><span class="actionscript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.s.length;i++){</span><span class="actionscript">                    html += <span class="hljs-string">'&lt;li&gt;'</span>+data.s[i]+<span class="hljs-string">'&lt;/li&gt;'</span>;</span>                }<span class="actionscript">                <span class="hljs-comment">// 循环的li写入ul</span></span>                Ul.innerHTML = html;            }        }<span class="actionscript">        <span class="hljs-comment">// 1.步骤一</span></span><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><span class="actionscript">            <span class="hljs-comment">// 获取输入框和ul</span></span><span class="javascript">            <span class="hljs-keyword">var</span> Q = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'q'</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'ul'</span>);</span><span class="actionscript">            <span class="hljs-comment">// 事件鼠标抬起时候</span></span><span class="actionscript">            Q.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{</span><span class="actionscript">                <span class="hljs-comment">// 如果输入框不等于空</span></span><span class="actionscript">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value != <span class="hljs-string">''</span>) {</span><span class="actionscript">                    <span class="hljs-comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><span class="actionscript">                    <span class="hljs-comment">// 创建标签</span></span><span class="javascript">                    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>);</span><span class="actionscript">                    <span class="hljs-comment">//给定要跨域的地址 赋值给src</span></span><span class="actionscript">                    <span class="hljs-comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><span class="actionscript">                    script.src = <span class="hljs-string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span>+<span class="hljs-keyword">this</span>.value+<span class="hljs-string">'&amp;cb=demo'</span>;</span><span class="actionscript">                    <span class="hljs-comment">// 将组合好的带src的script标签追加到body里</span></span><span class="javascript">                    <span class="hljs-built_in">document</span>.body.appendChild(script);</span>                }            }        }    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"q"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><h2 id="12、拦截器"><a href="#12、拦截器" class="headerlink" title="12、拦截器"></a>12、拦截器</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong></p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h3 id="12-1、自定义拦截器"><a href="#12-1、自定义拦截器" class="headerlink" title="12.1、自定义拦截器"></a>12.1、自定义拦截器</h3><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><ol><li><p>新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持</p></li><li><p>配置web.xml 和 springmvc-servlet.xml 文件</p></li><li><p>编写一个拦截器</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>{    <span class="hljs-comment">//在请求处理的方法之前执行</span>    <span class="hljs-comment">//如果返回true执行下一个拦截器</span>    <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>{        System.out.println(<span class="hljs-string">"------------处理前------------"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    }    <span class="hljs-comment">//在请求处理方法执行之后执行</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>{        System.out.println(<span class="hljs-string">"------------处理后------------"</span>);    }    <span class="hljs-comment">//在dispatcherServlet处理后执行,做清理工作.</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>{        System.out.println(<span class="hljs-string">"------------清理------------"</span>);    }}</code></pre></div></li><li><p>在springmvc的配置文件中配置拦截器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span>        <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span>        <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.interceptor.MyInterceptor"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre></div></li><li><p>编写一个Controller，接收请求</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-comment">//测试拦截器的控制器</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/interceptor"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testFunction</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"控制器中的方法执行了"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    }}</code></pre></div></li><li><p>前端 index.jsp</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"${pageContext.request.contextPath}/interceptor"</span>&gt;</span>拦截器测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div></li><li><p>启动tomcat 测试一下！<br> <img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2785405154.png" srcset="/blog/img/loading.gif" alt="1570205071233.png"></p></li></ol><h3 id="12-2、验证用户是否登录-认证用户"><a href="#12-2、验证用户是否登录-认证用户" class="headerlink" title="12.2、验证用户是否登录 (认证用户)"></a>12.2、验证用户是否登录 (认证用户)</h3><p><strong>实现思路</strong></p><ol><li>有一个登陆页面，需要写一个controller访问页面。</li><li>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></li><li>拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</li></ol><p><strong>代码编写</strong></p><ol><li><p>编写一个登陆页面 login.jsp</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;h1&gt;登录页面&lt;/h1&gt;&lt;hr&gt;&lt;body&gt;&lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/user/login"</span>&gt;    用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span>&gt; &lt;br&gt;    密码： &lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"pwd"</span>&gt; &lt;br&gt;    &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"提交"</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>编写一个Controller处理请求</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-comment">//跳转到登陆页面</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/jumplogin"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;    }    <span class="hljs-comment">//跳转到成功页面</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/jumpSuccess"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpSuccess</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;    }    <span class="hljs-comment">//登陆提交</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/login"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpSession session, String username, String pwd)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">// 向session记录用户身份信息</span>        System.out.println(<span class="hljs-string">"接收前端==="</span>+username);        session.setAttribute(<span class="hljs-string">"user"</span>, username);        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;    }    <span class="hljs-comment">//退出登陆</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"logout"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">// session 过期</span>        session.invalidate();        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;    }}</code></pre></div></li><li><p>编写一个登陆成功的页面 success.jsp</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;登录成功页面&lt;/h1&gt;&lt;hr&gt;${user}&lt;a href="${pageContext.request.contextPath}/user/logout"&gt;注销&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;h1&gt;首页&lt;/h1&gt;  &lt;hr&gt;  &lt;%--登录--%&gt;  &lt;a href="${pageContext.request.contextPath}/user/jumplogin"&gt;登录&lt;/a&gt;  &lt;a href="${pageContext.request.contextPath}/user/jumpSuccess"&gt;成功页面&lt;/a&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>编写用户登录拦截器</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{        <span class="hljs-comment">// 如果是登陆页面则放行</span>        System.out.println(<span class="hljs-string">"uri: "</span> + request.getRequestURI());        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">"login"</span>)) {            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        }        HttpSession session = request.getSession();        <span class="hljs-comment">// 如果用户已登陆也放行</span>        <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">"user"</span>) != <span class="hljs-keyword">null</span>) {            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        }        <span class="hljs-comment">// 用户没有登陆跳转到登陆页面</span>        request.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>{    }        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>{    }}</code></pre></div></li><li><p>在Springmvc的配置文件中注册拦截器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loginInterceptor"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.interceptor.LoginInterceptor"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre></div></li><li><p>再次重启Tomcat测试！</p></li></ol><p><strong>OK，测试登录拦截功能无误.</strong></p><h2 id="13、SpringMVC：文件上传和下载"><a href="#13、SpringMVC：文件上传和下载" class="headerlink" title="13、SpringMVC：文件上传和下载"></a>13、SpringMVC：文件上传和下载</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h3 id="13-1、文件上传"><a href="#13-1、文件上传" class="headerlink" title="13.1、文件上传"></a>13.1、文件上传</h3><p>一、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--servlet-api导入高版本的--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>二、配置bean：multipartResolver<br>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"multipartResolver"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultEncoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxUploadSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10485760"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxInMemorySize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"40960"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p>我们去实际测试一下</p><p>三、编写前端页面</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/upload"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"upload"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><p>四、<strong>Controller</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>{    <span class="hljs-comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span>    <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/upload"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file , HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException </span>{        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span>        String uploadFileName = file.getOriginalFilename();        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(uploadFileName)){            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;        }        System.out.println(<span class="hljs-string">"上传文件名 : "</span>+uploadFileName);        <span class="hljs-comment">//上传路径保存设置</span>        String path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);        <span class="hljs-comment">//如果路径不存在，创建一个</span>        File realPath = <span class="hljs-keyword">new</span> File(path);        <span class="hljs-keyword">if</span> (!realPath.exists()){            realPath.mkdir();        }        System.out.println(<span class="hljs-string">"上传文件保存地址："</span>+realPath);        InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span>        <span class="hljs-comment">//读取写出</span>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>){            os.write(buffer,<span class="hljs-number">0</span>,len);            os.flush();        }        os.close();        is.close();        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;    }}</code></pre></div><p>五、测试上传文件，OK！</p><h3 id="采用file-Transto-来保存上传的文件"><a href="#采用file-Transto-来保存上传的文件" class="headerlink" title="采用file.Transto 来保存上传的文件"></a>采用file.Transto 来保存上传的文件</h3><ol><li><p>编写Controller</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 采用file.Transto 来保存上传的文件</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/upload2"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException </span>{    <span class="hljs-comment">//上传路径保存设置</span>    String path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);    File realPath = <span class="hljs-keyword">new</span> File(path);    <span class="hljs-keyword">if</span> (!realPath.exists()){        realPath.mkdir();    }    <span class="hljs-comment">//上传文件地址</span>    System.out.println(<span class="hljs-string">"上传文件保存地址："</span>+realPath);    <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span>    file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">"/"</span>+ file.getOriginalFilename()));    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;}</code></pre></div></li><li><p>前端表单提交地址修改</p></li><li><p>访问提交测试，OK！</p></li></ol><h3 id="13-2、文件下载"><a href="#13-2、文件下载" class="headerlink" title="13.2、文件下载"></a>13.2、文件下载</h3><p>文件下载步骤：</p><ol><li>设置 response 响应头</li><li>读取文件 – InputStream</li><li>写出文件 – OutputStream</li><li>执行操作</li><li>关闭流 （先开后关）</li></ol><p>代码实现：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/download"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>{    <span class="hljs-comment">//要下载的图片地址</span>    String  path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);    String  fileName = <span class="hljs-string">"基础语法.jpg"</span>;    <span class="hljs-comment">//1、设置response 响应头</span>    response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span>    response.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">//字符编码</span>    response.setContentType(<span class="hljs-string">"multipart/form-data"</span>); <span class="hljs-comment">//二进制传输数据</span>    <span class="hljs-comment">//设置响应头</span>    response.setHeader(<span class="hljs-string">"Content-Disposition"</span>,            <span class="hljs-string">"attachment;fileName="</span>+URLEncoder.encode(fileName, <span class="hljs-string">"UTF-8"</span>));    File file = <span class="hljs-keyword">new</span> File(path,fileName);    <span class="hljs-comment">//2、 读取文件--输入流</span>    InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);    <span class="hljs-comment">//3、 写出文件--输出流</span>    OutputStream out = response.getOutputStream();    <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;    <span class="hljs-comment">//4、执行 写出操作</span>    <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>){        out.write(buff, <span class="hljs-number">0</span>, index);        out.flush();    }    out.close();    input.close();    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;}</code></pre></div><p>前端</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/download"</span>&gt;</span>点击下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p><h2 id="100、通用"><a href="#100、通用" class="headerlink" title="100、通用"></a>100、通用</h2><h3 id="1-web-xml"><a href="#1-web-xml" class="headerlink" title="1.web.xml"></a>1.web.xml</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>            org.springframework.web.filter.CharacterEncodingFilter        <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div><h3 id="2-springmvc-servlet-xml"><a href="#2-springmvc-servlet-xml" class="headerlink" title="2.springmvc-servlet.xml"></a>2.springmvc-servlet.xml</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-comment">&lt;!--JSON乱码问题配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">"true"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"objectMapper"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"failOnEmptyBeans"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="3、使用到的注解"><a href="#3、使用到的注解" class="headerlink" title="3、使用到的注解"></a>3、使用到的注解</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>注解类型用于声明Spring类的实例是一个控制器<span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/HelloController"</span>)<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1 组合注解  <span class="hljs-meta">@GetMapping</span>          <span class="hljs-meta">@PostMapping</span>          <span class="hljs-meta">@PutMapping</span>          <span class="hljs-meta">@DeleteMapping</span>          <span class="hljs-meta">@PatchMapping</span><span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">"username"</span>) String name <span class="hljs-meta">@ResponseBody</span>    组合注解   <span class="hljs-meta">@RestController</span></code></pre></div><h3 id="4、使用到的jar包"><a href="#4、使用到的jar包" class="headerlink" title="4、使用到的jar包"></a>4、使用到的jar包</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-comment">&lt;!-- fastjson --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213841543-745577399.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><p><img src="https://images2018.cnblogs.com/blog/1370903/201808/1370903-20180827201021158-682489195.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1、一个请求匹配前端控制器-DispatcherServlet-的请求映射路径-在-web-xml中指定-WEB-容器将该请求转交给-DispatcherServlet-处理"><a href="#1、一个请求匹配前端控制器-DispatcherServlet-的请求映射路径-在-web-xml中指定-WEB-容器将该请求转交给-DispatcherServlet-处理" class="headerlink" title="1、一个请求匹配前端控制器 DispatcherServlet 的请求映射路径(在 web.xml中指定), WEB 容器将该请求转交给 DispatcherServlet 处理"></a>1、一个请求匹配前端控制器 DispatcherServlet 的请求映射路径(在 web.xml中指定), WEB 容器将该请求转交给 DispatcherServlet 处理</h3><h3 id="2、DispatcherServlet-接收到请求后-将根据-请求信息-交给-处理器映射器-（HandlerMapping）"><a href="#2、DispatcherServlet-接收到请求后-将根据-请求信息-交给-处理器映射器-（HandlerMapping）" class="headerlink" title="2、DispatcherServlet 接收到请求后, 将根据 请求信息 交给 处理器映射器 （HandlerMapping）"></a>2、DispatcherServlet 接收到请求后, 将根据 请求信息 交给 处理器映射器 （HandlerMapping）</h3><h3 id="3、HandlerMapping-根据用户的url请求-查找匹配该url的-Handler，并返回一个执行链"><a href="#3、HandlerMapping-根据用户的url请求-查找匹配该url的-Handler，并返回一个执行链" class="headerlink" title="3、HandlerMapping 根据用户的url请求 查找匹配该url的 Handler，并返回一个执行链"></a>3、HandlerMapping 根据用户的url请求 查找匹配该url的 Handler，并返回一个执行链</h3><h3 id="4、DispatcherServlet-再请求-处理器适配器-HandlerAdapter-调用相应的-Handler-进行处理并返回-ModelAndView-给-DispatcherServlet"><a href="#4、DispatcherServlet-再请求-处理器适配器-HandlerAdapter-调用相应的-Handler-进行处理并返回-ModelAndView-给-DispatcherServlet" class="headerlink" title="4、DispatcherServlet 再请求 处理器适配器(HandlerAdapter) 调用相应的 Handler 进行处理并返回 ModelAndView 给 DispatcherServlet"></a>4、DispatcherServlet 再请求 处理器适配器(HandlerAdapter) 调用相应的 Handler 进行处理并返回 ModelAndView 给 DispatcherServlet</h3><h3 id="5、DispatcherServlet-将-ModelAndView-请求-ViewReslover（视图解析器）解析，返回具体-View"><a href="#5、DispatcherServlet-将-ModelAndView-请求-ViewReslover（视图解析器）解析，返回具体-View" class="headerlink" title="5、DispatcherServlet 将 ModelAndView 请求 ViewReslover（视图解析器）解析，返回具体 View"></a>5、DispatcherServlet 将 ModelAndView 请求 ViewReslover（视图解析器）解析，返回具体 View</h3><h3 id="6、DispatcherServlet-对-View-进行渲染视图（即将模型数据填充至视图中）"><a href="#6、DispatcherServlet-对-View-进行渲染视图（即将模型数据填充至视图中）" class="headerlink" title="6、DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）"></a>6、DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）</h3><h3 id="7、DispatcherServlet-将页面响应给用户"><a href="#7、DispatcherServlet-将页面响应给用户" class="headerlink" title="7、DispatcherServlet 将页面响应给用户"></a>7、DispatcherServlet 将页面响应给用户</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1aE41167Tu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1aE41167Tu&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器后台运行jar包</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/23/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cjar%E5%8C%85/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/23/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cjar%E5%8C%85/</id>
    <published>2020-08-22T17:02:00.000Z</published>
    <updated>2020-08-27T05:55:24.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><p>将运行日志输入到 logs.txt (jar包所在的目录)</p><div class="hljs"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>&gt;logs.txt &amp;</code></pre></div><h1 id="分解介绍"><a href="#分解介绍" class="headerlink" title="分解介绍"></a>分解介绍</h1><ol><li>首先最基本的运行jar包命令是:</li></ol><div class="hljs"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar</span></code></pre></div><p>这个命令会锁定命令窗口，只能看到当前运行的输出信息。而无法发送其他指令。</p><blockquote><p>这种方式当ssh窗口关闭时，程序中止运行,或者是运行时没法切出去执行其他任务</p></blockquote><ol start="2"><li>让jar包后台运行</li></ol><p>用”<code>&amp;</code>“符号结尾表示，让程序在后台运行。<br>这样的话，命令窗口就不会被锁定，而可以发送其他指令，但是当窗口关闭时，后台运行的程序依然会被停止。</p><p><code>nohup</code>命令：<code>nohup</code> 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示“and”的符号）到命令的尾部。</p><p>简单地说就是，<code>nohup</code>命令可以阻止窗口关闭是的挂断信号，使程序继续运行。这样，命令就修改为了</p><div class="hljs"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>&amp;</code></pre></div><ol start="3"><li>设置输出文件</li></ol><p>在这个命令下已经可以实现需要的功能了。最后的 <code>&gt;logs.txt</code> 表示输出文件。可以随意写随意指定路径。如果不写情况下（缺省），就回默认在jar包所在目录，创建<code>nohup.out</code>文件。</p><p>如果项目中已经指定了日志输出，就会重复输出，生成两个文件，把 <code>&gt;logs.txt</code> 删了的话，当前的运行程序不会再生成新的文件。</p><div class="hljs"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>&gt;logs.txt &amp;</code></pre></div><p>命令运行成功后，会返回一个进程号，可以通过 <code>kill -9</code> 命令杀死这个进程来直接关闭。</p><blockquote><p>如果忘了进程号，可以通过</p><div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> xxx.jar</code></pre></div><p>来查看当前运行的jar包程序进程号</p></blockquote><blockquote><p>查询当前活动的进程</p><div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -aux|<span class="hljs-keyword">grep</span> java</code></pre></div></blockquote><blockquote><p>查看linux系统内存大小的详细信息，可以查看总内存，剩余内存、可使用内存等信息</p><div class="hljs"><pre><code class="hljs armasm"><span class="hljs-symbol">cat</span> /<span class="hljs-meta">proc</span>/meminfo</code></pre></div></blockquote><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;上代码&quot;&gt;&lt;a href=&quot;#上代码&quot; class=&quot;headerlink&quot; title=&quot;上代码&quot;&gt;&lt;/a&gt;上代码&lt;/h1&gt;&lt;p&gt;将运行日志输入到 logs.txt (jar包所在的目录)&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;nohup &lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;&amp;gt;logs.txt &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;分解介绍&quot;&gt;&lt;a href=&quot;#分解介绍&quot; class=&quot;headerlink&quot; title=&quot;分解介绍&quot;&gt;&lt;/a&gt;分解介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;首先最基本的运行jar包命令是:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个命令会锁定命令窗口，只能看到当前运行的输出信息。而无法发送其他指令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方式当ssh窗口关闭时，程序中止运行,或者是运行时没法切出去执行其他任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;让jar包后台运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用”&lt;code&gt;&amp;amp;&lt;/code&gt;“符号结尾表示，让程序在后台运行。&lt;br&gt;这样的话，命令窗口就不会被锁定，而可以发送其他指令，但是当窗口关闭时，后台运行的程序依然会被停止。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt;命令：&lt;code&gt;nohup&lt;/code&gt; 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断信号。要运行后台中的 &lt;code&gt;nohup&lt;/code&gt; 命令，添加 &lt;code&gt;&amp;amp;&lt;/code&gt; （ 表示“and”的符号）到命令的尾部。&lt;/p&gt;
&lt;p&gt;简单地说就是，&lt;code&gt;nohup&lt;/code&gt;命令可以阻止窗口关闭是的挂断信号，使程序继续运行。这样，命令就修改为了&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;nohup &lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;&amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;设置输出文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个命令下已经可以实现需要的功能了。最后的 &lt;code&gt;&amp;gt;logs.txt&lt;/code&gt; 表示输出文件。可以随意写随意指定路径。如果不写情况下（缺省），就回默认在jar包所在目录，创建&lt;code&gt;nohup.out&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;如果项目中已经指定了日志输出，就会重复输出，生成两个文件，把 &lt;code&gt;&amp;gt;logs.txt&lt;/code&gt; 删了的话，当前的运行程序不会再生成新的文件。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;nohup &lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;&amp;gt;logs.txt &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;命令运行成功后，会返回一个进程号，可以通过 &lt;code&gt;kill -9&lt;/code&gt; 命令杀死这个进程来直接关闭。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果忘了进程号，可以通过&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ps&lt;/span&gt; -ef|&lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; xxx.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;来查看当前运行的jar包程序进程号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;查询当前活动的进程&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ps&lt;/span&gt; -aux|&lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; java&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;查看linux系统内存大小的详细信息，可以查看总内存，剩余内存、可使用内存等信息&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs armasm&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;cat&lt;/span&gt; /&lt;span class=&quot;hljs-meta&quot;&gt;proc&lt;/span&gt;/meminfo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SVN中文网 - svn安装、svn部署、svn操作手册</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/SVN%E4%B8%AD%E6%96%87%E7%BD%91%20-%20svn%E5%AE%89%E8%A3%85%E3%80%81svn%E9%83%A8%E7%BD%B2%E3%80%81svn%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/SVN%E4%B8%AD%E6%96%87%E7%BD%91%20-%20svn%E5%AE%89%E8%A3%85%E3%80%81svn%E9%83%A8%E7%BD%B2%E3%80%81svn%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</id>
    <published>2020-08-21T17:30:00.000Z</published>
    <updated>2020-08-27T05:55:24.141Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.svn.org.cn/" target="_blank" rel="noopener">http://www.svn.org.cn/</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.svn.org.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.svn.org.cn/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="SVN" scheme="https://melodyjerry.github.io/blog/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>SVN 安装</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/SVN-%E5%AE%89%E8%A3%85/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/SVN-%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-21T17:02:00.000Z</published>
    <updated>2020-08-27T05:55:24.144Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="在windows下安装-SVN"><a href="#在windows下安装-SVN" class="headerlink" title="在windows下安装 SVN"></a>在windows下安装 SVN</h2><p>1、准备svn的安装文件</p><p>下载地址：<a href="https://sourceforge.net/projects/win32svn/" target="_blank" rel="noopener">https://sourceforge.net/projects/win32svn/</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/svn-windows-install01a.png" srcset="/blog/img/loading.gif" alt="img"></p><p>2、下载完成后，在相应的盘符中会有一个Setup-Subversion-1.8.16.msi的文件，目前最新的版本是1.8.16， 这里就使用这个版本。然后双击安装文件进行安装。我们指定安装在D:\Program Files (x86)\Subversion目录里。</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/svn-windows-install02a.gif" srcset="/blog/img/loading.gif" alt="img"></p><p>3、查看目录结构</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/windows-install03.png" srcset="/blog/img/loading.gif" alt="img"></p><p>把svn安装目录里的bin目录添加到path路径中，在命令行窗口中输入 svnserve –help ,查看安装正常与否。</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/windows-install02.png" srcset="/blog/img/loading.gif" alt="img"></p><p>至此，windows下的SVN安装完成</p><hr><h2 id="在CentOS下安装-SVN"><a href="#在CentOS下安装-SVN" class="headerlink" title="在CentOS下安装 SVN"></a>在CentOS下安装 SVN</h2><p>大多数 GNU/Linux 发行版系统自带了Subversion ，所以它很有可能已经安装在你的系统上了。可以使用下面命令检查是否安装了。</p><div class="hljs"><pre><code class="hljs ada">svn <span class="hljs-comment">--version</span></code></pre></div><p>如果 Subversion 客户端没有安装，命令将报告svn命令找不到的错误。</p><div class="hljs"><pre><code class="hljs groovy">[runoob<span class="hljs-meta">@centos</span>6 ~]$ svn --version<span class="hljs-string">bash:</span> <span class="hljs-string">svn:</span> command not found</code></pre></div><p>我们可以使用 yum install subversion 命令进行安装。</p><div class="hljs"><pre><code class="hljs routeros">[runoob@centos6 root]$ su -密码：[root@centos6 ~]# yum install subversion已加载插件：fastestmirror, security设置安装进程Loading<span class="hljs-built_in"> mirror </span>speeds <span class="hljs-keyword">from</span> cached hostfile * base: mirrors.aliyun.com * epel: mirrors.neusoft.edu.cn * extras: mirrors.zju.edu.cn * updates: mirrors.aliyun.com解决依赖关系--&amp;gt; 执行事务检查<span class="hljs-built_in">..</span>.</code></pre></div><p>安装成功之后，执行 svn –version 命令。</p><div class="hljs"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>centos6 ~]# svn --versionsvn，版本 <span class="hljs-number">1.6</span><span class="hljs-number">.11</span> (r934486)   编译于 Aug <span class="hljs-number">17</span> <span class="hljs-number">2015</span>，<span class="hljs-number">08</span>:<span class="hljs-number">37</span>:<span class="hljs-number">43</span></code></pre></div><p>至此，centos下的SVN安装完成。</p><hr><h2 id="在Ubuntu下安装-SVN"><a href="#在Ubuntu下安装-SVN" class="headerlink" title="在Ubuntu下安装 SVN"></a>在Ubuntu下安装 SVN</h2><p>如果 Subversion 客户端没有安装，命令将报告svn命令找不到的错误。</p><div class="hljs"><pre><code class="hljs livescript">root@runoob:~<span class="hljs-comment"># svn --version</span>The program <span class="hljs-string">'svn'</span> <span class="hljs-keyword">is</span> currently <span class="hljs-keyword">not</span> installed. You can install <span class="hljs-literal">it</span> <span class="hljs-keyword">by</span> typing:apt-get install subversion</code></pre></div><p>我们可以使用 apt-get 命令进行安装</p><div class="hljs"><pre><code class="hljs vim">root@runoo<span class="hljs-variable">b:</span>~# apt-<span class="hljs-built_in">get</span> install subversionReading package lists... DoneBuilding dependency tree       Reading state information... DoneThe following packages were automatically installed <span class="hljs-built_in">and</span> are <span class="hljs-keyword">no</span> longer required:  augeas-lenses hiera libaugeas0 libxslt1.<span class="hljs-number">1</span> <span class="hljs-keyword">ruby</span>-augeas <span class="hljs-keyword">ruby</span>-deep-merge <span class="hljs-keyword">ruby</span>-json <span class="hljs-keyword">ruby</span>-nokogiri <span class="hljs-keyword">ruby</span>-rgen <span class="hljs-keyword">ruby</span>-safe-yaml <span class="hljs-keyword">ruby</span>-selinux <span class="hljs-keyword">ruby</span>-shadowUse <span class="hljs-string">'apt-get autoremove'</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">remove</span> them.The following extra packages will <span class="hljs-keyword">be</span> installed:  libserf-<span class="hljs-number">1</span>-<span class="hljs-number">1</span> libsvn1...</code></pre></div><p>安装成功之后，执行 svn –version 命令。</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>runoob:~# svn --versionsvn, version <span class="hljs-number">1.8</span><span class="hljs-number">.13</span> (r1667537)   compiled Sep  <span class="hljs-number">8</span> <span class="hljs-number">2015</span>, <span class="hljs-number">14</span>:<span class="hljs-number">59</span>:<span class="hljs-number">01</span> on x86_64-pc-linux-gnu</code></pre></div><p>至此，Ubuntu下的SVN安装完成。</p><hr><p>来源：菜鸟教程（<a href="https://www.runoob.com/svn/svn-install.html）" target="_blank" rel="noopener">https://www.runoob.com/svn/svn-install.html）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;在windows下安装-SVN&quot;&gt;&lt;a href=&quot;#在windows下安装-SVN&quot; class=&quot;headerlink&quot; title=&quot;在windows下安装 SVN&quot;&gt;&lt;/a&gt;在windows下安装 SVN&lt;/h2&gt;&lt;p&gt;1、准备svn的安装文件&lt;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="SVN" scheme="https://melodyjerry.github.io/blog/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>SVN 简介</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/SVN-%E7%AE%80%E4%BB%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/SVN-%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-21T17:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVN-简介"><a href="#SVN-简介" class="headerlink" title="SVN 简介"></a>SVN 简介</h1><hr><p>Subversion(SVN) 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。</p><a id="more"></a><hr><h3 id="SVN-的一些概念"><a href="#SVN-的一些概念" class="headerlink" title="SVN 的一些概念"></a>SVN 的一些概念</h3><ul><li><strong>repository（源代码库）:</strong>源代码统一存放的地方</li><li><strong>Checkout（提取）:</strong>当你手上没有源代码的时候，你需要从repository checkout一份</li><li><strong>Commit（提交）:</strong>当你已经修改了代码，你就需要Commit到repository</li><li><strong>Update (更新):</strong>当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步，你手上的代码就会有最新的变更</li></ul><p>日常开发过程其实就是这样的（假设你已经Checkout并且已经工作了几天）：Update(获得最新的代码) –&gt;作出自己的修改并调试成功 –&gt; Commit(大家就可以看到你的修改了) 。</p><p>如果两个程序员同时修改了同一个文件呢, SVN 可以合并这两个程序员的改动，实际上SVN管理源代码是以行为单位的，就是说两个程序员只要不是修改了同一行程序，SVN都会自动合并两种修改。如果是同一行，SVN 会提示文件 Conflict, 冲突，需要手动确认。</p><h3 id="SVN-的主要功能"><a href="#SVN-的主要功能" class="headerlink" title="SVN 的主要功能"></a>SVN 的主要功能</h3><ul><li><p>（1）目录版本控制</p><p>  CVS 只能跟踪单个文件的历史, 不过 Subversion 实作了一个 “虚拟” 的版本控管文件系统, 能够依时间跟踪整个目录的变动。 目录和文件都能进行版本控制。</p></li><li><p>（2）真实的版本历史</p><p>  自从CVS限制了文件的版本记录，CVS并不支持那些可能发生在文件上，但会影响所在目录内容的操作，如同复制和重命名。除此之外，在CVS里你不能用拥有同样名字但是没有继承老版本历史或者根本没有关系的文件替换一个已经纳入系统的文件。在Subversion中，你可以增加（add）、删除（delete）、复制（copy）和重命名（rename），无论是文件还是目录。所有的新加的文件都从一个新的、干净的版本开始。</p></li><li><p>（3）自动提交</p><p>  一个提交动作，不是全部更新到了档案库中，就是不完全更新。这允许开发人员以逻辑区间建立并提交变动，以防止当部分提交成功时出现的问题。</p></li><li><p>（4）纳入版本控管的元数据</p><p>  每一个文件与目录都附有一組属性关键字并和属性值相关联。你可以创建, 并儲存任何你想要的Key/Value对。 属性是随着时间来作版本控管的,就像文件內容一样。</p></li><li><p>（5）选择不同的网络层</p><p>  Subversion 有抽象的档案库存取概念, 可以让人很容易地实作新的网络机制。 Subversion 可以作为一个扩展模块嵌入到Apache HTTP 服务器中。这个为Subversion提供了非常先进的稳定性和协同工作能力，除此之外还提供了许多重要功能: 举例来说, 有身份认证, 授权, 在线压缩, 以及文件库浏览等等。还有一个轻量级的独立Subversion服务器， 使用的是自定义的通信协议, 可以很容易地通过 ssh 以 tunnel 方式使用。</p></li><li><p>（6）一致的数据处理方式</p><p>  Subversion 使用二进制差异算法来异表示文件的差异, 它对文字(人类可理解的)与二进制文件(人类无法理解的) 两类的文件都一视同仁。 这两类的文件都同样地以压缩形式储存在档案库中, 而且文件差异是以两个方向在网络上传输的。</p></li><li><p>（7）有效的分支(branch)与标签(tag)</p><p>  在分支与标签上的消耗并不必一定要与项目大小成正比。 Subversion 建立分支与标签的方法, 就只是复制该项目, 使用的方法就类似于硬连接（hard-link）。 所以这些操作只会花费很小, 而且是固定的时间。</p></li><li><p>（8）Hackability</p><p>  Subversion没有任何的历史包袱; 它主要是一群共用的 C 程序库, 具有定义完善的API。这使得 Subversion 便于维护, 并且可被其它应用程序与程序语言使用。</p></li></ul><h3 id="优于CVS之处"><a href="#优于CVS之处" class="headerlink" title="优于CVS之处"></a>优于CVS之处</h3><p>1、原子提交。一次提交不管是单个还是多个文件，都是作为一个整体提交的。在这当中发生的意外例如传输中断，不会引起数据库的不完整和数据损坏。</p><p>2、重命名、复制、删除文件等动作都保存在版本历史记录当中。</p><p>3、对于二进制文件，使用了节省空间的保存方法。（简单的理解，就是只保存和上一版本不同之处）</p><p>4、目录也有版本历史。整个目录树可以被移动或者复制，操作很简单，而且能够保留全部版本记录。</p><p>5、分支的开销非常小。</p><p>6、优化过的数据库访问，使得一些操作不必访问数据库就可以做到。这样减少了很多不必要的和数据库主机之间的网络流量。</p><hr><p>来源：菜鸟教程（<a href="https://www.runoob.com/svn/svn-intro.html）" target="_blank" rel="noopener">https://www.runoob.com/svn/svn-intro.html）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SVN-简介&quot;&gt;&lt;a href=&quot;#SVN-简介&quot; class=&quot;headerlink&quot; title=&quot;SVN 简介&quot;&gt;&lt;/a&gt;SVN 简介&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Subversion(SVN) 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="SVN" scheme="https://melodyjerry.github.io/blog/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>两个简单的导航网页</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/%E4%B8%A4%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%BC%E8%88%AA%E7%BD%91%E9%A1%B5/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/%E4%B8%A4%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%BC%E8%88%AA%E7%BD%91%E9%A1%B5/</id>
    <published>2020-08-21T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极简、拟物风格"><a href="#极简、拟物风格" class="headerlink" title="极简、拟物风格"></a>极简、拟物风格</h1><p><img src="https://s1.ax1x.com/2020/08/21/dNjTxJ.png" srcset="/blog/img/loading.gif" alt=""></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>Gitee：<a href="https://gitee.com/melodyjerry/SimpleIndex" target="_blank" rel="noopener">https://gitee.com/melodyjerry/SimpleIndex</a></p><h1 id="简单的、聚合式"><a href="#简单的、聚合式" class="headerlink" title="简单的、聚合式"></a>简单的、聚合式</h1><p><img src="https://s1.ax1x.com/2020/08/22/dakdWn.png" srcset="/blog/img/loading.gif" alt=""></p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>Gitee：<a href="https://gitee.com/melodyjerry/MyIndex" target="_blank" rel="noopener">https://gitee.com/melodyjerry/MyIndex</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;极简、拟物风格&quot;&gt;&lt;a href=&quot;#极简、拟物风格&quot; class=&quot;headerlink&quot; title=&quot;极简、拟物风格&quot;&gt;&lt;/a&gt;极简、拟物风格&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/21/dNjTxJ.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;Gitee：&lt;a href=&quot;https://gitee.com/melodyjerry/SimpleIndex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/melodyjerry/SimpleIndex&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简单的、聚合式&quot;&gt;&lt;a href=&quot;#简单的、聚合式&quot; class=&quot;headerlink&quot; title=&quot;简单的、聚合式&quot;&gt;&lt;/a&gt;简单的、聚合式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/22/dakdWn.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码-1&quot;&gt;&lt;a href=&quot;#源码-1&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;Gitee：&lt;a href=&quot;https://gitee.com/melodyjerry/MyIndex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/melodyjerry/MyIndex&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="CSS" scheme="https://melodyjerry.github.io/blog/tags/CSS/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
      <category term="JQuery" scheme="https://melodyjerry.github.io/blog/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>网易云官方接口免费解析VIP音乐</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/%E7%BD%91%E6%98%93%E4%BA%91%E5%AE%98%E6%96%B9%E6%8E%A5%E5%8F%A3%E5%85%8D%E8%B4%B9%E8%A7%A3%E6%9E%90VIP%E9%9F%B3%E4%B9%90/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/%E7%BD%91%E6%98%93%E4%BA%91%E5%AE%98%E6%96%B9%E6%8E%A5%E5%8F%A3%E5%85%8D%E8%B4%B9%E8%A7%A3%E6%9E%90VIP%E9%9F%B3%E4%B9%90/</id>
    <published>2020-08-21T16:00:00.000Z</published>
    <updated>2020-08-28T11:51:25.946Z</updated>
    
    <content type="html"><![CDATA[<p>复制歌曲的链接：<a href="https://music.163.com/song?id=496869422&amp;userid=517240734（取song?id）" target="_blank" rel="noopener">https://music.163.com/song?id=496869422&amp;userid=517240734（取song?id）</a></p><p>把后缀ID加入接口访问即可：<a href="http://music.163.com/song/media/outer/url?id=496869422.mp3" target="_blank" rel="noopener">http://music.163.com/song/media/outer/url?id=496869422.mp3</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复制歌曲的链接：&lt;a href=&quot;https://music.163.com/song?id=496869422&amp;amp;userid=517240734（取song?id）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://music.163.com/song?id=496869422&amp;amp;userid=517240734（取song?id）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把后缀ID加入接口访问即可：&lt;a href=&quot;http://music.163.com/song/media/outer/url?id=496869422.mp3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://music.163.com/song/media/outer/url?id=496869422.mp3&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>XPath教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/21/XPath%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/21/XPath%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-20T16:01:00.000Z</published>
    <updated>2020-08-27T05:55:24.152Z</updated>
    
    <content type="html"><![CDATA[<p><strong>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。</strong></p><p><strong>XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 都构建于 XPath 表达之上。</strong></p><p><strong>因此，对 XPath 的理解是很多高级 XML 应用的基础。</strong></p><blockquote><p>W3school：<a href="https://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/xpath/index.asp</a></p></blockquote><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 都构建于 XPath 表达之上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，对 XPath 的理解是很多高级 XML 应用的基础。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;W3school：&lt;a href=&quot;https://www.w3school.com.cn/xpath/index.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3school.com.cn/xpath/index.asp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="Web" scheme="https://melodyjerry.github.io/blog/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Beyond Compare 4 试用期已过的解决办法</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/21/Beyond-Compare-4-%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%B2%E8%BF%87%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/21/Beyond-Compare-4-%E8%AF%95%E7%94%A8%E6%9C%9F%E5%B7%B2%E8%BF%87%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-08-20T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>修改注册表</p><ol><li><p>在搜索栏中输入 <code>regedit</code>   ，打开注册表</p></li><li><p>删除项目：计算机 <code>\HKEY_CURRENT_USER\Software\Scooter Software\Beyond Compare 4\CacheId</code>。</p></li></ol><p><img src="https://s1.ax1x.com/2020/08/21/dtxZbq.png" srcset="/blog/img/loading.gif" alt="dtxZbq.png"></p><blockquote><p>删除该路径下的 CacheId 即可。不过这样也只是能再使用 30 天，要是到期了重复上面步骤就好了。</p></blockquote><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h1&gt;&lt;p&gt;修改注册表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在搜索栏中输入 &lt;code&gt;regedit&lt;/code&gt;   ，打开注册表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除项目：计算机 &lt;code&gt;\HKEY_CURRENT_USER\Software\Scooter Software\Beyond Compare 4\CacheId&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/21/dtxZbq.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;dtxZbq.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;删除该路径下的 CacheId 即可。不过这样也只是能再使用 30 天，要是到期了重复上面步骤就好了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Spring入门踩坑记录</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/27/Spring%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/27/Spring%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.147Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学习Spring时的踩坑经验。</p><a id="more"></a><h1 id="Jdk8不兼容Spring4-x以下版本"><a href="#Jdk8不兼容Spring4-x以下版本" class="headerlink" title="Jdk8不兼容Spring4.x以下版本"></a>Jdk8不兼容Spring4.x以下版本</h1><p>入门三天，我一直被这控制台一片红苦恼着。</p><p>在视频的评论区中没有解决，上论坛上也没有解决。</p><p><img src="https://s1.ax1x.com/2020/07/28/ak2CAf.png" srcset="/blog/img/loading.gif" alt="ak2CAf.png"></p><p>详细报错：</p><div class="hljs"><pre><code class="hljs java">org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions信息: Loading XML bean definitions from class path resource [beans.xml]Exception in thread <span class="hljs-string">"main"</span> java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotationUtils.clearCache()Vat org.springframework.context.support.AbstractApplicationContext.resetCommonCaches(AbstractApplicationContext.java:<span class="hljs-number">924</span>)at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="hljs-number">575</span>)at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:<span class="hljs-number">144</span>)at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:<span class="hljs-number">85</span>)at MyTest.main(MyTest.java:<span class="hljs-number">13</span>)</code></pre></div><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>知道我无意间看到这个！！！</p><p><img src="https://s1.ax1x.com/2020/07/28/akWkOs.png" srcset="/blog/img/loading.gif" alt="akWkOs.png"></p><p>Ctrl+Shift+Alt+S，进入项目设置，更换项目的Jdk版本为8以上，我选择的是Jdk12：</p><p><img src="https://s1.ax1x.com/2020/07/28/akhxT1.png" srcset="/blog/img/loading.gif" alt="akhxT1.png"></p><p>如果以上设置还法子解决，那可能还需要再多一步：</p><p><img src="https://s1.ax1x.com/2020/07/28/akof3V.png" srcset="/blog/img/loading.gif" alt="akof3V.png"></p><h1 id="不支持发行版本5-或-Compilation-failed-internal-java-compiler-error"><a href="#不支持发行版本5-或-Compilation-failed-internal-java-compiler-error" class="headerlink" title="不支持发行版本5 或 Compilation failed: internal java compiler error"></a>不支持发行版本5 或 Compilation failed: internal java compiler error</h1><p>提示</p><p><code>Error: java: 错误: 不支持发行版本 5</code></p><p>或</p><p> ``Error: java: 错误: Compilation failed: internal java compiler error`</p><p><img src="https://s1.ax1x.com/2020/07/28/akLyHU.png" srcset="/blog/img/loading.gif" alt="akLyHU.png"></p><p><strong>分析：</strong></p><p>导致这个错误的原因主要是因为jdk版本问题，此处有两个原因，一个是编译版本不匹配，一个是当前项目jdk版本不支持。我的是编译器版本的问题。</p><p><strong>解决：</strong></p><p>Ctrl+Alt+S，进入IDEA设置，Compiler中设置Java编译器的版本。</p><blockquote><p>解决来源：<a href="https://blog.csdn.net/wo541075754/article/details/82119860" target="_blank" rel="noopener">https://blog.csdn.net/wo541075754/article/details/82119860</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/07/27/aFEbQO.png" srcset="/blog/img/loading.gif" alt="aFEbQO.png"></p><h1 id="NoSuchBeanDefinitionException-No-bean-named-‘user’-available"><a href="#NoSuchBeanDefinitionException-No-bean-named-‘user’-available" class="headerlink" title="NoSuchBeanDefinitionException: No bean named ‘user’ available"></a>NoSuchBeanDefinitionException: No bean named ‘user’ available</h1><p><strong>控制台提示以下错误:</strong></p><div class="hljs"><pre><code class="hljs java">org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named <span class="hljs-string">'user'</span> available</code></pre></div><p><strong>解决:</strong><br>检查XML文件中Bean对象的id是否有问题？检查绑定的class是否有问题？等等……<br>结果，我发现是绑定的XML文件，userbeans.xml绑定成了beans.xml。。。</p><div class="hljs"><pre><code class="hljs java">ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"userbeans.xml"</span>);</code></pre></div><h1 id="同时使用p命名空间、c命名空间"><a href="#同时使用p命名空间、c命名空间" class="headerlink" title="同时使用p命名空间、c命名空间"></a>同时使用p命名空间、c命名空间</h1><p>同时使用p命名空间、c命名空间，因为类中缺少无参构造器，控制台会报错：</p><div class="hljs"><pre><code class="hljs java">org.springframework.context.support.AbstractApplicationContext refresh警告: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'user' defined in class path resource [userbeans.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.melodyhub.pojo.User]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.melodyhub.pojo.User.&lt;init&gt;()org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'user' defined in class path resource [userbeans.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.melodyhub.pojo.User]: No default constructor found; nested exception is java.lang.NoSuchMethodException: com.melodyhub.pojo.User.&lt;init&gt;()</code></pre></div><p><strong>解决：</strong></p><p>类中加上<strong><em>无参构造器</em></strong>，即可。</p><h1 id="NullPointerException"><a href="#NullPointerException" class="headerlink" title="NullPointerException"></a>NullPointerException</h1><p>控制台报错：出现空指针</p><div class="hljs"><pre><code class="hljs java">java.lang.NullPointerException</code></pre></div><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>上述问题存在多种情况。</p><ol><li>可能是使用了注解，但是<code>applicationContext.xml</code>中没有该语句</li></ol><div class="hljs"><pre><code class="hljs xm">&lt;!--开启对注解的支持--&gt;&lt;context:annotation-config/&gt;</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下学习Spring时的踩坑经验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】392. 判断子序列</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/26/%E3%80%90LeetCode%E3%80%91392.-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/26/%E3%80%90LeetCode%E3%80%91392.-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2020-07-26T06:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定字符串 s 和 t ，判断 s 是否为 t 的子序列。</p><p>你可以认为 s 和 t 中仅包含英文小写字母。</p><p>字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &lt;=100）。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p><p>示例 1:</p><div class="hljs"><pre><code class="hljs java">s = <span class="hljs-string">"abc"</span>, t = <span class="hljs-string">"ahbgdc"</span>返回 <span class="hljs-keyword">true</span>.</code></pre></div><p>示例 2:</p><div class="hljs"><pre><code class="hljs java">s = <span class="hljs-string">"axc"</span>, t = <span class="hljs-string">"ahbgdc"</span>返回 <span class="hljs-keyword">false</span>.</code></pre></div><p>后续挑战 :</p><blockquote><p>如果有大量输入的 S，称作S1, S2, … , Sk 其中 k &gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p></blockquote><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="贪心法-双指针"><a href="#贪心法-双指针" class="headerlink" title="贪心法+双指针"></a>贪心法+双指针</h2><p>简单的办法就是使用双滑动指针，思路好理解，直接上算法：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-comment">/* 双指针的贪心算法 */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(String s, String t)</span> </span>{        <span class="hljs-keyword">int</span> sL = s.length();        <span class="hljs-keyword">int</span> tL = t.length();        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;        <span class="hljs-comment">//包含了s为空或s&gt;t的情况</span>        <span class="hljs-keyword">while</span>(i &lt; sL &amp;&amp; j &lt; tL){            <span class="hljs-keyword">if</span>(s.charAt(i) == t.charAt(j)){                i++;                j++;            } <span class="hljs-keyword">else</span> {                j++;            }        }        <span class="hljs-keyword">return</span> i == sL;    }}</code></pre></div><p><img src="https://s1.ax1x.com/2020/07/27/aiabuQ.png" srcset="/blog/img/loading.gif" alt="aiabuQ.png"></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>从双指针的贪心算法中，可以推导出下面这两个式子：</p><div class="hljs"><pre><code class="hljs java">s.charAt(i-<span class="hljs-number">1</span>) == t.charAt(j-<span class="hljs-number">1</span>)=&gt; dp[i][j] = dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]s.charAt(i-<span class="hljs-number">1</span>) != t.charAt(j-<span class="hljs-number">1</span>)=&gt; dp[i][j] = dp[i][j-<span class="hljs-number">1</span>]</code></pre></div><p>dff</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-comment">/* 动态规划 */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(String s, String t)</span> </span>{        <span class="hljs-keyword">if</span>(s.length()==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">if</span>(s.length() &gt; t.length()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">boolean</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[s.length()+<span class="hljs-number">1</span>][t.length()+<span class="hljs-number">1</span>];        <span class="hljs-comment">//初始化</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; t.length(); j++) {            dp[<span class="hljs-number">0</span>][j] = <span class="hljs-keyword">true</span>;        }        <span class="hljs-keyword">int</span> sL = s.length();        <span class="hljs-keyword">int</span> tL = t.length();        <span class="hljs-comment">//dp</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= sL; i++) {            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= tL; j++) {                <span class="hljs-keyword">if</span> (s.charAt(i - <span class="hljs-number">1</span>) == t.charAt(j - <span class="hljs-number">1</span>)) {                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];                } <span class="hljs-keyword">else</span> {                    dp[i][j] = dp[i][j - <span class="hljs-number">1</span>];                }            }        }        <span class="hljs-keyword">return</span> dp[sL][tL];    }}</code></pre></div><p><img src="https://s1.ax1x.com/2020/07/27/ai2wE8.png" srcset="/blog/img/loading.gif" alt="ai2wE8.png"></p><h2 id="递归迭代-单指针"><a href="#递归迭代-单指针" class="headerlink" title="递归迭代+单指针"></a>递归迭代+单指针</h2><ul><li>对于两个字符串，判断其中一个字符串是否是另外一个字符串的子序列，可以采用循环迭代+单指针的方式实现判断，能够简单快速实现功能。</li></ul><ol><li>以最短字符串为基准，循环迭代，分别获取位置由小到大的字符；</li><li>设置字符串t的指针位置index，用于判断s的字符是否处于字符串t中的指针位置index到字符串尾部；</li><li>如果s的字符处于字符串t的指定字符串范围中，则index加1，不断重复该操作；</li><li>如果s的字符不处于字符串t的指定字符串范围中，则直接返回false；</li></ol><blockquote><p>作者：andy_fu<br>链接：<a href="https://leetcode-cn.com/problems/is-subsequence/solution/xun-huan-die-dai-dan-zhi-zhen-jian-dan-kuai-su-shi/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/is-subsequence/solution/xun-huan-die-dai-dan-zhi-zhen-jian-dan-kuai-su-shi/</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/07/27/aihzwt.png" srcset="/blog/img/loading.gif" alt="aihzwt.png"></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-comment">/* 递归迭代+单指针 */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(String s, String t)</span> </span>{        <span class="hljs-keyword">if</span>(s.length() &gt; t.length()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++){            <span class="hljs-comment">// if exists next index positioin</span>            <span class="hljs-keyword">if</span>((index = t.indexOf(String.valueOf(s.charAt(i)),index) + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>){                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            }        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    }}</code></pre></div><ul><li><code>String.valueOf</code></li></ul><p><img src="https://s1.ax1x.com/2020/07/27/aih3Zt.png" srcset="/blog/img/loading.gif" alt="aih3Zt.png"></p><ul><li><code>String.indexOf</code></li></ul><p><img src="https://s1.ax1x.com/2020/07/27/aifygH.png" srcset="/blog/img/loading.gif" alt="aifygH.png"></p><h2 id="LCS最长公共子序列"><a href="#LCS最长公共子序列" class="headerlink" title="LCS最长公共子序列"></a>LCS最长公共子序列</h2><p>这题是可以用最长公共子序列的模板来做，但是估计时间复杂度会比较大。算法，略。</p><h1 id="精选题解"><a href="#精选题解" class="headerlink" title="精选题解"></a>精选题解</h1><ol><li><a href="https://leetcode-cn.com/problems/is-subsequence/solution/pan-duan-zi-xu-lie-by-leetcode-solution/" target="_blank" rel="noopener">官方题解</a></li><li><a href="https://leetcode-cn.com/problems/is-subsequence/solution/javade-2chong-jie-fa-by-sdwwld/" target="_blank" rel="noopener">java的4种解法（第三种方式双百）（公共子序列，双指针，逐个查找，动态规划）</a></li></ol><blockquote><p>我们知道java中String类有这样一个方法public int indexOf(int ch, int fromIndex) ，他表示的是在字符串中是否存在一个字符ch，并且是从字符串的下标fromIndex开始查找的。我们要做的是在t字符串中查找s中的每一个字符，如果没查到，直接返回false。如果查到，就从t的下一个位置继续开始查。</p><p>作者：sdwwld<br>链接：<a href="https://leetcode-cn.com/problems/is-subsequence/solution/javade-2chong-jie-fa-by-sdwwld/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/is-subsequence/solution/javade-2chong-jie-fa-by-sdwwld/</a></p></blockquote><div class="hljs"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubsequence</span><span class="hljs-params">(String s, String t)</span> </span>{    <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : s.toCharArray()) {        <span class="hljs-comment">//index表示上一次查找的位置(第一次查找的时候为-1)，所以这里要从t的下标(index+1)开始查找</span>        index = t.indexOf(c, index + <span class="hljs-number">1</span>);        <span class="hljs-comment">//没找到，返回false</span>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>)            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    }    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;}</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定字符串 s 和 t ，判断 s 是否为 t 的子序列。&lt;/p&gt;
&lt;p&gt;你可以认为 s 和 t 中仅包含英文小写字母。&lt;/p&gt;
&lt;p&gt;字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 &amp;lt;=100）。&lt;/p&gt;
&lt;p&gt;字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;abc&quot;&lt;/span&gt;, t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;ahbgdc&quot;&lt;/span&gt;

返回 &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;s = &lt;span class=&quot;hljs-string&quot;&gt;&quot;axc&quot;&lt;/span&gt;, t = &lt;span class=&quot;hljs-string&quot;&gt;&quot;ahbgdc&quot;&lt;/span&gt;

返回 &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后续挑战 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果有大量输入的 S，称作S1, S2, … , Sk 其中 k &amp;gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="算法" scheme="https://melodyjerry.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>“内聚性”和“耦合性”</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/25/%E2%80%9C%E5%86%85%E8%81%9A%E6%80%A7%E2%80%9D%E5%92%8C%E2%80%9C%E8%80%A6%E5%90%88%E6%80%A7%E2%80%9D/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/25/%E2%80%9C%E5%86%85%E8%81%9A%E6%80%A7%E2%80%9D%E5%92%8C%E2%80%9C%E8%80%A6%E5%90%88%E6%80%A7%E2%80%9D/</id>
    <published>2020-07-25T11:05:50.000Z</published>
    <updated>2020-08-27T05:55:24.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内聚性"><a href="#内聚性" class="headerlink" title="内聚性"></a>内聚性</h1><ul><li>又称<strong>块内联系</strong></li><li>指<strong><em>模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。</em></strong></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>内聚性是<strong>对一个模块内部各个组成元素之间相互结合的紧密程度的度量指标。</strong></li><li><strong><em>模块中组成元素结合的越紧密，模块的内聚性就越高，模块的独立性也就越高。</em></strong></li><li>理想的内聚性要求模块的功能应明确、单一，即一个模块只做一件事情。</li><li><strong><em>模块的内聚性和耦合性是两个相互对立且又密切相关的概念。</em></strong></li></ul><h1 id="耦合性"><a href="#耦合性" class="headerlink" title="耦合性"></a>耦合性</h1><ul><li>也叫耦合度，是<strong>对模块间关联程度的度量。</strong></li><li><strong><em>耦合的强弱取决与模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。</em></strong></li></ul><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>模块间的耦合度是指<strong>模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。</strong></li><li><strong><em>模块间联系越多，其耦合性越强，同时表明其独立性越差。</em></strong></li><li><strong>软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。</strong></li><li>划分模块的一个准则就是<strong>“高内聚、低耦合”</strong>。<a id="more"></a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内聚性&quot;&gt;&lt;a href=&quot;#内聚性&quot; class=&quot;headerlink&quot; title=&quot;内聚性&quot;&gt;&lt;/a&gt;内聚性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;又称&lt;strong&gt;块内联系&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;指&lt;strong&gt;&lt;em&gt;模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内聚性是&lt;strong&gt;对一个模块内部各个组成元素之间相互结合的紧密程度的度量指标。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;模块中组成元素结合的越紧密，模块的内聚性就越高，模块的独立性也就越高。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;理想的内聚性要求模块的功能应明确、单一，即一个模块只做一件事情。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;模块的内聚性和耦合性是两个相互对立且又密切相关的概念。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;耦合性&quot;&gt;&lt;a href=&quot;#耦合性&quot; class=&quot;headerlink&quot; title=&quot;耦合性&quot;&gt;&lt;/a&gt;耦合性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;也叫耦合度，是&lt;strong&gt;对模块间关联程度的度量。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;耦合的强弱取决与模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特性-1&quot;&gt;&lt;a href=&quot;#特性-1&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块间的耦合度是指&lt;strong&gt;模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;模块间联系越多，其耦合性越强，同时表明其独立性越差。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;划分模块的一个准则就是&lt;strong&gt;“高内聚、低耦合”&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Java动态代理详解</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/25/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/25/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.118Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zyzblogs/p/11009872.html" target="_blank" rel="noopener">java动态代理详解</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/zyzblogs/p/11009872.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java动态代理详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring框架</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/25/%E5%88%9D%E8%AF%86Spring%E6%A1%86%E6%9E%B6/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/25/%E5%88%9D%E8%AF%86Spring%E6%A1%86%E6%9E%B6/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p><font color="red" size="5"><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></font></p><p><strong><em>Spring : 春天 —&gt; 给软件行业带来了春天</em></strong></p><blockquote><p>2002年，<code>Rod Jahnson</code>首次推出了<code>Spring</code>框架雏形<code>interface21</code>框架。</p><p>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</p><p>很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</p></blockquote><h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h2><p>使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</p><h2 id="官网-amp-文档-amp-下载"><a href="#官网-amp-文档-amp-下载" class="headerlink" title="官网&amp;文档&amp;下载"></a>官网&amp;文档&amp;下载</h2><p>官网 : <a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p><p>GitHub : <a href="https://github.com/spring-projects" target="_blank" rel="noopener">https://github.com/spring-projects</a></p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html" target="_blank" rel="noopener">Spring 官方文档</a></p><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference" target="_blank" rel="noopener">Spring 中文文档</a></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p><font color="red"><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></font></p><ul><li>Spring是一个<strong><em>开源的免费的框架（容器）！！！</em></strong></li><li>Spring是一个<strong><em>轻量级的、非侵入式的框架！！！</em></strong></li><li><font color="red" size="5"><strong>控制反转 IoC  , 面向切面 Aop</strong></font><font color="red">（面试经常问到）</font></li><li>支持对事务的处理 </li><li>支持对框架的整合</li></ul><blockquote><p>Spring框架是一种非侵入式的轻量级框架——摘自《Spring框架技术》</p><ol><li>非侵入式的技术体现</li></ol><ul><li>允许在应用系统中自由选择和组装Spring框架的各个功能模块，并且不强制要求应用系统的类必须从Spring框架的系统API的某个类来继承或者实现某个接口。</li></ul><ol start="2"><li>如何实现非侵入式的设计目标的</li></ol><ul><li>1）应用反射机制，通过动态调用的方式来提供各方面的功能，建立核心组间BeanFactory</li><li>2）配合使用Spring框架中的BeanWrapper和BeanFactory组件类最终达到对象的实例创建和属性注入</li><li>3）优点：允许所开发出来的应用系统能够在不用的环境中自由移植，不需要修改应用系统中的核心功能实现的代码</li></ul></blockquote><a id="more"></a><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><img src="https://s1.ax1x.com/2020/07/25/aSiH3R.png" srcset="/blog/img/loading.gif" alt="aSiH3R.png"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li><p>现代化的Java开发（即，基于Spring的开发）！！！</p></li><li><p>Spring Boot</p></li><li><p>Spring Cloud</p></li></ul><blockquote><p>现在大多数公司都在使用SpringBoot进行快速开发。</p></blockquote><blockquote><p>承上启下：学习SpringBoot的前提，是完全掌握Spring以及SpringMVC！！！</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/25/aSFuCj.png" srcset="/blog/img/loading.gif" alt="aSFuCj.png"></p><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><ul><li>Spring Boot 是 Spring 的一套快速配置脚手架</li><li>可以基于Spring Boot 快速开发单个微服务</li><li>Spring Boot专注于快速、方便集成的单个微服务个体</li><li>Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置</li></ul><h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><ul><li><strong><em>发展太久了，违背了原来的理念！！！</em></strong></li><li><strong><em>配置十分繁琐，人称“配置地狱”！！！</em></strong></li></ul><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><ul><li>Spring Cloud是基于Spring Boot实现的</li><li>Spring Cloud关注全局的服务治理框架</li><li>Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系</li><li>SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习SpringBoot</li></ul><h1 id="IoC-理论推导"><a href="#IoC-理论推导" class="headerlink" title="IoC 理论推导"></a>IoC 理论推导</h1><ol><li>UserDao 接口</li><li>UserDaoImpl 实现类</li><li>UserService 业务接口</li><li>UserServiceImpl 业务实现类</li></ol><h2 id="原来的实现"><a href="#原来的实现" class="headerlink" title="原来的实现"></a>原来的实现</h2><p>1、先写一个UserDao接口</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>{   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>2、再去写Dao的实现类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>{   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{       System.out.println(<span class="hljs-string">"获取用户数据"</span>);  }}</code></pre></div><p>3、然后去写UserService的接口</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>4、最后写Service的实现类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{   <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{       userDao.getUser();  }}</code></pre></div><p>5、测试一下</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{   UserService service = <span class="hljs-keyword">new</span> UserServiceImpl();   service.getUser();}</code></pre></div><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>这是我们原来的方式 , 开始大家也都是这么去写的对吧 . 那我们现在修改一下 .</p><p>把Userdao的实现类增加一个 .</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoMySqlImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>{   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{       System.out.println(<span class="hljs-string">"MySql获取用户数据"</span>);  }}</code></pre></div><p>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实现</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{   <span class="hljs-keyword">private</span> UserDao userDao = <span class="hljs-keyword">new</span> UserDaoMySqlImpl();   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{       userDao.getUser();  }}</code></pre></div><p>在假设, 我们再增加一个Userdao的实现类 .</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoOracleImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>{   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{       System.out.println(<span class="hljs-string">"Oracle获取用户数据"</span>);  }}</code></pre></div><p><strong>那么我们要使用Oracle , 又需要去service实现类里面修改对应的实现 .</strong> 假设我们的这种需求非常大 , 这种方式就根本不适用了, 甚至反人类吧 .</p><p><strong><em>用户的需求可能会影响我们原来的代码</em></strong></p><p><strong><em>我们需要根据用户的需求去修改原代码！</em></strong></p><p><strong><em>如果程序代码量十分大，修改一次的成本代价十分昂贵！</em></strong></p><p><strong><em>根据每次变动 , 都需要修改大量代码 !</em></strong></p><p><strong><em>这种设计的耦合性太高了, 牵一发而动全身 !</em></strong></p><h2 id="改进优化"><a href="#改进优化" class="headerlink" title="改进优化"></a>改进优化</h2><p>我们可以在需要用到他的地方 , 不去实现它 , 而是留出一个接口 , 利用一个set接口 , 我们去代码里修改下 :</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{   <span class="hljs-keyword">private</span> UserDao userDao;   <span class="hljs-comment">//利用set实现值的动态注入</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>{       <span class="hljs-keyword">this</span>.userDao = userDao;  }   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{       userDao.getUser();  }}</code></pre></div><p>现在去我们的测试类里 , 进行测试 ;</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{   UserServiceImpl service = <span class="hljs-keyword">new</span> UserServiceImpl();   service.setUserDao( <span class="hljs-keyword">new</span> UserDaoMySqlImpl() );   service.getUser();       <span class="hljs-comment">//那我们现在又想用Oracle去实现呢</span>   service.setUserDao( <span class="hljs-keyword">new</span> UserDaoOracleImpl() );   service.getUser();}</code></pre></div><p>发现了区别没有？</p><p>他们已经发生了根本性的变化 , 很多地方都不一样了。</p><ul><li>之前，所有东西都是由程序去进行控制创建，控制权在程序员手上！</li><li>现在，使用set注入后，是由我们自行控制创建对象 , 把主动权交给了调用者。程序不再有主动性，而是变成了被动的接收对象。</li><li>程序不用去管怎么创建，怎么实现了。它只负责提供一个接口。</li></ul><p><strong><em>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</em></strong></p><h1 id="IoC本质"><a href="#IoC本质" class="headerlink" title="IoC本质"></a>IoC本质</h1><ul><li><strong>控制反转IoC(Inversion of Control)</strong></li></ul><p><img src="https://s1.ax1x.com/2020/07/25/aSWk4A.png" srcset="/blog/img/loading.gif" alt="aSWk4A.png"></p><ul><li><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></li><li><strong>是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。</li></ul><blockquote><p>没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，<strong>对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方</strong>，个人认为<strong><em>所谓控制反转就是：获得依赖对象的方式反转了。</em></strong></p></blockquote><p><img src="https://s1.ax1x.com/2020/07/25/aSWNuT.png" srcset="/blog/img/loading.gif" alt="aSWNuT.png"></p><h1 id="Spring和IoC的关系"><a href="#Spring和IoC的关系" class="headerlink" title="Spring和IoC的关系"></a>Spring和IoC的关系</h1><ul><li><strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC：<ul><li>①可以使用XML配置</li><li>②也可以使用注解</li><li>③新版本的Spring也可以零配置实现IoC（即自动装配）。</li></ul></li></ul><blockquote><p>Spring容器在初始化时先读取配置文件，</p><p>根据配置文件或元数据创建与组织对象存入容器中，</p><p>程序使用时再从Ioc容器中取出需要的对象。</p></blockquote><p><img src="https://s1.ax1x.com/2020/07/25/aShKYj.png" srcset="/blog/img/loading.gif" alt="aShKYj.png"></p><ul><li>采用XML方式配置Bean的时候，<strong>Bean的定义信息是和实现分离的</strong></li><li>而采用注解的方式可以把两者合为一体，<strong>Bean的定义信息直接以注解的形式定义在实现类中</strong>，从而达到了<strong><em>零配置</em></strong>的目的。</li></ul><h1 id="HelloSpring入门程序"><a href="#HelloSpring入门程序" class="headerlink" title="HelloSpring入门程序"></a>HelloSpring入门程序</h1><h2 id="①基础环境"><a href="#①基础环境" class="headerlink" title="①基础环境"></a>①基础环境</h2><ul><li>JDK ：12</li><li>Spring：5.2.7</li><li>Junit：4.12</li><li>IDEA：2020.1.2</li></ul><h2 id="②导入jar包"><a href="#②导入jar包" class="headerlink" title="②导入jar包"></a>②导入jar包</h2><blockquote><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 </p></blockquote><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h2 id="③编写代码"><a href="#③编写代码" class="headerlink" title="③编写代码"></a>③编写代码</h2><p>1、编写一个Hello实体类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello{"</span> +                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>2、编写我们的spring文件 , 这里我们命名为beans.xml</p><div class="hljs"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;&lt;beans xmlns=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>       xmlns:xsi=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi:schemaLocation=<span class="hljs-string">"http://www.springframework.org/schema/beans</span><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;    &lt;!--使用Spring来创建对象，在Spring中这些都成为bean    类型 变量名 = <span class="hljs-keyword">new</span> 类型();    Hello hello = <span class="hljs-keyword">new</span> Hello();    id = 变量名    <span class="hljs-class"><span class="hljs-keyword">class</span> </span>= <span class="hljs-keyword">new</span> 的对象    property 相当于给对象中的属性赋值             注意: 这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写。     引用另外一个bean , 不是用value, 而是用 ref 。    &lt;bean id=<span class="hljs-string">"..."</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"..."</span>&gt;        &amp;lt;!&amp;ndash; collaborators and configuration <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> bean go here &amp;ndash;&amp;gt;    &lt;/bean&gt;--&gt;    &lt;!--bean就是java对象, 在Spring中都成为Bean，由Spring创建和管理--&gt;    &lt;bean id=<span class="hljs-string">"hello"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"com.melodyhub.pojo.Hello"</span>&gt;        &lt;property name=<span class="hljs-string">"str"</span> value=<span class="hljs-string">"Spring"</span>/&gt;    &lt;/bean&gt;    &lt;!--注意:        这里的name并不是属性 , 而是set方法后面的那部分 , 首字母小写。       ref:引用Spring容器中创建好的对象。引用另外一个bean , 不是用value, 而是用ref。        value：具体的值，基本数据类型！     --&gt;            &lt;!-- more bean definitions go here --&gt;&lt;/beans&gt;</code></pre></div><p>3、我们可以去进行测试了</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.melodyhub.pojo.Hello;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//获取Spring的上下文对象</span>        <span class="hljs-comment">//解析beans.xml文件,生成管理相应的Bean对象</span>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);        <span class="hljs-comment">//我们的对象现在在Spring中创建和管理了</span>        <span class="hljs-comment">//要使用对象，直接去Spring中取出来就可以了</span>        <span class="hljs-comment">//getBean:参数即为spring配置文件中bean的id</span>        Hello hello = (Hello) context.getBean(<span class="hljs-string">"hello"</span>);        System.out.println(hello.toString());    }}</code></pre></div><h1 id="入门踩坑"><a href="#入门踩坑" class="headerlink" title="入门踩坑"></a>入门踩坑</h1><h2 id="JDK8不兼容Spring4-x以下版本"><a href="#JDK8不兼容Spring4-x以下版本" class="headerlink" title="JDK8不兼容Spring4.x以下版本"></a>JDK8不兼容Spring4.x以下版本</h2><p>入门三天，我一直被这控制台一片红苦恼着。</p><p>在视频的评论区中没有解决，上论坛上也没有解决。</p><p><img src="https://s1.ax1x.com/2020/07/28/ak2CAf.png" srcset="/blog/img/loading.gif" alt="ak2CAf.png"></p><p>详细报错：</p><div class="hljs"><pre><code class="hljs java">org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions信息: Loading XML bean definitions from class path resource [beans.xml]Exception in thread <span class="hljs-string">"main"</span> java.lang.NoSuchMethodError: org.springframework.core.annotation.AnnotationUtils.clearCache()Vat org.springframework.context.support.AbstractApplicationContext.resetCommonCaches(AbstractApplicationContext.java:<span class="hljs-number">924</span>)at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="hljs-number">575</span>)at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:<span class="hljs-number">144</span>)at org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:<span class="hljs-number">85</span>)at MyTest.main(MyTest.java:<span class="hljs-number">13</span>)</code></pre></div><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>知道我无意间看到这个！！！</p><p><img src="https://s1.ax1x.com/2020/07/28/akWkOs.png" srcset="/blog/img/loading.gif" alt="akWkOs.png"></p><p>Ctrl+Shift+Alt+S，进入项目设置，更换项目的JDK版本为8以上，我选择的是JDK12：</p><p><img src="https://s1.ax1x.com/2020/07/28/akhxT1.png" srcset="/blog/img/loading.gif" alt="akhxT1.png"></p><p>如果以上设置还法子解决，那可能还需要再修改<code>spring-study.iml</code>文件：</p><p><img src="https://s1.ax1x.com/2020/07/28/akof3V.png" srcset="/blog/img/loading.gif" alt="akof3V.png"></p><h2 id="不支持发行版本5-或-Compilation-failed-internal-java-compiler-error"><a href="#不支持发行版本5-或-Compilation-failed-internal-java-compiler-error" class="headerlink" title="不支持发行版本5 或 Compilation failed: internal java compiler error"></a>不支持发行版本5 或 Compilation failed: internal java compiler error</h2><p>提示</p><p><code>Error: java: 错误: 不支持发行版本 5</code></p><p>或</p><p> ``Error: java: 错误: Compilation failed: internal java compiler error`</p><p><img src="https://s1.ax1x.com/2020/07/28/akLyHU.png" srcset="/blog/img/loading.gif" alt="akLyHU.png"></p><p><strong>分析：</strong></p><p>导致这个错误的原因主要是因为JDK版本问题，此处有两个原因，一个是编译版本不匹配，一个是当前项目JDK版本不支持。我的是编译器版本的问题。</p><p><strong>解决：</strong></p><p>Ctrl+Alt+S，进入IDEA设置，Compiler中设置Java编译器的版本。</p><blockquote><p>解决来源：<a href="https://blog.csdn.net/wo541075754/article/details/82119860" target="_blank" rel="noopener">https://blog.csdn.net/wo541075754/article/details/82119860</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/07/27/aFEbQO.png" srcset="/blog/img/loading.gif" alt="aFEbQO.png"></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><h2 id="Hello对象是谁创建的？"><a href="#Hello对象是谁创建的？" class="headerlink" title="Hello对象是谁创建的？"></a>Hello对象是谁创建的？</h2><p>Hello<strong>对象是由<code>Spring</code>创建的</strong></p><h2 id="Hello对象的属性是怎么设置的？"><a href="#Hello对象的属性是怎么设置的？" class="headerlink" title="Hello对象的属性是怎么设置的？"></a>Hello对象的属性是怎么设置的？</h2><p>Hello<strong>对象的属性是由<code>Spring</code>容器设置的</strong></p><h2 id="这个过程就叫控制反转"><a href="#这个过程就叫控制反转" class="headerlink" title="这个过程就叫控制反转"></a>这个过程就叫控制反转</h2><ul><li><p>控制 : 谁来控制对象的创建 , 传统应用程序的对象是由程序本身控制创建的 , 使用<code>Spring</code>后 , 对象是由<code>Spring</code>来创建的</p></li><li><p>反转 : 程序本身不创建对象 , 而变成被动的接收对象</p></li><li><p>依赖注入(DI) : 就是利用<code>set</code>方法来进行注入的</p></li></ul><p><font color="red" size="5">IOC是一种编程思想，由主动的编程变成被动的接收</font></p><p>可以通过<code>newClassPathXmlApplicationContext</code>去浏览一下底层源码</p><p><strong>OK , 到了现在 , 我们彻底不用再程序中去改动了 , 要实现不同的操作 , 只需要在<code>xml</code>配置文件中进行修改 , 所谓的<code>IoC</code>,一句话搞定 : 对象由<code>Spring</code>来创建 , 管理 , 装配 !</strong></p><h1 id="IoC创建对象的方式"><a href="#IoC创建对象的方式" class="headerlink" title="IoC创建对象的方式"></a>IoC创建对象的方式</h1><h2 id="一、默认：使用无参构造创建对象"><a href="#一、默认：使用无参构造创建对象" class="headerlink" title="一、默认：使用无参构造创建对象"></a>一、默认：使用无参构造创建对象</h2><p><font color="red">Spring中默认：使用无参构造创建对象</font> </p><p><a href="#构造器注入">传送门：依赖注入-构造器</a></p><h2 id="二、使用有参构造创建对象"><a href="#二、使用有参构造创建对象" class="headerlink" title="二、使用有参构造创建对象"></a>二、使用有参构造创建对象</h2><ol><li>通过 <font color="red">下标</font> 赋值</li><li>通过 <font color="red">类型</font> 赋值</li><li>直接通过 <font color="red">属性名</font> 赋值</li></ol><h3 id="1-下标赋值"><a href="#1-下标赋值" class="headerlink" title="1.下标赋值"></a>1.下标赋值</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第1种方式：下标赋值--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span>&gt;</span>    <span class="hljs-comment">&lt;!--&lt;property name="name" value="MelodyJerry"/&gt;--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"下标赋值：MeloduHub-MelodyJerry"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h3 id="2-类型赋值"><a href="#2-类型赋值" class="headerlink" title="2.类型赋值"></a>2.类型赋值</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第2种方式：类型赋值--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"类型赋值：MeloduHub-MelodyJerry"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h3 id="3-直接通过属性名赋值"><a href="#3-直接通过属性名赋值" class="headerlink" title="3.直接通过属性名赋值"></a>3.直接通过属性名赋值</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第3种方式：直接通过属性值实现赋值--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"nmae"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"直接通过属性值实现赋值：MeloduHub-MelodyJerry"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h1 id="总结：在Spring配置文件加载-即创建Bean-时，容器中管理的对象就已经被初始化-实例化了，而且内存中只有1份实例！"><a href="#总结：在Spring配置文件加载-即创建Bean-时，容器中管理的对象就已经被初始化-实例化了，而且内存中只有1份实例！" class="headerlink" title="总结：在Spring配置文件加载(即创建Bean)时，容器中管理的对象就已经被初始化/实例化了，而且内存中只有1份实例！"></a>总结：在Spring配置文件加载(即创建Bean)时，容器中管理的对象就已经被初始化/实例化了，而且内存中只有1份实例！</h1><p>UserTwo.java中：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTwo</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">//必须要有无参构造子，没有就会报错！！！</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserTwo</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"UserTwo被创建了！！！"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"name = "</span> + name);    }}</code></pre></div><p>beans.xml文件中：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring创建Bean的时候就实例化对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userTwo"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.UserTwo"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>MyTest.java中：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);        User user = (User) context.getBean(<span class="hljs-string">"user"</span>);        User user2 = (User) context.getBean(<span class="hljs-string">"user"</span>);        <span class="hljs-comment">//user.show();</span>        System.out.println(user == user2);    }}</code></pre></div><p>控制台输出：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-string">UserTwo被创建了！！！</span><span class="hljs-literal">true</span></code></pre></div><h1 id="Spring的xml配置文件说明"><a href="#Spring的xml配置文件说明" class="headerlink" title="Spring的xml配置文件说明"></a>Spring的xml配置文件说明</h1><h2 id="alias：别名"><a href="#alias：别名" class="headerlink" title="alias：别名"></a>alias：别名</h2><ul><li>如果增加了别名，我们也可以通过别名获取到这个对象！</li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>为user增加别名：woshibieming</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"nmae"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"直接通过属性值实现赋值：MeloduHub-MelodyJerry"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--alias:别名.如果增加了别名,我们也可以通过别名获取到这个对象--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"woshibieming"</span>/&gt;</span></code></pre></div><p>修改getBean中的参数：woshibieming</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);        User user = (User) context.getBean(<span class="hljs-string">"woshibieming"</span>);        user.show();    }}</code></pre></div><h2 id="bean标签的配置"><a href="#bean标签的配置" class="headerlink" title="bean标签的配置"></a>bean标签的配置</h2><ul><li><code>id</code>：<strong>bean的唯一标识符</strong>，也就是相当于我们学的对象名</li><li><code>class</code>：bean对象所对应的<strong>全限定名：包名+类名</strong></li><li><code>name</code>：<strong>也是别名，而且name可以同时取多个别名</strong><ul><li>分隔符：<em>逗号、空格、分号</em></li></ul></li><li><code>autowire</code>：自动导入</li><li><code>scope</code>：作用域。默认singleton(单例模式)，可选prototype(原型模式)、request、session、globalsession。更多详见：<a href="https://www.jianshu.com/p/852eae3b08d4" target="_blank" rel="noopener">spring常用注解-@Scope</a>、<a href="https://blog.csdn.net/w_linux/article/details/80069039" target="_blank" rel="noopener">Spring Bean的scope(作用域)</a></li></ul><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><p>测试bean标签的配置，并同时设置多个别名：two、u2、u3、u4</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userTwo"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.UserTwo"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"two u2,u3;u4"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"测试bean标签的配置，并同时设置多个别名：two、u2、u3、u4"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>修改getBean中的参数：u3</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);        UserTwo user = (UserTwo) context.getBean(<span class="hljs-string">"u3"</span>);        user.show();    }}</code></pre></div><p>控制台输出：</p><div class="hljs"><pre><code class="hljs makefile">UserTwo被创建了！！！name = 测试bean标签的配置，并同时设置多个别名：two、u2、u3、u4</code></pre></div><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ul><li><strong>一般用于团队开发使用</strong>，<code>import</code>可以<strong>将多个配置文件，导入合并为一个。</strong></li><li>而且，<strong><em>相同 <code>id</code>的对象的属性也会被合并到一起！！！</em></strong></li></ul><h3 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h3><p>假设现在项目中有多个人开发，张三（beans.xml）、李四（beans2.xml）、王五（beans3.xml），这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的applicationContext.xml！</p><ul><li><p>张三（beans.xml）</p></li><li><p>李四（beans2.xml）</p></li><li><p>王五（beans3.xml）</p></li><li><p>applicationContext.xml</p></li></ul><blockquote><p>新建applicationContext.xml文件，在IDEA的编辑区的右上角会看到蓝色的<font color="#4d84f5">Configure application contex</font>，单击并合并到原先的beans.xml中去</p></blockquote><p>但是现在要合并到applicationContext.xml，使用的时候，直接使用总的配置就可以了👇</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans2.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans3.xml"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p><font size="6">当然</font> <strong>也可以在<code>ClassPathXmlApplicationContext</code>中直接获取多个配置文件</strong>👇</p><div class="hljs"><pre><code class="hljs java">ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>,<span class="hljs-string">"beans2.xml"</span>,<span class="hljs-string">"beans3.xml"</span>);<span class="hljs-comment">//ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</span></code></pre></div><p>现在来看看对象的属性的合并，修改Bean2.xml、bean3.xml中user的别名</p><p><img src="https://s1.ax1x.com/2020/07/29/ae0btS.png" srcset="/blog/img/loading.gif" alt="ae0btS.png"></p><p>MyTest中修改getBean的参数为：u8</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml","beans2.xml","beans3.xml");</span>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        UserTwo user = (UserTwo) context.getBean(<span class="hljs-string">"u8"</span>);        user.show();    }}</code></pre></div><p>控制台输出：</p><div class="hljs"><pre><code class="hljs makefile">UserTwo被创建了！！！name = 测试bean标签的配置，并同时设置多个别名：two、u2、u3、u8</code></pre></div><p><font size="6" color="red">总结</font> </p><ul><li><p><code>import</code>可以<strong>将多个配置文件，导入合并为一个。</strong></p></li><li><p>而且，<strong><em>相同 <code>id</code>的对象的属性也会被合并到一起！！！</em></strong></p></li></ul><h1 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h1><ul><li><strong><em>依赖注入</em></strong>：<code>Dependency Injection</code>，简称<code>DI</code></li><li><font color="red">依赖注入(DI)是控制反转(IoC)的一种方式。</font></li><li>官方文档：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-dependencies" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-dependencies</a></li><li>拥有三种依赖注入的方式<ul><li>构造器（构造方法）注入</li><li><strong>Setter方式注入【重点】</strong></li><li>接口注入</li></ul></li></ul><blockquote><p>更多详见：<a href="https://www.cnblogs.com/levontor/p/11040029.html" target="_blank" rel="noopener">三种依赖注入的方式</a></p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1415873/201906/1415873-20190617152335658-1740051719.png" srcset="/blog/img/loading.gif" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1415873/201906/1415873-20190617152621891-763019643.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><p><a href="#IoC创建对象的方式">传送门：IoC创建对象的方式</a></p><h2 id="Setter方式注入【重点】"><a href="#Setter方式注入【重点】" class="headerlink" title="Setter方式注入【重点】"></a>Setter方式注入【重点】</h2><ul><li>依赖注入：Set注入！<ul><li>依赖：bean对象的创建依赖于容器！</li><li>注入：bean对象中的所有属性，由容器来注入！</li></ul></li></ul><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><ol><li>复杂类型</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>{    <span class="hljs-keyword">private</span> String address;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> address;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>{        <span class="hljs-keyword">this</span>.address = address;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Address{"</span> +                <span class="hljs-string">"address='"</span> + address + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><ol start="2"><li>真是测试对象</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Address address;    <span class="hljs-keyword">private</span> String[] books;    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;    <span class="hljs-keyword">private</span> Map&lt;String, String &gt; card;    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;    <span class="hljs-keyword">private</span> String wife;    <span class="hljs-keyword">private</span> Properties info;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Address <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> address;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(Address address)</span> </span>{        <span class="hljs-keyword">this</span>.address = address;    }    <span class="hljs-keyword">public</span> String[] getBooks() {        <span class="hljs-keyword">return</span> books;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBooks</span><span class="hljs-params">(String[] books)</span> </span>{        <span class="hljs-keyword">this</span>.books = books;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getHobbys</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> hobbys;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHobbys</span><span class="hljs-params">(List&lt;String&gt; hobbys)</span> </span>{        <span class="hljs-keyword">this</span>.hobbys = hobbys;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title">getCard</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> card;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCard</span><span class="hljs-params">(Map&lt;String, String&gt; card)</span> </span>{        <span class="hljs-keyword">this</span>.card = card;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title">getGames</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> games;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGames</span><span class="hljs-params">(Set&lt;String&gt; games)</span> </span>{        <span class="hljs-keyword">this</span>.games = games;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWife</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> wife;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWife</span><span class="hljs-params">(String wife)</span> </span>{        <span class="hljs-keyword">this</span>.wife = wife;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Properties <span class="hljs-title">getInfo</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> info;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setInfo</span><span class="hljs-params">(Properties info)</span> </span>{        <span class="hljs-keyword">this</span>.info = info;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Student{"</span> +                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", address="</span> + address.toString() +                <span class="hljs-string">", books="</span> + Arrays.toString(books) +                <span class="hljs-string">", hobbys="</span> + hobbys +                <span class="hljs-string">", card="</span> + card +                <span class="hljs-string">", games="</span> + games +                <span class="hljs-string">", wife='"</span> + wife + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", info="</span> + info +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><ol start="3"><li>beans.xml</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.Student"</span>&gt;</span>        <span class="hljs-comment">&lt;!--第一种：普通值注入，value--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"MelodyJerry"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><ol start="4"><li>测试类</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);        Student student = (Student) context.getBean(<span class="hljs-string">"student"</span>);        System.out.println(student.toString());    }}</code></pre></div><ol start="5"><li>完善注入信息</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.Address"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.Student"</span>&gt;</span>    <span class="hljs-comment">&lt;!--第一种：普通值注入，value--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"MelodyJerry"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--第二种：Bean注入，ref--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"address"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--数组注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"books"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!--List注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobbys"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>打球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跑步<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>学习<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!--Map注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"card"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"身份证"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1234567890"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"银行卡"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2364101"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!--Set注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"games"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>王者荣耀<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!--NULL注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"wife"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!--Property注入--&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        &lt;prop key="键"&gt;值&lt;/prop&gt;</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"info"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"性别"</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"年龄"</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"身高"</span>&gt;</span>186cm<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><h2 id="扩展方式注入"><a href="#扩展方式注入" class="headerlink" title="扩展方式注入"></a>扩展方式注入</h2><p>官方文档:<br><img src="https://s1.ax1x.com/2020/08/25/dcazwQ.png" srcset="/blog/img/loading.gif" alt="dcazwQ.png"></p><h3 id="p-命名空间注入"><a href="#p-命名空间注入" class="headerlink" title="p-命名空间注入"></a>p-命名空间注入</h3><ul><li><p><code>p</code>：<code>property</code></p><blockquote><p>The p-namespace lets you use the <code>bean</code>element’s attributes (instead of nested <code>&lt;property/&gt;</code> elements) to describe your property values collaborating beans, or both.</p></blockquote></li><li><p>必须导入：</p></li></ul><div class="hljs"><pre><code class="hljs xml">xmlns:p="http://www.springframework.org/schema/p"</code></pre></div><h3 id="c-命名空间注入"><a href="#c-命名空间注入" class="headerlink" title="c-命名空间注入"></a>c-命名空间注入</h3><ul><li><code>c</code>：<code>constructor-arg</code></li><li><strong>类中必须存在  <em>有参构造器</em></strong></li></ul><blockquote><p>Similar to the <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-p-namespace" target="_blank" rel="noopener">XML Shortcut with the p-namespace</a>, the c-namespace, introduced in Spring 3.1, allows inlined attributes for configuring the constructor arguments rather then nested <code>constructor-arg</code> elements.</p></blockquote><ul><li>必须导入：</li></ul><div class="hljs"><pre><code class="hljs xml">xmlns:c="http://www.springframework.org/schema/c"</code></pre></div><h3 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h3><ol><li>User.java</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.age = age;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> age;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>{        <span class="hljs-keyword">this</span>.age = age;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"User{"</span> +                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", age="</span> + age +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><ol start="2"><li>userbeans.xml</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--p命名空间注入，可以直接注入属性的值。property--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">"21"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"MelodyJerry"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--c命名空间注入，可以通过构造器注入属性的值。constructor-arg--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"18"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"Jerry"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><ol start="3"><li>MyTest.java</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"userbeans.xml"</span>);        User user = context.getBean(<span class="hljs-string">"user"</span>,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        User user2 = context.getBean(<span class="hljs-string">"user2"</span>,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        System.out.println(user);        System.out.println(user2);    }</code></pre></div><h3 id="重点注意"><a href="#重点注意" class="headerlink" title="重点注意"></a>重点注意</h3><ul><li><p>使用前，必须导入对应的xml约束：<code>xmlns:p</code>或<code>xmlns:c</code></p></li><li><p>使用<strong>c-命名空间</strong>的前提：<strong>类中必须存在有参构造器</strong></p></li><li><p><strong>同时</strong>使用p命名空间、c命名空间<strong>：类中必须存在</strong> <font color="red">无参构造器、有参构造器</font></p></li></ul><h1 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h1><p>官方文档：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes" target="_blank" rel="noopener">Bean Scopes</a></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"beanname"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.linjie.Bean"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span>/&gt;</span></code></pre></div><ul><li><strong>singleton（重点）</strong></li><li><strong>prototype（重点）</strong></li><li>request</li><li>session</li><li>application</li><li>websocket</li></ul><table><thead><tr><th align="left">Scope</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton</a><br>单例模式</td><td align="left">(Spring默认使用singleton)<br> 每一个Spring容器中，一个Bean定义只有一个对象实例<br><img src="https://s1.ax1x.com/2020/08/25/dcL4oD.png" srcset="/blog/img/loading.gif" alt="dcL4oD.png"></td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype</a><br>原型模式</td><td align="left">允许Bean的定义可以被实例化任意次<br>（每次调用都创建一个实例）<br><img src="https://s1.ax1x.com/2020/08/25/dcLHSA.png" srcset="/blog/img/loading.gif" alt="dcLHSA.png"></td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a></td><td align="left">一次HTTP请求中，每个Bean定义对应一个实例，该作用域仅在基于Web的Spring上下文（例如SpringMVC）中才有效</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a></td><td align="left">在一个HTTP Session中，每个Bean定义对应一个实例。该作用域仅在基于Web的Spring上下文（例如SpringMVC）中才有效</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>.该作用域仅在基于Web的Spring上下文（例如SpringMVC）中才有效</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener">websocket</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. 该作用域仅在基于Web的Spring上下文（例如SpringMVC）中才有效</td></tr></tbody></table><blockquote><p>更多参考：</p><p><a href="https://www.jianshu.com/p/852eae3b08d4" target="_blank" rel="noopener">Spring Bean的scope(作用域)</a></p><p><a href="https://www.jianshu.com/p/852eae3b08d4" target="_blank" rel="noopener">spring常用注解-@Scope</a></p></blockquote><h2 id="singleton-单例模式"><a href="#singleton-单例模式" class="headerlink" title="singleton 单例模式"></a>singleton 单例模式</h2><ul><li>Spring模式机制</li><li>并发开发中可能存在问题</li><li>一般在单线程中会使用</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"accountService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.something.DefaultAccountService"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"singleton"</span>/&gt;</span></code></pre></div><p><img src="https://s1.ax1x.com/2020/08/25/dcL4oD.png" srcset="/blog/img/loading.gif" alt="dcL4oD.png"></p><h2 id="prototype-原型模式"><a href="#prototype-原型模式" class="headerlink" title="prototype 原型模式"></a>prototype 原型模式</h2><ul><li>每次从容器中get的时候，都产生一个新对象！</li><li>特别浪费资源</li><li>一般在多线程中会使用</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"accountService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.something.DefaultAccountService"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span>/&gt;</span></code></pre></div><p><img src="https://s1.ax1x.com/2020/08/25/dcLHSA.png" srcset="/blog/img/loading.gif" alt="dcLHSA.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>其余的request、session、application这些只能在web开发中使用！</li><li>一般，单线程使用singleton，多线程使用prototype</li></ul><h1 id="Spring其他一些细节"><a href="#Spring其他一些细节" class="headerlink" title="Spring其他一些细节"></a>Spring其他一些细节</h1><h2 id="bean标签的使用"><a href="#bean标签的使用" class="headerlink" title="bean标签的使用"></a>bean标签的使用</h2><h4 id="①"><a href="#①" class="headerlink" title="①"></a>①</h4><p>改进Spring的程序，加上beans.xml配置：<br><img src="https://s1.ax1x.com/2020/07/28/aEmroF.png" srcset="/blog/img/loading.gif" alt="aEmroF.png"><br><img src="https://s1.ax1x.com/2020/07/28/aEmRQ1.png" srcset="/blog/img/loading.gif" alt="aEmRQ1.png"></p><h4 id="②"><a href="#②" class="headerlink" title="②"></a>②</h4><p>Spring创建Bean的时候就实例化对象</p><h2 id="ApplicationContext-getBean"><a href="#ApplicationContext-getBean" class="headerlink" title="ApplicationContext.getBean()"></a>ApplicationContext.getBean()</h2><p><img src="https://s1.ax1x.com/2020/08/25/d2ZCDK.png" srcset="/blog/img/loading.gif" alt="d2ZCDK.png"></p><ul><li><code>getBean(String name)</code></li><li><code>getBean(Class&lt;T&gt; type)</code></li><li><code>getBean(String name,Class&lt;T&gt; type)</code></li><li><code>getBean(String name,Object[] args)</code></li></ul><blockquote><p>更多详见：<a href="https://www.cnblogs.com/jpfss/p/9453763.html" target="_blank" rel="noopener">ApplicationContext之getBean方法详解</a></p></blockquote><h3 id="直接获取所要的、某类型的对象"><a href="#直接获取所要的、某类型的对象" class="headerlink" title="直接获取所要的、某类型的对象"></a>直接获取所要的、某类型的对象</h3><ul><li>调用 <code>getBean(String name,Class&lt;T&gt; type)</code></li></ul><div class="hljs"><pre><code class="hljs java">context.getBean(<span class="hljs-string">"people"</span>, People<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;&lt;strong&gt;Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Spring : 春天 —&amp;gt; 给软件行业带来了春天&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2002年，&lt;code&gt;Rod Jahnson&lt;/code&gt;首次推出了&lt;code&gt;Spring&lt;/code&gt;框架雏形&lt;code&gt;interface21&lt;/code&gt;框架。&lt;/p&gt;
&lt;p&gt;2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。&lt;/p&gt;
&lt;p&gt;很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理念&quot;&gt;&lt;a href=&quot;#理念&quot; class=&quot;headerlink&quot; title=&quot;理念&quot;&gt;&lt;/a&gt;理念&lt;/h2&gt;&lt;p&gt;使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术&lt;/p&gt;
&lt;h2 id=&quot;官网-amp-文档-amp-下载&quot;&gt;&lt;a href=&quot;#官网-amp-文档-amp-下载&quot; class=&quot;headerlink&quot; title=&quot;官网&amp;amp;文档&amp;amp;下载&quot;&gt;&lt;/a&gt;官网&amp;amp;文档&amp;amp;下载&lt;/h2&gt;&lt;p&gt;官网 : &lt;a href=&quot;http://spring.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://spring.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方下载地址 : &lt;a href=&quot;https://repo.spring.io/libs-release-local/org/springframework/spring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://repo.spring.io/libs-release-local/org/springframework/spring/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub : &lt;a href=&quot;https://github.com/spring-projects&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/spring-projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.2.0.RELEASE&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring是一个&lt;strong&gt;&lt;em&gt;开源的免费的框架（容器）！！！&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Spring是一个&lt;strong&gt;&lt;em&gt;轻量级的、非侵入式的框架！！！&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;&lt;strong&gt;控制反转 IoC  , 面向切面 Aop&lt;/strong&gt;&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;（面试经常问到）&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;支持对事务的处理 &lt;/li&gt;
&lt;li&gt;支持对框架的整合&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring框架是一种非侵入式的轻量级框架——摘自《Spring框架技术》&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非侵入式的技术体现&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;允许在应用系统中自由选择和组装Spring框架的各个功能模块，并且不强制要求应用系统的类必须从Spring框架的系统API的某个类来继承或者实现某个接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;如何实现非侵入式的设计目标的&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1）应用反射机制，通过动态调用的方式来提供各方面的功能，建立核心组间BeanFactory&lt;/li&gt;
&lt;li&gt;2）配合使用Spring框架中的BeanWrapper和BeanFactory组件类最终达到对象的实例创建和属性注入&lt;/li&gt;
&lt;li&gt;3）优点：允许所开发出来的应用系统能够在不用的环境中自由移植，不需要修改应用系统中的核心功能实现的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>技术文档集合</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/24/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E9%9B%86%E5%90%88/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/24/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E9%9B%86%E5%90%88/</id>
    <published>2020-07-23T16:01:00.000Z</published>
    <updated>2020-08-27T05:55:24.208Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.docs4dev.com/docs/zh" target="_blank" rel="noopener">中文技术文档集合</a></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html" target="_blank" rel="noopener">Spring 官方文档</a></p><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference" target="_blank" rel="noopener">Spring 中文文档</a></p><p><a href="http://mybatis.org/spring/zh/" target="_blank" rel="noopener">Spring与Mybatis相结合使用的中文文档</a></p><p>第三方：</p><p><a href="https://www.springcloud.cc/spring-reference.html" target="_blank" rel="noopener">Spring官方文档中文版</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-framework%2F4.3.21.RELEASE%2Freference" target="_blank" rel="noopener">Spring Framework 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-boot%2F1.5.9.RELEASE%2Freference" target="_blank" rel="noopener">Spring Boot 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-cloud%2FEdgware.SR5%2Freference" target="_blank" rel="noopener">Spring Cloud 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-security%2F4.2.10.RELEASE%2Freference" target="_blank" rel="noopener">Spring Security 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-session%2F1.3.4.RELEASE%2Freference" target="_blank" rel="noopener">Spring Session 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-amqp%2F1.7.11.RELEASE%2Freference" target="_blank" rel="noopener">Spring AMQP 中文文档</a></p><p>Spring Data</p><ul><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jpa%2F1.11.18.RELEASE%2Freference" target="_blank" rel="noopener">Spring Data JPA</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jdbc%2F1.0.5.RELEASE%2Freference" target="_blank" rel="noopener">Spring Data JDBC</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-redis%2F1.8.18.RELEASE%2Freference" target="_blank" rel="noopener">Spring Data Redis</a></li></ul><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p><a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方中文文档</a></p><p><a href="http://mybatis.org/spring/zh/" target="_blank" rel="noopener">Spring与Mybatis相结合使用的中文文档</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.docs4dev.com/docs/zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文技术文档集合&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mybatis.org/spring/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring与Mybatis相结合使用的中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三方：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.springcloud.cc/spring-reference.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring官方文档中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-framework%2F4.3.21.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Framework 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-boot%2F1.5.9.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-cloud%2FEdgware.SR5%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-security%2F4.2.10.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Security 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-session%2F1.3.4.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Session 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-amqp%2F1.7.11.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring AMQP 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jpa%2F1.11.18.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Data JPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jdbc%2F1.0.5.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Data JDBC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-redis%2F1.8.18.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Data Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mybatis官方中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mybatis.org/spring/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring与Mybatis相结合使用的中文文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Spring文档</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/24/Spring%E6%96%87%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/24/Spring%E6%96%87%E6%A1%A3/</id>
    <published>2020-07-23T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.149Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html" target="_blank" rel="noopener">Spring 官方文档</a></p><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference" target="_blank" rel="noopener">Spring 中文文档</a></p><p>第三方：</p><p><a href="https://www.springcloud.cc/spring-reference.html" target="_blank" rel="noopener">Spring官方文档中文版</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-framework%2F4.3.21.RELEASE%2Freference" target="_blank" rel="noopener">Spring Framework 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-boot%2F1.5.9.RELEASE%2Freference" target="_blank" rel="noopener">Spring Boot 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-cloud%2FEdgware.SR5%2Freference" target="_blank" rel="noopener">Spring Cloud 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-security%2F4.2.10.RELEASE%2Freference" target="_blank" rel="noopener">Spring Security 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-session%2F1.3.4.RELEASE%2Freference" target="_blank" rel="noopener">Spring Session 中文文档</a></p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-amqp%2F1.7.11.RELEASE%2Freference" target="_blank" rel="noopener">Spring AMQP 中文文档</a></p><p>Spring Data</p><ul><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jpa%2F1.11.18.RELEASE%2Freference" target="_blank" rel="noopener">Spring Data JPA</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jdbc%2F1.0.5.RELEASE%2Freference" target="_blank" rel="noopener">Spring Data JDBC</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-redis%2F1.8.18.RELEASE%2Freference" target="_blank" rel="noopener">Spring Data Redis</a></li></ul><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第三方：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.springcloud.cc/spring-reference.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring官方文档中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-framework%2F4.3.21.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Framework 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-boot%2F1.5.9.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-cloud%2FEdgware.SR5%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-security%2F4.2.10.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Security 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-session%2F1.3.4.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Session 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-amqp%2F1.7.11.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring AMQP 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jpa%2F1.11.18.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Data JPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-jdbc%2F1.0.5.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Data JDBC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://links.jianshu.com/go?to=https%3A%2F%2Fwww.docs4dev.com%2Fdocs%2Fzh%2Fspring-data-redis%2F1.8.18.RELEASE%2Freference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Data Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>ico图标下载</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/24/ico%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/24/ico%E5%9B%BE%E6%A0%87%E4%B8%8B%E8%BD%BD/</id>
    <published>2020-07-23T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.173Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sc.chinaz.com/tubiao/index.html" target="_blank" rel="noopener">站长素材http://sc.chinaz.com/tubiao/index.html</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://sc.chinaz.com/tubiao/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;站长素材http://sc.chinaz.com/tubiao/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>博客网页内的鼠标样式</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/23/%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5%E5%86%85%E7%9A%84%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/23/%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5%E5%86%85%E7%9A%84%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F/</id>
    <published>2020-07-22T16:00:00.000Z</published>
    <updated>2020-08-27T05:55:24.202Z</updated>
    
    <content type="html"><![CDATA[<p>在css样式body里加</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> {<span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(https://cdn.jsdelivr.net/gh/fz6m/Private-web@1.5/image/cursor/normal.cur), default;}<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>{<span class="hljs-attribute">cursor</span>:<span class="hljs-built_in">url</span>(https://cdn.jsdelivr.net/gh/fz6m/Private-web@1.5/image/cursor/ayuda.cur) <span class="hljs-number">15</span> <span class="hljs-number">15</span>, pointer;}</code></pre></div><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>{ <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(https://files-cdn.cnblogs.com/files/zouwangblog/cursor.ico),auto;}</code></pre></div><p><img src="https://img2020.cnblogs.com/blog/2013579/202007/2013579-20200723113817771-955830128.png" srcset="/blog/img/loading.gif" alt=""></p><p>补充：png和jpg可以直接转换为ico格式，使用一个在线生成ico图标的网站即可</p><p><a href="http://www.bitbug.net/" target="_blank" rel="noopener">http://www.bitbug.net/</a> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在css样式body里加&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;body&lt;/span&gt; {
&lt;span class=&quot;hljs-attribute&quot;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
