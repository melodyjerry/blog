<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-07-16T06:43:46.389Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随机图片API</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/16/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/16/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API/</id>
    <published>2020-07-16T09:55:00.000Z</published>
    <updated>2020-07-16T06:43:46.389Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://api.mz-moe.cn/img.php" target="_blank" rel="noopener">https://api.mz-moe.cn/img.php</a></p></blockquote><img style="width:720px" src="https://api.mz-moe.cn/img.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" target="_blank" rel="noopener">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</a></p></blockquote><img style="width:720px" src="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://ds.qqlepay.cn/" target="_blank" rel="noopener">https://ds.qqlepay.cn/</a></p><p>内含2个接口</p><p>高清壁纸：https://acg.xydwz.cn/gqapi/gqapi.php</p><p>动漫壁纸：https://acg.xydwz.cn/api/api.php</p></blockquote><img style="width:720px" src="https://acg.xydwz.cn/gqapi/gqapi.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><img style="width:720px" src="https://acg.xydwz.cn/api/api.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://img.xjh.me" target="_blank" rel="noopener">https://img.xjh.me</a></p></blockquote><img style="width:720px" src="https://img.xjh.me/random_img.php?return=302&amp;type=bg&amp;ctype=acg" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://misaka.asia" target="_blank" rel="noopener">https://misaka.asia</a></p></blockquote><img style="width:720px" src="https://Misaka.asia/api.jpg?order=4" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://acg.iclart.com" target="_blank" rel="noopener">https://acg.iclart.com</a></p></blockquote><img style="width:720px" src="https://acg.iclart.com/api.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.paugram.com/help/wallpaper" target="_blank" rel="noopener">https://api.paugram.com/help/wallpaper</a></p></blockquote><img style="width:720px" src="https://api.paugram.com/wallpaper/?source=sina&amp;category=jp" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://s0.xinger.ink" target="_blank" rel="noopener">https://s0.xinger.ink</a></p></blockquote><img style="width:720px" src="https://s0.xinger.ink/acgimg/acgurl.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.isoyu.com" target="_blank" rel="noopener">https://api.isoyu.com</a></p></blockquote><img style="width:720px" src="https://api.isoyu.com/bing_images.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://ds.qqlepay.cn" target="_blank" rel="noopener">https://ds.qqlepay.cn</a></p></blockquote><img style="width:720px" src="https://acg.xydwz.cn/api/api.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.meetgudu.com" target="_blank" rel="noopener">https://api.meetgudu.com</a></p></blockquote><img style="width:720px" src="https://api.meetgudu.com/api/acg/" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.btstu.cn/doc/sjbz.php" target="_blank" rel="noopener">https://api.btstu.cn/doc/sjbz.php</a></p></blockquote><img style="width:720px" src="https://api.btstu.cn/sjbz/api.php?lx=dongman&amp;format=images" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://acg.toubiec.cn" target="_blank" rel="noopener">https://acg.toubiec.cn</a></p></blockquote><img style="width:720px" src="https://acg.toubiec.cn/random" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="http://api.mtyqx.cn" target="_blank" rel="noopener">http://api.mtyqx.cn</a></p></blockquote><img style="width:720px" src="http://api.mtyqx.cn/tapi/random.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.w0ai1uo.org" target="_blank" rel="noopener">https://api.w0ai1uo.org</a></p></blockquote><img style="width:720px" src="https://api.w0ai1uo.org/api/dongman/" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.yuzhitu.cn/sjbz" target="_blank" rel="noopener">https://api.yuzhitu.cn/sjbz</a></p></blockquote><img style="width:720px" src="https://api.yuzhitu.cn//sjbz/api.php?lx=dongman" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="http://api.52yi.vip" target="_blank" rel="noopener">http://api.52yi.vip</a></p></blockquote><img style="width:720px" src="http://api.52yi.vip/api" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="http://api.laolibab.cn/king/dm_tupian.php" target="_blank" rel="noopener">http://api.laolibab.cn/king/dm_tupian.php</a></p></blockquote><img style="width:720px" src="http://api.laolibab.cn/king/dm_tupian.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://api.mz-moe.cn/img.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.mz-moe.cn/img.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="API" scheme="https://melodyjerry.github.io/blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>添加GitHub的star/fork/watch按钮</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/16/%E6%B7%BB%E5%8A%A0GitHub%E7%9A%84starforkwatch%E6%8C%89%E9%92%AE/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/16/%E6%B7%BB%E5%8A%A0GitHub%E7%9A%84starforkwatch%E6%8C%89%E9%92%AE/</id>
    <published>2020-07-16T07:58:00.000Z</published>
    <updated>2020-07-16T04:15:38.263Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/16/UBYUeg.png" srcset="/blog/img/loading.gif" alt="UBYUeg.png"><br>要实现上面的效果，首先必须了解一些参数👇</p><a id="more"></a><h2 id="所需参数"><a href="#所需参数" class="headerlink" title="所需参数"></a>所需参数</h2><p><strong>您必须</strong>为以下每个 URL 参数声明一个值：</p><table><thead><tr><th>选项</th><th align="left">描述</th></tr></thead><tbody><tr><td><code>user</code></td><td align="left">拥有仓库的 GitHub 用户名</td></tr><tr><td><code>repo</code></td><td align="left">GitHub 仓库名称</td></tr><tr><td><code>type</code></td><td align="left">要显示的按钮类型: <code>star</code>、<code>watch</code>、<code>fork</code>、<code>sponsor</code>、<code>follow</code></td></tr></tbody></table><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>不需要以下 URL<strong>参数</strong>。根据需要添加它们。</p><table><thead><tr><th>选项</th><th align="left">描述</th></tr></thead><tbody><tr><td><code>count</code></td><td align="left">显示可选的观察器或分叉计数：<em>默认情况下</em>没有或<code>true</code></td></tr><tr><td><code>size</code></td><td align="left">用于使用较大按钮的可选标志：<em>默认情况下</em>没有或<code>large</code></td></tr></tbody></table><h2 id="Star"><a href="#Star" class="headerlink" title="Star"></a>Star</h2><iframe src="https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=star&amp;count=true&amp;size=large" width="170" height="30" title="GitHub" style="box-sizing: border-box; overflow: hidden; border: 0px; display: block; float: left;"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=star&amp;count=true" width="150" height="20" title="GitHub" style="box-sizing: border-box; overflow: hidden; border: 0px; display: block; float: left; margin-top: 5px; margin-left: 1rem;"></iframe><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=star&amp;count=true&amp;size=large"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"170"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"30"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"GitHub"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=star&amp;count=true"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"150"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"GitHub"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></code></pre></div><!--more--><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><iframe src="https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=watch&amp;count=true&amp;size=large&amp;v=2" width="170" height="30" title="GitHub" style="box-sizing: border-box; overflow: hidden; border: 0px; display: block; float: left;"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=watch&amp;count=true&amp;v=2" width="150" height="20" title="GitHub" style="box-sizing: border-box; overflow: hidden; border: 0px; display: block; float: left; margin-top: 5px; margin-left: 1rem;"></iframe><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=watch&amp;count=true&amp;size=large&amp;v=2"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"170"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"30"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"GitHub"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=watch&amp;count=true&amp;v=2"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"150"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"GitHub"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></code></pre></div><h2 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h2><iframe src="https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=fork&amp;count=true&amp;size=large" width="170" height="30" title="GitHub" style="box-sizing: border-box; overflow: hidden; border: 0px; display: block; float: left;"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=fork&amp;count=true" width="150" height="20" title="GitHub" style="box-sizing: border-box; overflow: hidden; border: 0px; display: block; float: left; margin-top: 5px; margin-left: 1rem;"></iframe><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=fork&amp;count=true&amp;size=large"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"170"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"30"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"GitHub"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ghbtns.com/github-btn.html?user=twbs&amp;repo=bootstrap&amp;type=fork&amp;count=true"</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"150"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"GitHub"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></code></pre></div><h2 id="可用选项"><a href="#可用选项" class="headerlink" title="可用选项"></a>可用选项</h2><h3 id="SSL-支持"><a href="#SSL-支持" class="headerlink" title="SSL 支持"></a>SSL 支持</h3><p>示例按钮与 URL 一起显示。当 SSL 选项托管在 GitHub 页面上时，SSL 选项通过<a href="https://blog.cloudflare.com/introducing-universal-ssl/" target="_blank" rel="noopener">CloudFlare 的免费通用 SSL 产品</a>提供。如果您愿意，您仍然可以使用 。<code>https://</code>             <code>http://</code></p><hr><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>详见文档：<a href="https://ghbtns.com/" target="_blank" rel="noopener">https://ghbtns.com/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/16/UBYUeg.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;UBYUeg.png&quot;&gt;&lt;br&gt;要实现上面的效果，首先必须了解一些参数👇&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>音乐解析</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/16/%E9%9F%B3%E4%B9%90%E8%A7%A3%E6%9E%90/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/16/%E9%9F%B3%E4%B9%90%E8%A7%A3%E6%9E%90/</id>
    <published>2020-07-16T03:55:00.000Z</published>
    <updated>2020-07-16T04:13:55.672Z</updated>
    
    <content type="html"><![CDATA[<div class="video"><iframe src="//www.jikefan.com/music" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;video&quot;&gt;
&lt;iframe src=&quot;//www.jikefan.com/music&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;
&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>『MelodyHub』书写是对思维的缓存</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/15/%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E7%AB%99%E7%82%B9/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/15/%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E7%AB%99%E7%82%B9/</id>
    <published>2020-07-15T07:57:00.000Z</published>
    <updated>2020-07-15T07:55:11.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>站点名称：</strong> <font color="#5000FF">M</font><font color="#7800FF">e</font><font color="#A000FF">l</font><font color="#C800FF">o</font><font color="#F000FF">d</font><font color="#FF00D7">y</font><font color="#FF00AF">H</font><font color="#FF0087">u</font><font color="#FF005F">b</font></p><p><strong>站长名称：</strong> <font color="#00AFFF">M</font><font color="#0087FF">e</font><font color="#005FFF">l</font><font color="#0037FF">o</font><font color="#000FFF">d</font><font color="#2800FF">y</font><font color="#5000FF">J</font><font color="#7800FF">e</font><font color="#A000FF">r</font><font color="#C800FF">r</font><font color="#F000FF">y</font></p><p><strong>头像链接：</strong> <a href="https://i.loli.net/2020/02/10/6yndjPI2rHL94vJ.png" target="_blank" rel="noopener">https://i.loli.net/2020/02/10/6yndjPI2rHL94vJ.png</a></p><p><strong>博客地址：</strong></p><ul><li><p>博客园：<a href="https://www.cnblogs.com/melodyjerry/" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/</a></p></li><li><p>Gitee：<a href="https://melodyjerry.gitee.io/" target="_blank" rel="noopener">https://melodyjerry.gitee.io/</a></p></li><li><p>GitHub：<a href="https://melodyjerry.github.io/">https://melodyjerry.github.io/</a></p></li><li><p>CSDN：<a href="https://blog.csdn.net/weixin_43438052" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43438052</a></p></li></ul><p><strong>标签：</strong> #<font color="#FFA000">J</font><font color="#FFC800">a</font><font color="#FFF000">v</font><font color="#D7FF00">a</font>    #<font color="#AFFF00">音</font><font color="#87FF00">乐</font>    #<font color="#5FFF00">后</font><font color="#37FF00">台</font><font color="#00FFC8">(</font><font color="#00FFF0">全</font><font color="#00D7FF">栈</font><font color="#00AFFF">)</font></p><blockquote><p>博客内容会同步到所有站点（CSDN后续同步）</p><p>按访问速度：博客园 &gt; Gitee &gt; GitHub</p><p>按网页特效：Gitee &gt; 博客园 &gt; GitHub</p><p>国内用户推荐访问：博客园、Gitee</p><p>国外用户推荐访问：GitHub</p></blockquote><p><img src="https://i.loli.net/2020/02/11/lMEgBFV2OdnCLN7.png" srcset="/blog/img/loading.gif" alt="干杯"></p><center>来呀，干杯~~</center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;站点名称：&lt;/strong&gt; &lt;font color=&quot;#5000FF&quot;&gt;M&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;e&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;l&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;o&lt;
      
    
    </summary>
    
    
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>JUnit-Java单元测试框架</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/15/JUnit-Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/15/JUnit-Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2020-07-15T05:57:00.000Z</published>
    <updated>2020-07-15T04:16:42.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JUnit概述"><a href="#JUnit概述" class="headerlink" title="JUnit概述"></a>JUnit概述</h1><p>官网：<a href="https://junit.org/junit5/" target="_blank" rel="noopener">https://junit.org/junit5/</a></p><p><strong>JUnit是一个Java语言的单元测试框架。</strong></p><blockquote><p>它由Kent Beck和Erich Gamma建立，逐渐成为源于Kent Beck的sUnit的xUnit家族中为最成功的一个。 JUnit有它自己的JUnit扩展生态圈。</p></blockquote><p>多数Java的开发环境都已经集成了JUnit作为单元测试的工具。</p><a id="more"></a><h1 id="教程视频"><a href="#教程视频" class="headerlink" title="教程视频"></a>教程视频</h1><ol><li><p><a href="https://www.w3cschool.cn/junit/" target="_blank" rel="noopener">jUnit 教程</a></p></li><li><p><a href="http://www.sikiedu.com/course/284/task/14725/show" target="_blank" rel="noopener">编写Mapper子项目的junit测试程序</a></p></li><li><p><a href="https://blog.csdn.net/fulishafulisha/article/details/80158392" target="_blank" rel="noopener">Junit的基本使用（详解）</a></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JUnit概述&quot;&gt;&lt;a href=&quot;#JUnit概述&quot; class=&quot;headerlink&quot; title=&quot;JUnit概述&quot;&gt;&lt;/a&gt;JUnit概述&lt;/h1&gt;&lt;p&gt;官网：&lt;a href=&quot;https://junit.org/junit5/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://junit.org/junit5/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JUnit是一个Java语言的单元测试框架。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它由Kent Beck和Erich Gamma建立，逐渐成为源于Kent Beck的sUnit的xUnit家族中为最成功的一个。 JUnit有它自己的JUnit扩展生态圈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多数Java的开发环境都已经集成了JUnit作为单元测试的工具。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合及Maven配置文件</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/15/SSM%E6%95%B4%E5%90%88%E5%8F%8AMaven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/15/SSM%E6%95%B4%E5%90%88%E5%8F%8AMaven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-07-15T04:57:00.000Z</published>
    <updated>2020-07-15T03:26:28.682Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://files-cdn.cnblogs.com/files/melodyjerry/SSM%E6%95%B4%E5%90%88%E5%8F%8AMaven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.zip" target="_blank" rel="noopener">下载 🔗</a></p><div class="hljs"><pre><code class="hljs crmsh">SSM整合及Maven配置文件.zip ├── maven_ssm │   ├── pom.xml │   ├── pom_test.xml │   └── ssm │       ├── applicationContext_mapper.xml │       ├── applicationContext_service.xml │       ├── applicationContext_transaction.xml │       ├── db.properties │       ├── ItemMapper.xml │       ├── springmvc.xml │       └── web.xml ├── pom.xml └── web.xml</code></pre></div><a id="more"></a><p>如何使用 <a href="http://www.sikiedu.com/course/284/task/14721/show" target="_blank" rel="noopener">？</a></p><h1 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h1><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-comment">&lt;!-- maven版本 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sikiedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-comment">&lt;!-- 域名反写 + 项目名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HelloMaven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-comment">&lt;!-- 项目名 子项目名 模块名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-comment">&lt;!-- 版本号-类型 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><span class="hljs-comment">&lt;!-- 打包类型 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mavenProject<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前项目名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>我的第一个maven工程<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><span class="hljs-comment">&lt;!-- 项目描述 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!-- 依赖标签 配置项目中依赖的jar包坐标 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-comment">&lt;!-- 插件列表 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-comment">&lt;!-- 通过坐标获取插件 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><h1 id="SSM整合pom-xml"><a href="#SSM整合pom-xml" class="headerlink" title="SSM整合pom.xml"></a>SSM整合pom.xml</h1><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sikiedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenSSM2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-comment">&lt;!-- lib version --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.0.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mybais.version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">mybais.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-spring.version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-spring.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mysql-connector.version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">mysql-connector.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">ojdbc7.version</span>&gt;</span>12.1.0.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">ojdbc7.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">aopalliance.version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">aopalliance.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">aspectj.weaver.version</span>&gt;</span>1.6.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">aspectj.weaver.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">commons.logging.version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">commons.logging.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">jstl.version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">jstl.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.16<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">slf4j-api.version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j-api.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">slf4j-nop.version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j-nop.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">fileupload.version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">fileupload.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">jackson.version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.9<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-api.version</span>&gt;</span>8.5.32<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-api.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">jsp-api.version</span>&gt;</span>8.5.32<span class="hljs-tag">&lt;/<span class="hljs-name">jsp-api.version</span>&gt;</span>    <span class="hljs-comment">&lt;!-- plugins version --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">maven-compiler-plugin.version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">maven-compiler-plugin.version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">tomcat7-maven-plugin.version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">tomcat7-maven-plugin.version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 锁定版本， --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>   <span class="hljs-comment">&lt;!-- spring --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- spring end --&gt;</span>         <span class="hljs-comment">&lt;!-- mybais --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${mybais.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- mybatis - spring 整合包--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${mybatis-spring.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- json --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${jackson.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${jackson.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${jackson.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- json end --&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- spring --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- spring end --&gt;</span>            <span class="hljs-comment">&lt;!-- mybais --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- mybatis - spring 整合包--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- mysql --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${mysql-connector.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.easyproject<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ojdbc7<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${ojdbc7.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- mysql end --&gt;</span> <span class="hljs-comment">&lt;!-- 阿里巴巴的数据库连接池 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${druid.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- aop --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aopalliance<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${aopalliance.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>com.springsource.org.aspectj.weaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${aspectj.weaver.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- aop end --&gt;</span><span class="hljs-comment">&lt;!-- logging --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>com.springsource.org.apache.commons.logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${commons.logging.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- jsp标准标签库 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${jstl.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- log --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${slf4j-api.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-nop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${slf4j-nop.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- log end --&gt;</span><span class="hljs-comment">&lt;!--文件上传--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${fileupload.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- json --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- json end --&gt;</span><span class="hljs-comment">&lt;!-- junit单元测试 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${junit.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- servlet-api 8.5.32 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${servlet-api.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- jsp-api 8.5.32 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${jsp-api.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${maven-compiler-plugin.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>${tomcat7-maven-plugin.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>joey<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置文件放行 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-comment">&lt;!-- 放行main/resources下的配置文件 如果不放行spring mybatis等配置文件不会被打到包里从而导致错误 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://files-cdn.cnblogs.com/files/melodyjerry/SSM%E6%95%B4%E5%90%88%E5%8F%8AMaven%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载 🔗&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs crmsh&quot;&gt;SSM整合及Maven配置文件.zip
 ├── maven_ssm
 │   ├── pom.xml
 │   ├── pom_test.xml
 │   └── ssm
 │       ├── applicationContext_mapper.xml
 │       ├── applicationContext_service.xml
 │       ├── applicationContext_transaction.xml
 │       ├── db.properties
 │       ├── ItemMapper.xml
 │       ├── springmvc.xml
 │       └── web.xml
 ├── pom.xml
 └── web.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="Maven" scheme="https://melodyjerry.github.io/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven项目管理</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</id>
    <published>2020-07-11T11:55:00.000Z</published>
    <updated>2020-07-15T04:05:40.855Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/13/UJbRm9.png" srcset="/blog/img/loading.gif" alt="UJbRm9.png"></p><p>左者使用SSM框架，需要导入jar包；</p><p>右者使用Maven，不需要导入jar包。</p><h1 id="Maven是什么？"><a href="#Maven是什么？" class="headerlink" title="Maven是什么？"></a>Maven是什么？</h1><ul><li><strong>Maven是Apache下的项目管理工具</strong>，它由<strong>纯Java</strong>语言开发，可以帮助我们<strong>更方便的管理和构建Java项目</strong>。</li></ul><h1 id="为什么要使用Maven？"><a href="#为什么要使用Maven？" class="headerlink" title="为什么要使用Maven？"></a>为什么要使用Maven？</h1><p>1、  jar包管理：</p><ul><li>a)   从<strong>Maven中央仓库</strong>获取<strong>标准的规范的jar包以及相关依赖的jar包</strong>，避免自己下载到错误的jar包；</li><li>b)   <strong>本地仓库统一管理jar包，使jar包与项目分离，减轻项目体积。</strong></li></ul><p>2、  maven是跨平台的可以在window、linux上使用。</p><p>3、  清晰的项目结构；</p><p>4、  多工程开发，<strong>将模块拆分成若干工程</strong>，利于团队协作开发。</p><p>5、  一键构建项目：使用命令可以对项目进行一键构建，操作系统中无需安装eclipse和tomcat。</p><h1 id="下载、安装、配置环境变量Maven"><a href="#下载、安装、配置环境变量Maven" class="headerlink" title="下载、安装、配置环境变量Maven"></a>下载、安装、配置环境变量Maven</h1><p>a)   <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>b)   安装JDK 1.8；</p><p>c)   配置环境变量；</p><ul><li><p>i.     win + r 打开运行窗口 或者 进入cmd命令窗口；</p></li><li><p>ii.     输入sysdm.cpl打开系统属性 -&gt; 高级 -&gt; 环境变量；</p></li><li><p>iii.     新建系统变量，变量名：<code>MAVEN_HOME</code>，变量值：<code>Maven安装路径</code>；</p></li><li><p>iv.     在<code>Path</code>下追加一条属性指向Maven的bin目录 <code>%MAVEN_HOME%/bin</code></p></li></ul><h1 id="Maven的优点"><a href="#Maven的优点" class="headerlink" title="Maven的优点"></a>Maven的优点</h1><p><font size="5" color="blue">a)</font>   jar包管理：依赖管理</p><ul><li><p>i.     <strong>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包</strong>，避免自己下载到错误的jar包；</p></li><li><p>ii.    <strong>本地仓库统一管理jar包，使jar包与项目分离，减轻项目体积。</strong><br><img src="https://s1.ax1x.com/2020/07/13/UJg1jf.png" srcset="/blog/img/loading.gif" alt="Maven项目获取jar包的方式"></p></li><li><p>iii.     Maven项目通过<strong>坐标的方式</strong>从本地仓库获取jar包；</p></li></ul><table><thead><tr><th>坐标</th><th>本地仓库</th></tr></thead><tbody><tr><td>由公司/组织名(groupId) + 项目名/子项目名(artifactId) + 版本号(version)组成</td><td>存放很多jar包，供Maven项目使用</td></tr></tbody></table><ol><li>Maven通过建立本地仓库索引，可以快速的找到符合要求的jar包，从而解决效率问题；</li><li>多个Maven项目都可以从本地仓库获取jar包；</li><li>设置本地仓库：<em>maven根目录</em> -&gt; <em>conf</em> -&gt; <em>settings.xml</em>，将<code>localRepository</code>标签中的路径替换成自己本地仓库的路径；</li></ol><ul><li><p>iv.     Maven三种仓库概念：本地仓库、远程仓库、中央仓库</p><ul><li>中央仓库-官方：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></li><li>中央仓库-阿里云：<a href="https://maven.aliyun.com/mvn/search" target="_blank" rel="noopener">https://maven.aliyun.com/mvn/search</a></li></ul><p><img src="https://s1.ax1x.com/2020/07/13/UJ2Sr8.png" srcset="/blog/img/loading.gif" alt="Maven三种仓库概念"></p></li></ul><ul><li>v.     设置阿里云Maven仓库镜像：</li></ul><ol><li>在<code>settings.xml</code>文件中的<code>mirrors</code>下添加<code>mirror</code>标签； <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></code></pre></div></li></ol><p><font size="5" color="blue">b)</font>   maven由纯Java语言开发，是跨平台的可以在window、linux、mac上使用。</p><p><font size="5" color="blue">c)</font>   清晰的项目结构；</p><p><font size="5" color="blue">d)</font>   使用Maven将大型项目按照模块拆分成若干工程，不同的团队维护各自的工程，可大大的提升开发效率；</p><ul><li><p>i.     大型商城项目按业务分成商品管理、用户管理、订单管理等等模块。</p><p><img src="https://s1.ax1x.com/2020/07/13/UJRPOK.png" srcset="/blog/img/loading.gif" alt="大型项目，分模块开发"></p></li></ul><ul><li><p>ii.     中小型项目按照传统项目分为Web、Service、Dao层，依照员工自身的业务能力分配工作。</p><p><img src="https://s1.ax1x.com/2020/07/13/UJRVFH.png" srcset="/blog/img/loading.gif" alt="中小型项目，分层开发"></p></li></ul><p><font size="5" color="blue">e)</font>   一键构建项目：使用命令可以对项目进行一键构建，操作系统中无需安装eclipse和tomcat。</p><h1 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h1><ul><li><code>clean</code>：       清理，编译后的目录；</li><li><code>compile</code>：    编译，只编译main目录，不编译test中的代码；</li><li><code>test-compile</code>：编译test目录中的代码；</li><li><code>test</code>：        运行test里边的代码；</li><li><code>package</code>：    打包<ul><li>i.     java项目-&gt;打成jar包；</li><li>ii.     web项目-&gt;打成war包；</li></ul></li><li><code>install</code>：发布项目到本地仓库，用在打jar包上，打成jar包可以被其他项目使用；</li><li><code>tomcat:run</code>：一键构建项目；</li></ul><h1 id="Maven命令的生命周期"><a href="#Maven命令的生命周期" class="headerlink" title="Maven命令的生命周期"></a>Maven命令的生命周期</h1><p> 不同的生命周期可以一起执行，例如：先clean 再compile</p><table><thead><tr><th>命令</th><th>生命周期</th></tr></thead><tbody><tr><td>Clean</td><td>clean</td></tr><tr><td>Default</td><td>compile、test-compile、test、package、install</td></tr><tr><td>Site</td><td>site命令，生成项目描述文档静态页</td></tr></tbody></table><h1 id="Maven命令的执行顺序"><a href="#Maven命令的执行顺序" class="headerlink" title="Maven命令的执行顺序"></a>Maven命令的执行顺序</h1><ol><li><p>在相同生命周期中的命令才会受执行顺序的影响；</p></li><li><p>Default生命周期中的命令执行顺序：</p><div class="hljs"><pre><code class="hljs clean">compile &lt;- test-compile &lt;- test &lt;- package &lt;- install；</code></pre></div></li></ol><h1 id="Maven入门程序"><a href="#Maven入门程序" class="headerlink" title="Maven入门程序"></a>Maven入门程序</h1><p><font size="5" color="blue">Ø</font> 入门程序：</p><ol><li><p>创建Maven项目；</p></li><li><p>在src -&gt; main -&gt; webapp下创建WEB-INF目录，并在目录下创建web.xml；</p></li><li><p>修改Maven默认编译级别：</p><ul><li><p>a)   全局编译级别 -&gt; 修改settings.xml</p></li><li><p>b)   项目级别修改 -&gt; 项目对应的pom.xml</p></li></ul></li><li><p>在Java Resourcese -&gt; src/main/java下写代码，创建包和Servlet；</p></li><li><p>添加servlet-api： </p></li><li><p>在servlet-api中添加<code>scope</code>标签，值为：proviede；</p><ul><li>a)   如果不加此标签有很大几率报错，因为tomcat中也有servlet-api的包导致冲突；</li></ul></li><li><p>运行：发生错误，原因是maven默认使用tomcat6.xx，不支持@WebServle注解；</p><ul><li><p>a)   解决方案1：需要去web.xml中配置<code>Servlet</code>;</p></li><li><p>b)   解决方案2：配置高版本tomcat插件；</p></li></ul></li><li><p>最后测试，启动服务，在地址栏输入请求，显示结果；</p></li></ol><p><font size="5" color="blue">Ø</font> 使用tomcat7插件运行项目</p><p><font size="5" color="blue">Ø</font> Scope依赖作用域也可称作依赖范围：maven中的依赖，会根据程序所处的阶段和场景发生变化，所以maven用scope属性来做限制；</p><ul><li><p>a)   <code>compile</code>（默认值）：在编译、运行、测试、打包都有效；</p></li><li><p>b)   <code>provided</code>：编译、测试时有效，运行、打包无效；</p></li><li><p>c)   <code>test</code>：仅在测试时有效；</p></li><li><p>d)   <code>runtime</code>：测试、运行、打包时有效；</p></li><li><p>e)   <code>system</code>：不推荐使用，使用system作用域不会去本地仓库寻找依赖，要指定本地路径；</p><p><img src="https://s1.ax1x.com/2020/07/13/UJfQIg.png" srcset="/blog/img/loading.gif" alt="依赖关系中作用域说明"></p></li></ul><h1 id="Maven热部署"><a href="#Maven热部署" class="headerlink" title="Maven热部署"></a>Maven热部署</h1><p><strong>Maven 3.5.4 + tomcat 8.5.32 热部署：</strong></p><blockquote><p>热部署：在tomcat运行时将项目部署上去；</p></blockquote><ol><li>开启tomcat热部署：</li></ol><ul><li>a)   修改tomcat -&gt; conf-&gt; tomcat-users.xml 配置文件；</li><li>b)   在tomcat-users标签中加入以下代码：</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">"manager-gui"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">"manager-script"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">"joey"</span> <span class="hljs-attr">password</span>=<span class="hljs-string">"123123"</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">"manager-gui, manager-script"</span>/&gt;</span></code></pre></div><ul><li><p>c)   启动tomcat；</p></li><li><p>d)   修改项目中pom.xml，在tomcat7的插件上添加以下代码：</p></li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>joey<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><ul><li><p>e)   右键项目-&gt; run as -&gt; maven build… 在goals中使用tomcat7:deploy或tomcat7:redeploy来进行热部署；</p><ul><li><p>i.     tomcat7:deploy，第一次部署时使用。</p></li><li><p>ii.     tomcat7:redeploy，非第一次部署时使用。</p></li></ul></li><li><p>f)    部署完毕，打开浏览器测试；</p></li></ul><h1 id="Maven整合SSM框架"><a href="#Maven整合SSM框架" class="headerlink" title="Maven整合SSM框架"></a>Maven整合SSM框架</h1><ol><li>Maven+SSM框架整合；</li></ol><ul><li><p>a)   加入SSM框架所需的依赖；</p></li><li><p>b)   配置插件；</p></li><li><p>c)   导入SSM框架所需配置文件, 配置文件下载：<a href="https://www.cnblogs.com/melodyjerry/p/13304361.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13304361.html</a>；</p></li><li><p>d)   配置Maven Resources资源放行：</p><ul><li>i.     因为Maven会把src/main/java下的*.java文件文件编译放到target/classes目录目录中，但这目录中的其他文件会被忽略；</li><li>ii.     Mybatis Mapper映射文件也要放在src/main/java下，所以不能忽略；</li><li>iii.     因此我们需要对src/main/java下的配置文件进行过滤，不能被忽略；</li><li>iv.     利用Maven中的<code>Resources</code>标签可以进行配置；</li></ul></li></ul><ol start="2"><li>测试；</li></ol><ul><li>a)   新建名为User的bean对象，有<code>username</code>，<code>password</code>俩字段；</li><li>b)   新建login.jsp，可以输入用户名和密码，通过表单提交到后台；</li><li>c)   后台接受用户名和密码，跳转页面，并显示；</li></ul><ol start="3"><li>读取数据库显示游戏列表；</li></ol><ul><li>a)   导入item_info表；</li><li>b)   在login.jsp中增加<code>button</code>，点击后跳转页面，显示列表；</li></ul><h1 id="Maven模块化开发"><a href="#Maven模块化开发" class="headerlink" title="Maven模块化开发"></a>Maven模块化开发</h1><p> <img src="https://s1.ax1x.com/2020/07/13/UJfOw8.png" srcset="/blog/img/loading.gif" alt="Maven模块化开发项目依赖关系"></p><p><font size="5" color="blue">Ø</font> 需求：将Maven-SSM项目以层为单位拆分，按模块开发；</p><ol><li><p>创建父项目，在父项目中加入依赖；</p></li><li><p>创建mapper层子项目继承父项目；</p></li><li><p>子项目可以继承父项目的依赖；</p></li><li><p>利用junit测试mapper模块项目； </p></li><li><p>Maven的依赖传递，与依赖版本管理；</p></li></ol><ul><li>a)   依赖传递：添加依赖的jar包如果还依赖其他jar包，则在添加时会一起引入；</li><li>b)   依赖冲突：Base-project由3个子项目组成，A-project依赖Tools.jar 1.0版本，C-project依赖Tools.jar 2.0版本，根据依赖传递机制，Base-project将同时依赖Tools.jar两个版本，但这造成了冲突。根据路径最近获胜策略，该项目最终依赖Tools.jar 1.0，导致C-project无法调用getAll方法从而报错，因此我们要手动选择一个适合项目的版本。</li></ul><p><img src="https://s1.ax1x.com/2020/07/13/UJhnp9.png" srcset="/blog/img/loading.gif" alt="Maven模块化开发项目依赖关系"></p><ul><li><p>c)   解决依赖冲突的办法：</p><ul><li><p>i.    <strong>直接声明</strong>：直接添加Tools.jar 2.0依赖；</p></li><li><p>ii.     <strong>排除</strong>：使用<code>&lt;dependency&gt;</code>标签中的<code>&lt;exclusions&gt;</code>标签排除A-project中的Tools.jar 1.0依赖；</p></li><li><p>iii.     <strong>依赖管理，版本锁定</strong>：<code>&lt;dependencyManagement&gt;</code></p></li></ul></li></ul><div class="hljs"><pre><code class="hljs xml">1. <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>是依赖管理，该标签下添加的<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>可以声明依赖，但是不会引入jar包；2. 只有声明在<span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span>标签下<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>中的依赖才会被引用到项目中；3. 在<span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>下添加jar包坐标后，<span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span>标签下<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>标签的版本号可以忽略不写；4. <span class="hljs-tag">&lt; <span class="hljs-attr">properties</span>&gt;</span>标签可以自定义版本号，用el表达式赋值给<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>标签；5. 统一管理jar包版本，修改方便；</code></pre></div><ol start="6"><li><p>创建scervice模块项目，利用junit测试service模块项目；</p></li><li><p>依赖作用域对依赖传递的影响；</p></li><li><p>创建controller模块项目，运行程序；</p></li></ol><h1 id="Maven远程仓库Nexus（私服）"><a href="#Maven远程仓库Nexus（私服）" class="headerlink" title="Maven远程仓库Nexus（私服）"></a>Maven远程仓库Nexus（私服）</h1><p><font size="5" color="blue">Ø</font> Nexus获取与配置：</p><p>1、  下载Nexus <a href="https://www.sonatype.com/download-oss-sonatype?hsCtaTracking=920dd7b5-7ef3-47fe-9600-10fecad8aa32|f59d5f10-099f-4c66-a622-0254373f4a92" target="_blank" rel="noopener">点击我下载</a></p><p>2、  Nexus安装，解压缩到本地即可；</p><p>3、  Nexus安装目录下nexus-3.14.0-04/etc/nexus-default.properties配置表中可以修改以下属性：</p><p>​    a)   application-host : Nexus服务监听的主机；</p><p>​    b)   application-port: Nexus服务监听的端口；</p><p>​    c)   nexus-context-path : Nexus服务的上下文路径；</p><p>4、  Nexus服务配置和启动：</p><p>​    a)   以管理员身份运行cmd -&gt; 进入到nexus安装目录../nexus-3.14.0-04/bin目录下；</p><p>​    b)   在cmd中运行 nexus.exe/install 可以安装nexus服务；</p><p>​    c)   在cmd中运行 nexus.exe/start 可以启动nexus服务；</p><p>​    d)   在cmd中运行 nexus.exe/stop 可以停止nexus服务；</p><p>5、  登录Nexus：</p><p>​    a)   启动服务后，根据nexus-default.properties的配置进行登录，如果没有修改，可以在浏览器中输入<a href="http://localhost:8081来登录；">http://localhost:8081来登录；</a></p><p>​    b)   默认用户名是admin，密码是admin123；</p><p>6、  仓库类型：nexus有多种仓库类型：</p><p> <img src="https://s1.ax1x.com/2020/07/13/UJhjnx.png" srcset="/blog/img/loading.gif" alt="Nexus仓库类型介绍"></p><p>​     </p><p><font size="5" color="blue">Ø</font> Nexus使用：</p><p>需求：将项目中的mapper.jar包提交到远程仓库中， 使service项目从远程仓库获取；</p><p><font size="3" color="#ed9f00">✧☼</font> 上传jar包到远程仓库；</p><p>1、  在Maven的 setting.xml中配置nexus访问权限；</p><p>2、  在项目的pom.xml中配置nexus仓库位置；</p><p>3、  以上2个配置标签中的id要一致；</p><p>4、  使用deploy命令将项目打包，发布到nexus中；</p><p>5、  检查仓库中是否有上传好的jar包；</p><p><font size="3" color="#ed9f00">✧☼</font> 从远程仓库下载jar包：</p><p>1、 使用profiles标签在Maven的setting.xml中配置仓库位置；</p><p>2、 激活profiles标签，使它发生作用；</p><p>3、 如果之前打包了，删除本地仓库下的mapper.jar；</p><p>4、 关闭mapper子项目，让service子项目依赖mapper.jar包；</p><p>5、 更新项目，从远程仓库中获取mapper.jar；</p><p><font size="3" color="#ed9f00">✧☼</font> 使用自定义用户和自定义仓库进行上传和下载jar包：</p><p>1、  建议先将管理员密码修改；</p><p>2、  在Roles中可以增加用户权限组，里边可以自定义用户权限；</p><p>3、  在Users中可以增加用户，分配设置好的权限；</p><p>4、  在Repositories中新建仓库；</p><p>​    a)   name：仓库名称；</p><p>​    b)   version pollcy：版本策略；</p><p>​                 i.     Release：发行版；</p><p>​                 ii.     Snapshot：快照版；</p><p>​                iii.     Mixed：混合模式；</p><p>​    c)   Layout pollcy：布局策略；</p><p>​                 i.     Strict：严格；</p><p>​                 ii.     Permissive：宽松；</p><p>​    d)   Deployment pollcy：部署策略；</p><p>​                 i.     Allow redeploy：允许重新部署；</p><p>​                 ii.     Disable redeploy：禁止重新部署；</p><p>​                iii.     Read-only：只读；</p><p>5、  修改配置，将jar包上传到自定义仓库，然后从自定义仓库下载jar包；</p><hr><p>资源下载：<a href="http://www.sikiedu.com/course/284/material/14783/download" target="_blank" rel="noopener">http://www.sikiedu.com/course/284/material/14783/download</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/13/UJbRm9.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;UJbRm9.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;左者使用SSM框架，需要导入jar包；&lt;/p&gt;
&lt;p&gt;右
      
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="Maven" scheme="https://melodyjerry.github.io/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-Java持久层框架</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/2020-07-11-Mybatis-Java%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/2020-07-11-Mybatis-Java%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</id>
    <published>2020-07-11T07:55:00.000Z</published>
    <updated>2020-07-16T03:30:41.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="https://s1.ax1x.com/2020/07/15/UwylTK.png" srcset="/blog/img/loading.gif" alt="UwylTK.png"></p><p><code>mybatis</code>是一个优秀的基于<code>java</code>的<strong>持久层框架</strong>，它内部封装了<code>jdbc</code>，使开发者<strong>只需要关注<code>sql</code>语句本身</strong>，而不需要花费精力去处理加载驱动、创建连接、创建<code>statement</code>等繁杂的过程。 </p><blockquote><p><code>mybatis</code>通过<code>xml</code>或注解的方式将要执行的各种<code>statement</code>配置起来，并通过<code>java</code>对象和<code>statement</code>中<code>sql</code>的动态参数进行映射生成最终执行的<code>sql</code>语句，最后由<code>mybatis</code>框架执行<code>sql</code>并将结果映射为<code>java</code>对象并返回。 </p></blockquote><p><strong>采用<code>ORM(Object Relational Mapping)</code>思想解决了实体和数据库映射的问题</strong>，<em>对<code>jdbc</code>进行了封装，屏蔽了<code>jdbc api</code>底层访问细节</em>，使我们不用与<code>jdbc api</code>打交道，就可以完成对数据库的持久化操作。</p><a id="more"></a><h1 id="持久化？持久层？"><a href="#持久化？持久层？" class="headerlink" title="持久化？持久层？"></a>持久化？持久层？</h1><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><blockquote><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p></blockquote><ul><li>即<strong>把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。</strong>持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>闪存：<strong>断电即失</strong></li><li><strong>JDBC就是一种持久化机制。文件IO也是一种持久化机制，但IO很浪费资源。</strong></li><li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li></ul><blockquote><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p></blockquote><ul><li><strong>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</strong></li><li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，<strong>需要持久化来缓存到外存</strong>。</li></ul><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><p><strong>什么是持久层？</strong></p><ul><li><p>完成持久化工作的代码块</p><ul><li><blockquote><p>什么是层？联系dao层 【DAO (Data Access Object)  数据访问对象】</p></blockquote></li></ul></li><li><p>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</p></li><li><p>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</p></li><li><p>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</p></li></ul><h1 id="为什么需要Mybatis"><a href="#为什么需要Mybatis" class="headerlink" title="为什么需要Mybatis"></a>为什么需要Mybatis</h1><ul><li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</p></li><li><p>传统的jdbc操作 , 有很多重复代码块。比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</p></li><li><p><font color="red" size="5">MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping对象关系映射)</strong></font></p></li><li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p></li><li><p>MyBatis的优点</p></li><li><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。<ul><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li><li>…….</li></ul></li></ul></li><li><p><strong>最重要的一点，使用的人多！公司需要！</strong></p></li></ul><h1 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h1><p><img src="https://s1.ax1x.com/2020/07/15/UwsDz9.png" srcset="/blog/img/loading.gif" alt="UwsDz9.png"></p><p>MyBatis 官网：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></p><blockquote><p>MyBatis 是一款优秀的持久层框架，它<strong>支持自定义 SQL、存储过程以及高级映射。</strong>MyBatis <strong>免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</strong>MyBatis <em>可以<strong>通过简单的 XML 或注解来配置和映射</strong>原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</em></p></blockquote><ul><li>MyBatis 是一款优秀的<strong>持久层框架</strong></li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li><li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li><li>2013年11月迁移到<strong>Github</strong> .</li><li>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a></li><li>GitHub : <a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></li></ul><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li><strong>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</strong></li><li><strong>解除sql与程序代码的耦合</strong>：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li><strong>提供映射标签</strong>，支持对象与数据库的orm字段关系映射</li><li><strong>提供对象关系映射标签</strong>，支持对象关系组建维护</li><li><strong>提供xml标签</strong>，支持编写动态sql。</li></ul><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>　　MyBatis 最强大的特性之一就是它的动态语句功能。如果您以前有使用JDBC或者类似框架的经历，您就会明白把SQL语句条件连接在一起是多么的痛苦，要确保不能忘记空格或者不要在columns列后面省略一个逗号等。动态语句能够完全解决掉这些痛苦。<br>　　尽管与动态SQL一起工作不是在开一个party，但是MyBatis确实能通过在任何映射SQL语句中使用强大的动态SQL来改进这些状况。动态SQL元素对于任何使用过JSTL或者类似于XML之类的文本处理器的人来说，都是非常熟悉的。在上一版本中，需要了解和学习非常多的元素，但在MyBatis 3 中有了许多的改进，现在只剩下差不多二分之一的元素。MyBatis使用了基于强大的OGNL表达式来消除了大部分元素。</p><h1 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h1><p><img src="https://s1.ax1x.com/2020/07/15/Uw6K3Q.png" srcset="/blog/img/loading.gif" alt="Uw6K3Q.png"></p><p>我们把Mybatis的功能架构分为三层：</p><ol><li><p>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</p></li><li><p>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</p></li><li><p>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑</p></li></ol><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>文档入口：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://mybatis.org/mybatis-3/zh/index.html#" target="_blank" rel="noopener">简介</a></li><li><a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">入门</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">XML 配置</a></li><li><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="noopener">XML 映射文件</a></li><li><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">动态 SQL</a></li><li><a href="https://mybatis.org/mybatis-3/zh/java-api.html" target="_blank" rel="noopener">Java API</a></li><li><a href="https://mybatis.org/mybatis-3/zh/statement-builders.html" target="_blank" rel="noopener">SQL 语句构建器</a></li></ul><h2 id="项目文档"><a href="#项目文档" class="headerlink" title="项目文档"></a>项目文档</h2><ul><li><a href="https://mybatis.org/mybatis-3/zh/project-info.html" target="_blank" rel="noopener">项目信息</a></li><li><a href="https://mybatis.org/mybatis-3/zh/project-reports.html" target="_blank" rel="noopener">项目报表</a></li></ul><h1 id="MyBatis-入门程序"><a href="#MyBatis-入门程序" class="headerlink" title="MyBatis 入门程序"></a>MyBatis 入门程序</h1><p><strong>思路流程：搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</strong></p><p>第一个MyBatis程序：<a href="https://www.cnblogs.com/melodyjerry/p/13307057.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13307057.html</a></p><hr><p>部分文字及图片来自<a href="https://baike.baidu.com/item/MyBatis" target="_blank" rel="noopener">百度百科</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/15/UwylTK.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;UwylTK.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mybatis&lt;/code&gt;是一个优秀的基于&lt;code&gt;java&lt;/code&gt;的&lt;strong&gt;持久层框架&lt;/strong&gt;，它内部封装了&lt;code&gt;jdbc&lt;/code&gt;，使开发者&lt;strong&gt;只需要关注&lt;code&gt;sql&lt;/code&gt;语句本身&lt;/strong&gt;，而不需要花费精力去处理加载驱动、创建连接、创建&lt;code&gt;statement&lt;/code&gt;等繁杂的过程。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mybatis&lt;/code&gt;通过&lt;code&gt;xml&lt;/code&gt;或注解的方式将要执行的各种&lt;code&gt;statement&lt;/code&gt;配置起来，并通过&lt;code&gt;java&lt;/code&gt;对象和&lt;code&gt;statement&lt;/code&gt;中&lt;code&gt;sql&lt;/code&gt;的动态参数进行映射生成最终执行的&lt;code&gt;sql&lt;/code&gt;语句，最后由&lt;code&gt;mybatis&lt;/code&gt;框架执行&lt;code&gt;sql&lt;/code&gt;并将结果映射为&lt;code&gt;java&lt;/code&gt;对象并返回。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;采用&lt;code&gt;ORM(Object Relational Mapping)&lt;/code&gt;思想解决了实体和数据库映射的问题&lt;/strong&gt;，&lt;em&gt;对&lt;code&gt;jdbc&lt;/code&gt;进行了封装，屏蔽了&lt;code&gt;jdbc api&lt;/code&gt;底层访问细节&lt;/em&gt;，使我们不用与&lt;code&gt;jdbc api&lt;/code&gt;打交道，就可以完成对数据库的持久化操作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis框架概述</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/Mybatis%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/Mybatis%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/</id>
    <published>2020-07-11T07:55:00.000Z</published>
    <updated>2020-07-11T12:25:57.229Z</updated>
    
    <content type="html"><![CDATA[<p><code>mybatis</code>是一个优秀的基于<code>java</code>的<strong>持久层框架</strong>，它内部封装了<code>jdbc</code>，使开发者<strong>只需要关注<code>sql</code>语句本身</strong>，而不需要花费精力去处理加载驱动、创建连接、创建<code>statement</code>等繁杂的过程。 </p><blockquote><p><code>mybatis</code>通过<code>xml</code>或注解的方式将要执行的各种<code>statement</code>配置起来，并通过<code>java</code>对象和<code>statement</code>中<code>sql</code>的动态参数进行映射生成最终执行的<code>sql</code>语句，最后由<code>mybatis</code>框架执行<code>sql</code>并将结果映射为<code>java</code>对象并返回。 </p></blockquote><p><strong>采用<code>ORM(Object Relational Mapping)</code>思想解决了实体和数据库映射的问题</strong>，<em>对<code>jdbc</code>进行了封装，屏蔽了<code>jdbc api</code>底层访问细节</em>，使我们不用与<code>jdbc api</code>打交道，就可以完成对数据库的持久化操作。</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;mybatis&lt;/code&gt;是一个优秀的基于&lt;code&gt;java&lt;/code&gt;的&lt;strong&gt;持久层框架&lt;/strong&gt;，它内部封装了&lt;code&gt;jdbc&lt;/code&gt;，使开发者&lt;strong&gt;只需要关注&lt;code&gt;sql&lt;/code&gt;语句本身&lt;/strong&gt;，而不需要花费精力去处理加载驱动、创建连接、创建&lt;code&gt;statement&lt;/code&gt;等繁杂的过程。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mybatis&lt;/code&gt;通过&lt;code&gt;xml&lt;/code&gt;或注解的方式将要执行的各种&lt;code&gt;statement&lt;/code&gt;配置起来，并通过&lt;code&gt;java&lt;/code&gt;对象和&lt;code&gt;statement&lt;/code&gt;中&lt;code&gt;sql&lt;/code&gt;的动态参数进行映射生成最终执行的&lt;code&gt;sql&lt;/code&gt;语句，最后由&lt;code&gt;mybatis&lt;/code&gt;框架执行&lt;code&gt;sql&lt;/code&gt;并将结果映射为&lt;code&gt;java&lt;/code&gt;对象并返回。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;采用&lt;code&gt;ORM(Object Relational Mapping)&lt;/code&gt;思想解决了实体和数据库映射的问题&lt;/strong&gt;，&lt;em&gt;对&lt;code&gt;jdbc&lt;/code&gt;进行了封装，屏蔽了&lt;code&gt;jdbc api&lt;/code&gt;底层访问细节&lt;/em&gt;，使我们不用与&lt;code&gt;jdbc api&lt;/code&gt;打交道，就可以完成对数据库的持久化操作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>博客添加图片查看器</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8/</id>
    <published>2020-07-11T06:35:00.000Z</published>
    <updated>2020-07-16T04:16:15.068Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读博文时，对图片的放大查看是一种普遍的需求，而fancybox就是这样一种插件，配置方法十分简单。</p><a id="more"></a><h2 id="引入js和css"><a href="#引入js和css" class="headerlink" title="引入js和css"></a>引入js和css</h2><p>页脚插入代码</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.bootcss.com/fancybox/3.5.7/jquery.fancybox.css"</span>&gt;</span></code></pre></div><h2 id="指定fancybox作用的区域"><a href="#指定fancybox作用的区域" class="headerlink" title="指定fancybox作用的区域"></a>指定fancybox作用的区域</h2><p>在页脚插入这样一段代码</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">$(<span class="hljs-string">".forFlow img"</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><span class="javascript">    <span class="hljs-keyword">var</span> element = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"a"</span>);</span><span class="javascript">    $(element).attr(<span class="hljs-string">"data-fancybox"</span>, <span class="hljs-string">"gallery"</span>);</span><span class="javascript">    $(element).attr(<span class="hljs-string">"href"</span>, $(<span class="hljs-keyword">this</span>).attr(<span class="hljs-string">"src"</span>));</span><span class="javascript">    $(<span class="hljs-keyword">this</span>).wrap(element);</span>});<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>上述代码将指定区域内的图片添加了父元素，从而使得当点击图片时，触发fancybox查看器。</p><h2 id="样式微调"><a href="#样式微调" class="headerlink" title="样式微调"></a>样式微调</h2><p>fancybox在手机端默认最大图片宽度为300px,没有居中，这里在CSS中添加一段代码</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-class">.fancybox-image</span>{<span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span><span class="hljs-meta">!important</span>;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;}</code></pre></div><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><a href="https://img2020.cnblogs.com/blog/1489774/202003/1489774-20200313184323570-41232241.jpg" target="_blank" rel="noopener"><img src="https://img2020.cnblogs.com/blog/1489774/202003/1489774-20200313184323570-41232241.jpg" srcset="/blog/img/loading.gif" alt="img"></a><br>非常不错的查看器，支持图片队列，支持放大缩小！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读博文时，对图片的放大查看是一种普遍的需求，而fancybox就是这样一种插件，配置方法十分简单。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>What？框架？</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/What%EF%BC%9F%E6%A1%86%E6%9E%B6%EF%BC%9F/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/What%EF%BC%9F%E6%A1%86%E6%9E%B6%EF%BC%9F/</id>
    <published>2020-07-11T04:55:00.000Z</published>
    <updated>2020-07-11T09:35:38.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h1><blockquote><p>框架（<code>Framework</code>）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。</p><p><strong>前者是从应用方面而后者是从目的方面给出的定义</strong>。</p></blockquote><p>​        简而言之，框架其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。</p><p>​    它是我门软件开发种的一套解决方案，不同框架解决不同问题。</p><a id="more"></a><h2 id="框架要解决的问题"><a href="#框架要解决的问题" class="headerlink" title="框架要解决的问题"></a>框架要解决的问题</h2><p><strong>框架要解决的最重要的一个问题是技术整合的问题。</strong></p><blockquote><p>在<code>J2EE</code>的框架中，有着各种各样的技术，不同的软件企业需要从J2EE中选择不同的技术，这就使得软件企业最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。</p><p>而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的实现技术解耦。</p><p>这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。</p></blockquote><p><font color="red">框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的中间层。</font></p><h2 id="软件开发的分层重要性"><a href="#软件开发的分层重要性" class="headerlink" title="软件开发的分层重要性"></a>软件开发的分层重要性</h2><p>框架的<strong>重要性在于它实现了部分功能，并且能够很好的将低层应用平台和高层业务逻辑进行了缓和。</strong></p><p>为了实现软件工程中的<strong>“高内聚、低耦合”</strong>。</p><p>把问题划分开来各个解决，易于控制，易于延展，易于分配资源。</p><p>我们常见的<strong><code>MVC</code>软件设计思想</strong>就是很好的分层思想。</p><p>👉关于<a href="https://melodyjerry.gitee.io/blog/2020/02/27/MVC：开发模式/" target="_blank" rel="noopener">MVC：开发模式</a></p><p><img src="https://s1.ax1x.com/2020/07/11/UluqhD.png" srcset="/blog/img/loading.gif" alt="UluqhD.png"></p><h2 id="分层开发下的常见框架"><a href="#分层开发下的常见框架" class="headerlink" title="分层开发下的常见框架"></a>分层开发下的常见框架</h2><h3 id="常见的JavaEE开发框架"><a href="#常见的JavaEE开发框架" class="headerlink" title="常见的JavaEE开发框架"></a>常见的JavaEE开发框架</h3><h3 id="1-解决数据的持久化问题的框架"><a href="#1-解决数据的持久化问题的框架" class="headerlink" title="1.解决数据的持久化问题的框架"></a>1.解决数据的持久化问题的框架</h3><p><img src="https://s1.ax1x.com/2020/07/11/UlKaE6.png" srcset="/blog/img/loading.gif" alt="UlKaE6.png"></p><blockquote><p>作为持久层的框架，还有一个封装程度更高的框架就是<code>Hibernate</code>，但这个框架因为各种原因目前在国内的流行程度下降太多，现在公司开发也越来越少使用。</p></blockquote><p>目前使用<code>Spring Data</code>来实现数据持久化也是一种趋势。</p><h4 id="2-解决Web层问题的MVC框架"><a href="#2-解决Web层问题的MVC框架" class="headerlink" title="2.解决Web层问题的MVC框架"></a>2.解决Web层问题的MVC框架</h4><p><img src="https://s1.ax1x.com/2020/07/11/UlMka6.png" srcset="/blog/img/loading.gif" alt="UlMka6.png"></p><h4 id="3-解决技术整合问题的框架"><a href="#3-解决技术整合问题的框架" class="headerlink" title="3.解决技术整合问题的框架"></a>3.解决技术整合问题的框架</h4><p><img src="https://s1.ax1x.com/2020/07/11/UlM3If.png" srcset="/blog/img/loading.gif" alt="UlM3If.png"></p><h1 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h1><p><img src="https://s1.ax1x.com/2020/07/11/UllVjH.png" srcset="/blog/img/loading.gif" alt="UllVjH.png"></p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><ul><li>用于展示数据</li></ul><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><ul><li>处理业务需求</li></ul><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><ul><li>和数据库交互</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是框架&quot;&gt;&lt;a href=&quot;#什么是框架&quot; class=&quot;headerlink&quot; title=&quot;什么是框架&quot;&gt;&lt;/a&gt;什么是框架&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;框架（&lt;code&gt;Framework&lt;/code&gt;）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前者是从应用方面而后者是从目的方面给出的定义&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        简而言之，框架其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。&lt;/p&gt;
&lt;p&gt;​    它是我门软件开发种的一套解决方案，不同框架解决不同问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="Web" scheme="https://melodyjerry.github.io/blog/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>博客建筑常用的JS特效</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/11/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AD%91%E5%B8%B8%E7%94%A8%E7%9A%84JS%E7%89%B9%E6%95%88/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/11/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AD%91%E5%B8%B8%E7%94%A8%E7%9A%84JS%E7%89%B9%E6%95%88/</id>
    <published>2020-07-11T04:55:00.000Z</published>
    <updated>2020-07-11T09:35:51.213Z</updated>
    
    <content type="html"><![CDATA[<p>随机图片API</p><ol><li><a href="https://api.mz-moe.cn/img.php" target="_blank" rel="noopener">https://api.mz-moe.cn/img.php</a></li><li><a href="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" target="_blank" rel="noopener">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</a></li></ol><a id="more"></a><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--动态线条背景--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span></span><span class="hljs-tag"><span class="hljs-attr">color</span>=<span class="hljs-string">"255,0,0"</span> <span class="hljs-attr">opacity</span>=<span class="hljs-string">'1'</span> <span class="hljs-attr">zIndex</span>=<span class="hljs-string">"-2"</span> <span class="hljs-attr">count</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- 天气挂件 --&gt;</span><span class="hljs-comment">&lt;!-- &lt;div id="tp-weather-widget"&gt;&lt;/div&gt;</span><span class="hljs-comment">&lt;script&gt;</span><span class="hljs-comment">    (function(a,h,g,f,e,d,c,b){b=function(){d=h.createElement(g);c=h.getElementsByTagName(g)[0];d.src=e;d.charset="utf-8";d.async=1;c.parentNode.insertBefore(d,c)};a["SeniverseWeatherWidgetObject"]=f;a[f]||(a[f]=function(){(a[f].q=a[f].q||[]).push(arguments)});a[f].l=+new Date();if(a.attachEvent){a.attachEvent("onload",b)}else{a.addEventListener("load",b,false)}}(window,document,"script","SeniverseWeatherWidget","//cdn.sencdn.com/widget2/static/js/bundle.js?t="+parseInt((new Date().getTime() / 100000000).toString(),10)));</span><span class="hljs-comment">    window.SeniverseWeatherWidget('show', {</span><span class="hljs-comment">      flavor: "bubble",</span><span class="hljs-comment">      location: "WS0E9D8WN298",</span><span class="hljs-comment">      geolocation: true,</span><span class="hljs-comment">      language: "zh-Hans",</span><span class="hljs-comment">      unit: "c",</span><span class="hljs-comment">      theme: "auto",</span><span class="hljs-comment">      token: "5fd5b254-57fe-4f8a-8a13-f92485efeb0b",</span><span class="hljs-comment">      hover: "enabled",</span><span class="hljs-comment">      container: "tp-weather-widget"</span><span class="hljs-comment">    })</span><span class="hljs-comment">&lt;/script&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tp-weather-widget"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,h,g,f,e,d,c,b</span>)</span>{b=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{d=h.createElement(g);c=h.getElementsByTagName(g)[<span class="hljs-number">0</span>];d.src=e;d.charset=<span class="hljs-string">"utf-8"</span>;d.async=<span class="hljs-number">1</span>;c.parentNode.insertBefore(d,c)};a[<span class="hljs-string">"SeniverseWeatherWidgetObject"</span>]=f;a[f]||(a[f]=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{(a[f].q=a[f].q||[]).push(<span class="hljs-built_in">arguments</span>)});a[f].l=+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-keyword">if</span>(a.attachEvent){a.attachEvent(<span class="hljs-string">"onload"</span>,b)}<span class="hljs-keyword">else</span>{a.addEventListener(<span class="hljs-string">"load"</span>,b,<span class="hljs-literal">false</span>)}}(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">"script"</span>,<span class="hljs-string">"SeniverseWeatherWidget"</span>,<span class="hljs-string">"//cdn.sencdn.com/widget2/static/js/bundle.js?t="</span>+<span class="hljs-built_in">parseInt</span>((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() / <span class="hljs-number">100000000</span>).toString(),<span class="hljs-number">10</span>)));</span><span class="javascript">    <span class="hljs-built_in">window</span>.SeniverseWeatherWidget(<span class="hljs-string">'show'</span>, {</span><span class="actionscript">      flavor: <span class="hljs-string">"bubble"</span>,</span><span class="actionscript">      location: <span class="hljs-string">"WS0E9D8WN298"</span>,</span><span class="actionscript">      geolocation: <span class="hljs-literal">true</span>,</span><span class="actionscript">      language: <span class="hljs-string">"zh-Hans"</span>,</span><span class="actionscript">      unit: <span class="hljs-string">"c"</span>,</span><span class="actionscript">      theme: <span class="hljs-string">"auto"</span>,</span><span class="actionscript">      token: <span class="hljs-string">"5fd5b254-57fe-4f8a-8a13-f92485efeb0b"</span>,</span><span class="actionscript">      hover: <span class="hljs-string">"disabled"</span>,</span><span class="actionscript">      container: <span class="hljs-string">"tp-weather-widget"</span></span>    })<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!--浏览器搞笑标题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.6/js/FunnyTitle.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--图片放缩-fancybox插件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--放大图片--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://blog-static.cnblogs.com/files/zouwangblog/zoom.css"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/bootstrap/3.2.0/js/transition.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://blog-static.cnblogs.com/files/zouwangblog/zoom.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'text/javascript'</span>&gt;</span><span class="javascript">$(<span class="hljs-string">'#cnblogs_post_body img'</span>).attr(<span class="hljs-string">'data-action'</span>, <span class="hljs-string">'zoom'</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--放大图片end--&gt;</span><span class="hljs-comment">&lt;!--樱花瓣飘落--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-love109.cn@2.0.6/js/sakura.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--速度优化脚本--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.6/js/instantclick-1.2.2.js"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"module"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--热门标签，旋转，来自https://arlxn.xyz/--&gt;</span><span class="hljs-comment">&lt;!--tagcloud.ejs--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://createdestruction.github.io/js/tagcanvas.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://createdestruction.github.io/js/tagcloud.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--宅音乐播放器 https://player.ilt.me/admin--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ilt"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://player.ilt.me/player/js/player.js"</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"992f0d81b6b74b93b6bbdb56f57a6c58"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--闲聊么http://www.xianliao.me/faq&lt;script&gt;var xlm_wid='15920';var xlm_url='https://www.xianliao.me/';&lt;/script&gt;&lt;script type="text/javascript" charset="UTF-8" src="https://www.xianliao.me/embed.js"&gt;&lt;/script&gt;--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-comment">&lt;!--打字机--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: center;font-weight: bold;color: #1BC3FB;"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"subtitle1"</span>&gt;</span>没有伞的孩子必须努力奔跑！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"typed-cursor typed-cursor--blink"</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"typed-cursor"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- 打字特效（蓝色字体） --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript"><span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> Typed(<span class="hljs-string">"#subtitle1"</span>, { strings: [<span class="hljs-string">"Live a good life, write some good code !!!"</span>, <span class="hljs-string">"愿自己的努力终将获得回报。"</span>, <span class="hljs-string">"花开不是为了花落，而是为了开的更加灿烂。"</span>, <span class="hljs-string">"没有伞的孩子必须努力奔跑！"</span>, <span class="hljs-string">"欲望以提升热忱，毅力以磨平高山。"</span>, <span class="hljs-string">"如果放弃太早，你永远都不知道自己会错过什么。"</span>, <span class="hljs-string">"没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。"</span>], startDelay: <span class="hljs-number">1000</span>, typeSpeed: <span class="hljs-number">100</span>, loop: !<span class="hljs-number">0</span>, backSpeed: <span class="hljs-number">60</span>, backDelay: <span class="hljs-number">2000</span>, showCursor: !<span class="hljs-number">0</span> })</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--建站运行时长--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); </span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createtime</span><span class="hljs-params">()</span> </span>{ </span><span class="javascript">        <span class="hljs-keyword">var</span> grt= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"06/11/2019 17:38:00"</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span>        now.setTime(now.getTime()+250); <span class="javascript">        days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-built_in">Math</span>.floor(days); </span><span class="javascript">        hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-built_in">Math</span>.floor(hours); </span><span class="javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(hnum).length ==<span class="hljs-number">1</span> ){hnum = <span class="hljs-string">"0"</span> + hnum;} minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum); </span><span class="javascript">        mnum = <span class="hljs-built_in">Math</span>.floor(minutes); <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(mnum).length ==<span class="hljs-number">1</span> ){mnum = <span class="hljs-string">"0"</span> + mnum;} </span>        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); <span class="javascript">        snum = <span class="hljs-built_in">Math</span>.round(seconds); <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(snum).length ==<span class="hljs-number">1</span> ){snum = <span class="hljs-string">"0"</span> + snum;} </span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"timeDate"</span>).innerHTML = <span class="hljs-string">"小站勉强运行了 "</span>+dnum+<span class="hljs-string">" 天 "</span>; </span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"times"</span>).innerHTML = hnum + <span class="hljs-string">" 小时 "</span> + mnum + <span class="hljs-string">" 分 "</span> + snum + <span class="hljs-string">" 秒 ( ͡° ͜ʖ ͡°)✧ "</span>; </span>    } <span class="actionscript">setInterval(<span class="hljs-string">"createtime()"</span>,<span class="hljs-number">250</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"timeDate"</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"times"</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-comment">&lt;!--网站访客地理信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"//rf.revolvermaps.com/0/0/8.js?i=5eqiqb8vl6p&amp;m=2&amp;c=ff0000&amp;cr1=ffffff&amp;f=arial&amp;l=33&amp;z=17&amp;rx=-40&amp;lx=-540&amp;ly=520&amp;hi=60"</span> <span class="hljs-attr">async</span>=<span class="hljs-string">"async"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-comment">&lt;!--cnzz统计--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">unescape</span>(<span class="hljs-string">"%3Cspan id='cnzz_stat_icon_'%3E%3C/span%3E%3Cscript src='' type='text/javascript'"</span>));</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随机图片API&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://api.mz-moe.cn/img.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.mz-moe.cn/img.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Git Bash 命令大全</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/Git-Bash-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/Git-Bash-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-07-10T14:25:00.000Z</published>
    <updated>2020-07-11T09:36:09.212Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>在当前目录新建一个Git代码库</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git init</code></pre></div><p>新建一个目录，将其初始化为Git代码库</p><div class="hljs"><pre><code class="hljs applescript">复制$ git init [project-<span class="hljs-built_in">name</span>]</code></pre></div><p>下载一个项目和它的整个代码历史</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>]</code></pre></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>显示当前的Git配置</p><div class="hljs"><pre><code class="hljs routeros">复制$ git<span class="hljs-built_in"> config </span>--list</code></pre></div><p>编辑Git配置文件</p><div class="hljs"><pre><code class="hljs routeros">复制$ git<span class="hljs-built_in"> config </span>-e [--global]</code></pre></div><p>设置提交代码时的用户信息</p><div class="hljs"><pre><code class="hljs routeros">复制$ git<span class="hljs-built_in"> config </span>[--global] user.name <span class="hljs-string">"[name]"</span>$ git<span class="hljs-built_in"> config </span>[--global] user.email <span class="hljs-string">"[email address]"</span></code></pre></div><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><p>添加指定文件到暂存区</p><div class="hljs"><pre><code class="hljs prolog">复制$ git add [file1] [file2] ...</code></pre></div><p>添加指定目录到暂存区，包括子目录</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git <span class="hljs-keyword">add</span><span class="bash"> [dir]</span></code></pre></div><p>添加当前目录的所有文件到暂存区</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git <span class="hljs-keyword">add</span><span class="bash"> .</span></code></pre></div><p>添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git <span class="hljs-keyword">add</span><span class="bash"> -p</span></code></pre></div><p>删除工作区文件，并且将这次删除放入暂存区</p><div class="hljs"><pre><code class="hljs prolog">复制$ git rm [file1] [file2] ...</code></pre></div><p>停止追踪指定文件，但该文件会保留在工作区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git rm --cached [<span class="hljs-keyword">file</span>]</code></pre></div><p>改名文件，并且将这个改名放入暂存区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git mv [<span class="hljs-keyword">file</span>-original] [<span class="hljs-keyword">file</span>-renamed]</code></pre></div><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>提交暂存区到仓库区</p><div class="hljs"><pre><code class="hljs cmake">复制$ git commit -m [<span class="hljs-keyword">message</span>]</code></pre></div><p>提交暂存区的指定文件到仓库区</p><div class="hljs"><pre><code class="hljs inform7">复制$ git commit <span class="hljs-comment">[file1]</span> <span class="hljs-comment">[file2]</span> ... -m <span class="hljs-comment">[message]</span></code></pre></div><p>提交工作区自上次commit之后的变化，直接到仓库区</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git commit -a</code></pre></div><p>提交时显示所有diff信息</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git commit -v</code></pre></div><p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend -m [message]</span></code></pre></div><p>重做上一次commit，并包括指定文件的新变化</p><div class="hljs"><pre><code class="hljs prolog">复制$ git commit --amend [file1] [file2] ...</code></pre></div><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>列出所有本地分支</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git branch</code></pre></div><p>列出所有远程分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>-r</code></pre></div><p>列出所有本地分支和远程分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>-a</code></pre></div><p>新建一个分支，但依然停留在当前分支</p><div class="hljs"><pre><code class="hljs applescript">复制$ git branch [branch-<span class="hljs-built_in">name</span>]</code></pre></div><p>新建一个分支，并切换到该分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git checkout -<span class="hljs-keyword">b </span>[<span class="hljs-keyword">branch]</span></code></pre></div><p>新建一个分支，指向指定commit</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>[<span class="hljs-keyword">branch] </span>[commit]</code></pre></div><p>新建一个分支，与指定的远程分支建立追踪关系</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">branch </span>--track [<span class="hljs-keyword">branch] </span>[remote-<span class="hljs-keyword">branch]</span></code></pre></div><p>切换到指定分支，并更新工作区</p><div class="hljs"><pre><code class="hljs applescript">复制$ git checkout [branch-<span class="hljs-built_in">name</span>]</code></pre></div><p>切换到上一个分支</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git checkout -</code></pre></div><p>建立追踪关系，在现有分支与指定的远程分支之间</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git branch --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">[branch] [remote-branch]</span></code></pre></div><p>合并指定分支到当前分支</p><div class="hljs"><pre><code class="hljs cos">复制$ git <span class="hljs-keyword">merge</span> [branch]</code></pre></div><p>选择一个commit，合并进当前分支</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git cherry-pick [commit]</code></pre></div><p>删除分支</p><div class="hljs"><pre><code class="hljs applescript">复制$ git branch -d [branch-<span class="hljs-built_in">name</span>]</code></pre></div><p>删除远程分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">push </span>origin --delete [<span class="hljs-keyword">branch-name]</span><span class="hljs-keyword">$ </span>git <span class="hljs-keyword">branch </span>-dr [remote/<span class="hljs-keyword">branch]</span></code></pre></div><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>列出所有tag</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span></code></pre></div><p>新建一个tag在当前commit</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>]</code></pre></div><p>新建一个tag在指定commit</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit]</code></pre></div><p>删除本地tag</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>]</code></pre></div><p>删除远程tag</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git push origin <span class="hljs-symbol">:refs/tags/</span>[tagName]</code></pre></div><p>查看tag信息</p><div class="hljs"><pre><code class="hljs crmsh">复制$ git show [<span class="hljs-keyword">tag</span>]</code></pre></div><p>提交指定tag</p><div class="hljs"><pre><code class="hljs inform7">复制$ git push <span class="hljs-comment">[remote]</span> <span class="hljs-comment">[tag]</span></code></pre></div><p>提交所有tag</p><div class="hljs"><pre><code class="hljs ada">复制$ git push [remote] <span class="hljs-comment">--tags</span></code></pre></div><p>新建一个分支，指向某个tag</p><div class="hljs"><pre><code class="hljs armasm">复制$ git checkout -<span class="hljs-keyword">b </span>[<span class="hljs-keyword">branch] </span>[tag]</code></pre></div><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p>显示有变更的文件</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git status</code></pre></div><p>显示当前分支的版本历史</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span></code></pre></div><p>显示commit历史，以及每次commit发生变更的文件</p><div class="hljs"><pre><code class="hljs applescript">复制$ git <span class="hljs-built_in">log</span> <span class="hljs-comment">--stat</span></code></pre></div><p>搜索提交历史，根据关键词</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span> -S [keyword]</code></pre></div><p>显示某个commit之后的所有变动，每个commit占据一行</p><div class="hljs"><pre><code class="hljs applescript">复制$ git <span class="hljs-built_in">log</span> [tag] HEAD <span class="hljs-comment">--pretty=format:%s</span></code></pre></div><p>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</p><div class="hljs"><pre><code class="hljs vim">复制$ git <span class="hljs-built_in">log</span> [<span class="hljs-keyword">tag</span>] HEAD --<span class="hljs-keyword">grep</span> feature</code></pre></div><p>显示某个文件的版本历史，包括文件改名</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span> --follow [<span class="hljs-keyword">file</span>]<span class="hljs-symbol">$</span> git whatchanged [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示指定文件相关的每一次diff</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git <span class="hljs-built-in">log</span> -p [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示过去5次提交</p><div class="hljs"><pre><code class="hljs applescript">复制$ git <span class="hljs-built_in">log</span> <span class="hljs-number">-5</span> <span class="hljs-comment">--pretty --oneline</span></code></pre></div><p>显示所有提交过的用户，按提交次数排序</p><div class="hljs"><pre><code class="hljs armasm">复制$ git shortlog -<span class="hljs-meta">sn</span></code></pre></div><p>显示指定文件是什么人在什么时间修改过</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git blame [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示暂存区和工作区的差异</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git diff</code></pre></div><p>显示暂存区和上一个commit的差异</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git diff --cached [<span class="hljs-keyword">file</span>]</code></pre></div><p>显示工作区与当前分支最新commit之间的差异</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git diff HEAD</code></pre></div><p>显示两次提交之间的差异</p><div class="hljs"><pre><code class="hljs maxima">复制$ git <span class="hljs-built_in">diff</span> [<span class="hljs-built_in">first</span>-branch]...[<span class="hljs-built_in">second</span>-branch]</code></pre></div><p>显示今天你写了多少行代码</p><div class="hljs"><pre><code class="hljs mipsasm">复制$ git <span class="hljs-keyword">diff </span>--<span class="hljs-keyword">shortstat </span><span class="hljs-string">"@{0 day ago}"</span></code></pre></div><p>显示某次提交的元数据和内容变化</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">show</span> [<span class="hljs-keyword">commit</span>]</code></pre></div><p>显示某次提交发生变化的文件</p><div class="hljs"><pre><code class="hljs fortran">复制$ git show --<span class="hljs-keyword">name</span>-<span class="hljs-keyword">only</span> [commit]</code></pre></div><p>显示某次提交时，某个文件的内容</p><div class="hljs"><pre><code class="hljs inform7">复制$ git show <span class="hljs-comment">[commit]</span>:<span class="hljs-comment">[filename]</span></code></pre></div><p>显示当前分支的最近几次提交</p><div class="hljs"><pre><code class="hljs angelscript">复制$ git <span class="hljs-built_in">ref</span>log</code></pre></div><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>下载远程仓库的所有变动</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git fetch [remote]</code></pre></div><p>显示所有远程仓库</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git remote -v</code></pre></div><p>显示某个远程仓库的信息</p><div class="hljs"><pre><code class="hljs dart">复制$ git remote <span class="hljs-keyword">show</span> [remote]</code></pre></div><p>增加一个新的远程仓库，并命名</p><div class="hljs"><pre><code class="hljs dockerfile">复制$ git remote <span class="hljs-keyword">add</span><span class="bash"> [shortname] [url]</span></code></pre></div><p>取回远程仓库的变化，并与本地分支合并</p><div class="hljs"><pre><code class="hljs inform7">复制$ git pull <span class="hljs-comment">[remote]</span> <span class="hljs-comment">[branch]</span></code></pre></div><p>上传本地指定分支到远程仓库</p><div class="hljs"><pre><code class="hljs inform7">复制$ git push <span class="hljs-comment">[remote]</span> <span class="hljs-comment">[branch]</span></code></pre></div><p>强行推送当前分支到远程仓库，即使有冲突</p><div class="hljs"><pre><code class="hljs ada">复制$ git push [remote] <span class="hljs-comment">--force</span></code></pre></div><p>推送所有分支到远程仓库</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git push [remote] --<span class="hljs-keyword">all</span></code></pre></div><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p>恢复暂存区的指定文件到工作区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git checkout [<span class="hljs-keyword">file</span>]</code></pre></div><p>恢复某个commit的指定文件到暂存区和工作区</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git checkout [commit] [<span class="hljs-keyword">file</span>]</code></pre></div><p>恢复暂存区的所有文件到工作区</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git checkout .</code></pre></div><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p><div class="hljs"><pre><code class="hljs gams">复制<span class="hljs-symbol">$</span> git reset [<span class="hljs-keyword">file</span>]</code></pre></div><p>重置暂存区与工作区，与上一次commit保持一致</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span></code></pre></div><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> [<span class="hljs-keyword">commit</span>]</code></pre></div><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard [commit]</span></code></pre></div><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p><div class="hljs"><pre><code class="hljs pgsql">复制$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--keep [commit]</span></code></pre></div><p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p><div class="hljs"><pre><code class="hljs armasm">复制$ git <span class="hljs-keyword">revert </span>[commit]</code></pre></div><p>暂时将未提交的变化移除，稍后再移入</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git stash<span class="hljs-variable">$ </span>git stash pop</code></pre></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>生成一个可供发布的压缩包</p><div class="hljs"><pre><code class="hljs elixir">复制<span class="hljs-variable">$ </span>git archive</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; class=&quot;headerlink&quot; title=&quot;仓库&quot;&gt;&lt;/a&gt;仓库&lt;/h2&gt;&lt;p&gt;在当前目录新建一个Git代码库&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code cl
      
    
    </summary>
    
    
    
      <category term="Git" scheme="https://melodyjerry.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>网易云解析/接口</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/%E7%BD%91%E6%98%93%E4%BA%91%E8%A7%A3%E6%9E%90%E6%8E%A5%E5%8F%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/%E7%BD%91%E6%98%93%E4%BA%91%E8%A7%A3%E6%9E%90%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-07-10T07:55:00.000Z</published>
    <updated>2020-07-16T05:16:35.547Z</updated>
    
    <content type="html"><![CDATA[<p>文档来源：<a href="https://api.paugram.com/help/netease" target="_blank" rel="noopener">https://api.paugram.com/help/netease</a></p><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>调用地址 <code>https://api.paugram.com/netease/</code> 并输入参数 <code>id</code> 或 <code>title</code>，即可获得一段歌曲 <code>JSON</code> 信息。</p><p>如果您已开始使用本 API 服务，则默认视为遵守 <a href="https://api.paugram.com/notice" target="_blank" rel="noopener">本约定</a>。</p><p>音乐版权归网易云音乐所有，本站不为滥用本 API 进行违规操作者承担责任。</p><a id="more"></a><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>建议使用 <code>id</code> 的方式获得歌曲信息，性能相对较好。</p><table><thead><tr><th>参数</th><th>要求</th><th>描述</th></tr></thead><tbody><tr><td>id <em>二选一</em></td><td>有效的音乐 ID，例：<code>517567145</code></td><td>音乐 ID</td></tr><tr><td>title <em>二选一</em></td><td>可以搜索到且无版权限制的歌曲，暂无加速</td><td>音乐名称</td></tr><tr><td>playlist（施工中）</td><td>有多首音乐的音乐列表</td><td>音乐列表</td></tr><tr><td>play</td><td>参数值为 <code>true</code> 则启用跳转</td><td>是否直接跳转到歌曲所在地址</td></tr></tbody></table><h3 id="返回内容"><a href="#返回内容" class="headerlink" title="返回内容"></a>返回内容</h3><table><thead><tr><th>参数名称</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>id</td><td>音乐 ID</td><td><code>string</code></td></tr><tr><td>title</td><td>音乐名称</td><td><code>string</code></td></tr><tr><td>artist</td><td>音乐艺术家</td><td><code>string</code></td></tr><tr><td>album</td><td>音乐专辑名称</td><td><code>string</code></td></tr><tr><td>cover</td><td>音乐专辑图片链接（https）</td><td><code>string</code></td></tr><tr><td>link</td><td>音乐源地址链接</td><td><code>string</code></td></tr><tr><td>lyric</td><td>音乐 LRC 歌词内容</td><td><code>string</code></td></tr><tr><td>sub_lyric</td><td>翻译版 LRC 歌词内容（如果有）</td><td><code>string</code></td></tr><tr><td>served</td><td>是否为 VIP 或无版权歌曲（测试功能）</td><td><code>true</code> <code>false</code></td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>通过 ID 获得一首歌的信息</p><div class="hljs"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.paugram.com<span class="hljs-regexp">/netease/</span>?id=<span class="hljs-number">517567145</span>返回的是：{    <span class="hljs-string">"id"</span>: <span class="hljs-number">517567145</span>,    <span class="hljs-string">"title"</span>: <span class="hljs-string">"初登校"</span>,    <span class="hljs-string">"artist"</span>: <span class="hljs-string">"橋本由香利"</span>,    <span class="hljs-string">"album"</span>: <span class="hljs-string">"ひなこのーと COMPLETE SOUNDTRACK"</span>,    <span class="hljs-string">"cover"</span>: 封面地址,    <span class="hljs-string">"lyric"</span>: 歌词内容,    <span class="hljs-string">"sub_lyric"</span>: 翻译歌词内容,    <span class="hljs-string">"link"</span>: 音乐地址}</code></pre></div><p>通过 ID 获得一首歌，并跳转到实际地址</p><div class="hljs"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.paugram.com<span class="hljs-regexp">/netease/</span>?id=<span class="hljs-number">517567145</span>&amp;play=true</code></pre></div><p>通过歌名获得一首歌的信息</p><div class="hljs"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>api.paugram.com<span class="hljs-regexp">/netease/</span>?title=Paradise返回的是：{    <span class="hljs-string">"id"</span>: <span class="hljs-number">17177380</span>,    <span class="hljs-string">"title"</span>: <span class="hljs-string">"Paradise"</span>,    <span class="hljs-string">"artist"</span>: <span class="hljs-string">"Coldplay"</span>,    <span class="hljs-string">"album"</span>: <span class="hljs-string">"Paradise"</span>,    <span class="hljs-string">"cover"</span>: 封面地址,    <span class="hljs-string">"lyric"</span>: 歌词内容,    <span class="hljs-string">"sub_lyric"</span>: 翻译歌词内容,    <span class="hljs-string">"link"</span>: 音乐地址}</code></pre></div><p>结合 Kico Style 和 Kico Player 使用本 API</p><div class="hljs"><pre><code class="hljs javascript">ks.ajax({    method: <span class="hljs-string">"GET"</span>,    url: <span class="hljs-string">"https://api.paugram.com/netease/"</span> + <span class="hljs-string">"?id="</span> + id,    success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req</span>)</span>{        <span class="hljs-keyword">var</span> item = <span class="hljs-built_in">JSON</span>.parse(req.response);        声明的播放器.add([item]);    },    failed: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req</span>)</span>{        ks.notice(<span class="hljs-string">"获取音乐信息错误了！"</span>, {<span class="hljs-attr">color</span>: <span class="hljs-string">"red"</span>});    }});</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文档来源：&lt;a href=&quot;https://api.paugram.com/help/netease&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.paugram.com/help/netease&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h3&gt;&lt;p&gt;调用地址 &lt;code&gt;https://api.paugram.com/netease/&lt;/code&gt; 并输入参数 &lt;code&gt;id&lt;/code&gt; 或 &lt;code&gt;title&lt;/code&gt;，即可获得一段歌曲 &lt;code&gt;JSON&lt;/code&gt; 信息。&lt;/p&gt;
&lt;p&gt;如果您已开始使用本 API 服务，则默认视为遵守 &lt;a href=&quot;https://api.paugram.com/notice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本约定&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;音乐版权归网易云音乐所有，本站不为滥用本 API 进行违规操作者承担责任。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="API" scheme="https://melodyjerry.github.io/blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>「hexo.sh」一个方便管理与发布hexo博客的脚本</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/%E3%80%8Chexo.sh%E3%80%8D%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/%E3%80%8Chexo.sh%E3%80%8D%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%84%9A%E6%9C%AC/</id>
    <published>2020-07-10T07:09:00.000Z</published>
    <updated>2020-07-11T09:36:29.324Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png" srcset="/blog/img/loading.gif" alt="img"></a></p><p>「<code>hexo.sh</code>」脚本可以很方便执行各种 hexo 命令，开启后会一直保持会话，随时输入 <code>c</code>、<code>cs</code>、<code>cg</code>、<code>cgd</code> 等简短的命令去执行一系列操作，提高效率。</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-meta">例如，`cs`相当于：hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><span class="hljs-meta">`cgd`相当于：hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><span class="hljs-attr">git</span> <span class="hljs-string">add --all</span><span class="hljs-attr">git</span> <span class="hljs-string">commit -am "update all"</span><span class="hljs-attr">git</span> <span class="hljs-string">push origin</span></code></pre></div><a id="more"></a><h2 id="下载并安装脚本"><a href="#下载并安装脚本" class="headerlink" title="下载并安装脚本"></a>下载并安装脚本</h2><p>打开终端，输入这行命令：</p><div class="hljs"><pre><code class="hljs vim">curl -s http<span class="hljs-variable">s:</span>//xaoxuu.<span class="hljs-keyword">com</span>/install | <span class="hljs-keyword">sh</span> -s hexo.<span class="hljs-keyword">sh</span></code></pre></div><p>如需安装指定版本，在后面加上版本号即可，例如：</p><div class="hljs"><pre><code class="hljs vim">curl -s http<span class="hljs-variable">s:</span>//xaoxuu.<span class="hljs-keyword">com</span>/install | <span class="hljs-keyword">sh</span> -s hexo.<span class="hljs-keyword">sh</span> <span class="hljs-number">2.1</span>.<span class="hljs-number">0</span></code></pre></div><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><p>在终端输入如下命令即可打开脚本：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">hexo</span><span class="hljs-selector-class">.sh</span></code></pre></div><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在终端输入如下命令即可查看脚本所有支持的指令：</p><div class="hljs"><pre><code class="hljs stata">hexo.<span class="hljs-keyword">sh</span> <span class="hljs-keyword">help</span></code></pre></div><p>如果是脚本已经启动（可以看到脚本菜单，处于待输入指令的状态），则只需要输入 <code>help</code>，下文其它情景同理。</p><p>下面是一些常见使用场景：</p><h3 id="A-使用脚本快速搭建博客"><a href="#A-使用脚本快速搭建博客" class="headerlink" title="A. 使用脚本快速搭建博客"></a>A. 使用脚本快速搭建博客</h3><p>let <code>path</code> = 你想把博客放在哪里，打开终端 <strong><code>cd</code> 到 <code>path</code></strong> 。</p><p>在终端输入如下命令自动检查并安装所有需要的环境，然后搭建并启动博客：</p><div class="hljs"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">COPYhexo</span>.</span></span>sh init</code></pre></div><p>脚本会依次执行以下这些操作：</p><ol><li>检测node.js环境，如果没有就安装。</li><li>检测hexo环境，如果没有就安装。</li><li>输入自定义博客名，在当前目录执行初始化。</li><li>安装Material X主题。</li><li>安装所有依赖包。</li></ol><blockquote><p>注意：安装node.js或者hexo的时候需要输入一次<strong>本机密码</strong>，别忘了哦。<br>搭建博客的时候你需要输入<strong>博客名</strong>，其他时间就可以坐和放宽了。</p></blockquote><h3 id="B-使用脚本快速更新博客"><a href="#B-使用脚本快速更新博客" class="headerlink" title="B. 使用脚本快速更新博客"></a>B. 使用脚本快速更新博客</h3><p>let <code>path</code> = 你的博客路径，打开终端 <code>cd</code> 到 <code>path</code> 。</p><p>在终端输入如下命令启动博客：</p><div class="hljs"><pre><code class="hljs css"><span class="hljs-selector-tag">hexo</span><span class="hljs-selector-class">.sh</span> <span class="hljs-selector-tag">s</span></code></pre></div><p>然后修改你的文章、博客主题，如果修改了 <code>_config.yml</code> 是需要重新启动博客的，有些参数甚至需要 <code>clean</code> 之后重启才能生效，这时候你只需要在终端脚本【请输入指令】后面输入：</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">cs</span></code></pre></div><p>就执行 <code>hexo clean</code>，然后执行 <code>hexo server</code> 了。</p><p>如果你已经修改完毕，需要发布更新，可以在终端脚本【请输入指令】后面输入：</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">cgd</span></code></pre></div><p>脚本就会执行 <code>hexo clean</code>、<code>hexo generate</code>、<code>hexo deploy</code>，然后执行一系列的git命令把源码的更新提交至远程仓库。</p><h2 id="所有支持的命令"><a href="#所有支持的命令" class="headerlink" title="所有支持的命令"></a>所有支持的命令</h2><p>这是 <code>2.1.0</code> 版本中的所有命令，可能未必准确，以脚本中的帮助信息为准。</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-meta">常用</span>:<span class="hljs-string"></span>  <span class="hljs-attr">c</span> <span class="hljs-string">(clean)  执行 hexo clean</span>  <span class="hljs-attr">s</span> <span class="hljs-string">(server)  执行 hexo server</span>  <span class="hljs-attr">g</span> <span class="hljs-string">(generate)  执行 hexo generate</span>  <span class="hljs-attr">d</span> <span class="hljs-string">(deploy)  执行 hexo deploy</span>  <span class="hljs-attr">cs</span>   <span class="hljs-string">执行 c, s 的组合</span>  <span class="hljs-attr">cg</span>   <span class="hljs-string">执行 c, g 的组合</span>  <span class="hljs-attr">cgd</span>   <span class="hljs-string">执行 c, g, d 的组合，然后提交代码</span><span class="hljs-meta">安装</span>:<span class="hljs-string"></span>  <span class="hljs-attr">i</span> <span class="hljs-string">(install)  用于安装的命令，下面是install命令的参数:</span>   <span class="hljs-attr">n</span> <span class="hljs-string">(node)       安装node.js环境</span>   <span class="hljs-attr">h</span> <span class="hljs-string">(hexo)       安装hexo环境(npm install hexo-cli -g)</span>   <span class="hljs-attr">b</span> <span class="hljs-string">(blog)       搭建博客(hexo init, npm install)</span>   <span class="hljs-attr">d</span> <span class="hljs-string">(dependency) 安装依赖包(npm install)</span>   <span class="hljs-attr">v</span> <span class="hljs-string">(volantis)   下载并应用「Volantis」主题</span><span class="hljs-meta">自动</span>:<span class="hljs-string"></span>  <span class="hljs-attr">init</span>  <span class="hljs-string">自动检查并安装所有需要的环境，然后搭建并启动博客。👍🏼</span>  <span class="hljs-attr">vut</span>  <span class="hljs-string">下载并运行「Volantis」主题的单元测试。</span><span class="hljs-meta">脚本</span>:<span class="hljs-string"></span>  <span class="hljs-attr">cd</span> <span class="hljs-string">+ `path`  选择路径</span>  <span class="hljs-attr">docs</span>   <span class="hljs-string">查看文档(https://xaoxuu.com/wiki/hexo.sh)</span>  <span class="hljs-attr">gh</span> <span class="hljs-string">(github)  GitHub页面(https://github.com/xaoxuu/hexo.sh)</span>  <span class="hljs-attr">u</span> <span class="hljs-string">(update)  更新脚本文件(当前版本：2.1.0)</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/proj/hexo.sh/e14f6ecb16deb21e894e78c9ccc46729854394.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「&lt;code&gt;hexo.sh&lt;/code&gt;」脚本可以很方便执行各种 hexo 命令，开启后会一直保持会话，随时输入 &lt;code&gt;c&lt;/code&gt;、&lt;code&gt;cs&lt;/code&gt;、&lt;code&gt;cg&lt;/code&gt;、&lt;code&gt;cgd&lt;/code&gt; 等简短的命令去执行一系列操作，提高效率。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs properties&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;例如，`cs`相当于：hexo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;clean&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;hexo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;hljs-meta&quot;&gt;`cgd`相当于：hexo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;clean&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;hexo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;hexo&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;d&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;add --all&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;commit -am &quot;update all&quot;&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;push origin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令小记</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/10/Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/10/Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-07-10T07:03:00.000Z</published>
    <updated>2020-07-15T07:10:03.123Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li><p><code>rpm -q xx</code> 查询xx是否安装</p></li><li><p><code>yum install xx</code> 安装xx软件包</p></li><li><p><code>yum remove xx</code> 卸载xx软件包</p></li><li><p><code>vim /路径</code> 读写文件</p><ul><li>i：编辑模式</li><li>Exc：退出到命令模式</li><li>:wq：保存并退出Vim</li></ul></li><li><p><code>startx</code> （一次性地）从命令行切换到桌面环境</p></li><li><p><code>systemctl get-default</code> 获取当前启动模式</p></li><li><p><code>systemctl set-default graphical.target</code> 修改启动模式为图形化</p></li><li><p><code>systemctl set-default multi-user.target</code> 修改启动模式为命令行</p></li><li><p><code>安装桌面环境</code> 安装桌面环境（这里安装 GNOME）</p></li><li><p><code>systemctl start xx</code>  启动xx服务</p></li><li><p><code>systemctl enable xx</code> 开机自启动xx服务</p></li><li><p><code>firewall-cmd --permanent --zone=public --add-port=3389/tcp</code> 防火墙开放3389端口</p></li><li><p><code>firewall-cmd --reload</code> 重启防火墙</p></li><li><p><code>systemctl stop firewalld</code> 关闭防火墙</p></li><li><p><code>systemctl disable firewalld</code></p><p>禁止防火墙开机启动</p></li><li><p><code>cp /路径</code> 复制文件</p></li><li><p><code>systemctl daemon-reload</code></p><p>让服务文件修改生效</p></li><li><p><code>netstat -lnpt|grep xx</code> 查看xx的服务端口</p></li><li><p><code>sudo yum update -y</code> 更新服务器地软件包</p></li><li><p><code>sudo yum install java-1.8.0-openjdk -y</code> 安装 OpenJRE</p></li><li><p><code>java -version</code>  检测jre是否安装成功</p></li><li><p><code>sudo useradd -m halo</code>  创建一个<strong>低权限</strong>地用户halo</p></li><li><p><code>sudo su halo</code> 登录用户halo</p></li><li><p><code>wget url</code> 下载xx安装包</p></li><li><p><code>useradd [-d home] [-s shell] [-c comment] [-m [-k template]] [-f inactive] [-e expire ] [-p passwd] [-r] name</code>  useradd或adduser命令用来建立用户帐号和创建用户的起始目录，使用权限是超级用户</p><p>主要参数</p><ul><li>-c：加上备注文字，备注文字保存在passwd的备注栏中。</li><li>-d：指定用户登入时的主目录，替换系统默认值/home/&lt;用户名&gt;</li><li>-D：变更预设值。</li><li>-e：指定账号的失效日期，日期格式为MM/DD/YY，例如06/30/12。缺省表示永久有效。</li><li>-f：指定在密码过期后多少天即关闭该账号。如果为0账号立即被停用；如果为-1则账号一直可用。默认值为-1.</li><li>-g：指定用户所属的群组。值可以使组名也可以是GID。用户组必须已经存在的，期默认值为100，即users。</li><li>-G：指定用户所属的附加群组。</li><li>-m：自动建立用户的登入目录。</li><li>-M：不要自动建立用户的登入目录。</li><li>-n：取消建立以用户名称为名的群组。</li><li>-r：建立系统账号。</li><li>-s：指定用户登入后所使用的shell。默认值为/bin/bash。</li><li>-u：指定用户ID号。该值在系统中必须是唯一的。0~499默认是保留给系统用户账号使用的，所以该值必须大于499。</li></ul><blockquote><p><a href="https://www.cnblogs.com/irisrain/p/4324593.html" target="_blank" rel="noopener">https://www.cnblogs.com/irisrain/p/4324593.html</a></p></blockquote></li><li><p><code>w # whoami</code> 查看当前登陆用户</p><div class="hljs"><pre><code class="hljs angelscript"> <span class="hljs-number">12</span>:<span class="hljs-number">10</span>:<span class="hljs-number">27</span> up <span class="hljs-number">21</span>:<span class="hljs-number">13</span>,  <span class="hljs-number">1</span> user,  load average: <span class="hljs-number">0.00</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.08</span>USER          TTY      FROM                 <span class="hljs-symbol">LOGIN@</span>   IDLE   JCPU   PCPU WHATroot            pts/<span class="hljs-number">0</span>    ***.**.***.**    <span class="hljs-number">11</span>:<span class="hljs-number">33</span>    <span class="hljs-number">0.00</span>s  <span class="hljs-number">0.08</span>s  <span class="hljs-number">0.00</span>s   wtmp_3254  ps1       ***.**.***.**     <span class="hljs-number">11</span>:<span class="hljs-number">33</span>    <span class="hljs-number">0.00</span>s  <span class="hljs-number">0.08</span>s  <span class="hljs-number">0.00</span>s   ls</code></pre></div></li></ol><ol start="27"><li><p><code>su xxx # 或者直接 exit</code> 退出当前用户登录，进入一个有管理员权限的用户</p></li><li><p><code>pkill -kill -t [TTY]</code> 强制退出已经登陆用户</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-number">0</span>pkill -kill -t ps1</code></pre></div></li><li><p><code>ls -a # ls --all</code> 查看当前目录下的所有文件</p></li><li><p><code>service xx restart</code>  重启xx应用</p></li><li><p><code>curl -o /路径 --create-dirs  url</code>  下载配置文件、模板等文件</p></li><li><p><code>sudo nginx -t</code> 检查Nginx配置是否有误</p></li><li><p><code>sudo nginx -s reload</code> 重载Nginx配置</p></li><li><p><code>sudo service xx status</code>  查看xx的运行状态</p></li><li><p><code>sudo service halo stop</code>  停止xx</p></li><li><p><code>sudo service halo restart</code> 重启xx</p></li><li><p><code>sudo service halo start</code>  启动xx</p></li><li><p><code>sudo systemctl daemon-reload</code> 修改<strong>service</strong>文件之后需要刷新<strong>Systemd</strong></p></li><li><p><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code> 添加软件源信息</p></li><li><p><code>sudo yum makecache fast</code> 更新yum缓存</p></li><li><p>镜像加速</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 新建 daemon.json 文件</span>sudo vim /etc/docker/daemon.json</code></pre></div><p>将下面的配置复制进去即可：</p><div class="hljs"><pre><code class="hljs json">{  <span class="hljs-attr">"registry-mirrors"</span>: [<span class="hljs-string">"http://hub-mirror.c.163.com"</span>]}</code></pre></div><blockquote><p>注意：修改完配置文件之后需要执行 <code>service docker restart</code> 才可生效。</p></blockquote></li><li><p><code>sudo docker pull ruibaby/xx</code> 拉取xx的最新镜像</p></li><li><p><code>docker run --rm -it -d --name halo -p 8090:8090  -v ~/.halo:/root/.halo ruibaby/halo</code> 创建容器并运行halo</p><ul><li>–rm：停止之后自动删除容器。</li><li>–name：容器名。</li><li>-p：占用端口，前者为宿主机端口，后者为 Halo 的运行端口，可在 <code>application.yaml</code> 配置。</li><li>-v：目录映射，一般不要修改。</li></ul></li><li><p><code>netstat -tln # netstat -tln | grep 8080</code> 查找被占用的端口（可接特定端口号）</p></li><li><p><code>netstat -ntlp</code> 查看其他端口</p></li><li><p><code>lsof -i:8060</code> 查看端口属于哪个程序、端口被哪个进程占用</p></li><li><p><code>kill -9 进程id</code> 杀掉占用端口的进程 根据pid杀掉</p></li><li><p><code>shutdown -h now</code>  立即关机</p></li><li><p><code>shutdown -r now # reboot</code>  立即重启</p></li><li><p><code>docker run --name some-wordpress --link some-mysql:mysql -d wordpress</code> 参数说明：</p><ul><li><code>--name</code> 容器的的名字</li><li><code>--link</code> 和其他容器做连接</li><li><code>-d/--detach</code> 后台运行</li></ul></li><li><p><code>docker run -d --privileged=true --name myMysql -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 33306:3306 mysql:5.6</code> 参数解释：</p><ul><li>-p: 端口映射，33306表示宿主，3306表示容器中的端口。 这里表示将宿主机的33306映射给镜像的3306.</li><li>-e: 环境变量， 环境变量和具体的Docker容器制作时设置有关，这里表示设置镜像中MySQL的root 密码时123456</li><li>-v: 指定数据卷，也就是将我们MySQL容器的<code>/var/lib/mysql</code>映射到宿主机的<code>/data/mysql</code></li><li><code>--privileged=true:</code> CentOS系统下的安全Selinux禁止了一些安全权限，导致MySQL容器在运行时会因为权限不足而报错，所以需要增加该选项</li></ul></li><li><p><code>docker ps -a</code>  查看MySQL是否正常运行</p></li><li><p><code>docker stop 容器名</code>  停止运行</p></li><li><p><code>docker rm 容器名</code>  删除容器（之后去掉<code>-d</code>选项重新运行排查错误）</p></li><li><p>快速批量删除docker镜像或容器</p><blockquote><p>Docker本身并没有提供批量删除的功能，当有大量的镜像或者容器需要删除的时候，手动的一个一个删就比较麻烦了。</p></blockquote><div class="hljs"><pre><code class="hljs nsis"><span class="hljs-comment"># 直接删除所有镜像或容器</span>    <span class="hljs-comment"># 直接删除所有镜像</span>    docker rmi <span class="hljs-string">`docker images -q`</span>    <span class="hljs-comment"># 直接删除所有容器</span>    docker rm <span class="hljs-string">`docker ps -aq`</span>    <span class="hljs-comment"># 按条件筛选之后删除</span>    <span class="hljs-comment"># 按条件筛选之后删除镜像</span>    docker rmi <span class="hljs-string">`docker images | grep xxxxx | awk '{print <span class="hljs-variable">$3</span>}'`</span>    <span class="hljs-comment"># 按条件筛选之后删除容器</span>    docker rm <span class="hljs-string">`docker ps -a | grep xxxxx | awk '{print <span class="hljs-variable">$1</span>}'`</span></code></pre></div></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;rpm -q xx&lt;/code&gt; 查询xx是否安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;yum install xx&lt;/code&gt; 安装xx软件包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;y
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/08/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/08/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-08T04:55:00.000Z</published>
    <updated>2020-07-11T01:51:50.361Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="Docker安装部署"><a href="#Docker安装部署" class="headerlink" title="Docker安装部署"></a>Docker安装部署</h1><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><ul><li><p>yum 包更新到最新（花的时间比较多）</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum update</span></code></pre></div></li><li><p>安装需要的软件包，yum-util 提供的yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>  <div class="hljs"><pre><code class="hljs gml">yum install -<span class="hljs-symbol">y</span> yum-utils device-mapper-<span class="hljs-symbol">persistent</span>-data lvm2</code></pre></div></li><li><p>设置yum源</p>  <div class="hljs"><pre><code class="hljs vim">yum-confi-manager --<span class="hljs-built_in">add</span>-repo http<span class="hljs-variable">s:</span>//download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo</code></pre></div></li><li><p>安装docker，出现输入的页面都按 y</p>  <div class="hljs"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y docker-ce</code></pre></div></li><li><p>查看docker版本，验证是否安装成功</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span></code></pre></div></li></ul><h3 id="其他安装方式-推荐"><a href="#其他安装方式-推荐" class="headerlink" title="其他安装方式(推荐)"></a>其他安装方式(推荐)</h3><p>教程链接：<a href="https://www.jianshu.com/p/1e5c86accacb" target="_blank" rel="noopener">Here!</a></p><h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><h2 id="Docker服务相关命令"><a href="#Docker服务相关命令" class="headerlink" title="Docker服务相关命令"></a>Docker服务相关命令</h2><ul><li><p>启动docker服务</p>  <div class="hljs"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> dockersystemctl <span class="hljs-literal">start</span> docker</code></pre></div></li><li><p>停止docker服务</p>  <div class="hljs"><pre><code class="hljs arduino">systemctl <span class="hljs-built_in">stop</span> docker</code></pre></div></li><li><p>重启docker服务</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span></code></pre></div></li><li><p>查看docker服务状态</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status docker</span></code></pre></div></li><li><p>设置开机启动docker服务</p>  <div class="hljs"><pre><code class="hljs routeros">systemstl <span class="hljs-builtin-name">enable</span> docker</code></pre></div></li></ul><h2 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h2><ul><li><p>查看镜像：查看本地所有的镜像</p>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> imagesdocker images -q <span class="hljs-comment"># 查看所有镜像id</span></code></pre></div></li><li><p>搜索镜像：从网络中查找需要的镜像</p>  <div class="hljs"><pre><code class="hljs excel">docker <span class="hljs-built_in">search</span> 镜像名称</code></pre></div></li><li><p>拉取镜像：从docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是<strong>最新版本</strong>。如果不知道镜像版本，可以去<a href="http://hub.docker.com/" target="_blank" rel="noopener">docker hub</a> 搜索对应镜像查看</p>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull 镜像名称</code></pre></div></li><li><p>删除镜像</p>  <div class="hljs"><pre><code class="hljs applescript">docker rmi 镜像<span class="hljs-built_in">id</span>docker rmi `docker images -q` <span class="hljs-comment"># 删除所有本地镜像</span></code></pre></div></li></ul><h2 id="Docker容器相关的命令"><a href="#Docker容器相关的命令" class="headerlink" title="Docker容器相关的命令"></a>Docker容器相关的命令</h2><ul><li><p>查看容器</p>  <div class="hljs"><pre><code class="hljs livecodeserver">docker ps <span class="hljs-comment"># 查看正在运行的容器</span>docker ps -<span class="hljs-keyword">a</span> <span class="hljs-comment"># 查看所有容器</span></code></pre></div></li><li><p>创建并启动容器</p>  <div class="hljs"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="bash"> 参数</span></code></pre></div><ul><li>参数说明：<ul><li>-i：保持容器运行。通常与-t同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</li><li>-t：为容器重新分配一个伪输入终端，通常与-i同时使用。</li><li>-d:以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用<code>docker exec</code>进入容器。退出时，容器不会关闭。</li><li>-it：创建的容器一般称为<strong>交互式容器</strong>。</li><li>-id：创建的容器一般称为<strong>守护式容器</strong>。</li><li>–name：为创建的容器命名。</li></ul></li></ul></li><li><p>进入容器</p>  <div class="hljs"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> 参数 <span class="hljs-comment"># 退出容器，容器不会关闭</span></code></pre></div></li><li><p>启动容器</p>  <div class="hljs"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span> 容器名称</code></pre></div></li><li><p>停止容器</p>  <div class="hljs"><pre><code class="hljs arduino">docker <span class="hljs-built_in">stop</span> 容器名称</code></pre></div></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器才能删除</p>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> rm 容器名称</code></pre></div></li><li><p>查看容器信息</p>  <div class="hljs"><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span> 容器名称</code></pre></div></li></ul><h1 id="Docker容器的数据卷"><a href="#Docker容器的数据卷" class="headerlink" title="Docker容器的数据卷"></a>Docker容器的数据卷</h1><h2 id="数据卷概念和作用"><a href="#数据卷概念和作用" class="headerlink" title="数据卷概念和作用"></a>数据卷概念和作用</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>Docker容器删除后，在容器中产生的数据也会随之销毁吗？<ul><li>会。</li></ul></li><li>Docker容器和外部机器可以直接交换文件吗？<ul><li>不可以。</li></ul></li><li>容器之间想要进行数据交互？<ul><li>不可以。</li></ul></li></ul><blockquote><p><em>那咋办嘛？这就要用到数据卷了</em></p></blockquote><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><ul><li>数据卷是宿主机中的一个<strong>目录或文件</strong></li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被<strong>多个容器同时挂载</strong></li><li>一个容器也可以被挂载<strong>多个数据卷</strong></li></ul><h3 id="数据卷的作用"><a href="#数据卷的作用" class="headerlink" title="数据卷的作用"></a>数据卷的作用</h3><ul><li>容器数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul><h2 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h2><ul><li><p>创建启动容器时，使用<code>-v</code>参数设置数据卷</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> <span class="hljs-built_in">..</span>.-v 宿主机目录(文件):容器内目录(文件)<span class="hljs-built_in">..</span>.</code></pre></div></li><li><p>注意事项：</p><ol><li>目录必须是<strong>绝对路径</strong></li><li>如果目录不存在，会<strong>自动创建</strong></li><li>可以挂载<strong>多个</strong>数据卷</li></ol></li></ul><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><h3 id="配置数据卷容器"><a href="#配置数据卷容器" class="headerlink" title="配置数据卷容器"></a>配置数据卷容器</h3><ul><li><p>创建启动c3数据卷容器，使用<code>-v</code>参数设置数据卷</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name-</span>=c3 -v /volume centos:7 /bin/bash</code></pre></div></li><li><p>创建启动c1 c2数据卷容器，使用<code>-volumes-from</code>参数设置数据卷</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name-</span>=c1 -volumes-from c3 centos:7 /bin/bashdocker <span class="hljs-builtin-name">run</span> -it <span class="hljs-attribute">--name-</span>=c2 -volumes-from c3 centos:7 /bin/bash</code></pre></div></li></ul><p>#Docker应用部署</p><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><ul><li><p>搜索MySQL镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search mysql</span></code></pre></div></li><li><p>拉取MySQL镜像</p>  <div class="hljs"><pre><code class="hljs angelscript">docker pull mysql:<span class="hljs-number">5.6</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 在/root目录下创建mysql目录用于存储mysql数据信息</span>mkdir ~<span class="hljs-string">/mysql</span><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/mysql</span></code></pre></div><hr>  <div class="hljs"><pre><code class="hljs crystal">docker run -id \--name=c_mysql \-p <span class="hljs-number">3307</span>:<span class="hljs-number">3306</span> \-v $PWD/<span class="hljs-symbol">conf:</span>/etc/mysql/confi.d \-v $PWD/<span class="hljs-symbol">logs:</span>/logs \-v $PWD/<span class="hljs-symbol">data:</span>/var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">mysql</span> \</span>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> \<span class="hljs-symbol">mysql:</span><span class="hljs-number">5.6</span></code></pre></div><ul><li>参数说明：<ul><li>-p 3307:3306：将容器的3306端口映射到宿主机的3307端口。</li><li>-v $PWD/conf:/etc/mysql/confi.d：将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf。配置目录</li><li>-v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs。日志目录</li><li>-v $PWD/data:/var/lib/mysql：将主机当前目录下的data目录挂载到容器的/var/lib/mysql。数据目录</li><li>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码。</li></ul></li></ul></li></ul><h2 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h2><ul><li><p>搜索Tomcat镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search tomcat</span></code></pre></div></li><li><p>拉取Tomcat镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull tomcat</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 在/root目录下创建tomcat目录用于存储tomcat数据信息</span>mkdir ~<span class="hljs-string">/tomcat</span><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/tomcat</span></code></pre></div><hr>  <div class="hljs"><pre><code class="hljs haml">docker run -id \-<span class="ruby">-name=c_tomcat \</span><span class="ruby">-p <span class="hljs-number">8080</span><span class="hljs-symbol">:</span><span class="hljs-number">8080</span> \</span><span class="ruby">-v $PWD<span class="hljs-symbol">:/usr/local/tomcat/webapps</span> \</span><span class="ruby">tomcat</span></code></pre></div><ul><li>参数说明：<ul><li>-p 8000:8080：将容器的8080端口映射到宿主机的8000端口。</li><li>-v $PWD:/usr/local/tomcat/webapps：将主机当前目录挂载到容器的/usr/local/tomcat/webapps。</li></ul></li></ul></li></ul><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><ul><li><p>搜索Nginx镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search nginx</span></code></pre></div></li><li><p>拉取Nginx镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull nginx</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs vim"># 在/root目录下创建nginx目录用于存储nginx数据信息<span class="hljs-built_in">mkdir</span> ~/nginx<span class="hljs-keyword">cd</span> ~/nginx<span class="hljs-built_in">mkdir</span> <span class="hljs-keyword">conf</span><span class="hljs-keyword">cd</span> <span class="hljs-keyword">conf</span># 在~/nginx/<span class="hljs-keyword">conf</span>/下创建nginx.<span class="hljs-keyword">conf</span>文件，粘贴下面内容<span class="hljs-keyword">vim</span> nginx.<span class="hljs-keyword">conf</span></code></pre></div><hr>  <div class="hljs"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  nginx;<span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<span class="hljs-attribute">error_log</span>  /var/log/nginx/error.log <span class="hljs-literal">warn</span>;<span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<span class="hljs-section">events</span> {    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;}<span class="hljs-section">http</span> {    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;    <span class="hljs-attribute">default_type</span>  application/octet-stream;    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">'<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] "<span class="hljs-variable">$request</span>" '</span>                      <span class="hljs-string">'<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> "<span class="hljs-variable">$http_referer</span>" '</span>                      <span class="hljs-string">'"<span class="hljs-variable">$http_user_agent</span>" "<span class="hljs-variable">$http_x_forwarded_for</span>"'</span>;    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;    <span class="hljs-comment">#tcp_nopush     on;</span>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;    <span class="hljs-comment">#gzip  on;</span>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;}</code></pre></div><hr>  <div class="hljs"><pre><code class="hljs stata">docker <span class="hljs-keyword">run</span> -id \--name=c_nginx \-p 81:80 \-v <span class="hljs-variable">$PWD</span>/<span class="hljs-keyword">conf</span>/nginx.<span class="hljs-keyword">conf</span>:/etc/nginx/nginx.<span class="hljs-keyword">conf</span> \-v <span class="hljs-variable">$PWD</span>/logs:/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/nginx \-v <span class="hljs-variable">$PWD</span>/html:/usr/share/nginx/html \nginx</code></pre></div><ul><li>参数说明：<ul><li>-p 81:80：将容器的80端口映射到宿主机的81端口。</li><li>v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf：将主机当前目录下的/conf/nginx.conf挂载到容器的/etc/nginx/nginx.conf。配置目录</li><li>-v $PWD/logs:/var/log/nginx：将主机当前目录下的logs目录挂载到容器的/var/log/nginx。日志目录</li><li>-v $PWD/html:/usr/share/nginx/html：将主机当前目录下的/html挂载到容器的/usr/share/nginx/html。</li></ul></li></ul></li></ul><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><ul><li><p>搜索Redis镜像</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search redis</span></code></pre></div></li><li><p>拉取Redis镜像</p>  <div class="hljs"><pre><code class="hljs vim">docker pull <span class="hljs-keyword">redi</span><span class="hljs-variable">s:5</span>.<span class="hljs-number">0</span></code></pre></div></li><li><p>创建容器，设置端口映射、目录映射</p>  <div class="hljs"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -id <span class="hljs-attribute">--name</span>=c_redis -p 6379:6379 redis:5.0</code></pre></div><ul><li>参数说明：<ul><li>-p 6379:6379：将容器的6379端口映射到宿主机的6379端口。</li></ul></li></ul></li><li><p>使用外部机器连接redis</p>  <div class="hljs"><pre><code class="hljs stylus">./redis-cli<span class="hljs-selector-class">.exe</span> -h &lt;your ipAddress&gt; -<span class="hljs-selector-tag">p</span> <span class="hljs-number">6379</span></code></pre></div></li></ul><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h2><h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><ul><li><p>Docker镜像本质是什么？</p><ul><li>是一个分层的文件系统</li></ul></li><li><p>Docker中一个centos镜像为什么只有200MB，而一个centos操作系统的</p>  <div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">iso</span></code></pre></div><p>  文件要几个GB？</p><ul><li>Centos的<code>iso</code>镜像文件包含<code>bootfs</code>和<code>rootfs</code>，而docker的centos镜像<strong>复用</strong>操作系统的<code>bootfs</code>，只包含<code>rootfs</code>和其他镜像层</li></ul></li><li><p>Docker中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</p><ul><li>由于docker中镜像是分层的，tomcat虽然只有70多MB，但它需要依赖于<strong>父镜像</strong>和<strong>子镜像</strong>，所有整个对外暴露的tomcat镜像大小有500多MB</li></ul></li></ul><h3 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h3><ul><li>bootfs：包含<code>bootloader</code>（引导加载系统）和<code>kernel</code>（内核）</li><li>rootfs：root文件系统，包含的就是典型的Linux系统中的<code>/dev</code>，<code>/proc</code>，<code>/bin</code>，<code>/etc</code>等标准目录和文件</li><li>不用的Linux发行版，<code>bootfs</code>基本一样，而<code>rootfs</code>不同，如Ubuntu，centos等</li></ul><p><img src="http://106.75.80.200/2020/03/15/seven/layer1.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><ul><li>Docker镜像是由特殊的文件系统叠加而成</li><li>最底端是<code>bootfs</code>,并使用宿主机的<code>bootfs</code></li><li>第二层是root文件系统<code>rootfs</code>,称为<code>base image</code></li><li>然后再往上可以叠加其他的镜像文件</li><li><strong><em>统一文件系统(Union File System)\</em></strong>技术能够将不同的层整合成一个文件系统,为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来,只存在一个文件系统。</li><li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为<strong><em>父镜像\</em></strong>，最底部的镜像成为<strong><em>基础镜像\</em></strong>。</li><li>当从一个镜像启动容器时，Docker会从最顶层加载一个<strong>读写文件系统</strong>作为容器</li></ul><p><img src="http://106.75.80.200/2020/03/15/seven/layer2.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><ul><li><p>容器转为镜像</p>  <div class="hljs"><pre><code class="hljs sql">docker <span class="hljs-keyword">commit</span> 容器<span class="hljs-keyword">id</span> 镜像名称:版本号  <span class="hljs-comment"># 将容器转换为镜像文件</span>docker <span class="hljs-keyword">save</span> -o 压缩文件名称 镜像名称:版本号  <span class="hljs-comment"># 将镜像文件打包成压缩文件，之后就能对压缩文件传送了</span>docker <span class="hljs-keyword">load</span> -i 压缩文件名称  <span class="hljs-comment"># 将压缩文件解压称为镜像文件</span></code></pre></div></li><li><p>Dockerfile</p><ul><li><em>看下面内容</em></li></ul></li></ul><h2 id="Dockerfile概念及作用"><a href="#Dockerfile概念及作用" class="headerlink" title="Dockerfile概念及作用"></a>Dockerfile概念及作用</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>Dockerfile是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了</li><li>对于运维人员：在部署时，可以实现应用的无缝移植</li></ul><p><img src="http://106.75.80.200/2020/03/15/seven/dockerfile1.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="Dockerfile关键字"><a href="#Dockerfile关键字" class="headerlink" title="Dockerfile关键字"></a>Dockerfile关键字</h2><p><em>列举一些常用的</em></p><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h2 id="制作自定义centos镜像"><a href="#制作自定义centos镜像" class="headerlink" title="制作自定义centos镜像"></a>制作自定义centos镜像</h2><h3 id="自定义需求"><a href="#自定义需求" class="headerlink" title="自定义需求"></a>自定义需求</h3><ul><li>默认登录路径为<code>/usr</code></li><li>可以使用vim</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p>创建编辑dockerfile文件</p>  <div class="hljs"><pre><code class="hljs properties"><span class="hljs-attr">mkdir</span> <span class="hljs-string">/root/dockerfile</span><span class="hljs-attr">cd</span> <span class="hljs-string">dockerfile</span><span class="hljs-attr">vim</span> <span class="hljs-string">centos_dockerfile</span></code></pre></div><ul><li>定义父镜像：<code>FROM centos:7</code></li><li>定义作者信息：<code>MAINTAINER adongyo &lt;adongyo@it.cn&gt;</code></li><li>执行安装vim命令：<code>RUN yum install -y vim</code></li><li>定义默认的工作目录：<code>WORKDIR /usr</code></li><li>定义容器启动执行的命令：<code>CMD /bin/bash</code></li></ul></li><li><p>执行命令</p>  <div class="hljs"><pre><code class="hljs angelscript">docker build -f ./centos_dockerfile -t myCentos:<span class="hljs-number">1</span> .</code></pre></div><ul><li><p>参数说明：</p><ul><li><p>-f： 指定dockerfile文件</p></li><li><p>-t： 设置生成的新的镜像的名称</p></li><li><p>.： 别漏了后面还有一个’.’</p></li></ul></li></ul></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.bilibili.com/video/av89009239" target="_blank" rel="noopener">b站转载黑马程序员</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;Docker安装部署&quot;&gt;&lt;a href=&quot;#Docker安装部署&quot; class=&quot;headerlink&quot; title=&quot;Docker安装部署&quot;&gt;&lt;/a&gt;Docker安装部署&lt;/h1&gt;&lt;h2 id=&quot;CentOS&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="Docker" scheme="https://melodyjerry.github.io/blog/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到云服务器</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/08/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/08/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-07-08T04:49:00.000Z</published>
    <updated>2020-07-15T07:10:03.120Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>阿里云VPS搭建自己的的Hexo博客：<a href="https://segmentfault.com/a/1190000005723321" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005723321</a><br>Hexo个人博客部署到CentOS个人服务器：<a href="https://segmentfault.com/a/1190000010680022" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010680022</a><br>部署Hexo到个人服务器：<a href="https://www.huangtengxq.com/2017/08/19/BuildHexoOnVps/" target="_blank" rel="noopener">https://www.huangtengxq.com/2017/08/19/BuildHexoOnVps/</a><br>HEXO部署到unbuntu服务器详细指南：<a href="http://www.laoyuyu.me/2017/10/10/hexo_deploy_vps/" target="_blank" rel="noopener">http://www.laoyuyu.me/2017/10/10/hexo_deploy_vps/</a><br>服务器部署Hexo博客：<a href="https://dogorgod.github.io/2017/03/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">https://dogorgod.github.io/2017/03/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</a><br>Hexo博客部署到服务器：<a href="https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">https://i.jakeyu.top/2016/12/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</a><br>通过Git将Hexo博客部署到服务器：<a href="https://www.jianshu.com/p/e03e363713f9" target="_blank" rel="noopener">https://www.jianshu.com/p/e03e363713f9</a><br>部署Hexo博客到linux云主机并实现自动发布：<a href="https://ghui.me/post/2016/07/host-hexo-vps/" target="_blank" rel="noopener">https://ghui.me/post/2016/07/host-hexo-vps/</a><br>将Hexo博客部署到云主机：<a href="https://blog.fundebug.com/2017/05/18/deploy-hexo-on-cloud/" target="_blank" rel="noopener">https://blog.fundebug.com/2017/05/18/deploy-hexo-on-cloud/</a><br>配合Travis CI，将Hexo博客自动部署到你的服务器上：<a href="https://blog.keep.moe/2015/11/06/hexo-and-travis-ci/" target="_blank" rel="noopener">https://blog.keep.moe/2015/11/06/hexo-and-travis-ci/</a><br>使用Git Hook自动部署Hexo到个人VPS：<a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="noopener">http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/</a><br>VPS Centos7安装Git服务器，部署Hexo静态博客：<a href="https://www.micronbot.com/blog/8.html" target="_blank" rel="noopener">https://www.micronbot.com/blog/8.html</a><br>在Ubuntu 14.04服务器上部署Hexo博客：<a href="https://cloud.tencent.com/developer/article/1004587" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1004587</a><br>阿里云ubuntu部署hexo,并与本地同步，实现自动部署：<a href="http://blog.csdn.net/nghuyong/article/details/54430093" target="_blank" rel="noopener">http://blog.csdn.net/nghuyong/article/details/54430093</a><br>阿里云搭建Git服务，实现Hexo自动部署：<a href="https://imys.net/20160303/hexo-nginx-auto-deploy.html" target="_blank" rel="noopener">https://imys.net/20160303/hexo-nginx-auto-deploy.html</a><br>hexo博客部署到linux服务器上：<a href="https://lvshen9.github.io/2018/01/08/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/" target="_blank" rel="noopener">https://lvshen9.github.io/2018/01/08/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;阿里云VPS搭建自己的的Hexo博客：&lt;a href=&quot;https://segmentfault.com/a/1190000005723321&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmen
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>服务器安装宝塔面板</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BFLinux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BFLinux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2020-07-07T15:32:00.000Z</published>
    <updated>2020-07-15T07:10:03.401Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h2><p>Centos安装脚本</p><div class="hljs"><pre><code class="hljs vim">yum install -<span class="hljs-keyword">y</span> wget &amp;&amp; wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> install.<span class="hljs-keyword">sh</span></code></pre></div><p>Ubuntu/Deepin安装脚本</p><div class="hljs"><pre><code class="hljs cmake">wget -O <span class="hljs-keyword">install</span>.sh http://download.bt.cn/<span class="hljs-keyword">install</span>/<span class="hljs-keyword">install</span>-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; sudo bash <span class="hljs-keyword">install</span>.sh</code></pre></div><p>Debian安装脚本</p><div class="hljs"><pre><code class="hljs cmake">wget -O <span class="hljs-keyword">install</span>.sh http://download.bt.cn/<span class="hljs-keyword">install</span>/<span class="hljs-keyword">install</span>-ubuntu_6.<span class="hljs-number">0</span>.sh &amp;&amp; bash <span class="hljs-keyword">install</span>.sh</code></pre></div><p>Fedora安装脚本</p><div class="hljs"><pre><code class="hljs vim">wget -O install.<span class="hljs-keyword">sh</span> http://download.bt.<span class="hljs-keyword">cn</span>/install/install_6.<span class="hljs-number">0</span>.<span class="hljs-keyword">sh</span> &amp;&amp; bash install.<span class="hljs-keyword">sh</span></code></pre></div><h2 id="管理宝塔"><a href="#管理宝塔" class="headerlink" title="管理宝塔"></a>管理宝塔</h2><p>宝塔工具箱(包含下列绝大部分功能 直接ssh中执行bt命令 仅限6.x以上版本面板)</p><div class="hljs"><pre><code class="hljs ebnf"><span class="hljs-attribute">bt</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/bt <span class="hljs-built_in">stop</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs armasm">/etc/init.d/<span class="hljs-keyword">bt </span>start</code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs armasm">/etc/init.d/<span class="hljs-keyword">bt </span>restart</code></pre></div><p>卸载</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /</span>etc<span class="hljs-regexp">/init.d/</span>bt &amp;&amp; rm -rf <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel</span></code></pre></div><p>查看当前面板端口</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/port.pl</span></code></pre></div><p>修改面板端口，如要改成8881（centos 6 系统）</p><div class="hljs"><pre><code class="hljs routeros">echo <span class="hljs-string">'8881'</span> &gt; /www/server/panel/data/port.pl &amp;&amp; /etc/init.d/bt restartiptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 8881 -j ACCEPTservice iptables saveservice iptables restart</code></pre></div><p>修改面板端口，如要改成8881（centos 7 系统）</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> '8881' &gt; <span class="hljs-string">/www/server/panel/data/port.pl</span> &amp;&amp; <span class="hljs-string">/etc/init.d/bt</span> restartfirewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=public</span> <span class="hljs-params">--add-port=8881/tcp</span>firewall-cmd <span class="hljs-params">--reload</span></code></pre></div><p>强制修改MySQL管理(root)密码，如要改成123456</p><div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /www/server/panel &amp;&amp; <span class="hljs-keyword">python</span> tools.<span class="hljs-keyword">py</span> root <span class="hljs-number">123456</span></code></pre></div><p>修改面板密码，如要改成123456</p><div class="hljs"><pre><code class="hljs mel">cd /www/server/<span class="hljs-keyword">panel</span> &amp;&amp; <span class="hljs-keyword">python</span> tools.py <span class="hljs-keyword">panel</span> <span class="hljs-number">123456</span></code></pre></div><p>查看宝塔日志</p><div class="hljs"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /tmp/panelBoot.<span class="hljs-keyword">pl</span></code></pre></div><p>查看软件安装日志</p><div class="hljs"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> /tmp/panelExec.<span class="hljs-keyword">log</span></code></pre></div><p>站点配置文件位置</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost</code></pre></div><p>删除域名绑定面板</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/domain.conf</span></code></pre></div><p>清理登陆限制</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/*.login</span></code></pre></div><p>查看面板授权IP</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/limitip.conf</span></code></pre></div><p>关闭访问限制</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/limitip.conf</span></code></pre></div><p>查看许可域名</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/domain.conf</span></code></pre></div><p>关闭面板SSL</p><div class="hljs"><pre><code class="hljs awk">rm -f <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>data<span class="hljs-regexp">/ssl.pl &amp;&amp; /</span>etc<span class="hljs-regexp">/init.d/</span>bt restart</code></pre></div><p>查看面板错误日志</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/tmp/</span>panelBoot</code></pre></div><p>查看数据库错误日志</p><div class="hljs"><pre><code class="hljs awk">cat <span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/data/</span>*.err</code></pre></div><p>站点配置文件目录(nginx)</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost<span class="hljs-regexp">/nginx</span></code></pre></div><p>站点配置文件目录(apache)</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/panel/</span>vhost<span class="hljs-regexp">/apache</span></code></pre></div><p>站点默认目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>wwwroot</code></pre></div><p>数据库备份目录</p><div class="hljs"><pre><code class="hljs sql">/www/<span class="hljs-keyword">backup</span>/<span class="hljs-keyword">database</span></code></pre></div><p>站点备份目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>backup<span class="hljs-regexp">/site</span></code></pre></div><p>站点日志</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>wwwlogs</code></pre></div><h2 id="Nginx服务管理"><a href="#Nginx服务管理" class="headerlink" title="Nginx服务管理"></a>Nginx服务管理</h2><p>nginx安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nginx</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/nginx start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/nginx <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/nginx restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/nginx</span> <span class="hljs-keyword">reload</span></code></pre></div><p>nginx配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/nginx.conf</span></code></pre></div><h2 id="Apache服务管理"><a href="#Apache服务管理" class="headerlink" title="Apache服务管理"></a>Apache服务管理</h2><p>apache安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/httpd</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/httpd start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/httpd <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/httpd restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/httpd</span> <span class="hljs-keyword">reload</span></code></pre></div><p>apache配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/apache/</span>conf<span class="hljs-regexp">/httpd.conf</span></code></pre></div><h2 id="MySQL服务管理"><a href="#MySQL服务管理" class="headerlink" title="MySQL服务管理"></a>MySQL服务管理</h2><p>mysql安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/mysql</span></code></pre></div><p>phpmyadmin安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/phpmyadmin</span></code></pre></div><p>数据存储目录</p><div class="hljs"><pre><code class="hljs haskell">/www/server/<span class="hljs-class"><span class="hljs-keyword">data</span></span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/mysqld start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/mysqld <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/mysqld restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/mysqld</span> <span class="hljs-keyword">reload</span></code></pre></div><p>mysql配置文件</p><div class="hljs"><pre><code class="hljs applescript">/etc/<span class="hljs-keyword">my</span>.cnf</code></pre></div><h2 id="FTP服务管理"><a href="#FTP服务管理" class="headerlink" title="FTP服务管理"></a>FTP服务管理</h2><p>ftp安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/pure-ftpd</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/pure-ftpd start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs fortran">/etc/init.d/<span class="hljs-keyword">pure</span>-ftpd <span class="hljs-keyword">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/pure-ftpd restart</span></code></pre></div><p>ftp配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/pure-ftpd/</span>etc<span class="hljs-regexp">/pure-ftpd.conf</span></code></pre></div><h2 id="PHP服务管理"><a href="#PHP服务管理" class="headerlink" title="PHP服务管理"></a>PHP服务管理</h2><p>php安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/php</span></code></pre></div><p>启动(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 start)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} start</code></pre></div><p>停止(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 stop)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} stop</code></pre></div><p>重启(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 restart)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} restart</code></pre></div><p>启载(请根据安装PHP版本号做更改，例如：/etc/init.d/php-fpm-54 reload)</p><div class="hljs"><pre><code class="hljs angelscript">/etc/init.d/php-fpm-{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>} reload</code></pre></div><p>配置文件(请根据安装PHP版本号做更改，例如：/www/server/php/52/etc/php.ini)</p><div class="hljs"><pre><code class="hljs angelscript">/www/server/php/{<span class="hljs-number">52</span>|<span class="hljs-number">53</span>|<span class="hljs-number">54</span>|<span class="hljs-number">55</span>|<span class="hljs-number">56</span>|<span class="hljs-number">70</span>|<span class="hljs-number">71</span>|<span class="hljs-number">72</span>|<span class="hljs-number">73</span>|<span class="hljs-number">74</span>}/etc/php.ini</code></pre></div><h2 id="Redis服务管理"><a href="#Redis服务管理" class="headerlink" title="Redis服务管理"></a>Redis服务管理</h2><p>redis安装目录</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/redis</span></code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/redis start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/redis <span class="hljs-built_in">stop</span></code></pre></div><p>redis配置文件</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/redis/</span>redis.conf</code></pre></div><h2 id="Memcached服务管理"><a href="#Memcached服务管理" class="headerlink" title="Memcached服务管理"></a>Memcached服务管理</h2><p>memcached安装目录</p><div class="hljs"><pre><code class="hljs applescript">/usr/<span class="hljs-keyword">local</span>/memcached</code></pre></div><p>启动</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/memcached start</span></code></pre></div><p>停止</p><div class="hljs"><pre><code class="hljs arduino">/etc/init.d/memcached <span class="hljs-built_in">stop</span></code></pre></div><p>重启</p><div class="hljs"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/memcached restart</span></code></pre></div><p>启载</p><div class="hljs"><pre><code class="hljs jboss-cli"><span class="hljs-string">/etc/init.d/memcached</span> <span class="hljs-keyword">reload</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;安装宝塔&quot;&gt;&lt;a href=&quot;#安装宝塔&quot; class=&quot;headerlink&quot; title=&quot;安装宝塔&quot;&gt;&lt;/a&gt;安装宝塔&lt;/h2&gt;&lt;p&gt;Centos安装脚本&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="宝塔" scheme="https://melodyjerry.github.io/blog/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>服务器安装宝塔面板</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/</id>
    <published>2020-07-07T13:24:00.000Z</published>
    <updated>2020-07-15T07:10:03.408Z</updated>
    
    <content type="html"><![CDATA[<p>这里两篇文章关于“CentOS安装宝塔面板”</p><ol><li><a href="https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658" target="_blank" rel="noopener">https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658</a></li><li><a href="http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6" target="_blank" rel="noopener">http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6</a></li></ol><a id="more"></a><h1 id="①"><a href="#①" class="headerlink" title="①"></a>①</h1><p>购买完云服务器ECS后，对于新手而言如何搭建Web环境是比较棘手的，分享一款简单易用的主机面板：宝塔面板，分享阿里云服务器安装宝塔面板图文教程：</p><p>本文以：Linux云服务器，CentOS 7.4 64位系统为例。</p><h2 id="一：开放安全组端口"><a href="#一：开放安全组端口" class="headerlink" title="一：开放安全组端口"></a>一：开放安全组端口</h2><p>什么是安全组？是阿里云ECS云服务器特有的虚拟防火墙，是一种安全机制，默认情况下宝塔面板依赖的端口并没有开放，所以我们第一步是自定义安全组开放端口，如下图所示：<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_53df984b8026689.png" srcset="/blog/img/loading.gif" alt="img"></p><p>我们以开放8888号端口为例：<br>1、登录到云服务器ECS控制台；<br>2、点击“更多”–“网络和安全组”–“安全组配置”，点击“配置规则”<br>3、如下图所示，端口范围填：8888/8888，授权对象填：0.0.0.0/0<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_a2508699857cd44.png" srcset="/blog/img/loading.gif" alt="img"></p><p>端口范围按照格式，填写我们需要开放的端口；授权对象填0.0.0.0/0的意思是对所有人开放这个端口，授权范围大家可以按照自己的需求自定义。<br>宝塔面板需要开放的端口有：8888、888、80、443、20、21，这6个端口都需要开放，大家按照上面的方法开放即可。</p><p>安全组不会操作，可以参考阿里云官方文档： <a href="https://help.aliyun.com/document_detail/58746.html?source=5176.11533457&amp;userCode=r3yteowb&amp;type=copy" target="_blank" rel="noopener">阿里云安全组的典型应用示例</a></p><h2 id="二：安装宝塔面板"><a href="#二：安装宝塔面板" class="headerlink" title="二：安装宝塔面板"></a>二：安装宝塔面板</h2><p>SSH的方式登录到你的云服务器ECS上，命令：ssh root@你的服务器IP<br>执行命令：<br><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</code>然后输入字母“y”，等待程序自行安装，大约2分钟</p><h2 id="三：保存宝塔面板后台登录名和密码"><a href="#三：保存宝塔面板后台登录名和密码" class="headerlink" title="三：保存宝塔面板后台登录名和密码"></a>三：保存宝塔面板后台登录名和密码</h2><p>执行上述命令后，程序自动安装，安装完毕后，会出现宝塔后台登录的账户名和密码，大家保存下来<br><code>Complete!==================================================================Congratulations! Install succeeded!==================================================================Bt-Panel: http://47.104.71.103:8888username: adminpassword: 66d52887Warning:If you cannot access the panel,release the following port (8888|888|80|443|20|21) in the security group==================================================================</code><br>宝塔面板后台登录地址为：http://你的服务器IP/8888<br>默认登录名为：admin<br>密码：安装完成后，会随机生成一段密码，请保存好</p><h2 id="四：登录到宝塔面板后台，安装web环境"><a href="#四：登录到宝塔面板后台，安装web环境" class="headerlink" title="四：登录到宝塔面板后台，安装web环境"></a>四：登录到宝塔面板后台，安装web环境</h2><p>使用刚才保存的账户名和密码，登录到宝塔面吧后台，一键安装Web环境，登录宝塔面板后台，地址：http://你的服务器IP/8888，输入刚才保存好的账户和密码</p><p>登录后会自动弹出安装Web环境页面，如下图所示：<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_9e27130fd205b61.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>可选LNMP和LAMP两种Web环境，大家按需选择（推荐选择第一个LNMP），然后点击“一键安装”，等待即可。大约需要8分钟。</p><h2 id="五：创建站点"><a href="#五：创建站点" class="headerlink" title="五：创建站点"></a>五：创建站点</h2><p>Web环境一键安装完毕后，点击左侧“网站”—“添加站点”，如下图所示：<br><img src="http://bbs.aliyun.com/attachment/Fid_207/207_1314033676496389_2cb13619b62eeec.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>输入域名后，默认不会自动创建FTP和MySQL数据库，我们可以选择自动创建，方便省事，点击“提交”，创建成功后，会显示你的FTP和MySQL数据信息，例如：</p><blockquote><p>FTP账号资料<br>用户：aliyunbaike_com<br>密码：625GcrKSc3<br>只要将网站上传至以上FTP即可访问!<br>数据库账号资料<br>数据库名：aliyunbaike_com<br>用户：aliyunbaike_com<br>密码：e8QZfQDPDT</p></blockquote><p>大家将新建站点的FTP账户密码、数据库账户密码都保存好。</p><h2 id="六：域名解析"><a href="#六：域名解析" class="headerlink" title="六：域名解析"></a>六：域名解析</h2><p>将域名解析到你的服务器IP，解析出成功后，会显示“恭喜，站点创建成功！”</p><h2 id="七：网站安装"><a href="#七：网站安装" class="headerlink" title="七：网站安装"></a>七：网站安装</h2><p>将你的网站程序上传到域名所对应的根目录，如果是新站，输入第五步的数据库账户和密码。</p><h1 id="②"><a href="#②" class="headerlink" title="②"></a>②</h1><p>下面稍微介绍一下如何使用阿里云服务器安装<a href="https://www.bt.cn/?invite_code=MV9la3hmaXo=" target="_blank" rel="noopener">宝塔面板</a>。</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>阿里云的<a href="https://www.aliyun.com/minisite/goods?userCode=ywqc0ubl&amp;share_source=copy_link" target="_blank" rel="noopener">云服务器</a>，即 阿里云ECS，默认的用户名 root，密码的话可以修改。</p><p>远程连接云服务器使用 ssh 软件工具，使用的是公网ip。</p><p>注意事项：出于性能考虑，服务器的操作系统一定要选Linux版本（centos或者ubuntu），不要选Window。</p><blockquote><p><strong>主要步骤</strong>：拥有一台云服务器》ssh工具连接云服务器》安装宝塔面板》配置云服务器安全组(放行端口)》宝塔面板在线访问成功</p></blockquote><h2 id="二、安装面板"><a href="#二、安装面板" class="headerlink" title="二、安装面板"></a>二、安装面板</h2><h3 id="1、使用ssh工具连接云服务器"><a href="#1、使用ssh工具连接云服务器" class="headerlink" title="1、使用ssh工具连接云服务器"></a>1、使用ssh工具连接云服务器</h3><p>windows下可以使用XShell，macOs的可以使用终端。</p><blockquote><p>因为SSH工具有很多种，找到自己用的舒服的工具就可以，不用纠结使用哪一种。</p></blockquote><p>我自己是用的<a href="https://www.jianshu.com/p/14c3b78ca570" target="_blank" rel="noopener">FinalShell</a>这一款SSH工具来进行Linux远程连接的,如何认为不安全的话，也可以继续用Xshell，只是需要激活码,如下图</p><p><img src="https://i.loli.net/2020/05/02/rAwQ6NvadVFEemS.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="2、输入宝塔面板安装命令"><a href="#2、输入宝塔面板安装命令" class="headerlink" title="2、输入宝塔面板安装命令"></a>2、输入宝塔面板安装命令</h3><blockquote><p><strong>温馨提示</strong>：宝塔面板最近升级到了7.0版本，Centos7以上的系统建议安装宝塔面板最新版：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html（宝塔面板7.x版本，点击查看安装命令）" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html（宝塔面板7.x版本，点击查看安装命令）</a><br><a href="https://www.bt.cn/bbs/thread-30562-1-1.html（宝塔面板6.x版本，点击查看安装命令）" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-30562-1-1.html（宝塔面板6.x版本，点击查看安装命令）</a></p></blockquote><p>安装方法这里也有介绍（以宝塔面板5.x版本举例）：<a href="http://www.bt.cn/bbs/thread-1186-1-1.html" target="_blank" rel="noopener">http://www.bt.cn/bbs/thread-1186-1-1.html</a></p><blockquote><p>以下安装命令是宝塔面板5.x版本的，请注意。如果安装出错了，就去安装宝塔面板7.x版本</p></blockquote><p><strong>Centos安装脚本：</strong></p><blockquote><p>yum install -y wget &amp;&amp; wget -O install.sh <a href="http://download.bt.cn/install/install.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install.sh</a> &amp;&amp; sh install.sh</p></blockquote><p><strong>Ubuntu/Deepin安装脚本：</strong></p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install-ubuntu.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install-ubuntu.sh</a> &amp;&amp; sudo bash install.sh</p></blockquote><p>Debian安装脚本：</p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install-ubuntu.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install-ubuntu.sh</a> &amp;&amp; bash install.sh</p></blockquote><p>Fedora安装脚本:</p><blockquote><p>wget -O install.sh <a href="http://download.bt.cn/install/install.sh" target="_blank" rel="noopener">http://download.bt.cn/install/install.sh</a> &amp;&amp; bash install.sh</p></blockquote><p>前两者偏多。根据操作系统输入不同的安装命令，然后回车</p><p>此间不需要任何操作。</p><h3 id="3、宝塔面板安装成功"><a href="#3、宝塔面板安装成功" class="headerlink" title="3、宝塔面板安装成功"></a>3、宝塔面板安装成功</h3><p>稍等一分钟（有时候网速差可能久一点)，然后不要关闭窗口</p><p>最终可以看到如下界面</p><p><img src="https://i.loli.net/2020/05/02/VJea2FuRGSXx5iY.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>这里会显示宝塔后台地址和账号密码，可以手动复制到记事本暂时存起来。</p><h2 id="三、配置安全组"><a href="#三、配置安全组" class="headerlink" title="三、配置安全组"></a>三、配置安全组</h2><blockquote><p>如果你已经会设置安全组的话，就可以省略这一步，直接浏览器访问宝塔面板<br>访问地址：<strong>http://云服务器公网IP地址:8888/</strong></p></blockquote><p>上面的黄色的字也说了，如果不能访问面板，请在安全组中放行端口。</p><p>因为刚装的系统，自然也没有放行8888端口，面板后台无法打开</p><p><img src="https://i.loli.net/2020/05/02/6gsm9Ft1vXEyTHK.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>下面我们添加安全组</p><h3 id="1、进入云服务器管理后台"><a href="#1、进入云服务器管理后台" class="headerlink" title="1、进入云服务器管理后台"></a>1、进入云服务器管理后台</h3><p>进入<a href="https://www.aliyun.com/activity/daily/cloud?source=5176.11533457&amp;userCode=ywqc0ubl&amp;type=copy" target="_blank" rel="noopener">服务器</a>(实例)主页，点击右边的查看更多，点击安全组配置。</p><p><img src="https://i.loli.net/2020/05/02/yRi8TN31z6sGmQg.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="2、然后可以看到一条安全组"><a href="#2、然后可以看到一条安全组" class="headerlink" title="2、然后可以看到一条安全组"></a>2、然后可以看到一条安全组</h3><p>点击配置规则（如果没有就新建一条安全组）</p><h3 id="3、点击快速创建规则"><a href="#3、点击快速创建规则" class="headerlink" title="3、点击快速创建规则"></a>3、点击快速创建规则</h3><p><img src="https://i.loli.net/2020/05/02/k81wxvdC4fcRTAB.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="4、可以看到如下页面"><a href="#4、可以看到如下页面" class="headerlink" title="4、可以看到如下页面"></a>4、可以看到如下页面</h3><p><img src="https://i.loli.net/2020/05/02/v1EzkoN7jmZlG5K.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>常用端口可以勾选，相当于多选。也可以自定义端口，比如我们要将8888和888添加进去。</p><p>授权对象像之前已经填的 0.0.0.0/0 一样。</p><p>基本就是这样。</p><h3 id="5、最终安全记录如下"><a href="#5、最终安全记录如下" class="headerlink" title="5、最终安全记录如下"></a>5、最终安全记录如下</h3><p><img src="https://i.loli.net/2020/05/02/MBPJ9XnlIvd2OjQ.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="6、浏览器访问宝塔面板成功"><a href="#6、浏览器访问宝塔面板成功" class="headerlink" title="6、浏览器访问宝塔面板成功"></a>6、浏览器访问宝塔面板成功</h3><p>然后我们再刷新之前的网页就能正常啦</p><blockquote><p>在云服务器上安装宝塔面板成功之后，访问地址：<strong>http://云服务器公网IP地址:8888/</strong><br>输入安装的时候产生的默认<strong>临时账号和密码登录</strong>。登录之后，请一定记得去改账号和密码哦！</p></blockquote><p><img src="https://i.loli.net/2020/05/02/xq5ncj4BTetbL3s.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="7、修改临时账号和密码"><a href="#7、修改临时账号和密码" class="headerlink" title="7、修改临时账号和密码"></a>7、修改临时账号和密码</h3><blockquote><p>为了安全考虑，在云服务器上安装完成宝塔面板之后，你应该马上修改你的宝塔面板登录账户和密码（注意：这个账户和密码不是宝塔面板官网的，而是每个云服务器访问宝塔面板需要用到的账户和密码）</p></blockquote><p><img src="https://i.loli.net/2020/05/02/pjZnqBRT74yJcHu.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>修改账号和密码之后，后面访问登录就是你新设置的账号和密码了</p><p><img src="https://i.loli.net/2020/05/02/5eLR3YS6AMaG4fD.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="8、绑定宝塔面板账号"><a href="#8、绑定宝塔面板账号" class="headerlink" title="8、绑定宝塔面板账号"></a>8、绑定宝塔面板账号</h3><blockquote><p>首先解释下为什么要绑定宝塔面板账号：每一台云服务器上安装了宝塔面板之后都需要去绑定你在宝塔面板官网上注册的 宝塔账号 这样每台云服务器的宝塔面板都可以享受你这个账号付过费的服务了。</p></blockquote><p>安装宝塔面板之后必做的事情：<a href="http://tencent.yundashi168.com/319.html" target="_blank" rel="noopener">如何注册和绑定宝塔面板账号？</a></p><p><a href="https://i.loli.net/2020/05/02/uqXTf6wH5a14mvl.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2020/05/02/uqXTf6wH5a14mvl.png" srcset="/blog/img/loading.gif" alt="img"></a></p><h3 id="9、安装LNMP网站环境"><a href="#9、安装LNMP网站环境" class="headerlink" title="9、安装LNMP网站环境"></a>9、安装LNMP网站环境</h3><p>LNMP网站环境是Linux+Nginx+Mysql+PHP的组合搭配网站程序环境，用来快速搭建各种开源的网站程序（WordPress,帝国CMS，织梦，Zblog等）</p><p><strong>为什么选择LNMP?</strong> 主要归功于Nignx服务器的功能强大和性能出色，还能节省服务器内存开销。</p><p><img src="https://i.loli.net/2020/06/28/PmZn3esuv5NMG98.png" srcset="/blog/img/loading.gif" alt="img"></p><p>然后会出现这个界面，需要等待十分钟左右，这会你可以去忙其它事情，过会来看。</p><p><img src="https://i.loli.net/2020/06/28/AGP2w9CZ3phuFTl.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="10、安装开源建站程序"><a href="#10、安装开源建站程序" class="headerlink" title="10、安装开源建站程序"></a>10、安装开源建站程序</h3><p>完成了以上步骤之后，你就可以随心所以的基于宝塔面板来安装各种建站程序了</p><ul><li><a href="http://tencent.yundashi168.com/421.html" target="_blank" rel="noopener">基于宝塔面板安装WordPress个人网站（图文教程）</a></li><li><a href="http://tencent.yundashi168.com/407.html" target="_blank" rel="noopener">基于宝塔面板搭建Typecho博客网站（图文教程）</a></li><li><a href="http://tencent.yundashi168.com/520.html" target="_blank" rel="noopener">基于宝塔面板安装Hexo个人博客（图文教程）</a></li></ul><hr><ul><li><a href="http://tencent.yundashi168.com/503.html" target="_blank" rel="noopener">基于宝塔面板对WordPress网站进行备份与恢复（网站迁移教程）</a></li><li><a href="http://tencent.yundashi168.com/258.html" target="_blank" rel="noopener">宝塔面板干什么用的? 有什么优点？搭建网站为什么要用它？</a></li><li><a href="http://tencent.yundashi168.com/325.html" target="_blank" rel="noopener">使用宝塔面板搭建网站之后的经验总结</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里两篇文章关于“CentOS安装宝塔面板”&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.aliyun.com/ask/233242?spm=a2c6h.13524658&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://tencent.yundashi168.com/327.html?spm=a2c6h.13066369.0.0.328d79c6znCKp6&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="宝塔" scheme="https://melodyjerry.github.io/blog/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
</feed>
