<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-02-26T13:33:03.623Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fiddler抓包工具</title>
    <link href="https://melodyjerry.github.io/blog/2020/03/02/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/"/>
    <id>https://melodyjerry.github.io/blog/2020/03/02/Fiddler抓包工具总结/</id>
    <published>2020-03-02T12:35:18.468Z</published>
    <updated>2020-02-26T13:33:03.623Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://www.cnblogs.com/yyhh/p/5140852.html" target="_blank" rel="noopener">Fiddler抓包工具总结</a></p><p><a href="https://www.cnblogs.com/yyhh/p/5140852.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyhh/p/5140852.html</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;https://www.cnblogs.com/yyhh/p/5140852.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fiddler抓包工具总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yyhh/p/5140852.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/yyhh/p/5140852.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MVC：开发模式</title>
    <link href="https://melodyjerry.github.io/blog/2020/03/02/MVC%EF%BC%9A%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/03/02/MVC：开发模式/</id>
    <published>2020-03-02T12:35:18.456Z</published>
    <updated>2020-02-27T09:37:09.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC：开发模式"><a href="#MVC：开发模式" class="headerlink" title="MVC：开发模式"></a>MVC：开发模式</h1><h2 id="一、jsp演变历史"><a href="#一、jsp演变历史" class="headerlink" title="一、jsp演变历史"></a>一、jsp演变历史</h2><ol><li>早期只有servlet，只能使用response输出标签数据，非常麻烦</li><li>后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作</li><li>再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</li></ol><h2 id="二、MVC"><a href="#二、MVC" class="headerlink" title="二、MVC"></a>二、MVC</h2><p><fancybox><img src="https://s2.ax1x.com/2020/02/27/3wYqbT.png" alt="3wYqbT.png"></fancybox></p><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><ul><li><strong>Model，模型。JavaBean</strong></li></ul><ul><li>完成具体的业务操作，如：查询数据库，封装对象</li></ul><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><ul><li><strong>View，视图。JSP</strong></li><li>展示数据</li></ul><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul><li><strong>Controller，控制器。Servlet</strong></li></ul><ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图进行展示</li></ul><h2 id="三、优缺点"><a href="#三、优缺点" class="headerlink" title="三、优缺点"></a>三、优缺点</h2><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><strong>耦合性低，方便维护，可以利于分工协作</strong></li><li><strong>重用性高</strong></li><li>生命周期成本低</li><li>部署快</li><li><strong>可维护性高</strong></li><li><strong>有软件工程化管理</strong></li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li><strong>使得项目架构变得复杂，对开发人员要求高</strong></li><li><strong>不适合小型，中等规模的应用程序</strong></li><li>增加系统结构和实现的复杂性</li><li>视图与控制器间的过于紧密的连接</li><li>视图对模型数据的低效率访问</li><li>一般高级的界面工具或构造器不支持模式</li></ol><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol><li><p>[CSDN] <a href="https://blog.csdn.net/liitdar/article/details/86685880" target="_blank" rel="noopener">MVC模式简介</a></p></li><li><p>[菜鸟教程] <a href="https://www.runoob.com/design-pattern/mvc-pattern.html" target="_blank" rel="noopener">MVC 模式</a></p></li><li><p>[百度百科] <a href="https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=mvc&amp;fromid=85990&amp;fr=aladdin" target="_blank" rel="noopener">MVC框架</a></p></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MVC：开发模式&quot;&gt;&lt;a href=&quot;#MVC：开发模式&quot; class=&quot;headerlink&quot; title=&quot;MVC：开发模式&quot;&gt;&lt;/a&gt;MVC：开发模式&lt;/h1&gt;&lt;h2 id=&quot;一、jsp演变历史&quot;&gt;&lt;a href=&quot;#一、jsp演变历史&quot; class=&quot;headerlink&quot; title=&quot;一、jsp演变历史&quot;&gt;&lt;/a&gt;一、jsp演变历史&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;早期只有servlet，只能使用response输出标签数据，非常麻烦&lt;/li&gt;
&lt;li&gt;后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作&lt;/li&gt;
&lt;li&gt;再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;二、MVC&quot;&gt;&lt;a href=&quot;#二、MVC&quot; class=&quot;headerlink&quot; title=&quot;二、MVC&quot;&gt;&lt;/a&gt;二、MVC&lt;/h2&gt;&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/27/3wYqbT.png&quot; alt=&quot;3wYqbT.png&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;h3 id=&quot;M&quot;&gt;&lt;a href=&quot;#M&quot; class=&quot;headerlink&quot; title=&quot;M&quot;&gt;&lt;/a&gt;M&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model，模型。JavaBean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;完成具体的业务操作，如：查询数据库，封装对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;V&quot;&gt;&lt;a href=&quot;#V&quot; class=&quot;headerlink&quot; title=&quot;V&quot;&gt;&lt;/a&gt;V&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;View，视图。JSP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;展示数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controller，控制器。Servlet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;获取用户的输入&lt;/li&gt;
&lt;li&gt;调用模型&lt;/li&gt;
&lt;li&gt;将数据交给视图进行展示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;三、优缺点&quot;&gt;&lt;a href=&quot;#三、优缺点&quot; class=&quot;headerlink&quot; title=&quot;三、优缺点&quot;&gt;&lt;/a&gt;三、优缺点&lt;/h2&gt;&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;耦合性低，方便维护，可以利于分工协作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重用性高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;生命周期成本低&lt;/li&gt;
&lt;li&gt;部署快&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可维护性高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有软件工程化管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使得项目架构变得复杂，对开发人员要求高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不适合小型，中等规模的应用程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;增加系统结构和实现的复杂性&lt;/li&gt;
&lt;li&gt;视图与控制器间的过于紧密的连接&lt;/li&gt;
&lt;li&gt;视图对模型数据的低效率访问&lt;/li&gt;
&lt;li&gt;一般高级的界面工具或构造器不支持模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;扩展阅读&quot;&gt;&lt;a href=&quot;#扩展阅读&quot; class=&quot;headerlink&quot; title=&quot;扩展阅读&quot;&gt;&lt;/a&gt;扩展阅读&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;[CSDN] &lt;a href=&quot;https://blog.csdn.net/liitdar/article/details/86685880&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MVC模式简介&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[菜鸟教程] &lt;a href=&quot;https://www.runoob.com/design-pattern/mvc-pattern.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MVC 模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[百度百科] &lt;a href=&quot;https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=mvc&amp;amp;fromid=85990&amp;amp;fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MVC框架&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MVC" scheme="https://melodyjerry.github.io/blog/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>和一个人聊天很舒服是什么感觉？</title>
    <link href="https://melodyjerry.github.io/blog/2020/03/02/%E5%92%8C%E4%B8%80%E4%B8%AA%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%BE%88%E8%88%92%E6%9C%8D%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%9F%E8%A7%89%EF%BC%9F/"/>
    <id>https://melodyjerry.github.io/blog/2020/03/02/和一个人聊天很舒服是什么感觉？/</id>
    <published>2020-03-02T11:58:00.000Z</published>
    <updated>2020-03-02T12:28:34.469Z</updated>
    
    <content type="html"><![CDATA[<center><font color="#03CA65">说</font><font color="#06C864">来</font><font color="#09C663">这</font><font color="#0CC462">文</font><font color="#0FC261">案</font><font color="#12C060">是</font><font color="#15BE5F">有</font><font color="#18BC5E">问</font><font color="#1BBA5D">题</font><font color="#1EB85C">的</font><font color="#21B65B">。</font></center><center><font color="#27B259">和</font><font color="#2AB058">一</font><font color="#2DAE57">个</font><font color="#30AC56">人</font><font color="#33AA55">聊</font><font color="#36A854">天</font><font color="#39A653">很</font><font color="#3CA452">舒</font><font color="#3FA251">服</font><font color="#42A050">是</font><font color="#459E4F">什</font><font color="#489C4E">么</font><font color="#4B9A4D">感</font><font color="#4E984C">觉</font><font color="#51964B">？</font></center><center><font color="#579249">当</font><font color="#5A9048">然</font><font color="#5D8E47">是</font><font color="#608C46">很</font><font color="#638A45">舒</font><font color="#668844">服</font><font color="#698643">啊</font><font color="#6C8442">。</font></center><center><font color="#728040">我</font><font color="#757E3F">也</font><font color="#787C3E">是</font><font color="#7B7A3D">不</font><font color="#7E783C">知</font><font color="#81763B">道</font><font color="#84743A">当</font><font color="#877239">时</font><font color="#8A7038">为</font><font color="#8D6E37">什</font><font color="#906C36">么</font><font color="#936A35">会</font><font color="#966834">这</font><font color="#996633">么</font><font color="#9C6432">写</font><font color="#9F6231">。</font></center><center><font color="#A55E2F">不</font><font color="#A85C2E">过</font><font color="#AB5A2D">，</font><font color="#AE582C">确</font><font color="#B1562B">实</font><font color="#B4542A">很</font><font color="#B75229">开</font><font color="#BA5028">心</font></center><center><font color="#C04C26">—</font><font color="#C34A25">—</font><font color="#C64824">2</font><font color="#C94623">0</font><font color="#CC4422">2</font><font color="#CF4221">0</font><font color="#D24020">.</font><font color="#D53E1F">3</font><font color="#D83C1E">.</font><font color="#DB3A1D">2</font></center><p><fancybox><img src="https://s2.ax1x.com/2020/03/02/3WhYrT.png" alt="🐇大佬"></fancybox></p><a id="more"></a><center><font color="#F4F4F4">运</font><font color="#FFE7E7">气</font><font color="#FFDBDB"></font><font color="#FFCFCF"></font><font color="#FFC3C3"></font><font color="#FFB7B7"></font><font color="#FFABAB"></font><font color="#FF9F9F"></font><font color="#FF9292"></font><font color="#FF8686"></font><font color="#FF7A7A"></font><font color="#FF6E6E"></font><font color="#FF6262"></font><font color="#FF5656">彩</font><font color="#FF4A4A"></font><font color="#FF3D3D"></font><font color="#FF3131">蛋</font><font color="#FF2525"></font><font color="#FF1919"></font><font color="#FF0D0D"></font><font color="#FF0101"></font></center><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;font color=&quot;#03CA65&quot;&gt;说&lt;/font&gt;&lt;font color=&quot;#06C864&quot;&gt;来&lt;/font&gt;&lt;font color=&quot;#09C663&quot;&gt;这&lt;/font&gt;&lt;font color=&quot;#0CC462&quot;&gt;文&lt;/font&gt;&lt;font color=&quot;#0FC261&quot;&gt;案&lt;/font&gt;&lt;font color=&quot;#12C060&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#15BE5F&quot;&gt;有&lt;/font&gt;&lt;font color=&quot;#18BC5E&quot;&gt;问&lt;/font&gt;&lt;font color=&quot;#1BBA5D&quot;&gt;题&lt;/font&gt;&lt;font color=&quot;#1EB85C&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#21B65B&quot;&gt;。&lt;/font&gt;&lt;/center&gt;&lt;center&gt;&lt;font color=&quot;#27B259&quot;&gt;和&lt;/font&gt;&lt;font color=&quot;#2AB058&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#2DAE57&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#30AC56&quot;&gt;人&lt;/font&gt;&lt;font color=&quot;#33AA55&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#36A854&quot;&gt;天&lt;/font&gt;&lt;font color=&quot;#39A653&quot;&gt;很&lt;/font&gt;&lt;font color=&quot;#3CA452&quot;&gt;舒&lt;/font&gt;&lt;font color=&quot;#3FA251&quot;&gt;服&lt;/font&gt;&lt;font color=&quot;#42A050&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#459E4F&quot;&gt;什&lt;/font&gt;&lt;font color=&quot;#489C4E&quot;&gt;么&lt;/font&gt;&lt;font color=&quot;#4B9A4D&quot;&gt;感&lt;/font&gt;&lt;font color=&quot;#4E984C&quot;&gt;觉&lt;/font&gt;&lt;font color=&quot;#51964B&quot;&gt;？&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=&quot;#579249&quot;&gt;当&lt;/font&gt;&lt;font color=&quot;#5A9048&quot;&gt;然&lt;/font&gt;&lt;font color=&quot;#5D8E47&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#608C46&quot;&gt;很&lt;/font&gt;&lt;font color=&quot;#638A45&quot;&gt;舒&lt;/font&gt;&lt;font color=&quot;#668844&quot;&gt;服&lt;/font&gt;&lt;font color=&quot;#698643&quot;&gt;啊&lt;/font&gt;&lt;font color=&quot;#6C8442&quot;&gt;。&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=&quot;#728040&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#757E3F&quot;&gt;也&lt;/font&gt;&lt;font color=&quot;#787C3E&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#7B7A3D&quot;&gt;不&lt;/font&gt;&lt;font color=&quot;#7E783C&quot;&gt;知&lt;/font&gt;&lt;font color=&quot;#81763B&quot;&gt;道&lt;/font&gt;&lt;font color=&quot;#84743A&quot;&gt;当&lt;/font&gt;&lt;font color=&quot;#877239&quot;&gt;时&lt;/font&gt;&lt;font color=&quot;#8A7038&quot;&gt;为&lt;/font&gt;&lt;font color=&quot;#8D6E37&quot;&gt;什&lt;/font&gt;&lt;font color=&quot;#906C36&quot;&gt;么&lt;/font&gt;&lt;font color=&quot;#936A35&quot;&gt;会&lt;/font&gt;&lt;font color=&quot;#966834&quot;&gt;这&lt;/font&gt;&lt;font color=&quot;#996633&quot;&gt;么&lt;/font&gt;&lt;font color=&quot;#9C6432&quot;&gt;写&lt;/font&gt;&lt;font color=&quot;#9F6231&quot;&gt;。&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=&quot;#A55E2F&quot;&gt;不&lt;/font&gt;&lt;font color=&quot;#A85C2E&quot;&gt;过&lt;/font&gt;&lt;font color=&quot;#AB5A2D&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#AE582C&quot;&gt;确&lt;/font&gt;&lt;font color=&quot;#B1562B&quot;&gt;实&lt;/font&gt;&lt;font color=&quot;#B4542A&quot;&gt;很&lt;/font&gt;&lt;font color=&quot;#B75229&quot;&gt;开&lt;/font&gt;&lt;font color=&quot;#BA5028&quot;&gt;心&lt;/font&gt;&lt;/center&gt;

&lt;center&gt;&lt;font color=&quot;#C04C26&quot;&gt;—&lt;/font&gt;&lt;font color=&quot;#C34A25&quot;&gt;—&lt;/font&gt;&lt;font color=&quot;#C64824&quot;&gt;2&lt;/font&gt;&lt;font color=&quot;#C94623&quot;&gt;0&lt;/font&gt;&lt;font color=&quot;#CC4422&quot;&gt;2&lt;/font&gt;&lt;font color=&quot;#CF4221&quot;&gt;0&lt;/font&gt;&lt;font color=&quot;#D24020&quot;&gt;.&lt;/font&gt;&lt;font color=&quot;#D53E1F&quot;&gt;3&lt;/font&gt;&lt;font color=&quot;#D83C1E&quot;&gt;.&lt;/font&gt;&lt;font color=&quot;#DB3A1D&quot;&gt;2&lt;/font&gt;&lt;/center&gt;

&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/03/02/3WhYrT.png&quot; alt=&quot;🐇大佬&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://melodyjerry.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>一熟悉的陌生人</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/29/%E4%B8%80%E7%86%9F%E6%82%89%E7%9A%84%E9%99%8C%E7%94%9F%E4%BA%BA/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/29/一熟悉的陌生人/</id>
    <published>2020-02-29T11:26:11.000Z</published>
    <updated>2020-03-02T12:24:51.823Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#FF2800" size="6">昨</font><font color="#FF5000" size="6">晚</font> <font color="#FF7800">和</font><font color="#FFA000">一</font><font color="#FFC800">个</font><font color="#FFF000">女</font><font color="#D7FF00">孩</font><font color="#AFFF00">在</font><font color="#87FF00">聊</font><font color="#5FFF00">天</font><font color="#37FF00">，</font><font color="#0FFF00">聊</font><font color="#00FF28">到</font><font color="#00FF50">了</font><font color="#00FF78">很</font><font color="#00FFA0">多</font><font color="#00FFC8">。</font><font color="#00FFF0">聊</font><font color="#00D7FF">着</font><font color="#00AFFF">聊</font><font color="#0087FF">着</font><font color="#005FFF">，</font><font color="#0037FF">聊</font><font color="#000FFF">到</font><font color="#2800FF">了</font><font color="#5000FF">一</font><font color="#7800FF">些</font><font color="#A000FF">事</font><font color="#C800FF">情</font><font color="#F000FF">让</font><font color="#FF00D7">我</font><font color="#FF00AF">联</font><font color="#FF0087">想</font><font color="#FF005F">到</font><font color="#FF0037">一</font><font color="#FF000F">些</font><font color="#FF0000">经</font><font color="#FF2800">历</font><font color="#FF5000">。</font></p><p><font color="#FF7800">后</font><font color="#FFA000">来</font><font color="#FFC800">，</font><font color="#FFF000">和</font><font color="#D7FF00">她</font><font color="#AFFF00">说</font><font color="#87FF00">了</font><font color="#5FFF00">一</font><font color="#37FF00">些</font><font color="#0FFF00">奇</font><font color="#00FF28">怪</font><font color="#00FF50">的</font><font color="#00FF78">话</font><font color="#00FFA0">。</font><font color="#00FFC8">想</font><font color="#00FFF0">哭</font><font color="#00D7FF">，</font><font color="#00AFFF">早</font><font color="#0087FF">早</font><font color="#005FFF">结</font><font color="#0037FF">束</font><font color="#000FFF">了</font><font color="#2800FF">一</font><font color="#5000FF">日</font><font color="#7800FF">的</font><font color="#A000FF">聊</font><font color="#C800FF">天</font><font color="#F000FF">，</font><font color="#FF00D7">自</font><font color="#FF00AF">己</font><font color="#FF0087">静</font><font color="#FF005F">了</font><font color="#FF0037">静</font><font color="#FF000F">。</font></p><p><font color="#FF0000">一</font><font color="#FF2800">觉</font><font color="#FF5000">醒</font><font color="#FF7800">来</font><font color="#FFA000">，</font><font color="#FFC800">却</font><font color="#FFF000">收</font><font color="#D7FF00">到</font><font color="#AFFF00">了</font><font color="#87FF00">她</font><font color="#5FFF00">的</font><font color="#37FF00">另</font><font color="#0FFF00">一</font><font color="#00FF28">大</font><font color="#00FF50">段</font><font color="#00FF78">话</font><font color="#00FFA0">。</font><font color="#00FFC8">看</font><font color="#00FFF0">完</font><font color="#00D7FF">的</font><font color="#00AFFF">那</font><font color="#0087FF">刻</font><font color="#005FFF">，</font><font color="#0037FF">我</font><font color="#000FFF">觉</font><font color="#2800FF">得</font><font color="#5000FF">这</font><font color="#7800FF">是</font><font color="#A000FF">个</font><font color="#C800FF">好</font><font color="#F000FF">女</font><font color="#FF00D7">孩</font><font color="#FF00AF">。</font><font color="#FF0087">很</font><font color="#FF005F">可</font><font color="#FF0037">爱</font><font color="#FF000F">的</font><font color="#FF0000">女</font><font color="#FF2800">孩</font><font color="#FF5000">。</font></p><p><font color="#FF7800">对</font><font color="#FFA000">她</font><font color="#FFC800">，</font><font color="#FFF000">我</font><font color="#D7FF00">不</font><font color="#AFFF00">知</font><font color="#87FF00">道</font><font color="#5FFF00">如</font><font color="#37FF00">何</font><font color="#0FFF00">去</font><font color="#00FF28">定</font><font color="#00FF50">位</font><font color="#00FF78">她</font><font color="#00FFA0">。</font><font color="#00FFC8">彼</font><font color="#00FFF0">此</font><font color="#00D7FF">都</font><font color="#00AFFF">说</font><font color="#0087FF">了</font><font color="#005FFF">一</font><font color="#0037FF">些</font><font color="#000FFF">奇</font><font color="#2800FF">怪</font><font color="#5000FF">但</font><font color="#7800FF">又</font><font color="#A000FF">是</font><font color="#C800FF">奇</font><font color="#F000FF">妙</font><font color="#FF00D7">的</font><font color="#FF00AF">话</font><font color="#FF0087">。</font></p><p><font color="#FF005F">硬</font><font color="#FF0037">要</font><font color="#FF000F">是</font><font color="#FF0000">用</font><font color="#FF2800">一</font><font color="#FF5000">个</font><font color="#FF7800">词</font><font color="#FFA000">来</font><font color="#FFC800">形</font><font color="#FFF000">容</font><font color="#D7FF00">，</font><font color="#AFFF00">我</font><font color="#87FF00">只</font><font color="#5FFF00">能</font><font color="#37FF00">想</font><font color="#0FFF00">到</font><strong><font size="6"><font color="#00FF28">“</font><font color="#00FF50">熟</font><font color="#00FF78">悉</font><font color="#00FFA0">的</font><font color="#00FFC8">陌</font><font color="#00FFF0">生</font><font color="#00D7FF">人</font><font color="#00AFFF">”</font></font></strong><font color="#0087FF">。</font></p><p><font color="#005FFF">陌</font><font color="#0037FF">生</font><font color="#000FFF">是</font><font color="#2800FF">此</font><font color="#5000FF">前</font><font color="#7800FF">从</font><font color="#A000FF">未</font><font color="#C800FF">有</font><font color="#F000FF">过</font><font color="#FF00D7">任</font><font color="#FF00AF">何</font><font color="#FF0087">交</font><font color="#FF005F">流</font><font color="#FF0037">，</font><font color="#FF000F">熟</font><font color="#FF0000">悉</font><font color="#FF2800">是</font><font color="#FF5000">原</font><font color="#FF7800">来</font><font color="#FFA000">都</font><font color="#FFC800">知</font><font color="#FFF000">道</font><font color="#D7FF00">对</font><font color="#AFFF00">方</font><font color="#87FF00">还</font><font color="#5FFF00">有</font><font color="#37FF00">着</font><font color="#0FFF00">很</font><font color="#00FF28">多</font><font color="#00FF50">相</font><font color="#00FF78">似</font><font color="#00FFA0">的</font><font color="#00FFC8">地</font><font color="#00FFF0">方</font><font color="#00D7FF">。</font><font color="#00AFFF"><br></font></p><p><font color="#0087FF">这</font><font color="#005FFF">么</font><font color="#0037FF">些</font><font color="#000FFF">天</font><font color="#2800FF">来</font><font color="#5000FF">，</font><font color="#7800FF">对</font><font color="#A000FF">她</font><font color="#C800FF">，</font><font color="#F000FF">心</font><font color="#FF00D7">跳</font><font color="#FF00AF">有</font><font color="#FF0087">过</font><font color="#FF005F">那</font><font color="#FF0037">么</font><font color="#FF000F">几</font><font color="#FF0000">次</font><font color="#FF2800">起</font><font color="#FF5000">伏</font><font color="#FF7800">跌</font><font color="#FFA000">落</font><font color="#FFC800">。</font></p><font color="#FFF000"></font><font color="#D7FF00"></font><font color="#AFFF00">有</font><font color="#87FF00">那</font><font color="#5FFF00">么</font><font color="#37FF00">几</font><font color="#0FFF00">个</font><font color="#00FF28">时</font><font color="#00FF50">候</font><font color="#00FF78">觉</font><font color="#00FFA0">得</font><font color="#00FFC8">她</font><font color="#00FFF0">是</font><font color="#00D7FF">我</font><font color="#00AFFF">想</font><font color="#0087FF">找</font><font color="#005FFF">的</font><font color="#0037FF">那</font><font color="#000FFF">个</font><font color="#2800FF">人</font><font color="#5000FF">，</font><font color="#7800FF">但</font><font color="#A000FF">可</font><font color="#C800FF">能</font><font color="#F000FF">是</font><font color="#FF00D7">吧</font><font color="#FF00AF">也</font><font color="#FF0087">可</font><font color="#FF005F">能</font><font color="#FF0037">不</font><font color="#FF000F">是</font><font color="#FF0000">…</font><font color="#FF2800">…</font><p><font color="#FF7800"> 于我，</font><font color="#FFA000">生</font><font color="#FFC800">活</font><font color="#FFF000">和</font><font color="#D7FF00">情</font><font color="#AFFF00">感</font><font color="#87FF00">，</font><font color="#5FFF00">是</font><font color="#37FF00">我</font><font color="#0FFF00">目</font><font color="#00FF28">前</font><font color="#00FF50">觉</font><font color="#00FF78">得</font><font color="#00FFA0">最</font><font color="#00FFC8">难</font><font color="#00FFF0">的</font><font color="#00D7FF">两</font><font color="#00AFFF">个</font><font color="#0087FF">了</font><font color="#005FFF">吧。</font><font color="#009999">—</font><font color="#1385AC">—</font><font color="#2771C0">2</font><font color="#3A5ED3">0</font><font color="#4E71E7">2</font><font color="#625EFB">0</font><font color="#7571FF">.</font><font color="#895EFF">2</font><font color="#9C71FF">.</font><font color="#B05EFF">2</font><font color="#C471FF">9</font><font color="#D75EFF">随</font><font color="#EB71FF">笔</font></p><p><fancybox><img src="https://s2.ax1x.com/2020/02/29/3yIIaR.png" alt="🐇大佬"></fancybox></p><center><font color="#00CC00">选</font><font color="#17B417">自</font><font color="#2E9D2E">聊</font><font color="#458645">天</font><font color="#5C6F5C">记</font><font color="#735873">录</font><font color="#8B6F8B">的</font><font color="#A258A2">其</font><font color="#B96FB9">中</font><font color="#D058D0">一</font><font color="#E76FE7">张</font></center><br><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#FF2800&quot; size=&quot;6&quot;&gt;昨&lt;/font&gt;&lt;font color=&quot;#FF5000&quot; size=&quot;6&quot;&gt;晚&lt;/font&gt; &lt;font color=&quot;#FF7800&quot;&gt;和&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;女&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;孩&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;在&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;天&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;到&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;很&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;多&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;。&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;着&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;着&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;到&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;些&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;事&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;情&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;让&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;联&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;想&lt;/font&gt;&lt;font color=&quot;#FF005F&quot;&gt;到&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;些&lt;/font&gt;&lt;font color=&quot;#FF0000&quot;&gt;经&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;历&lt;/font&gt;&lt;font color=&quot;#FF5000&quot;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#FF7800&quot;&gt;后&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;来&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;和&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;她&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;说&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;些&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;奇&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;怪&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;话&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;。&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;想&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;哭&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;早&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;早&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;结&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;束&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;日&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;天&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;自&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;己&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;静&lt;/font&gt;&lt;font color=&quot;#FF005F&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;静&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#FF0000&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;觉&lt;/font&gt;&lt;font color=&quot;#FF5000&quot;&gt;醒&lt;/font&gt;&lt;font color=&quot;#FF7800&quot;&gt;来&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;却&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;收&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;到&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;她&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;另&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;大&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;段&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;话&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;。&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;看&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;完&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;那&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;刻&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;觉&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;得&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;这&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;好&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;女&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;孩&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;。&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;很&lt;/font&gt;&lt;font color=&quot;#FF005F&quot;&gt;可&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;爱&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#FF0000&quot;&gt;女&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;孩&lt;/font&gt;&lt;font color=&quot;#FF5000&quot;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#FF7800&quot;&gt;对&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;她&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;不&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;知&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;道&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;如&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;何&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;去&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;定&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;位&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;她&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;。&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;彼&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;此&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;都&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;说&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;些&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;奇&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;怪&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;但&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;又&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;奇&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;妙&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;话&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#FF005F&quot;&gt;硬&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;要&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#FF0000&quot;&gt;用&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#FF5000&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#FF7800&quot;&gt;词&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;来&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;形&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;容&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;只&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;能&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;想&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;到&lt;/font&gt;&lt;strong&gt;&lt;font size=&quot;6&quot;&gt;&lt;font color=&quot;#00FF28&quot;&gt;“&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;熟&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;悉&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;陌&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;生&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;人&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;”&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font color=&quot;#0087FF&quot;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#005FFF&quot;&gt;陌&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;生&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;此&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;前&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;从&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;未&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;有&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;过&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;任&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;何&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;交&lt;/font&gt;&lt;font color=&quot;#FF005F&quot;&gt;流&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;熟&lt;/font&gt;&lt;font color=&quot;#FF0000&quot;&gt;悉&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#FF5000&quot;&gt;原&lt;/font&gt;&lt;font color=&quot;#FF7800&quot;&gt;来&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;都&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;知&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;道&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;对&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;方&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;还&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;有&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;着&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;很&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;多&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;相&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;似&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;地&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;方&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;。&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;#0087FF&quot;&gt;这&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;么&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;些&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;天&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;来&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;对&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;她&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;心&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;跳&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;有&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;过&lt;/font&gt;&lt;font color=&quot;#FF005F&quot;&gt;那&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;么&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;几&lt;/font&gt;&lt;font color=&quot;#FF0000&quot;&gt;次&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;起&lt;/font&gt;&lt;font color=&quot;#FF5000&quot;&gt;伏&lt;/font&gt;&lt;font color=&quot;#FF7800&quot;&gt;跌&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;落&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;font color=&quot;#FFF000&quot;&gt;
&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;
&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;有&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;那&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;么&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;几&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;时&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;候&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;觉&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;得&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;她&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;想&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;找&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;那&lt;/font&gt;&lt;font color=&quot;#000FFF&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#2800FF&quot;&gt;人&lt;/font&gt;&lt;font color=&quot;#5000FF&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#7800FF&quot;&gt;但&lt;/font&gt;&lt;font color=&quot;#A000FF&quot;&gt;可&lt;/font&gt;&lt;font color=&quot;#C800FF&quot;&gt;能&lt;/font&gt;&lt;font color=&quot;#F000FF&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#FF00D7&quot;&gt;吧&lt;/font&gt;&lt;font color=&quot;#FF00AF&quot;&gt;也&lt;/font&gt;&lt;font color=&quot;#FF0087&quot;&gt;可&lt;/font&gt;&lt;font color=&quot;#FF005F&quot;&gt;能&lt;/font&gt;&lt;font color=&quot;#FF0037&quot;&gt;不&lt;/font&gt;&lt;font color=&quot;#FF000F&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#FF0000&quot;&gt;…&lt;/font&gt;&lt;font color=&quot;#FF2800&quot;&gt;…&lt;/font&gt;

&lt;p&gt;&lt;font color=&quot;#FF7800&quot;&gt; 于我，&lt;/font&gt;&lt;font color=&quot;#FFA000&quot;&gt;生&lt;/font&gt;&lt;font color=&quot;#FFC800&quot;&gt;活&lt;/font&gt;&lt;font color=&quot;#FFF000&quot;&gt;和&lt;/font&gt;&lt;font color=&quot;#D7FF00&quot;&gt;情&lt;/font&gt;&lt;font color=&quot;#AFFF00&quot;&gt;感&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;，&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#37FF00&quot;&gt;我&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;目&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;前&lt;/font&gt;&lt;font color=&quot;#00FF50&quot;&gt;觉&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;得&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;最&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;难&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;两&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;个&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;了&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;吧。&lt;/font&gt;&lt;font color=&quot;#009999&quot;&gt;—&lt;/font&gt;&lt;font color=&quot;#1385AC&quot;&gt;—&lt;/font&gt;&lt;font color=&quot;#2771C0&quot;&gt;2&lt;/font&gt;&lt;font color=&quot;#3A5ED3&quot;&gt;0&lt;/font&gt;&lt;font color=&quot;#4E71E7&quot;&gt;2&lt;/font&gt;&lt;font color=&quot;#625EFB&quot;&gt;0&lt;/font&gt;&lt;font color=&quot;#7571FF&quot;&gt;.&lt;/font&gt;&lt;font color=&quot;#895EFF&quot;&gt;2&lt;/font&gt;&lt;font color=&quot;#9C71FF&quot;&gt;.&lt;/font&gt;&lt;font color=&quot;#B05EFF&quot;&gt;2&lt;/font&gt;&lt;font color=&quot;#C471FF&quot;&gt;9&lt;/font&gt;&lt;font color=&quot;#D75EFF&quot;&gt;随&lt;/font&gt;&lt;font color=&quot;#EB71FF&quot;&gt;笔&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/29/3yIIaR.png&quot; alt=&quot;🐇大佬&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;center&gt;&lt;font color=&quot;#00CC00&quot;&gt;选&lt;/font&gt;&lt;font color=&quot;#17B417&quot;&gt;自&lt;/font&gt;&lt;font color=&quot;#2E9D2E&quot;&gt;聊&lt;/font&gt;&lt;font color=&quot;#458645&quot;&gt;天&lt;/font&gt;&lt;font color=&quot;#5C6F5C&quot;&gt;记&lt;/font&gt;&lt;font color=&quot;#735873&quot;&gt;录&lt;/font&gt;&lt;font color=&quot;#8B6F8B&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#A258A2&quot;&gt;其&lt;/font&gt;&lt;font color=&quot;#B96FB9&quot;&gt;中&lt;/font&gt;&lt;font color=&quot;#D058D0&quot;&gt;一&lt;/font&gt;&lt;font color=&quot;#E76FE7&quot;&gt;张&lt;/font&gt;&lt;/center&gt;&lt;br&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://melodyjerry.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>HTTP案例：文件下载</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/24/HTTP%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/24/HTTP案例：文件下载/</id>
    <published>2020-02-24T14:10:12.000Z</published>
    <updated>2020-02-24T14:18:13.247Z</updated>
    
    <content type="html"><![CDATA[<p>结束HTTP的学习后，记录一份案例学习的笔记。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示。如果不能解析，则弹出下载提示框。不不满足需求。</p></li><li><p>任何资源都<strong>必须</strong>弹出下载提示框。</p></li><li><p>使用<strong>响应头</strong>设置资源的打开方式：<br> <code>content-disposition:attachment;filename=xxx</code></p></li></ol><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>一、定义页面，编辑超链接href属性，并指向Servlet，传递资源名称filename</p><p>二、定义Servlet</p><ol><li>获取文件名称</li><li>使用字节输入流加载文件进内存</li><li>指定response的响应头： <code>content-disposition:attachment;filename=xxx</code></li><li>将数据写出到response输出流</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li>web下New一个download.html</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;文件下载&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href="/day15/img/1.jpg"&gt;图片1&lt;/a&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a href="/day15/downloadServlet?filename=1.jpg"&gt;图片1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>包cn.itcast.web.download下New一个DownloadServlet.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.download;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Classname DownloadServlet</span><br><span class="line"> * @Description 文件下载</span><br><span class="line"> * @Date 2020/2/24 下午 5:37</span><br><span class="line"> * @Created by jerry</span><br><span class="line"> */</span><br><span class="line">@WebServlet("/downloadServlet")</span><br><span class="line">public class DownloadServlet extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //1.获取请求参数，即文件名称</span><br><span class="line">        String filename = request.getParameter("filename");</span><br><span class="line">        //2.使用字节输入流加载进内存</span><br><span class="line">        //2-1.找到文件的服务器路径</span><br><span class="line">        ServletContext servletContext = this.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath("/img/" + filename);//服务器路径</span><br><span class="line">        //2-2.用字节输入流关联</span><br><span class="line">        FileInputStream fileInputStream = new FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        //3.设置response的响应头</span><br><span class="line">        //3-1.设置响应头类型：content-type</span><br><span class="line">        String minetype = servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader("content-type", minetype);</span><br><span class="line">        //3-2.设置响应头打开方式：content-disposition</span><br><span class="line">        response.setHeader("content-disposition","attachment;filename="+filename);</span><br><span class="line"></span><br><span class="line">        //4.将输入流写到输出流中</span><br><span class="line">        ServletOutputStream servletOutputStream = response.getOutputStream();</span><br><span class="line">        byte[] buff = new byte[1024 * 8]; //作为缓冲区</span><br><span class="line">        int lenght = 0;</span><br><span class="line">        //读取</span><br><span class="line">        while ((lenght = fileInputStream.read(buff)) != -1){</span><br><span class="line">            //写入</span><br><span class="line">            servletOutputStream.write(buff, 0, lenght);</span><br><span class="line">        }</span><br><span class="line">        servletOutputStream.close(); //可以不关闭输出流</span><br><span class="line">        fileInputStream.close(); //建议关闭输出流，释放资源</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><fancybox><img src="https://s2.ax1x.com/2020/02/24/3Gccpd.gif" alt="3Gccpd.gif"></fancybox></p><h1 id="思考-分析"><a href="#思考-分析" class="headerlink" title="思考/分析"></a>思考/分析</h1><ul><li>中文文件问题</li></ul><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li>获取客户端使用的浏览器版本信息</li><li>根据不同的版本信息，设置filename的编码方式不同</li></ol><p>详细见 <a href="https://www.bilibili.com/video/av70420291?p=165" target="_blank" rel="noopener">【视频】</a> ，里面有详解。</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=70420291&amp;cid=122004832&amp;page=165" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>******与本笔记相关的资源：<p>链接: <a href="https://pan.baidu.com/s/1q_B3k1LzQwxlslEOdpeDWQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1q_B3k1LzQwxlslEOdpeDWQ</a> 提取码: dx5u </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结束HTTP的学习后，记录一份案例学习的笔记。&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;页面显示超链接&lt;/li&gt;
&lt;li&gt;点击超链接后弹出下载提示框&lt;/li&gt;
&lt;li&gt;完成图片文件下载&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP中的ServletContext对象</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/24/HTTP%E4%B8%AD%E7%9A%84ServletContext%E5%AF%B9%E8%B1%A1/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/24/HTTP中的ServletContext对象/</id>
    <published>2020-02-24T09:08:11.000Z</published>
    <updated>2020-02-24T10:16:03.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h1><ul><li><p><strong>ServletContext对象范围：所有用户所有请求的数据</strong></p></li><li><p><font color="red" size="6">谨慎使用。</font><font color="red">所有用户可以操控它，不太安全；而且，它的生命周期长：服务器始到终，存储的数据多了，会造成内存的压力。</font></p></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>代表整个web应用，可以和程序的容器（服务器）来通信（交互数据）</li></ul><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><ol><li>通过<code>request</code>对象获取</li></ol><ul><li>调用<code>request.getServletContext();</code></li></ul><ol start="2"><li>通过<code>HttpServlet</code>获取</li></ol><ul><li>调用<code>this.getServletContext();</code></li></ul><p><font color="red" size="6">注意：</font><br>2个调用方法获取到的<strong>ServletContext</strong>都是<strong>一样的</strong>。因此，更多的时候会使用<code>this.getServletContext();</code></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ol><li>获取mine类型</li><li>域对象：共享数据</li><li>获取文件的真实路径(服务器路径)</li></ol><a id="more"></a><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servletcontext;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/servletContextDemo1")</span><br><span class="line">public class ServletContextDemo1 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        /* ServletContext对象获取：</span><br><span class="line">                1. 通过request对象获取</span><br><span class="line">                 request.getServletContext();</span><br><span class="line">                2. 通过HttpServlet获取</span><br><span class="line">                    this.getServletContext();</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        //1. 通过request对象获取</span><br><span class="line">        ServletContext context1 = request.getServletContext();</span><br><span class="line">        //2. 通过HttpServlet获取</span><br><span class="line">        ServletContext context2 = this.getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(context1);</span><br><span class="line">        System.out.println(context2);</span><br><span class="line"></span><br><span class="line">        System.out.println(context1 == context2);//true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>控制台输出👇</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/24/38srUH.png" alt="38srUH.png"></fancybox></p><h1 id="1-获取mine类型"><a href="#1-获取mine类型" class="headerlink" title="1.获取mine类型"></a>1.获取mine类型</h1><ul><li>格式：<code>大类型/小类型</code>  </li><li>比如，<code>text/html</code>  、 <code>image/jpeg</code> 等等</li></ul><h2 id="mine类型"><a href="#mine类型" class="headerlink" title="mine类型"></a>mine类型</h2><ul><li>在<strong>互联网通信过程</strong>中定义的一种<strong>文件数据类型</strong></li></ul><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><ul><li><code>String getMimeType(String file)</code></li></ul><h2 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servletcontext;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/servletContextDemo2")</span><br><span class="line">public class ServletContextDemo2 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        /*</span><br><span class="line"></span><br><span class="line">            ServletContext功能：</span><br><span class="line">               1. 获取MIME类型：</span><br><span class="line">                * MIME类型:在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">                    * 格式： 大类型/小类型   text/htmlimage/jpeg</span><br><span class="line"></span><br><span class="line">                * 获取：String getMimeType(String file)</span><br><span class="line">                2. 域对象：共享数据</span><br><span class="line">                3. 获取文件的真实(服务器)路径</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //2. 通过HttpServlet获取</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line"></span><br><span class="line">        //3. 定义文件名称</span><br><span class="line">        String filename = "a.jpg";//image/jpeg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //4.获取MIME类型</span><br><span class="line">        String mimeType = context.getMimeType(filename);</span><br><span class="line">        System.out.println(mimeType);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="2-域对象"><a href="#2-域对象" class="headerlink" title="2.域对象"></a>2.域对象</h1><ul><li>共享数据</li><li><strong>ServletContext对象范围：所有用户所有请求的数据</strong></li></ul><h2 id="调用方法-1"><a href="#调用方法-1" class="headerlink" title="调用方法"></a>调用方法</h2><ol><li>设置数据</li></ol><ul><li><code>setAttribute(String name,Object value)</code></li></ul><ol start="2"><li>获取数据</li></ol><ul><li><code>getAttribute(String name)</code></li></ul><ol start="3"><li><code>removeAttribute(String name)</code></li></ol><h2 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h2><p>ServletContextDemo3.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servletcontext;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/servletContextDemo3")</span><br><span class="line">public class ServletContextDemo3 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        /*</span><br><span class="line"></span><br><span class="line">            ServletContext功能：</span><br><span class="line">               1. 获取MIME类型：</span><br><span class="line"></span><br><span class="line">                2. 域对象：共享数据</span><br><span class="line">                3. 获取文件的真实(服务器)路径</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        //2. 通过HttpServlet获取</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line"></span><br><span class="line">        //设置数据</span><br><span class="line">        context.setAttribute("msg","haha");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ServletContextDemo4.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servletcontext;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/servletContextDemo4")</span><br><span class="line">public class ServletContextDemo4 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        /*</span><br><span class="line"></span><br><span class="line">            ServletContext功能：</span><br><span class="line">               1. 获取MIME类型：</span><br><span class="line"></span><br><span class="line">                2. 域对象：共享数据</span><br><span class="line">                3. 获取文件的真实(服务器)路径</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        //2. 通过HttpServlet获取</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line"></span><br><span class="line">        //获取数据</span><br><span class="line">        Object msg = context.getAttribute("msg");</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-获取文件的真实路径-服务器路径"><a href="#3-获取文件的真实路径-服务器路径" class="headerlink" title="3.获取文件的真实路径(服务器路径)"></a>3.获取文件的真实路径(服务器路径)</h1><p><fancybox><img src="https://s2.ax1x.com/2020/02/24/38q0LF.png" alt="38q0LF.png"></fancybox></p><h2 id="调用方法-2"><a href="#调用方法-2" class="headerlink" title="调用方法"></a>调用方法</h2><ul><li><code>String getRealPath(String path)</code></li></ul><h2 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servletcontext;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/servletContextDemo5")</span><br><span class="line">public class ServletContextDemo5 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        /*</span><br><span class="line"></span><br><span class="line">            ServletContext功能：</span><br><span class="line">               1. 获取MIME类型：</span><br><span class="line"></span><br><span class="line">                2. 域对象：共享数据</span><br><span class="line">                3. 获取文件的真实(服务器)路径</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        // 通过HttpServlet获取</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 获取文件的服务器路径</span><br><span class="line">        String b = context.getRealPath("/b.txt");//工作空间(IDEA)web目录下资源访问</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        // File file = new File(realPath);</span><br><span class="line"></span><br><span class="line">        String c = context.getRealPath("/WEB-INF/c.txt");//工作空间(IDEA)WEB-INF目录下的资源访问</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        String a = context.getRealPath("/WEB-INF/classes/a.txt");//工作空间(IDEA)src目录下的资源访问</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>项目空间、工作空间的区别：<a href="https://www.bilibili.com/video/av70420291?p=162" target="_blank" rel="noopener">视频</a> 进度条【04:52】</p></blockquote><p><font color="red" size="6">注意：</font><br></p><ol><li><p>将来配置文件/资源文件的放置的路径不一样，要会写路径的字符串写法。</p></li><li><p>src目录的资源路径可以使用<strong>ClassLoader</strong>（<strong>类加载器</strong>，<font color="blue">不能获取web目录的路径</font>）</p></li></ol><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ServletContext对象&quot;&gt;&lt;a href=&quot;#ServletContext对象&quot; class=&quot;headerlink&quot; title=&quot;ServletContext对象&quot;&gt;&lt;/a&gt;ServletContext对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ServletContext对象范围：所有用户所有请求的数据&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;red&quot; size=&quot;6&quot;&gt;谨慎使用。&lt;/font&gt;&lt;font color=&quot;red&quot;&gt;所有用户可以操控它，不太安全；而且，它的生命周期长：服务器始到终，存储的数据多了，会造成内存的压力。&lt;/font&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;代表整个web应用，可以和程序的容器（服务器）来通信（交互数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;获取&quot;&gt;&lt;a href=&quot;#获取&quot; class=&quot;headerlink&quot; title=&quot;获取&quot;&gt;&lt;/a&gt;获取&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;request&lt;/code&gt;对象获取&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;调用&lt;code&gt;request.getServletContext();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;通过&lt;code&gt;HttpServlet&lt;/code&gt;获取&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;调用&lt;code&gt;this.getServletContext();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&quot;red&quot; size=&quot;6&quot;&gt;注意：&lt;/font&gt;&lt;br&gt;2个调用方法获取到的&lt;strong&gt;ServletContext&lt;/strong&gt;都是&lt;strong&gt;一样的&lt;/strong&gt;。因此，更多的时候会使用&lt;code&gt;this.getServletContext();&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取mine类型&lt;/li&gt;
&lt;li&gt;域对象：共享数据&lt;/li&gt;
&lt;li&gt;获取文件的真实路径(服务器路径)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>热部署-IDEA实现不用重启Tomcat服务便可自动更新</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/24/%E7%83%AD%E9%83%A8%E7%BD%B2-IDEA%E5%AE%9E%E7%8E%B0%E4%B8%8D%E7%94%A8%E9%87%8D%E5%90%AFTomcat%E6%9C%8D%E5%8A%A1%E4%BE%BF%E5%8F%AF%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/24/热部署-IDEA实现不用重启Tomcat服务便可自动更新/</id>
    <published>2020-02-24T06:36:53.000Z</published>
    <updated>2020-02-24T06:21:47.751Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat的热部署👇</p><p>一、配置Tomcat的Deployment处的“+”的Artifacts是war exploded形式：</p><p><strong>_:war exploded 作用：展开部署(相当于将资源文件进行展开后进行部署)<br>_</strong>:war 作用：发布模式,这是先打成war包,再部署</p><br><p>二、修改Run/Debug Configurations</p><p>On ‘Update’ Action：<strong>update class and resources</strong></p><p>On frame deactivation：<strong>update class and resources</strong></p><br><p>三、浏览器F12，勾选上disable cache</p><p><img src="https://s2.ax1x.com/2020/02/24/38NwDA.png" alt="38NwDA.png"></p><br><p>四、以上都不行，那就到Plugins安装J<strong>Rebel插件</strong></p><p><img src="https://s2.ax1x.com/2020/02/24/38YS58.png" alt="38YS58.png"></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat的热部署👇&lt;/p&gt;
&lt;p&gt;一、配置Tomcat的Deployment处的“+”的Artifacts是war exploded形式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_:war exploded 作用：展开部署(相当于将资源文件进行展开后进行部署)&lt;br&gt;_&lt;/strong&gt;:war 作用：发布模式,这是先打成war包,再部署&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;二、修改Run/Debug Configurations&lt;/p&gt;
&lt;p&gt;On ‘Update’ Action：&lt;strong&gt;update class and resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On frame deactivation：&lt;strong&gt;update class and resources&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;三、浏览器F12，勾选上disable cache&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/24/38NwDA.png&quot; alt=&quot;38NwDA.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;四、以上都不行，那就到Plugins安装J&lt;strong&gt;Rebel插件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/24/38YS58.png&quot; alt=&quot;38YS58.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
      <category term="Tomcat" scheme="https://melodyjerry.github.io/blog/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>IDEA设置方法参数列表类型自动提示</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/23/IDEA%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/23/IDEA设置方法参数列表类型自动提示/</id>
    <published>2020-02-23T14:36:53.000Z</published>
    <updated>2020-02-23T14:33:20.117Z</updated>
    
    <content type="html"><![CDATA[<p>   期望有这样的参数列表提示👇</p><p><img src="https://s2.ax1x.com/2020/02/23/33nr36.png" alt="33nr36.png"></p><p>File-Settings打开设置(或者ctrl +Alt+S)👇</p><p><img src="https://s2.ax1x.com/2020/02/23/33nJjU.png" alt="33nJjU.png"></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   期望有这样的参数列表提示👇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/23/33nr36.png&quot; alt=&quot;33nr36.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;File-Settings打开设置(或者ctrl +Alt+S)👇&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/23/33nJjU.png&quot; alt=&quot;33nJjU.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>BeanUtils的基本使用</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/23/BeanUtils%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/23/BeanUtils的基本使用/</id>
    <published>2020-02-23T08:36:53.000Z</published>
    <updated>2020-02-23T10:10:21.298Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/" target="_blank" rel="noopener">《HTTP案例学习：用户登录》</a>的学习中，使用到<strong>BeanUtils</strong>。</p><p>案例中只涉及到封装username、password两个对象，但是实际上的用户登录界面，有十几个数据对象需要封装。</p><p>按原来的方式，是非常麻烦的。期望<strong>能够一次把所有参数获取到，并且通过一个方法，一次把所有数据封装成一个对象。</strong></p><p><strong><font color="red" size="5">BeanUtils，一个工具类，简化数据封装</font></strong></p><p>这里专门挑出来，做一份简单的笔记。</p><p>配合<a href="https://www.bilibili.com/video/av70420291?p=143" target="_blank" rel="noopener">【教学视频】</a>、<a href="https://blog.csdn.net/wzc1991520/article/details/80176679" target="_blank" rel="noopener">【BeanUtils工具类常用方法】</a> 食用更佳。</p><a id="more"></a><hr><p>我们将原来写的代码，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//2.获取请求参数</span><br><span class="line">String username = req.getParameter("username");</span><br><span class="line">String password = req.getParameter("password");</span><br><span class="line">//3.封装user对象</span><br><span class="line">User loginUser = new User();</span><br><span class="line">loginUser.setUsername(username);</span><br><span class="line">loginUser.setPassword(password);</span><br></pre></td></tr></tbody></table></figure><p>使用BeanUtils工具类进行封装，</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//2.获取所有请求参数</span><br><span class="line">Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line">//3.创建User对象</span><br><span class="line">User loginUser = new User();</span><br><span class="line">//3-2.使用BeanUtils封装</span><br><span class="line">try {</span><br><span class="line">    BeanUtils.populate(loginUser,map);</span><br><span class="line">} catch (IllegalAccessException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">} catch (InvocationTargetException e) {</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>会发现只用简单几行代码就完成了封装，而不用和之前一样分别对每个数据进行封装。</p><h1 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h1><ul><li><strong>工具类，简化数据封装</strong></li></ul><ul><li>用于<strong>封装JavaBean</strong>的</li><li><strong>JavaBean：标准(简单)的Java类</strong></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>JavaBean</li><li>成员变量</li><li>属性：setter和getter方法截取后的产物<ul><li>例如：getUsername() –&gt; Username–&gt; username（大多数下，名字一样）</li></ul></li></ul><h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><ul><li><strong>标准的Java类</strong></li><li>一般放在domain等package下</li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li><font color="red" size="5">封装数据</font></li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li><p>类必须被<strong>public修饰</strong></p></li><li><p>必须提供空参的构造器</p></li><li><p>成员变量必须使用private修饰</p></li><li><p>提供公共setter和getter方法</p></li></ol><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><ul><li><p>setter和getter方法截取后的产物</p></li><li><p>例如：getUsername() –&gt; Username–&gt; username（大多数下，名字一样）</p></li></ul><h1 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h1><ol><li><code>setProperty()</code></li></ol><ul><li>设置属性值</li></ul><ol start="2"><li><code>getProperty()</code></li></ol><ul><li>获取属性值</li></ul><ol start="3"><li><code>populate(Object obj, Map map)</code></li></ol><ul><li>将<strong>map集合的键值对</strong>信息，<strong>封装到对应的JavaBean对象中</strong></li></ul><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>配合 <a href="https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/" target="_blank" rel="noopener">《HTTP案例学习：用户登录》</a> ，现在New一个BeanUtils.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.test;</span><br><span class="line"></span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import org.apache.commons.beanutils.BeanUtils;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line">public class BeanUtilsTest {</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test(){</span><br><span class="line">        User user = new User();</span><br><span class="line">        try {</span><br><span class="line">            BeanUtils.setProperty(user,"username","zhangsan");</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        } catch (IllegalAccessException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } catch (InvocationTargetException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>控制台输出：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31rEfP.png" alt=""></fancybox></p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>后来看的一篇博客 <a href="https://blog.csdn.net/wzc1991520/article/details/80176679" target="_blank" rel="noopener">【BeanUtils工具类常用方法】</a>，觉得写的很不错，一起记录在这里。</p><hr><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p>【教学视频】：<a href="https://www.bilibili.com/video/av70420291?p=143" target="_blank" rel="noopener">https://www.bilibili.com/video/av70420291?p=143</a></p><p>【BeanUtils工具类常用方法】：<a href="https://blog.csdn.net/wzc1991520/article/details/80176679" target="_blank" rel="noopener">https://blog.csdn.net/wzc1991520/article/details/80176679</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTTP案例学习：用户登录》&lt;/a&gt;的学习中，使用到&lt;strong&gt;BeanUtils&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;案例中只涉及到封装username、password两个对象，但是实际上的用户登录界面，有十几个数据对象需要封装。&lt;/p&gt;
&lt;p&gt;按原来的方式，是非常麻烦的。期望&lt;strong&gt;能够一次把所有参数获取到，并且通过一个方法，一次把所有数据封装成一个对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;BeanUtils，一个工具类，简化数据封装&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里专门挑出来，做一份简单的笔记。&lt;/p&gt;
&lt;p&gt;配合&lt;a href=&quot;https://www.bilibili.com/video/av70420291?p=143&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【教学视频】&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/wzc1991520/article/details/80176679&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【BeanUtils工具类常用方法】&lt;/a&gt; 食用更佳。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>html中form表单的action路径的写法</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/23/html%E4%B8%ADform%E8%A1%A8%E5%8D%95%E7%9A%84action%E8%B7%AF%E5%BE%84%E7%9A%84%E5%86%99%E6%B3%95/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/23/html中form表单的action路径的写法/</id>
    <published>2020-02-23T07:36:53.000Z</published>
    <updated>2020-02-23T07:57:34.993Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/" target="_blank" rel="noopener">《HTTP案例学习：用户登录》</a> 中提及到<strong><code>html中form表单的action路径的写法</code></strong> 是</p><p><font color="red" size="5">虚拟目录+Servlet的资源路径</font></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action="/day14_test/loginServlet" method="post"&gt;</span><br><span class="line">    用户名:&lt;input type="text" name="username"&gt; &lt;br&gt;</span><br><span class="line">    密码:&lt;input type="password" name="password"&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type="submit" value="登录"&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>先记住，日后还会涉及到的。</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTTP案例学习：用户登录》&lt;/a&gt; 中提及到&lt;strong&gt;&lt;code&gt;html中form表单的action路径的写法&lt;/code&gt;&lt;/strong&gt; 是&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;虚拟目录+Servlet的资源路径&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;用户登录&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;form action=&quot;/day14_test/loginServlet&quot; method=&quot;post&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    用户名:&amp;lt;input type=&quot;text&quot; name=&quot;username&quot;&amp;gt; &amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    密码:&amp;lt;input type=&quot;password&quot; name=&quot;password&quot;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&quot;submit&quot; value=&quot;登录&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;先记住，日后还会涉及到的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IDEA添加jar包的三种方式(小结)</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/23/IDEA%E4%B8%AD%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95@Test%E4%BD%BF%E7%94%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/23/IDEA中单元测试@Test使用/</id>
    <published>2020-02-23T04:36:53.000Z</published>
    <updated>2020-02-23T05:12:20.399Z</updated>
    
    <content type="html"><![CDATA[<p>相关文章：</p><p><a href="https://blog.csdn.net/QQljh123456/article/details/81583786" target="_blank" rel="noopener">https://blog.csdn.net/QQljh123456/article/details/81583786</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相关文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/QQljh123456/article/details/81583786&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/QQljh123456/article/details/81583786&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>HTTP响应信息数据-Response</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/22/HTTP%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Response/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/22/HTTP响应信息数据-Response/</id>
    <published>2020-02-22T13:15:01.000Z</published>
    <updated>2020-02-24T06:39:57.048Z</updated>
    
    <content type="html"><![CDATA[<p>接着前面两篇博文 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">《HTTP：超文本传输协议》</a> 、 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Request/" target="_blank" rel="noopener">《HTTP请求信息数据 - Request》</a> 的学习。</p><p>现在记录关于 <strong>HTTP响应信息数据-Response</strong> 的笔记。</p><hr><h1 id="响应信息数据-格式"><a href="#响应信息数据-格式" class="headerlink" title="响应信息数据   格式"></a>响应信息数据   格式</h1><ul><li><code>Servlet</code>类中<code>service()</code>方法的参数<code>ServletResponse</code></li><li><strong>Response在一次响应结束后，自动被销毁，其输出流也会自动被关闭。</strong></li><li>字符串数据，比如：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Content-Length: 101</span><br><span class="line">Date: Wed, 06 Jun 2018 07:08:42 GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        hello , response</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h2><ul><li>格式：<code>协议/版本 响应状态码 状态码描述</code></li></ul><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><ul><li>服务器告诉客户端浏览器本次请求和响应的一个状态。</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>状态码都是3位数字</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx状态码</li><li>2xx：成功。代表：<ul><li><strong>200</strong></li></ul></li><li>3xx：重定向。代表：<ul><li><strong>302</strong>：重定向</li><li><strong>304</strong>：访问缓存</li></ul></li><li>4xx：客户端错误。代表：<ul><li><strong>403</strong>：错误是一种在网站访问过程中，常见的错误提示，表示资源不可用。服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的WEB访问错误。   </li><li><strong>404</strong>：请求路径没有对应的资源</li><li><strong>405</strong>：请求方式没有对应的doXxx方法</li></ul></li><li>5xx：服务器端错误。代表：<strong>500</strong>(服务器内部出现异常)</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31vKu8.png" alt=""></fancybox></p><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul><li>格式：<code>响应头名称 ：值</code></li></ul><h3 id="常见的响应头"><a href="#常见的响应头" class="headerlink" title="常见的响应头"></a>常见的响应头</h3><ul><li>Content-Type</li><li>Content-disposition</li></ul><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><ul><li>服务器告诉客户端<strong>本次响应体数据格式以及编码格式</strong></li></ul><h4 id="Content-disposition"><a href="#Content-disposition" class="headerlink" title="Content-disposition"></a>Content-disposition</h4><ul><li><p>服务器告诉客户端<strong>以什么格式打开响应体数据</strong></p></li><li><p>其值：</p></li><li><p>in-line：<strong>默认值，在当前页面内打开</strong></p></li><li><p>attachment;filename=xxx：<strong>以附件形式打开响应体</strong>。涉及<strong>文件下载</strong>等功能。</p></li></ul><h2 id="响应空行"><a href="#响应空行" class="headerlink" title="响应空行"></a>响应空行</h2><ul><li>就是一个<strong>空行</strong>（空白行）</li><li>作用：<strong>分割响应头和响应体</strong></li></ul><h2 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h2><ul><li>传输的数据</li><li>文件、HTML网页源码等等。比如，</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        hello , response</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="案例1：重定向"><a href="#案例1：重定向" class="headerlink" title="案例1：重定向"></a>案例1：重定向</h1><ul><li>重定向：资源跳转的方式</li></ul><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31vKu8.png" alt=""></fancybox></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>ResponseDemo1.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 重定向</span><br><span class="line"> */</span><br><span class="line">@WebServlet("/responseDemo1")</span><br><span class="line">public class ResponseDemo1 extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        System.out.println("demo1........");</span><br><span class="line"></span><br><span class="line">        //访问/responseDemo1，会自动跳转到/responseDemo2资源</span><br><span class="line">        /* //1. 设置状态码为302</span><br><span class="line">        response.setStatus(302);</span><br><span class="line">        //2.设置响应头location</span><br><span class="line">        response.setHeader("location","/day15/responseDemo2");*/</span><br><span class="line"></span><br><span class="line">        //演示，不能使用request对象来共享数据</span><br><span class="line">        request.setAttribute("msg","response");</span><br><span class="line"></span><br><span class="line">        //动态获取虚拟目录</span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line">        //简单的重定向方法</span><br><span class="line">        response.sendRedirect(contextPath+"/responseDemo2");</span><br><span class="line">        //response.sendRedirect("http://www.itcast.cn");</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>ResponseDemo2.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/responseDemo2")</span><br><span class="line">public class ResponseDemo2 extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        System.out.println("demo2222222........");</span><br><span class="line"></span><br><span class="line">        //演示，不能使用request对象来共享数据</span><br><span class="line">        Object msg = request.getAttribute("msg");</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>演示：</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/33pgFe.gif" alt="33pgFe.gif"></fancybox></p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul><li>重定向的特点：<code>redirect</code></li></ul><ol><li><p>地址栏发生变化</p></li><li><p>重定向可以访问其他站点(服务器)的资源</p></li><li><p><strong>重定向是两次请求</strong>。<strong>不能使用request对象来共享数据</strong></p></li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/33Cmgs.png" alt=""></fancybox></p><br><ul><li>转发的特点：<code>forward</code></li></ul><ol><li><p>转发地址栏路径不变</p></li><li><p>转发只能访问当前服务器下的资源</p></li><li><p><strong>转发是一次请求</strong>，<strong>可以使用request对象来共享数据</strong></p></li></ol><br><ul><li>forward 和 redirect 区别</li></ul><h2 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h2><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ul><li>相对路径</li><li>绝对路径</li></ul><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><ul><li>通过相对路径不可以确定唯一资源</li><li>如：<code>./index.html</code></li><li>不以<code>/</code>开头，以<code>.</code>开头路径</li></ul><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><ul><li>找到<strong>当前</strong>资源和<strong>目标</strong>资源之间的<strong>相对位置</strong>关系</li><li><code>./</code>：当前目录</li><li><code>../</code>：后退一级目录</li></ul><h4 id="绝对路径-JSP时推荐使用"><a href="#绝对路径-JSP时推荐使用" class="headerlink" title="绝对路径(JSP时推荐使用)"></a>绝对路径(JSP时推荐使用)</h4><ul><li>通过绝对路径可以确定唯一资源</li><li>如：<code>http://localhost/day15/responseDemo2</code>   中   <code>/day15/responseDemo2</code></li><li>以<code>/</code>开头的路径</li><li><strong>JSP时推荐使用</strong></li></ul><h5 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h5><ul><li>判断定义的路径是<strong>给谁用</strong>的？判断请求将来<strong>从哪儿发出</strong></li></ul><ol><li>给客户端浏览器使用：<strong>需要加虚拟目录(项目的访问路径)</strong></li></ol><ul><li>建议<strong>动态获取虚拟目录</strong>：<code>request.getContextPath()</code></li><li><strong>重定向是客户端浏览器进行的</strong></li><li><code>&lt;a&gt;</code>、 <code>&lt;form&gt;</code>等要重定向…</li></ul><ol start="2"><li>给服务器使用：<strong>不需要加虚拟目录</strong></li></ol><ul><li>比如：<strong>转发</strong>时的路径<code>request.getRequestDispatcher("/responseDemo2").forward(request,response);</code></li></ul><h1 id="案例2：服务器输出字符数据到浏览器"><a href="#案例2：服务器输出字符数据到浏览器" class="headerlink" title="案例2：服务器输出字符数据到浏览器"></a>案例2：服务器输出字符数据到浏览器</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>获取字符输出流</p></li><li><p>输出数据</p></li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol><li>ResponseDemo4.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">@WebServlet("/responseDemo4")</span><br><span class="line">public class ResponseDemo4 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        //获取流对象之前，设置流的默认编码：ISO-8859-1 设置为：GBK</span><br><span class="line">        // response.setCharacterEncoding("utf-8");</span><br><span class="line"></span><br><span class="line">        //告诉浏览器，服务器发送的消息体数据的编码。建议浏览器使用该编码解码</span><br><span class="line">        //response.setHeader("content-type","text/html;charset=utf-8");</span><br><span class="line"></span><br><span class="line">        //简单的形式，设置编码</span><br><span class="line">        response.setContentType("text/html;charset=utf-8");</span><br><span class="line"></span><br><span class="line">        //1.获取字符输出流</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        //2.输出数据</span><br><span class="line">        pw.write("&lt;h1&gt;hello response&lt;/h1&gt;");</span><br><span class="line">        pw.write("&lt;br&gt;你好啊啊啊 response");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>演示</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/33AyjJ.png" alt="33AyjJ.png"></fancybox></p><h2 id="注意乱码问题-编解码问题"><a href="#注意乱码问题-编解码问题" class="headerlink" title="注意乱码问题(编解码问题)"></a>注意乱码问题(编解码问题)</h2><ol><li><code>PrintWriter pw = response.getWriter();</code>获取的流的默认编码是<strong>ISO-8859-1</strong></li><li>设置该流的<strong>默认编码</strong></li><li>告诉<strong>浏览器响应体使用的编码</strong></li></ol><ul><li><strong>简单的形式</strong>，设置编码，是<strong>在获取流之前设置</strong>  <code>response.setContentType("text/html;charset=utf-8");</code></li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>上面ResponseDemo4.java文件中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//获取流对象之前，设置流的默认编码：ISO-8859-1 设置为：GBK</span><br><span class="line">// response.setCharacterEncoding("utf-8");</span><br><span class="line"></span><br><span class="line">//告诉浏览器，服务器发送的消息体数据的编码。建议浏览器使用该编码解码</span><br><span class="line">//response.setHeader("content-type","text/html;charset=utf-8");</span><br><span class="line"></span><br><span class="line">//简单的形式，设置编码</span><br><span class="line">response.setContentType("text/html;charset=utf-8");</span><br></pre></td></tr></tbody></table></figure><h1 id="案例3：服务器输出字节数据到浏览器"><a href="#案例3：服务器输出字节数据到浏览器" class="headerlink" title="案例3：服务器输出字节数据到浏览器"></a>案例3：服务器输出字节数据到浏览器</h1><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>获取字符输出流</p></li><li><p>输出数据</p></li></ol><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><ol><li>ResponseDemo5.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/responseDemo5")</span><br><span class="line">public class ResponseDemo5 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        response.setContentType("text/html;charset=utf-8");</span><br><span class="line"></span><br><span class="line">        //1.获取字节输出流</span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        //2.输出数据</span><br><span class="line">        sos.write("你好".getBytes("utf-8"));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>演示</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/33VhlD.png" alt="33VhlD.png"></fancybox></p><h1 id="案例4：验证码"><a href="#案例4：验证码" class="headerlink" title="案例4：验证码"></a>案例4：验证码</h1><ol><li><p>本质：图片</p></li><li><p>目的：<strong>防止恶意表单注册</strong></p></li></ol><h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h2><ol><li>创建一对象，在内存中代表一个图片（验证码图片对象）</li><li>美化图片</li><li>将图片输出到页面展示</li></ol><h2 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h2><ol><li>New一个CheckCode.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Classname CheckCode</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @Date 2020/2/23 下午 10:20</span><br><span class="line"> * @Created by jerry</span><br><span class="line"> */</span><br><span class="line">@WebServlet("/checkCodeServlet")</span><br><span class="line">public class CheckCode  extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest requeste, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        int width = 100;</span><br><span class="line">        int height = 50;</span><br><span class="line"></span><br><span class="line">        //1.创建一对象，在内存中代表一个图片（验证码图片对象）</span><br><span class="line">        BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        </span><br><span class="line">        //2. 美化图片</span><br><span class="line"></span><br><span class="line">        //3.将图片输出到页面展示</span><br><span class="line">        ImageIO.write(image, "jpg", response.getOutputStream());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>没有美化前</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/33uJPI.png" alt=""></fancybox></p><ol start="3"><li>美化图片</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 验证码</span><br><span class="line"> */</span><br><span class="line">@WebServlet("/checkCodeServlet")</span><br><span class="line">public class CheckCode  extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest requeste, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        int width = 100;</span><br><span class="line">        int height = 50;</span><br><span class="line"></span><br><span class="line">        //1.创建一对象，在内存中代表一个图片（验证码图片对象）</span><br><span class="line">        BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        //2. 美化图片</span><br><span class="line">        //2-1.填充背景色</span><br><span class="line">        Graphics g = image.getGraphics(); //画笔对象，可画/填充</span><br><span class="line">        g.setColor(Color.pink); //设置画笔颜色</span><br><span class="line">        g.fillRect(0,0,width,height);</span><br><span class="line">        //g.fill3DRect(0, 0, width, height, true);</span><br><span class="line">        //2-2.画边框</span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(0, 0, width-1, height-1);</span><br><span class="line">        //2-3.随机字符（全部）</span><br><span class="line">        String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789";</span><br><span class="line">        //生产随机角标</span><br><span class="line">        Random ran = new Random();</span><br><span class="line"></span><br><span class="line">        //2-3.写验证码</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) {</span><br><span class="line">            int index = ran.nextInt(str.length());</span><br><span class="line">            //获取字符</span><br><span class="line">            char ch = str.charAt(index); //随机字符</span><br><span class="line">            //写入字符</span><br><span class="line">            g.drawString(ch+"", width/5*i , height/2);</span><br><span class="line">        }</span><br><span class="line">        /*g.drawString("a", 20, 25);</span><br><span class="line">        g.drawString("2", 33, 15);</span><br><span class="line">        g.drawString("4", 72, 35);</span><br><span class="line">        g.drawString("g", 80, 20);*/</span><br><span class="line"></span><br><span class="line">        //2-4.画出干扰线</span><br><span class="line">        g.setColor(Color.green);</span><br><span class="line"></span><br><span class="line">        //随机生成坐标点</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) {</span><br><span class="line">            int x1 = ran.nextInt(width);</span><br><span class="line">            int x2 = ran.nextInt(width);</span><br><span class="line">            int y1 = ran.nextInt(height);</span><br><span class="line">            int y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1, y1, x2, y2);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        //3.将图片输出到页面展示</span><br><span class="line">        ImageIO.write(image, "jpg", response.getOutputStream());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>美化后</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/24/33th5T.png" alt="33th5T.png"></fancybox></p><ol start="5"><li>在页面中配合注册表单等使用验证码</li><li>点击超链接或图片后，直接加载随机验证码</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;验证码&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        /**分析：</span><br><span class="line">         *  点击超链接/图片，需要换一张</span><br><span class="line">         *  1.给超链接/图片绑定单击事件</span><br><span class="line">         *  2.重新设置图片的src属性值</span><br><span class="line">         */</span><br><span class="line">        window.onload = function () {</span><br><span class="line">            //1.获取图片对象</span><br><span class="line">            var img = document.getElementById("checkCode");</span><br><span class="line">            var a = document.getElementById("change");</span><br><span class="line"></span><br><span class="line">            //2.绑定单击事件</span><br><span class="line">            img.onclick = function () {</span><br><span class="line">                //获取时间戳</span><br><span class="line">                var date = new Date().getTime(); //毫秒值</span><br><span class="line">                //利用时间戳，浏览器访问就一定不会去访问缓存了。每一时刻的链接都是不一样的。</span><br><span class="line">                img.src = "/day15/checkCodeServlet?" + date;</span><br><span class="line">            }</span><br><span class="line">            a.onlick = function () {</span><br><span class="line">                var date = new Date().getTime();</span><br><span class="line">                a.href = "/day15/checkCodeServlet?" + date;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img id="checkCode" src="/day15/checkCodeServlet" /&gt;&lt;br&gt;</span><br><span class="line">    &lt;a id="change" href=""&gt;看不清，换一张？&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>演示</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/24/38avh6.gif" alt="38avh6.gif"></fancybox></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着前面两篇博文 &lt;a href=&quot;https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTTP：超文本传输协议》&lt;/a&gt; 、 &lt;a href=&quot;https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Request/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTTP请求信息数据 - Request》&lt;/a&gt; 的学习。&lt;/p&gt;
&lt;p&gt;现在记录关于 &lt;strong&gt;HTTP响应信息数据-Response&lt;/strong&gt; 的笔记。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;响应信息数据-格式&quot;&gt;&lt;a href=&quot;#响应信息数据-格式&quot; class=&quot;headerlink&quot; title=&quot;响应信息数据   格式&quot;&gt;&lt;/a&gt;响应信息数据   格式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Servlet&lt;/code&gt;类中&lt;code&gt;service()&lt;/code&gt;方法的参数&lt;code&gt;ServletResponse&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response在一次响应结束后，自动被销毁，其输出流也会自动被关闭。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;字符串数据，比如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Type: text/html;charset=UTF-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Content-Length: 101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Date: Wed, 06 Jun 2018 07:08:42 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;title&amp;gt;$Title$&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hello , response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>创建@Test测试Druid连接池时的问题</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/22/%E5%88%9B%E5%BB%BA@Test%E6%B5%8B%E8%AF%95Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/22/创建@Test测试Druid连接池时的问题/</id>
    <published>2020-02-22T12:55:12.000Z</published>
    <updated>2020-02-23T07:28:32.757Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习 <a href="https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/" target="_blank" rel="noopener">《HTTP案例学习：用户登录》</a> 时候遇到的一些问题</p><a id="more"></a><hr><p>IDEA run之后，控制台输出一堆问题：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">二月 23, 2020 1:30:34 下午 com.alibaba.druid.pool.DruidDataSource error</span><br><span class="line">严重: init datasource error</span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server.</span><br><span class="line"></span><br><span class="line">二月 23, 2020 1:30:34 下午 com.alibaba.druid.pool.DruidDataSource error</span><br><span class="line">严重: dataSource init error</span><br><span class="line"></span><br><span class="line">二月 23, 2020 1:30:34 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: {dataSource-1} inited</span><br></pre></td></tr></tbody></table></figure><p>我估计是<strong>MySQL版本的问题</strong>，因为从我开始学习MySQL来安装的是8.0，学习期间就遇到很多问题，不过都能逐一解决。</p><p>但是这次我果断<strong>直接降级到5.7</strong>。</p><p>不过，降级后还是被提示错误</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">二月 23, 2020 2:41:58 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: {dataSource-1} inited</span><br><span class="line">二月 23, 2020 2:41:58 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]</span><br><span class="line">二月 23, 2020 2:41:58 下午 org.springframework.jdbc.support.SQLErrorCodesFactory &lt;init&gt;</span><br><span class="line">信息: SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]</span><br><span class="line"></span><br><span class="line">......................................</span><br><span class="line"></span><br><span class="line">org.springframework.dao.EmptyResultDataAccessException: Incorrect result size: expected 1, actual 0</span><br><span class="line"></span><br><span class="line">at org.springframework.dao.support.DataAccessUtils.requiredSingleResult(DataAccessUtils.java:74)</span><br><span class="line">at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:777)</span><br><span class="line">at cn.itcast.Dao.UserDao.login(UserDao.java:25)</span><br><span class="line">at cn.itcast.test.UserDaoTest.testLogin(UserDaoTest.java:23)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)</span><br><span class="line">at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span><br><span class="line">at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span><br><span class="line">at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span><br><span class="line">at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:363)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class="line">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br></pre></td></tr></tbody></table></figure><p>分析了<code>信息: SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]</code>，</p><p>信息是提示<strong>sql语句错了</strong>。</p><p>仔细检查一下sql语句，单纯的去 cmd 中用自己的sql语句执行一下检查问题。</p><p>果然是sql语句的问题。</p><p>剩下的错误提示，是<strong>数据库的字段的问题</strong>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//正确</span><br><span class="line">loginuser.setUsername("superbaby");</span><br><span class="line">//错误，字段少了个y</span><br><span class="line">loginuser.setUsername("superbab");</span><br></pre></td></tr></tbody></table></figure><p>再次run，这次得到如期的结果。</p><p><img src="https://s2.ax1x.com/2020/02/23/31pw3n.png" alt="31pw3n.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习 &lt;a href=&quot;https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTTP案例学习：用户登录》&lt;/a&gt; 时候遇到的一些问题&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
      <category term="Druid" scheme="https://melodyjerry.github.io/blog/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>HTTP案例学习：用户登录&amp;验证码</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/22/HTTP%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95&amp;%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/22/HTTP案例学习：用户登录&amp;验证码/</id>
    <published>2020-02-22T12:44:12.000Z</published>
    <updated>2020-02-27T14:37:56.760Z</updated>
    
    <content type="html"><![CDATA[<p>本笔记包括两个案例，分别是<strong>用户登录、验证码</strong>。</p><a id="more"></a><hr><h1 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h1><p>接着 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP：超文本传输协议/" target="_blank" rel="noopener">《HTTP：超文本传输协议》</a> 、 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP请求信息数据-Request/" target="_blank" rel="noopener">《HTTP请求信息数据 - Request》</a> 的学习，<br>现在记录一份案例学习。</p><h1 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h1><ol><li>编写 login.html 登录页面，并且有 username &amp; password 两个输入框</li><li>使用 Druid 数据库连接池技术，操作 MySQL，day14数据库中user表</li><li>使用 JdbcTemplate 技术封装 JDBC</li><li>登录成功跳转到 SuccessServlet 展示：登录成功！用户名,欢迎您</li><li>登录失败跳转到 FailServlet 展示：登录失败，用户名或密码错误</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3QqfRU.png" alt=""></fancybox></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>创建项目，导入html页面，配置文件，jar包</p></li><li><p>创建数据库环境</p></li><li><p>创建包cn.itcast.domain,创建类User</p></li><li><p>创建包cn.itcast.util,编写工具类JDBCUtils</p></li><li><p>创建包cn.itcast.dao,创建类UserDao,提供login方法</p></li><li><p>编写cn.itcast.web.servlet.LoginServlet类</p></li><li><p>编写FailServlet和SuccessServlet类</p></li><li><p>BeanUtils工具类，简化数据封装</p></li></ol><h3 id="一、创建项目，导入html页面，配置文件，jar包"><a href="#一、创建项目，导入html页面，配置文件，jar包" class="headerlink" title="一、创建项目，导入html页面，配置文件，jar包"></a>一、创建项目，导入html页面，配置文件，jar包</h3><ol><li>新建Module</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/3lYpTS.png" alt=""></fancybox></p><ol start="2"><li>web文件夹下创建login.html</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action="/day14_test/loginServlet" method="post"&gt;</span><br><span class="line">    用户名:&lt;input type="text" name="username"&gt; &lt;br&gt;</span><br><span class="line">    密码:&lt;input type="password" name="password"&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type="submit" value="登录"&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>这里的login.html中<strong>form表单的action路径的写法：<code>虚拟目录+Servlet的资源路径</code></strong>是<br><font color="red" size="5">虚拟目录+Servlet的资源路径</font></p><blockquote><p>关于 <a href="https://melodyjerry.gitee.io/blog/2020/02/23/html%E4%B8%ADform%E8%A1%A8%E5%8D%95%E7%9A%84action%E8%B7%AF%E5%BE%84%E7%9A%84%E5%86%99%E6%B3%95/" target="_blank" rel="noopener">《html中form表单的action路径的写法》</a></p></blockquote><ol start="3"><li>将Druid配置文件druid.properties导入到src文件下</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:///day14</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=5</span><br><span class="line">maxActive=10</span><br><span class="line">maxWait=3000</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>导入jar包到Web的WEB-INF文件中</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/3ltlE8.png" alt=""></fancybox></p><p>在项目的web文件夹下创建文件夹WEB-INF，将lib文件夹粘贴进去</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/3ltHxA.png" alt=""></fancybox></p><p>并把jar包加入到工作空间里</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/3lBj6e.gif" alt=""></fancybox></p><h3 id="二、创建数据库环境"><a href="#二、创建数据库环境" class="headerlink" title="二、创建数据库环境"></a>二、创建数据库环境</h3><ol><li>打开Navicat，创建数据库和数据表</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASEday14;</span><br><span class="line">USE day14;</span><br><span class="line"></span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(32) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(32) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/3lUYmq.png" alt=""></fancybox></p><ol start="2"><li>插入一条记录</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/3lU6n1.png" alt=""></fancybox></p><h3 id="三、创建包cn-itcast-domain-创建类User"><a href="#三、创建包cn-itcast-domain-创建类User" class="headerlink" title="三、创建包cn.itcast.domain,创建类User"></a>三、创建包cn.itcast.domain,创建类User</h3><ol><li><p>右键项目的src文件，New一个包cn.itcast.domain</p></li><li><p>在包下，New一个User.java</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.domain;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用户的实体类</span><br><span class="line"> */</span><br><span class="line">public class User {</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public int getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setId(int id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getUsername() {</span><br><span class="line">        return username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) {</span><br><span class="line">        this.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getPassword() {</span><br><span class="line">        return password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) {</span><br><span class="line">        this.password = password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "User{" +</span><br><span class="line">                "id=" + id +</span><br><span class="line">                ", username='" + username + '\'' +</span><br><span class="line">                ", password='" + password + '\'' +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="四、创建包cn-itcast-util-编写工具类JDBCUtils"><a href="#四、创建包cn-itcast-util-编写工具类JDBCUtils" class="headerlink" title="四、创建包cn.itcast.util,编写工具类JDBCUtils"></a>四、创建包cn.itcast.util,编写工具类JDBCUtils</h3><ol><li><p>New一个包cn.itcast.util</p></li><li><p>New一个JDBCUtils.java</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.util;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line">import javax.sql.ConnectionEvent;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * JDBC的工具类 使用Durid连接池</span><br><span class="line"> */</span><br><span class="line">public class JDBCUtils {</span><br><span class="line"></span><br><span class="line">    private static DataSource ds;</span><br><span class="line"></span><br><span class="line">    static {</span><br><span class="line"></span><br><span class="line">        try {</span><br><span class="line">            //1.加载配置文件</span><br><span class="line">            Properties pro = new Properties();</span><br><span class="line">            //使用ClassLoader加载配置文件，获取字节输入流</span><br><span class="line">            InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            pro.load(is);</span><br><span class="line"></span><br><span class="line">            //2.初始化连接池对象</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        } catch (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } catch (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取连接池对象</span><br><span class="line">     */</span><br><span class="line">    public static DataSource getDataSource(){</span><br><span class="line">        return ds;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取连接池Connection对象</span><br><span class="line">     */</span><br><span class="line">    public static Connection getConnection() throws SQLException {</span><br><span class="line">        return ds.getConnection();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="五、创建包cn-itcast-dao-创建类UserDao-提供login方法"><a href="#五、创建包cn-itcast-dao-创建类UserDao-提供login方法" class="headerlink" title="五、创建包cn.itcast.dao,创建类UserDao,提供login方法"></a>五、创建包cn.itcast.dao,创建类UserDao,提供login方法</h3><ol><li>New一个包cn.itcast.dao</li><li>New一个UserDao.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.Dao;</span><br><span class="line"></span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import cn.itcast.util.JDBCUtils;</span><br><span class="line">import com.alibaba.druid.util.JdbcUtils;</span><br><span class="line">import org.springframework.dao.DataAccessException;</span><br><span class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 操作数据库中User表的类</span><br><span class="line"> */</span><br><span class="line">public class UserDao {</span><br><span class="line"></span><br><span class="line">    // 声明JDBCTemplate对象公用</span><br><span class="line">    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    /**</span><br><span class="line">     * 登录方法</span><br><span class="line">     * @param loginUser 只有用户名和密码</span><br><span class="line">     * @return User包含用户全部数据；没有查询到，返回null</span><br><span class="line">     */</span><br><span class="line">    public User login(User loginUser) {</span><br><span class="line">        try {</span><br><span class="line">            //1.编写SQL</span><br><span class="line">            String sql = "select * from user where username = ? and password = ?";</span><br><span class="line">            //2.调用query方法</span><br><span class="line">            User user = template.queryForObject(sql,</span><br><span class="line">                    new BeanPropertyRowMapper&lt;User&gt;(User.class),</span><br><span class="line">                    loginUser.getUsername(), loginUser.getPassword());</span><br><span class="line">            return user;</span><br><span class="line">        } catch (DataAccessException e) {</span><br><span class="line">            e.printStackTrace(); // 记录日志，后期写入文件里，不会总在控制台打印</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>测试一下UserDao</li><li>New一个包cn.itcast.test，New一个UserDaoTest.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.test;</span><br><span class="line"></span><br><span class="line">import cn.itcast.Dao.UserDao;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Classname UserDaoTest</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @Date 2020/2/23 下午 1:00</span><br><span class="line"> * @Created by jerry</span><br><span class="line"> */</span><br><span class="line">public class UserDaoTest {</span><br><span class="line">    @Test</span><br><span class="line">    public void testLogin(){</span><br><span class="line"></span><br><span class="line">        User loginuser = new User();</span><br><span class="line">        loginuser.setUsername("superbaby");</span><br><span class="line">        loginuser.setPassword("123");</span><br><span class="line"></span><br><span class="line">        UserDao dao = new UserDao();</span><br><span class="line">        User user = dao.login(loginuser);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>run后，控制台输出</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31pw3n.png" alt=""></fancybox></p><ol start="6"><li>这个@Test部分，遇到了一些问题，就顺便记录在<a href="https://melodyjerry.gitee.io/blog/2020/02/22/%E5%88%9B%E5%BB%BA@Test%E6%B5%8B%E8%AF%95Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">《创建@Test测试Druid连接池时的问题》</a> 里面。</li></ol><h3 id="六、编写cn-itcast-web-servlet-LoginServlet类"><a href="#六、编写cn-itcast-web-servlet-LoginServlet类" class="headerlink" title="六、编写cn.itcast.web.servlet.LoginServlet类"></a>六、编写cn.itcast.web.servlet.LoginServlet类</h3><ol><li>New一个包cn.itcast.web.servlet</li><li>New一个LoginServlet.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import cn.itcast.Dao.UserDao;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import cn.itcast.test.UserDaoTest;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/loginServlet")</span><br><span class="line">public class LoginServlet extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span><br><span class="line">        //1.设置编码</span><br><span class="line">        req.setCharacterEncoding("utf-8");</span><br><span class="line">        //2.获取请求参数</span><br><span class="line">        String username = req.getParameter("username");</span><br><span class="line">        String password = req.getParameter("password");</span><br><span class="line">        //3.封装user对象</span><br><span class="line">        User loginUser = new User();</span><br><span class="line">        loginUser.setUsername("username");</span><br><span class="line">        loginUser.setPassword("password");</span><br><span class="line"></span><br><span class="line">        //4.调用UserDao的login方法</span><br><span class="line">        UserDao dao = new UserDao();</span><br><span class="line">        User user = dao.login(loginUser); //真正获取到的user</span><br><span class="line"></span><br><span class="line">        //5.判断user</span><br><span class="line">        if(user == null){</span><br><span class="line">            //登录失败</span><br><span class="line">            req.getRequestDispatcher("/failServlet").forward(req,resp); //转发</span><br><span class="line">        }else{</span><br><span class="line">            //登录成功</span><br><span class="line">            //存储数据</span><br><span class="line">            req.setAttribute("user",user);</span><br><span class="line">            //转发</span><br><span class="line">            req.getRequestDispatcher("/successServlet").forward(req,resp);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span><br><span class="line">        this.doGet(req,resp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="七、编写FailServlet和SuccessServlet类"><a href="#七、编写FailServlet和SuccessServlet类" class="headerlink" title="七、编写FailServlet和SuccessServlet类"></a>七、编写FailServlet和SuccessServlet类</h3><ol><li>New一个FailServlet.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Classname failServlet</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @Date 2020/2/23 下午 3:38</span><br><span class="line"> * @Created by jerry</span><br><span class="line"> */</span><br><span class="line">@WebServlet("/failServlet")</span><br><span class="line">public class FailServlet extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //给页面写一句话</span><br><span class="line"></span><br><span class="line">        //设置页面编码</span><br><span class="line">        response.setContentType("text/html;charset=utf-8");</span><br><span class="line">        //输出</span><br><span class="line">        response.getWriter().write("登录失败，用户名或密码错误");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>New一个SuccessServlet.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Classname successServlet</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @Date 2020/2/23 下午 3:38</span><br><span class="line"> * @Created by jerry</span><br><span class="line"> */</span><br><span class="line">@WebServlet("/successServlet")</span><br><span class="line">public class SuccessServlet extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //获取request域中共享的user对象</span><br><span class="line">        User user = (User) request.getAttribute("user");</span><br><span class="line"></span><br><span class="line">        if(user != null){</span><br><span class="line">            //给页面写一句话</span><br><span class="line"></span><br><span class="line">            //设置页面编码</span><br><span class="line">            response.setContentType("text/html;charset=utf-8");</span><br><span class="line">            //输出</span><br><span class="line">            response.getWriter().write("登录失败，用户名或密码错误");</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="八、测试"><a href="#八、测试" class="headerlink" title="八、测试"></a>八、测试</h3><p>浏览器访问：<a href="http://localhost/day14_test/login.html" target="_blank" rel="noopener">http://localhost/day14_test/login.html</a></p><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31nQII.gif" alt=""></fancybox></p><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31Kf8x.gif" alt=""></fancybox></p><h3 id="九、BeanUtils工具类，简化数据封装"><a href="#九、BeanUtils工具类，简化数据封装" class="headerlink" title="九、BeanUtils工具类，简化数据封装"></a>九、BeanUtils工具类，简化数据封装</h3><ul><li>在LoginServlet.java中使用BeanUtils工具类</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">import cn.itcast.Dao.UserDao;</span><br><span class="line">import cn.itcast.domain.User;</span><br><span class="line">import cn.itcast.test.UserDaoTest;</span><br><span class="line">import org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@WebServlet("/loginServlet")</span><br><span class="line">public class LoginServlet extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span><br><span class="line">        //1.设置编码</span><br><span class="line">        req.setCharacterEncoding("utf-8");</span><br><span class="line">        /*//2.获取请求参数</span><br><span class="line">        String username = req.getParameter("username");</span><br><span class="line">        String password = req.getParameter("password");</span><br><span class="line">        //3.封装user对象</span><br><span class="line">        User loginUser = new User();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(password);*/</span><br><span class="line"></span><br><span class="line">        //2.获取所有请求参数</span><br><span class="line">        Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line">        //3.创建User对象</span><br><span class="line">        User loginUser = new User();</span><br><span class="line">        //3-2.使用BeanUtils封装</span><br><span class="line">        try {</span><br><span class="line">            BeanUtils.populate(loginUser,map);</span><br><span class="line">        } catch (IllegalAccessException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } catch (InvocationTargetException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        //4.调用UserDao的login方法</span><br><span class="line">        UserDao dao = new UserDao();</span><br><span class="line">        User user = dao.login(loginUser); //真正获取到的user</span><br><span class="line"></span><br><span class="line">        //5.判断user</span><br><span class="line">        if(user == null){</span><br><span class="line">            //登录失败</span><br><span class="line">            req.getRequestDispatcher("/failServlet").forward(req,resp); //转发</span><br><span class="line">        }else{</span><br><span class="line">            //登录成功</span><br><span class="line">            //存储数据</span><br><span class="line">            req.setAttribute("user",user);</span><br><span class="line">            //转发</span><br><span class="line">            req.getRequestDispatcher("/successServlet").forward(req,resp);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span><br><span class="line">        this.doGet(req,resp);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>关于BeanUtils的更多使用，看下一篇笔记<a href="https://melodyjerry.gitee.io/blog/2020/02/23/BeanUtils%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">《BeanUtils的基本使用》</a> 。</li></ul><hr><p>与本笔记相关的<a href="https://blog.csdn.net/java__wq/article/details/102922594" target="_blank" rel="noopener">资源</a>：</p><p>链接: <a href="https://pan.baidu.com/s/1pV1ArOotLcoH9mKYABEm5g" target="_blank" rel="noopener">https://pan.baidu.com/s/1pV1ArOotLcoH9mKYABEm5g</a> 提取码: w9h8</p><hr><h1 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h1><p>接着 <a href="">《JSP&amp;Cookie&amp;Session技术》</a> 的学习，<br></p><p>现在记录一份案例的学习。</p><h1 id="用户需求-1"><a href="#用户需求-1" class="headerlink" title="用户需求"></a>用户需求</h1><ol><li><p>访问带有验证码的登录页面login.jsp</p></li><li><p>用户输入用户名，密码以及验证码，</p><ul><li><p>如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</p></li><li><p>如果验证码输入有误，跳转登录页面，提示：验证码错误</p></li><li><p>如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</p></li></ul></li></ol><h1 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h1><ol><li><p>设置request编码</p></li><li><p>获取参数</p></li><li><p>获取生成的验证码</p></li><li><p>将用户信息封装到User对象</p></li><li><p>判断程序生成的验证码和用户输入的验证码是否一致。从session中获取程序生成的验证码</p></li><li><p>一致：再判断用户名和密码是否正确</p><ul><li>正确：<ul><li>1.登陆成功</li><li>2.存储数据到session中</li><li>3.跳转（重定向）到success.jsp </li></ul></li><li>不正确：<ul><li>1.给提示信息：用户名或密码错误</li><li>2.跳转（转发）到登录页面</li></ul></li></ul></li><li><p>不一致：</p><ul><li>1.给用户提示信息：验证码错误</li><li>2.存储提示信息到request</li><li>3.跳转（转发）到登录页面</li></ul></li><li><p>login.jsp显示错误信息，从request域中获取</p></li></ol><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h3 id="CheckCodeServlet-java"><a href="#CheckCodeServlet-java" class="headerlink" title="CheckCodeServlet.java"></a>CheckCodeServlet.java</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.servlet;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">@WebServlet("/checkCodeServlet")</span><br><span class="line">public class CheckCodeServlet extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int width = 100;</span><br><span class="line">        int height = 50;</span><br><span class="line"></span><br><span class="line">        //1.创建一对象，在内存中图片(验证码图片对象)</span><br><span class="line">        BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //2.美化图片</span><br><span class="line">        //2.1 填充背景色</span><br><span class="line">        Graphics g = image.getGraphics();//画笔对象</span><br><span class="line">        g.setColor(Color.PINK);//设置画笔颜色</span><br><span class="line">        g.fillRect(0,0,width,height);</span><br><span class="line"></span><br><span class="line">        //2.2画边框</span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(0,0,width - 1,height - 1);</span><br><span class="line"></span><br><span class="line">        String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789";</span><br><span class="line">        //生成随机角标</span><br><span class="line">        Random ran = new Random();</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for (int i = 1; i &lt;= 4; i++) {</span><br><span class="line">            int index = ran.nextInt(str.length());</span><br><span class="line">            //获取字符</span><br><span class="line">            char ch = str.charAt(index);//随机字符</span><br><span class="line">            sb.append(ch);</span><br><span class="line"></span><br><span class="line">            //2.3写验证码</span><br><span class="line">            g.drawString(ch+"",width/5*i,height/2);</span><br><span class="line">        }</span><br><span class="line">        String checkCode_session = sb.toString();</span><br><span class="line">        //将验证码存入session</span><br><span class="line">        request.getSession().setAttribute("checkCode_session",checkCode_session);</span><br><span class="line"></span><br><span class="line">        //2.4画干扰线</span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        //随机生成坐标点</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 10; i++) {</span><br><span class="line">            int x1 = ran.nextInt(width);</span><br><span class="line">            int x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            int y1 = ran.nextInt(height);</span><br><span class="line">            int y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //3.将图片输出到页面展示</span><br><span class="line">        ImageIO.write(image,"jpg",response.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--点击刷新验证码--&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function(){</span><br><span class="line">            document.getElementById("img").onclick = function(){</span><br><span class="line">                this.src="/day16/checkCodeServlet?time="+new Date().getTime();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div{</span><br><span class="line">            color: red;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action="/day16/loginServlet" method="post"&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="text" name="username"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="password" name="password"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;验证码&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="text" name="checkCode"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan="2"&gt;&lt;img id="img" src="/day16/checkCodeServlet"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan="2"&gt;&lt;input type="submit" value="登录"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;&lt;%=request.getAttribute("cc_error") == null ? "" : request.getAttribute("cc_error")%&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;%=request.getAttribute("login_error") == null ? "" : request.getAttribute("login_error") %&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 等同于 EL表达式。有信息就打印输出，没有就显示空字符串。</span><br><span class="line">    ${requestScope.cc_error}</span><br><span class="line">    ${requestScope.login.error}</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="LoginServlet-java"><a href="#LoginServlet-java" class="headerlink" title="LoginServlet.java"></a>LoginServlet.java</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/loginServlet")</span><br><span class="line">public class LoginServlet extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //1.设置request编码</span><br><span class="line">        request.setCharacterEncoding("utf-8");</span><br><span class="line">        //2.获取参数</span><br><span class="line">        String username = request.getParameter("username");</span><br><span class="line">        String password = request.getParameter("password");</span><br><span class="line">        String checkCode = request.getParameter("checkCode");</span><br><span class="line">        //3.先获取生成的验证码</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String checkCode_session = (String) session.getAttribute("checkCode_session");</span><br><span class="line">        //删除session中存储的验证码</span><br><span class="line">        session.removeAttribute("checkCode_session");</span><br><span class="line">        //3.先判断验证码是否正确</span><br><span class="line">        if(checkCode_session!= null &amp;&amp; checkCode_session.equalsIgnoreCase(checkCode)){</span><br><span class="line">            //忽略大小写比较</span><br><span class="line">            //验证码正确</span><br><span class="line">            //判断用户名和密码是否一致</span><br><span class="line">            if("zhangsan".equals(username) &amp;&amp; "123".equals(password)){//需要调用UserDao查询数据库</span><br><span class="line">                //登录成功</span><br><span class="line">                //存储信息，用户信息</span><br><span class="line">                session.setAttribute("user",username);</span><br><span class="line">                //重定向到success.jsp</span><br><span class="line">                response.sendRedirect(request.getContextPath()+"/success.jsp");</span><br><span class="line">            }else{</span><br><span class="line">                //登录失败</span><br><span class="line">                //存储提示信息到request</span><br><span class="line">                request.setAttribute("login_error","用户名或密码错误");</span><br><span class="line">                //转发到登录页面</span><br><span class="line">                request.getRequestDispatcher("/login.jsp").forward(request,response);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }else{</span><br><span class="line">            //验证码不一致</span><br><span class="line">            //存储提示信息到request</span><br><span class="line">            request.setAttribute("cc_error","验证码错误");</span><br><span class="line">            //转发到登录页面</span><br><span class="line">            request.getRequestDispatcher("/login.jsp").forward(request,response);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        this.doPost(request, response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="success-jsp"><a href="#success-jsp" class="headerlink" title="success.jsp"></a>success.jsp</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&lt;%=request.getSession().getAttribute("user")%&gt;,欢迎您&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><fancybox><img src="https://s2.ax1x.com/2020/02/27/3aItBT.png" alt=""></fancybox></p><p><fancybox><img src="https://s2.ax1x.com/2020/02/27/3aIIgI.gif" alt=""></fancybox></p><h1 id="视频详解"><a href="#视频详解" class="headerlink" title="视频详解"></a>视频详解</h1><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="http://player.bilibili.com/player.html?aid=70420291&amp;cid=122006457&amp;page=189" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本笔记包括两个案例，分别是&lt;strong&gt;用户登录、验证码&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>2020.2.22随笔</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/22/2020.2.22%E9%9A%8F%E7%AC%94/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/22/2020.2.22随笔/</id>
    <published>2020-02-22T09:36:53.000Z</published>
    <updated>2020-02-29T12:24:24.909Z</updated>
    
    <content type="html"><![CDATA[<center><div style="position:relative;width:400px;  height:400px; overflow:auto"><img src="https://s2.ax1x.com/2020/02/23/31ttyR.png"></div></center><center>好久好久，没能有人和我聊着久，聊的这么嗨了。<br>就当做这两天的随笔吧。晚安🌙        <br>——2020.2.22</center><center><img src="https://s2.ax1x.com/2020/02/23/316ZSx.png"></center><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;div style=&quot;position:relative;width:400px;  height:400px; overflow:auto&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/23/31ttyR.png&quot;&gt;&lt;/div&gt;&lt;/center&gt;
&lt;center&gt;好久好久，没能有人和我聊着久，聊的这么嗨了。&lt;br&gt;就当做这两天的随笔吧。晚安🌙        &lt;br&gt;——2020.2.22&lt;/center&gt;
&lt;center&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/23/316ZSx.png&quot;&gt;&lt;/center&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://melodyjerry.github.io/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求信息数据-Request</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/21/HTTP%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Request/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/21/HTTP请求信息数据-Request/</id>
    <published>2020-02-21T12:25:00.000Z</published>
    <updated>2020-02-22T12:22:45.504Z</updated>
    
    <content type="html"><![CDATA[<p>接着上篇博文 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">《HTTP：超文本传输协议》</a> 的学习。</p><p>现在，来学习两个对象：Request &amp; Response。</p><h1 id="request对象和response对象的原理"><a href="#request对象和response对象的原理" class="headerlink" title="request对象和response对象的原理"></a>request对象和response对象的原理</h1><ol><li><strong>request和response对象是由服务器创建的</strong>。接着我们来使用它们</li><li><strong>request对象是来获取请求消息，response对象是来设置响应消息</strong></li><li>其基本原理，如下图👇</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3KFYo4.png" alt="Request&amp;Response对象基本原理"></fancybox></p><h1 id="request对象继承体系结构"><a href="#request对象继承体系结构" class="headerlink" title="request对象继承体系结构"></a>request对象继承体系结构</h1><p><strong><code>ServletRequest</code></strong> – interface，接口</p><p>↓|<em>继承</em></p><p><strong><code>HttpServletRequest</code></strong> – interface，接口</p><p>↓|<em>实现</em></p><p><strong><code>org.apache.catalina.connector.RequestFacade</code></strong> – 类，<strong>Tomcat编写的</strong></p><blockquote><p>Tomcat 是用<strong>纯Java语言编写</strong>的</p></blockquote><h1 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h1><ol><li>基础功能<ul><li>获取请求消息数据</li></ul></li><li>其他功能：<ul><li>1.获取请求参数通用方式</li><li>2.请求转发</li><li>3.共享数据</li><li>4.获取ServletContext</li></ul></li></ol><h2 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h2><ol><li>获取请求行数据</li><li>获取请求头数据</li><li>获取请求体数据</li></ol><a id="more"></a><ol start="4"><li>获取请求消息数据的字符串格式 👇</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /login.htmlHTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost/login.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">username=zhangsan</span><br></pre></td></tr></tbody></table></figure><h3 id="一-获取请求行数据"><a href="#一-获取请求行数据" class="headerlink" title="一.获取请求行数据"></a>一.获取请求行数据</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  /day14/demo1?name=zhangsan  HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><p>调用方法（★★重点掌握）：</p><ol><li>获取请求方式：GET</li></ol><ul><li><code>String getMethod()</code></li></ul><ol start="2"><li>★★获取虚拟目录：/day14</li></ol><ul><li><code>String getContextPath()</code></li></ul><ol start="3"><li>获取Servlet路径：/demo1</li></ol><ul><li><code>String getServletPath()</code></li></ul><ol start="4"><li>获取get方式请求参数：name=zhangsan</li></ol><ul><li><code>String getQueryString()</code></li><li>不用这个，以后会用<strong>更高级的方式</strong></li><li>多个参数之间用<code>&amp;</code>连接</li></ul><ol start="5"><li>★★获取请求URI：/day14/demo1</li></ol><ul><li><p><code>String getRequestURI()</code>：/day14/demo1</p></li><li><p><code>StringBuffer getRequestURL()</code>：<a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a></p></li><li><blockquote><ul><li><p><font color="red">URL：统一资源定位符</font> ： <a href="http://localhost/day14/demo1" target="_blank" rel="noopener">http://localhost/day14/demo1</a>      其地位相当于”中华人民共和国”</p></li><li><p><font color="red">URI：统一资源标识符，其表示范围更大</font> ：/day14/demo1          其地位相当于”共和国”</p></li></ul></blockquote></li></ul><ol start="6"><li>获取协议及版本：HTTP/1.1</li></ol><ul><li><p><code>String getProtocol()</code></p></li><li><blockquote><p>该方法在<code>Interface ServletRequest</code>中</p></blockquote></li></ul><ol start="7"><li>获取客户机的IP地址：</li></ol><ul><li><p><code>String getRemoteAddr()</code></p></li><li><blockquote><p>该方法在<code>Interface ServletRequest</code>中</p></blockquote></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>新建RequestDemo1.java，输入代码👇</p><blockquote><p> 可以在新建时候选择创建Servlet，IDEA自动生成相应模板。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 演示Request对象获取请求行数据</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo1")</span><br><span class="line">public class RequestDemo1 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        /*</span><br><span class="line">            1. 获取请求方式 ：GET</span><br><span class="line">                * String getMethod()</span><br><span class="line">            2. (*)获取虚拟目录：/Servlet</span><br><span class="line">                * String getContextPath()</span><br><span class="line">            3. 获取Servlet路径: /requestDemo1</span><br><span class="line">                * String getServletPath()</span><br><span class="line">            4. 获取get方式请求参数：name=zhangsan</span><br><span class="line">                * String getQueryString()</span><br><span class="line">            5. (*)获取请求URI：/Servlet/requestDemo1</span><br><span class="line">                * String getRequestURI():/day14/requestDemo1</span><br><span class="line">                * StringBuffer getRequestURL()  :http://localhost/Servlet/requestDemo1</span><br><span class="line">            6. 获取协议及版本：HTTP/1.1</span><br><span class="line">                * String getProtocol()</span><br><span class="line"></span><br><span class="line">            7. 获取客户机的IP地址：</span><br><span class="line">                * String getRemoteAddr()</span><br><span class="line"></span><br><span class="line">         */</span><br><span class="line">        //1. 获取请求方式 ：GET</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        //2.(*)获取虚拟目录：/day14</span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        System.out.println(contextPath);</span><br><span class="line">        //3. 获取Servlet路径: /demo1</span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line">        System.out.println(servletPath);</span><br><span class="line">        //4. 获取get方式请求参数：name=zhangsan</span><br><span class="line">        String queryString = request.getQueryString();</span><br><span class="line">        System.out.println(queryString);</span><br><span class="line">        //5.(*)获取请求URI：/day14/demo1</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        StringBuffer requestURL = request.getRequestURL();</span><br><span class="line">        System.out.println(requestURI);</span><br><span class="line">        System.out.println(requestURL);</span><br><span class="line">        //6. 获取协议及版本：HTTP/1.1</span><br><span class="line">        String protocol = request.getProtocol();</span><br><span class="line">        System.out.println(protocol);</span><br><span class="line">        //7. 获取客户机的IP地址：</span><br><span class="line">        String remoteAddr = request.getRemoteAddr();</span><br><span class="line">        System.out.println(remoteAddr);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>演示👇</p><p>浏览器访问：<a href="http://localhost/Servlet/RequestDemo1?name=zhangsan" target="_blank" rel="noopener">http://localhost/Servlet/RequestDemo1?name=zhangsan</a></p><p>IDEA控制台输出：</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3Kuh1e.png" alt=""></fancybox></p><h3 id="二-获取请求头数据"><a href="#二-获取请求头数据" class="headerlink" title="二.获取请求头数据"></a>二.获取请求头数据</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost/login.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></tbody></table></figure><p>调用方法（★★重点掌握）：</p><ol><li>★★<code>String getHeader(String name)</code></li></ol><ul><li>通过请求头的名称获取请求头的值</li><li><strong>参数不分大小写，只要单词拼写的对即可</strong></li></ul><ol start="2"><li><code>Enumeration&lt;String&gt;  getHeaderNames()</code></li></ol><ul><li>获取所有的请求头名称</li><li>封装成 <code>Enumeration&lt;String&gt;</code></li></ul><blockquote><p>注意：从JDK1.0开始，该接口的功能由Iterator（迭代器）接口 <strong>复制</strong>。此外，Iterator还添加了一个可选的删除操作，并且有较短的方法名称。新的实现应该考虑使用迭代器优选于枚举。——JDK 8 文档</p></blockquote><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>一、调用<code>Enumeration&lt;String&gt;  getHeaderNames()</code>，演示获取<strong>所有</strong>请求头数据</p><ol><li>新建一个Servlet，名为RequestDemo2.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo2")</span><br><span class="line">public class RequestDemo2 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        // 演示获取请求头数据</span><br><span class="line"></span><br><span class="line">        // 1.获取所有请求头数据</span><br><span class="line">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">        // 2.遍历</span><br><span class="line">        while(headerNames.hasMoreElements()){</span><br><span class="line">            String name = headerNames.nextElement();</span><br><span class="line">            // 根据名称获取请求头的值</span><br><span class="line">            String value = request.getHeader(name);</span><br><span class="line">            System.out.println(name + "--" + value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>浏览器访问：<a href="http://localhost/Servlet/RequestDemo2" target="_blank" rel="noopener">http://localhost/Servlet/RequestDemo2</a></li><li>IDEA控制台输出：</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3MZuXn.png" alt=""></fancybox></p><p>二、调用<code>String getHeader(String name)</code>，user-agent、referer</p><ol><li>新建一个Servlet，名为RequestDemo3.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo3")</span><br><span class="line">public class RequestDemo3 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        // 演示获取请求头数据：user-agent(客户端版本)</span><br><span class="line">        </span><br><span class="line">        // 获取请求头数据：user-agent</span><br><span class="line">        String agent = request.getHeader("user-agent");</span><br><span class="line">        // 判断agent的浏览器版本，可以解决浏览器兼容问题</span><br><span class="line">        if(agent.contains("Chrome")) {</span><br><span class="line">            // 谷歌浏览器</span><br><span class="line">            System.out.println("谷歌来了。。。");</span><br><span class="line">        } else if (agent.contains("Firefox")) {</span><br><span class="line">            // 火狐浏览器</span><br><span class="line">            System.out.println("火狐来了。。。");</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>浏览器访问：<a href="http://localhost/Servlet/RequestDemo3" target="_blank" rel="noopener">http://localhost/Servlet/RequestDemo3</a></li><li>IDEA控制台输出：</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3MexsA.png" alt=""></fancybox></p><blockquote><p><strong>注意：</strong></p><p>获取请求头数据：user-agent(客户端版本)</p><p>判断agent的浏览器版本，可以<strong>解决浏览器兼容问题</strong></p></blockquote><ol start="4"><li>新建一个Servlet，名为RequestDemo4.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo4")</span><br><span class="line">public class RequestDemo4 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        // 演示请求头数据：referer</span><br><span class="line">        String referer = request.getHeader("referer");</span><br><span class="line">        System.out.println(referer); // http://localhost/Servlet/login.html</span><br><span class="line"></span><br><span class="line">        //防盗链</span><br><span class="line">        if(referer != null) {</span><br><span class="line">            if(referer.contains("/Servlet")) {</span><br><span class="line">                // 正常访问</span><br><span class="line">                System.out.println("播放电影。。。");</span><br><span class="line">                /* 等同于，只不过不再是输出到控制台，而是直接打印在页面上</span><br><span class="line">                response.setContentType("text/html;charset=utf-8");</span><br><span class="line">                response.getWriter.writer("播放电影。。。")</span><br><span class="line">                */</span><br><span class="line">            } else {</span><br><span class="line">                // 盗链</span><br><span class="line">                System.out.println("想看电影吗？来优酷吧。。。");</span><br><span class="line">                /* 等同于，只不过不再是输出到控制台，而是直接打印在页面上</span><br><span class="line">                response.setContentType("text/html;charset=utf-8");</span><br><span class="line">                response.getWriter.writer("想看电影吗？来优酷吧。。。")</span><br><span class="line">                */</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>新建一个html文件，名为login.html</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;表单&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action="/Servlet/Demo3" method="get"&gt;</span><br><span class="line">        &lt;input name="username"&gt;</span><br><span class="line">        &lt;input type="submit" value="提交"&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--加入超链接--&gt;</span><br><span class="line">    &lt;a href="http://localhost/Servlet/RequestDemo4"&gt;RequestDemo3&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>演示👉获取请求头数据：referer</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3MKFJK.gif" alt=""></fancybox></p><ol start="7"><li>关于<strong>获取referer来防盗链</strong>，观看 <a href="https://www.bilibili.com/video/av70420291?p=131" target="_blank" rel="noopener">视频（进度条【10:56】）</a> </li></ol><h3 id="三-获取请求体数据"><a href="#三-获取请求体数据" class="headerlink" title="三.获取请求体数据"></a>三.获取请求体数据</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=zhangsan</span><br></pre></td></tr></tbody></table></figure><ul><li><p>请求体：<font color="red">只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</font></p></li><li><p>步骤：</p><ol><li>获取流对象<ul><li>获取字符输入流：文字等字符数据</li><li>获取字节输入流：上传图片、文件等字节数据</li></ul></li><li>再从流对象中获取数据</li></ol></li></ul><p>调用方法：</p><ol><li><code>BufferedReader getReader()</code></li></ol><ul><li><p><strong>获取字符输入流</strong>，只能操作<strong>字符数据</strong></p></li><li><p>返回值是<strong>BufferedReader</strong>，<strong>高效的、带有缓冲区的</strong></p></li><li><blockquote><p>该方法在<code>Interface ServletRequest</code>中</p></blockquote></li></ul><ol start="2"><li><code>ServletInputStream getInputStream()</code></li></ol><ul><li><p><strong>获取字节输入流</strong>，可以操作<strong>所有类型数据</strong></p></li><li><p><strong>但是获取字符时不方便，更推荐用第一个调用方法</strong></p></li><li><p>返回值是<strong>ServletInputStream</strong>，<strong>继承了InputStream</strong>。</p></li><li><p>涉及到<strong>文件上传</strong>等知识</p></li><li><blockquote><p>该方法在<code>Interface ServletRequest</code>中</p></blockquote></li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ol><li>新建html文件，名为regist.html</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;注册页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action="/Servlet/RequestDemo5" method="post"&gt;</span><br><span class="line">        &lt;input type="text" placeholder="请输入用户名" name="username"&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type="text" placeholder="请输入密码" name="password"&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type="submit" value="注册"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>新建一个Servlet，名为RequestDemo5.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo5")</span><br><span class="line">public class RequestDemo5 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //获取请求消息体--请求参数</span><br><span class="line"></span><br><span class="line">        //1.获取字符流</span><br><span class="line">        BufferedReader br = request.getReader();</span><br><span class="line">        //2.读取数据</span><br><span class="line">        String line = null;</span><br><span class="line">        while((line = br.readLine()) != null){</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        }</span><br><span class="line">        br.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>浏览器访问：<a href="http://localhost/Servlet/regist.html" target="_blank" rel="noopener">http://localhost/Servlet/regist.html</a></li><li>控制台输出：</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3M47vt.gif" alt=""></fancybox></p><p><font size="4">注意：</font><strong>多个参数之间用<code>&amp;</code>连接。</strong></p><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><ol><li><p>获取请求参数通用方式</p></li><li><p>请求转发</p></li><li><p>共享数据</p></li></ol><h3 id="一、获取请求参数通用方式"><a href="#一、获取请求参数通用方式" class="headerlink" title="一、获取请求参数通用方式"></a>一、获取请求参数通用方式</h3><ul><li><strong>不论GET还是POST请求方式都可以使用</strong>下列方法来获取请求参数</li><li>上述即，<code>doGet()</code> 和 <code>doPost()</code> 的方法体代码<strong>完全一样</strong></li><li>因此，<font color="red"><strong>为了简化</strong>，只需要选择在<code>doPost()</code> 的方法体中写代码，之后在<code>doGet()</code> 中<font size="6">调用</font> <strong><code>this.doPost(request,response);</code></strong></font></li></ul><p>调用方法：</p><ol><li><code>String getParameter(String name)</code></li></ol><ul><li><strong>根据参数名称获取参数值</strong>： username=zs&amp;password=123</li></ul><ol start="2"><li><code>String[] getParameterValues(String name)</code></li></ol><ul><li><strong>根据参数名称获取参数值的数组：</strong><font color="red">hobby</font>=<font color="blue">xuexi</font>&amp;<font color="red">hobby</font>=<font color="blue">game</font></li><li><strong>将键值对，按一个<font color="red">键</font>来封装<font color="blue">不同的值</font>并封装成一个<font color="green">数组</font></strong></li><li>多用于<strong>复选框</strong></li></ul><ol start="3"><li><code>Enumeration&lt;String&gt; getParameterNames()</code></li></ol><ul><li>获取<strong>所有请求的参数名称</strong></li></ul><ol start="4"><li><code>Map&lt;String,String[]&gt; getParameterMap()</code></li></ol><ul><li>获取<strong>所有参数的<font color="green">Map集合</font></strong></li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><ol><li>新建regist2.html</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;注册页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action="/Servlet/RequestDemo6" method="post"&gt;</span><br><span class="line">        &lt;input type="text" placeholder="请输入用户名" name="username"&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type="text" placeholder="请输入密码" name="password"&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type="checkbox" name="hobby" value="game"&gt;游戏</span><br><span class="line">        &lt;input type="checkbox" name="hobby" value="study"&gt;学习</span><br><span class="line">        &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type="submit" value="注册"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>新建RequestDemo6.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo6")</span><br><span class="line">public class RequestDemo6 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //post 获取请求参数</span><br><span class="line"></span><br><span class="line">        //根据参数名称获取参数值</span><br><span class="line">        String username = request.getParameter("username");</span><br><span class="line">       /* System.out.println("post");</span><br><span class="line">        System.out.println(username);*/</span><br><span class="line"></span><br><span class="line">       //根据参数名称获取参数值的数组</span><br><span class="line">        String[] hobbies = request.getParameterValues("hobby");</span><br><span class="line">        /*for (String hobby : hobbies) {</span><br><span class="line">            System.out.println(hobby);</span><br><span class="line">        }*/</span><br><span class="line"></span><br><span class="line">        //获取所有请求的参数名称</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">        /*while(parameterNames.hasMoreElements()){</span><br><span class="line">            String name = parameterNames.nextElement();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            String value = request.getParameter(name);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">            System.out.println("----------------");</span><br><span class="line">        }*/</span><br><span class="line"></span><br><span class="line">        // 获取所有参数的map集合</span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        //遍历</span><br><span class="line">        Set&lt;String&gt; keyset = parameterMap.keySet();</span><br><span class="line">        for (String name : keyset) {</span><br><span class="line">            </span><br><span class="line">            //获取键获取值</span><br><span class="line">            String[] values = parameterMap.get(name);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            for (String value : values) {</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            System.out.println("-----------------");</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        //get 获取请求参数</span><br><span class="line">/*</span><br><span class="line">        //根据参数名称获取参数值</span><br><span class="line">        String username = request.getParameter("username");</span><br><span class="line">        System.out.println("get");</span><br><span class="line">        System.out.println(username);*/</span><br><span class="line"></span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><p>浏览器访问：<a href="http://localhost/Servlet/regist2.html" target="_blank" rel="noopener">http://localhost/Servlet/regist2.html</a></p></li><li><p>控制台输出：</p></li></ol><p><fancybox><img src="https://i.loli.net/2020/02/22/PxLIrbjO5yZTJUQ.gif" alt=""></fancybox></p><h4 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h4><ol><li>GET方式：tomcat 8 已经将 GET方式乱码问题解决了</li><li>POST方式：会乱码</li></ol><ul><li>解决：<strong>在获取参数前，设置request的编码<code>request.setCharacterEncoding("utf-8");</code></strong> 。对应着html页面的编码。</li></ul><h3 id="二、请求转发"><a href="#二、请求转发" class="headerlink" title="二、请求转发"></a>二、请求转发</h3><ul><li>一种在服务器内部的资源跳转方式</li></ul><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3Qp110.png" alt=""></fancybox></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><p>浏览器地址栏路径<strong>不发生变化</strong></p></li><li><p><strong>只能转发到当前服务器内部资源中</strong></p></li><li><p>转发就是<strong>一次请求</strong>。像上图的AServlet和BServlet两种资源使用的是同一次请求。</p></li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>通过<strong>request对象</strong>获取<strong>请求转发器对象</strong></li></ol><ul><li><code>RequestDispatcher getRequestDispatcher(String path)</code></li></ul><ol start="2"><li>使用<strong>RequestDispatcher对象</strong>来进行转发</li></ol><ul><li><code>forward(ServletRequest request, ServletResponse response)</code></li></ul><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><ol><li>新建RequestDemo8.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.RequestDispatcher;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo8")</span><br><span class="line">public class RequestDemo8 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line">        System.out.println("Demo8888被访问了。。。");</span><br><span class="line">        //转发到Demo9资源</span><br><span class="line">        /*</span><br><span class="line">        RequestDispatcher requestDispatcher = request.getRequestDispatcher("/RequestDemo9");</span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">        // 一般不这么写，直接写成：</span><br><span class="line">        request.getRequestDispatcher("/RequestDemo9").forward(request,response);</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        //存储数据到request域中</span><br><span class="line">        request.setAttribute("msg","hello");</span><br><span class="line"></span><br><span class="line">        request.getRequestDispatcher("/RequestDemo9").forward(request,response);</span><br><span class="line">       //没法跳转到外部资源，比如下面这个是不行的</span><br><span class="line">//request.getRequestDispatcher("http://www.itcast.cn").forward(request,response);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>新建RequestDemo9.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo9")</span><br><span class="line">public class RequestDemo9 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        //获取数据</span><br><span class="line">        Object msg = request.getAttribute("msg");</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        System.out.println("Demo9999也被访问了。。。");</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>浏览器访问：<a href="http://localhost/Servlet/RequestDemo8" target="_blank" rel="noopener">http://localhost/Servlet/RequestDemo8</a></li><li>控制台输出：</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3QZ4oV.gif" alt=""></fancybox></p><h3 id="三、共享数据"><a href="#三、共享数据" class="headerlink" title="三、共享数据"></a>三、共享数据</h3><ul><li><strong>域对象</strong>：一个有作用范围的对象，可以在范围内共享数据</li><li><strong>request域</strong>：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li></ul><p>调用方法：</p><ol><li><code>void setAttribute(String name,Object obj)</code></li></ol><ul><li><strong>存储数据</strong></li></ul><ol start="2"><li><code>Object getAttitude(String n</code></li><li><code>ame)</code></li></ol><ul><li>通过<strong>键</strong><font color="red">获取</font><strong>值</strong></li></ul><ol start="3"><li><code>void removeAttribute(String name)</code></li></ol><ul><li>通过<strong>键</strong><font color="red">移除</font><strong>键值对</strong></li></ul><blockquote><p>👉<a href="https://www.bilibili.com/video/av70420291?p=137" target="_blank" rel="noopener">视频</a> 的【03:15】，详细说到 <strong>如何共享数据</strong>。</p></blockquote><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>示例放在 __ <strong>请求转发 的示例</strong> __ 中。</p><p>详细见代码文件中的两个注释：</p><p>RequestDemo8的【// 存储数据到request域中】</p><p>RequestDemo9的【// 获取数据】</p><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3QYP4H.png" alt=""></fancybox></p><h3 id="四、获取ServletContext"><a href="#四、获取ServletContext" class="headerlink" title="四、获取ServletContext"></a>四、获取ServletContext</h3><p>调用方法：</p><ul><li><code>ServletContext getServletContext()</code></li></ul><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><ol><li>新建RequestDemo10.java</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet("/RequestDemo10")</span><br><span class="line">public class RequestDemo10 extends HttpServlet {</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {</span><br><span class="line"></span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>浏览器访问：<a href="http://localhost/Servlet/RequestDemo10" target="_blank" rel="noopener">http://localhost/Servlet/RequestDemo10</a></li><li>控制台输出：</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/22/3QYqZ8.png" alt=""></fancybox></p><hr><p>下篇博客 <a href="https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Response/" target="_blank" rel="noopener">《HTTP响应信息数据 - Response》</a> 中，详细学习<strong>响应信息数据 - Response</strong>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上篇博文 &lt;a href=&quot;https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTTP：超文本传输协议》&lt;/a&gt; 的学习。&lt;/p&gt;
&lt;p&gt;现在，来学习两个对象：Request &amp;amp; Response。&lt;/p&gt;
&lt;h1 id=&quot;request对象和response对象的原理&quot;&gt;&lt;a href=&quot;#request对象和response对象的原理&quot; class=&quot;headerlink&quot; title=&quot;request对象和response对象的原理&quot;&gt;&lt;/a&gt;request对象和response对象的原理&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;request和response对象是由服务器创建的&lt;/strong&gt;。接着我们来使用它们&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;request对象是来获取请求消息，response对象是来设置响应消息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其基本原理，如下图👇&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/21/3KFYo4.png&quot; alt=&quot;Request&amp;amp;Response对象基本原理&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;h1 id=&quot;request对象继承体系结构&quot;&gt;&lt;a href=&quot;#request对象继承体系结构&quot; class=&quot;headerlink&quot; title=&quot;request对象继承体系结构&quot;&gt;&lt;/a&gt;request对象继承体系结构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ServletRequest&lt;/code&gt;&lt;/strong&gt; – interface，接口&lt;/p&gt;
&lt;p&gt;↓|&lt;em&gt;继承&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;HttpServletRequest&lt;/code&gt;&lt;/strong&gt; – interface，接口&lt;/p&gt;
&lt;p&gt;↓|&lt;em&gt;实现&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;org.apache.catalina.connector.RequestFacade&lt;/code&gt;&lt;/strong&gt; – 类，&lt;strong&gt;Tomcat编写的&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tomcat 是用&lt;strong&gt;纯Java语言编写&lt;/strong&gt;的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;request功能&quot;&gt;&lt;a href=&quot;#request功能&quot; class=&quot;headerlink&quot; title=&quot;request功能&quot;&gt;&lt;/a&gt;request功能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基础功能&lt;ul&gt;
&lt;li&gt;获取请求消息数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他功能：&lt;ul&gt;
&lt;li&gt;1.获取请求参数通用方式&lt;/li&gt;
&lt;li&gt;2.请求转发&lt;/li&gt;
&lt;li&gt;3.共享数据&lt;/li&gt;
&lt;li&gt;4.获取ServletContext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;获取请求消息数据&quot;&gt;&lt;a href=&quot;#获取请求消息数据&quot; class=&quot;headerlink&quot; title=&quot;获取请求消息数据&quot;&gt;&lt;/a&gt;获取请求消息数据&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;获取请求行数据&lt;/li&gt;
&lt;li&gt;获取请求头数据&lt;/li&gt;
&lt;li&gt;获取请求体数据&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP：超文本传输协议</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/21/HTTP%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/21/HTTP：超文本传输协议/</id>
    <published>2020-02-21T10:25:00.000Z</published>
    <updated>2020-02-23T12:51:40.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>HTTP == <strong>H</strong>yper <strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol</li><li><strong>超文本传输协议</strong></li></ul><blockquote><p><font color="blue">传输协议：定义了<strong>客户端和服务器端通信时，发送数据的格式</strong>。</font></p></blockquote><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3uIs6P.png" alt=""></fancybox></p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol><li><p>基于<strong>TCP/IP</strong>的高级协议</p></li><li><p><strong>默认端口号:80</strong></p></li><li><p>基于请求/响应模型的：<strong>一次请求对应一次响应</strong></p></li><li><p>无状态的：<strong>每次请求之间相互独立，不能交互数据</strong></p></li><li><p>网页中每一个文件都是一次单独的请求，几张图片，就是几次请求。如下图所示。</p></li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3uIZLT.png" alt="每一个文件都是一次单独的请求"></fancybox></p><a id="more"></a><h1 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h1><h2 id="http-0-9"><a href="#http-0-9" class="headerlink" title="http 0.9"></a>http 0.9</h2><ul><li>只有一个命令GET</li><li>没有HEADER等描述数据的信息</li><li>服务器发送完毕，就关闭TCP连接</li><li><strong>每一次请求响应都会建立新的连接</strong></li></ul><h2 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http 1.0"></a>http 1.0</h2><ul><li>增加了很多命令，如status code和header</li><li>多字符集支持、多部分发送、权限、缓存等</li></ul><h2 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http 1.1"></a>http 1.1</h2><ul><li>持久连接：<strong>keep-alive</strong></li><li><strong>复用连接</strong>（较http1.0的每一次请求响应都会建立新的连接。<strong>好处：节约了连接的资源，提升了传输的速度。</strong>）</li><li>提高性能的关键是<strong>低延迟</strong>而不是高带宽。</li><li>较http1.0，<strong>对缓存的支持更好</strong></li></ul><blockquote><p>推送：主动发送js、css推送到浏览器。</p><p>二进制流：可以并行发送数据。</p></blockquote><h2 id="http-2-0"><a href="#http-2-0" class="headerlink" title="http 2.0"></a>http 2.0</h2><ul><li>所有数据以二进制传输</li><li>同一个连接里面发送多个请求不再需要按顺序来</li><li>头消息压缩以及推送等提高效率的功能</li><li>所有的请求共用一个连接，可以更有效的使用tcp连接，通过<strong>带宽</strong>来提升http性能</li><li>可以减少服务链接的压力，内存减少了，链接吞吐量大了</li><li><strong>解决浏览器连接数有限的问题</strong></li><li><strong>资源合并减少请求</strong>的优化手段在http2.0来说是<strong>没有效果</strong>的</li></ul><h1 id="请求信息数据-格式"><a href="#请求信息数据-格式" class="headerlink" title="请求信息数据   格式"></a>请求信息数据   格式</h1><ul><li><code>Servlet</code>类中<code>service()</code>方法的参数<code>ServletRequest</code></li><li>字符串格式，比如：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /login.htmlHTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost/login.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">  </span><br><span class="line">username=zhangsan</span><br></pre></td></tr></tbody></table></figure><p>以下关于 <font color="blue">请求信息数据格式</font> 的内容有缺省，详细见下一篇博客 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Request%20-%20%E5%89%AF%E6%9C%AC/" target="_blank" rel="noopener">《HTTP请求信息数据 - Request》</a> 中。</p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><ul><li>格式：<code>请求方式  请求url  请求协议/版本</code></li></ul><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ul><li>HTTP协议有7种请求协议，常用的有GET、POST两种</li><li><font color="orange">GET</font></li></ul><ol><li>请求参数在请求行中，<strong>在url后</strong></li><li>请求的url长度<strong>有限制的</strong></li><li>不太安全（参数跟在url之后）</li><li>浏览器控制台显示👇</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3ubYIU.png" alt=""></fancybox></p><ul><li><font color="orange">POST</font></li></ul><ol><li>请求参数<strong>在请求体中</strong></li><li>请求的url长度<strong>没有限制的</strong></li><li>相对安全（参数在请求体中）</li><li>浏览器控制台显示👇</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3ub6IO.png" alt=""></fancybox></p><h3 id="请求url"><a href="#请求url" class="headerlink" title="请求url"></a>请求url</h3><ul><li>假设为 /login.html</li></ul><h3 id="请求协议-版本"><a href="#请求协议-版本" class="headerlink" title="请求协议/版本"></a>请求协议/版本</h3><ul><li>HTTP/1.1</li></ul><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><ul><li><strong>客户端浏览器告诉服务器一些信息</strong></li><li>格式：<code>请求头名称 : 请求头值</code></li><li>若有多个，则<strong>一行一个</strong>。</li></ul><h3 id="常见的请求头"><a href="#常见的请求头" class="headerlink" title="常见的请求头"></a>常见的请求头</h3><ul><li><p>Host</p></li><li><p>User-Agent</p></li><li><p>Referer</p></li></ul><h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><ul><li>请求的主机地址</li></ul><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><ul><li>浏览器告诉服务器，我访问你时候使用的<strong>浏览器版本信息</strong></li><li>作用：可以在服务器端获取该头的信息，<strong>解决浏览器的兼容性问题</strong></li></ul><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><ul><li>比如上面几张图片的Referer是 <a href="http://localhost/login.html" target="_blank" rel="noopener">http://localhost/login.html</a></li><li>告诉服务器，我（当前请求）从哪里来？</li><li>作用：<strong>防盗链、统计工作</strong></li><li>举个例子：我的网站想播放《战狼2》电影👇</li></ul><p><fancybox><img src="https://s2.ax1x.com/2020/02/21/3ujWr9.png" alt="Referer请求头"></fancybox></p><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><ul><li><strong>keep-alive</strong></li><li>http1.1，表示该<strong>链接可以被复用</strong></li></ul><h2 id="请求空行"><a href="#请求空行" class="headerlink" title="请求空行"></a>请求空行</h2><ul><li>就是一个<strong>空行</strong>（空白行）</li><li>作用：<strong>分割POST请求的请求头和请求体</strong></li></ul><h2 id="请求体-请求正文"><a href="#请求体-请求正文" class="headerlink" title="请求体/请求正文"></a>请求体/请求正文</h2><ul><li><strong>封装</strong>POST请求信息的请求参数</li></ul><p><br>下一篇博客 <a href="https://melodyjerry.gitee.io/blog/2020/02/21/HTTP%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Request/" target="_blank" rel="noopener">《HTTP请求信息数据 - Request》</a> 中，详细学习了 <strong>请求信息数据 - Request</strong>。</p><h1 id="响应信息数据-格式"><a href="#响应信息数据-格式" class="headerlink" title="响应信息数据   格式"></a>响应信息数据   格式</h1><ul><li><p><code>Servlet</code>类中<code>service()</code>方法的参数<code>ServletResponse</code></p></li><li><p>字符串数据，比如：</p></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Content-Length: 101</span><br><span class="line">Date: Wed, 06 Jun 2018 07:08:42 GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        hello , response</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h2><ul><li>格式：<code>协议/版本 响应状态码 状态码描述</code></li></ul><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><ul><li>服务器告诉客户端浏览器本次请求和响应的一个状态。</li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>状态码都是3位数字</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx状态码</li><li>2xx：成功。代表：<ul><li><strong>200</strong></li></ul></li><li>3xx：重定向。代表：<ul><li><strong>302</strong>：重定向</li><li><strong>304</strong>：访问缓存</li></ul></li><li>4xx：客户端错误。代表：<ul><li><strong>403</strong>：错误是一种在网站访问过程中，常见的错误提示，表示资源不可用。服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的WEB访问错误。   </li><li><strong>404</strong>：请求路径没有对应的资源</li><li><strong>405</strong>：请求方式没有对应的doXxx方法</li></ul></li><li>5xx：服务器端错误。代表：<strong>500</strong>(服务器内部出现异常)</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/23/31vKu8.png" alt=""></fancybox></p><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul><li>格式：<code>响应头名称 ：值</code></li></ul><h3 id="常见的响应头"><a href="#常见的响应头" class="headerlink" title="常见的响应头"></a>常见的响应头</h3><ul><li>Content-Type</li><li>Content-disposition</li></ul><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><ul><li>服务器告诉客户端<strong>本次响应体数据格式以及编码格式</strong></li></ul><h4 id="Content-disposition"><a href="#Content-disposition" class="headerlink" title="Content-disposition"></a>Content-disposition</h4><ul><li><p>服务器告诉客户端<strong>以什么格式打开响应体数据</strong></p></li><li><p>其值：</p></li><li><p>in-line：<strong>默认值，在当前页面内打开</strong></p></li><li><p>attachment;filename=xxx：<strong>以附件形式打开响应体</strong>。涉及<strong>文件下载</strong>等功能。</p></li></ul><h2 id="响应空行"><a href="#响应空行" class="headerlink" title="响应空行"></a>响应空行</h2><ul><li>就是一个<strong>空行</strong>（空白行）</li><li>作用：<strong>分割响应头和响应体</strong></li></ul><h2 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h2><ul><li>传输的数据</li><li>文件、HTML网页源码等等。比如，</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        hello , response</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><br><p>下下篇博客 <a href="https://melodyjerry.gitee.io/blog/2020/02/22/HTTP%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE-Response/" target="_blank" rel="noopener">《HTTP响应信息数据 - Response》</a> 中，详细学习<strong>响应信息数据 - Response</strong>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTTP == &lt;strong&gt;H&lt;/strong&gt;yper &lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超文本传输协议&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font color=&quot;blue&quot;&gt;传输协议：定义了&lt;strong&gt;客户端和服务器端通信时，发送数据的格式&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/21/3uIs6P.png&quot; alt=&quot;&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
&lt;h1 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基于&lt;strong&gt;TCP/IP&lt;/strong&gt;的高级协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;默认端口号:80&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于请求/响应模型的：&lt;strong&gt;一次请求对应一次响应&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无状态的：&lt;strong&gt;每次请求之间相互独立，不能交互数据&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网页中每一个文件都是一次单独的请求，几张图片，就是几次请求。如下图所示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;fancybox&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/21/3uIZLT.png&quot; alt=&quot;每一个文件都是一次单独的请求&quot;&gt;&lt;/fancybox&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://melodyjerry.github.io/blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>hexo s浏览博客时，提示4000端口问题</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/21/hexo%20s%E6%B5%8F%E8%A7%88%E5%8D%9A%E5%AE%A2%E6%97%B6%EF%BC%8C%E6%8F%90%E7%A4%BA4000%E7%AB%AF%E5%8F%A3%E9%97%AE%E9%A2%98/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/21/hexo s浏览博客时，提示4000端口问题/</id>
    <published>2020-02-21T10:17:00.000Z</published>
    <updated>2020-02-21T10:19:19.210Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次使用Hexo来，第一次遇到的问题。</p><p>讲真我也不知道为什么我的4000端口会被占用，我只是如常一样地使用Hexo而已。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>hexo s浏览博客时，提示4000端口问题。代码提示如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">FATAL Port 4000 has been used. Try other port instead.</span><br><span class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/do</span><br><span class="line">Error: listen EADDRINUSE 0.0.0.0:4000</span><br><span class="line">    at Object.exports._errnoException (util.js:1026:11)</span><br><span class="line">    at exports._exceptionWithHostPort (util.js:1049:20)</span><br><span class="line">    at Server._listen2 (net.js:1257:14)</span><br><span class="line">    at listen (net.js:1293:10)</span><br><span class="line">    at net.js:1403:9</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:77:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:98:9)</span><br><span class="line">FATAL listen EADDRINUSE 0.0.0.0:4000</span><br><span class="line">Error: listen EADDRINUSE 0.0.0.0:4000</span><br><span class="line">    at Object.exports._errnoException (util.js:1026:11)</span><br><span class="line">    at exports._exceptionWithHostPort (util.js:1049:20)</span><br><span class="line">    at Server._listen2 (net.js:1257:14)</span><br><span class="line">    at listen (net.js:1293:10)</span><br><span class="line">    at net.js:1403:9</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:77:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:98:9)</span><br></pre></td></tr></tbody></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>可以在站点下的文件<code>_config.yml</code>内加上如下代码更改hexo-server运行时的端口号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 40401</span><br><span class="line">  compress: true</span><br><span class="line">  header: true</span><br></pre></td></tr></tbody></table></figure><p>其中<code>40401</code>可以换成想要运行的端口号。</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次使用Hexo来，第一次遇到的问题。&lt;/p&gt;
&lt;p&gt;讲真我也不知道为什么我的4000端口会被占用，我只是如常一样地使用Hexo而已。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;hexo s浏览博客时，提示4000端口问题。代码提示如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FATAL Port 4000 has been used. Try other port instead.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FATAL Something&#39;s wrong. Maybe you can find the solution here: http://hexo.io/do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: listen EADDRINUSE 0.0.0.0:4000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at Object.exports._errnoException (util.js:1026:11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at exports._exceptionWithHostPort (util.js:1049:20)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at Server._listen2 (net.js:1257:14)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at listen (net.js:1293:10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at net.js:1403:9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at _combinedTickCallback (internal/process/next_tick.js:77:11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at process._tickCallback (internal/process/next_tick.js:98:9)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FATAL listen EADDRINUSE 0.0.0.0:4000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: listen EADDRINUSE 0.0.0.0:4000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at Object.exports._errnoException (util.js:1026:11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at exports._exceptionWithHostPort (util.js:1049:20)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at Server._listen2 (net.js:1257:14)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at listen (net.js:1293:10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at net.js:1403:9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at _combinedTickCallback (internal/process/next_tick.js:77:11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at process._tickCallback (internal/process/next_tick.js:98:9)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;p&gt;可以在站点下的文件&lt;code&gt;_config.yml&lt;/code&gt;内加上如下代码更改hexo-server运行时的端口号：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  port: 40401&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compress: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  header: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;40401&lt;/code&gt;可以换成想要运行的端口号。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>将本地文件传到阿里云服务器</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/21/%E5%B0%86%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%BC%A0%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/21/将本地文件传到阿里云服务器/</id>
    <published>2020-02-21T05:47:34.000Z</published>
    <updated>2020-02-21T05:00:50.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>怎么将本地文件传到阿里云服务器里面？</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li>第一种：在阿里云服务器里建一个FTP服务商，在本地用FTP客户端上传文件</li><li>第二种：进阿里云服务器远程界面的时候，把本地磁盘带进去，然后进服务器里直接从本地磁盘里把文件复制到服务器里</li><li>第三种：QQ安装到阿里云服务器里，用QQ对传</li><li>第四种：把本地文件上传到邮箱里 ，然后进阿里云服务器里打开您的邮箱，进去下载文件即可</li></ol><p>链接：<a href="https://www.w3cschool.cn/intellij_idea_doc/" target="_blank" rel="noopener">https://www.w3cschool.cn/intellij_idea_doc/</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;怎么将本地文件传到阿里云服务器里面？&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;第一种：在阿里云服务器里建一个FTP服务商，在本地用FTP客户端上传文件&lt;/li&gt;
&lt;li&gt;第二种：进阿里云服务器远程界面的时候，把本地磁盘带进去，然后进服务器里直接从本地磁盘里把文件复制到服务器里&lt;/li&gt;
&lt;li&gt;第三种：QQ安装到阿里云服务器里，用QQ对传&lt;/li&gt;
&lt;li&gt;第四种：把本地文件上传到邮箱里 ，然后进阿里云服务器里打开您的邮箱，进去下载文件即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://www.w3cschool.cn/intellij_idea_doc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3cschool.cn/intellij_idea_doc/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="云服务器" scheme="https://melodyjerry.github.io/blog/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Servlet 体系结构</title>
    <link href="https://melodyjerry.github.io/blog/2020/02/20/Servlet%20%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://melodyjerry.github.io/blog/2020/02/20/Servlet 体系结构/</id>
    <published>2020-02-20T12:23:11.000Z</published>
    <updated>2020-02-21T13:58:43.395Z</updated>
    
    <content type="html"><![CDATA[<p>我们在写一个class 并 implement Servlet时，需要重写Servlet中的5个方法，但是<strong>大多时候都只用到 service 方法</strong>。</p><p>虽然中用到service方法，但其余的4个方法还得重写。</p><p>那我们能不能编写一个class，去继承或实现 Servlet 后，只用定义一个 service 方法就可以了。其他方法想有就有，不想有就没有？</p><p>这时候我们就要聊聊 Servlet 体系结构了。</p><h1 id="Servlet-体系结构"><a href="#Servlet-体系结构" class="headerlink" title="Servlet 体系结构"></a>Servlet 体系结构</h1><p><strong><code>Servlet</code></strong> – interface，接口</p><p>↓|<em>实现</em></p><p><strong><code>GenericServlet</code></strong> – 实现类，抽象类</p><p>↓|<em>继承</em></p><p><strong><code>HttpServlet</code></strong> – 实现类，抽象类</p><blockquote><p>做项目时，创建Servlet时候，推荐使用第三种方式：👉继承HttpServlet👉定义类继承HttpServlet👉 复写doGet/doPost方法</p></blockquote><a id="more"></a><h1 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h1><ul><li>将 <code>Servlet</code> 接口中的<strong>其他方法做了默认空实现</strong>，<strong>只将 <code>service()</code> 方法作为抽象</strong></li><li>将来定义 <code>Servlet</code> 类时候，可以继承 <code>GenericServlet</code>，实现 <code>service()</code> 方法即可</li><li><em>其余四种方法， 若有需要，手动重写即可。</em></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet("/demo2")</span><br><span class="line">public class ServletDemo2 extends GenericServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {</span><br><span class="line">        System.out.println("demo2....");</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><ul><li>该抽象类是<strong>对 HTTP协议 的封装和描述</strong>，可以<strong>简化某些操作</strong></li><li><strong>HTTP协议 有 7种 请求方式。</strong>现在，我们假设只是用<strong>最常用的两种请求方式GET和POST</strong>这两种请求方式。</li><li><code>service()</code>方法中  <em>最先要干</em>  的其中2件事👇</li></ul><p><fancybox><img src="https://s2.ax1x.com/2020/02/20/3mYEiq.png" alt="service()方法要干的其中2件事"><fancybox></fancybox></fancybox></p><ul><li>将来不管怎么样，都得做这么一件事：<strong>“先判断请求方式👉判断完后，要通过不同的请求方式，做出不同的代码逻辑“。</strong></li><li>那么，这个过程是非常麻烦的。</li><li>同时，这个过程也是<strong>所有 <code>service()</code> 都该做的一个过程。</strong></li><li>所以这个时候，官方针对这个过程，专门提供了一个class <code>HttpServlet</code>。</li><li><code>HttpServlet</code> 已经帮程序员做好了这个过程，<strong>写好了相应的代码，就如上图的红色字体部分</strong>。集程序员不再需要去判断请求方式了。</li><li><code>HttpServlet</code> 内部定义了 <code>doGet(){}</code> 和  <code>doPost(){}</code> 这两个方法。并且在判断请求方式的 <code>if</code> 中调用了这两个方法。</li><li>这就是其基本的定义原理。就如下图👇</li></ul><p><fancybox><img src="https://s2.ax1x.com/2020/02/20/3mNOo9.png" alt="HttpServlet类"></fancybox></p><ul><li><p>若将来想要<strong>屏蔽这种GET或POST请求方式的处理逻辑</strong>：我们可以<strong>继承 HttpServlet，并且去重写 <code>doGet(){}</code> 和 <code>doPost(){}</code>这两个方法。</strong></p></li><li><p>因为将来都是<strong>调用 <code>service()</code>方法</strong> ，并且 <code>service()</code>会做一个<strong>方法分发</strong>：你是<strong>get</strong>就调用 <strong><code>doGet()</code></strong> ，你是<strong>post</strong>就调用 <strong><code>doPost()</code></strong> 。</p></li><li><blockquote><p>做项目时，创建Servlet时候，推荐使用第三种方式：👉继承HttpServlet👉定义类继承HttpServlet👉 复写doGet/doPost方法</p></blockquote></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>定义 class <strong>继承 <code>HttpServlet</code></strong></li><li><strong>重写<code>doGet()</code> 和 <code>doPost()</code></strong> 两个方法</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* ServletDemo3.java  */</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Classname ServletDemo3</span><br><span class="line"> * @Description TODO</span><br><span class="line"> * @Date 2020/2/20 下午 10:54</span><br><span class="line"> * @Created by jerry</span><br><span class="line"> */</span><br><span class="line">@WebServlet("demo3")</span><br><span class="line">public class ServletDemo3 extends HttpServlet {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span><br><span class="line">        System.out.println("doGet......");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span><br><span class="line">        System.out.println("doPost......");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><strong>通过浏览器直接请求，是GET方式</strong></li><li>现在掌握的知识，只能通过表单，完成POST方式</li></ul><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><ol><li>新建login.html文件</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;表单&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action="/demo3" method="post"&gt;</span><br><span class="line">        &lt;input name="username"&gt;</span><br><span class="line">        &lt;input type="submit" value="提交"&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>重启服务，访问页面</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/20/3msHLq.gif" alt="3msHLq.gif"></fancybox></p><ol start="3"><li>将 <code>method="post"</code> 改为 <code>method="get"</code></li><li>再访问页面</li></ol><p><fancybox><img src="https://s2.ax1x.com/2020/02/20/3myRXR.gif" alt="3myRXR.gif"></fancybox></p><blockquote><p>注意：</p><p><strong>使用get方式后，请求的参数会跟在url后。</strong></p><p><img src="https://s2.ax1x.com/2020/02/20/3myjBt.png" alt="3myjBt.png"></p></blockquote><hr><h1 id="后续阅读相关文章"><a href="#后续阅读相关文章" class="headerlink" title="后续阅读相关文章"></a>后续阅读相关文章</h1><p>1、<a href="https://blog.csdn.net/green703338130/article/details/79460250" target="_blank" rel="noopener">GenericServlet和HttpServlet</a></p><p>2、<a href="https://www.cnblogs.com/tiancai/p/8509705.html" target="_blank" rel="noopener">GenericServlet 、Servlet和httpServler他们之间的关系</a></p><p>3、<a href="https://www.cnblogs.com/yonyong/p/9337284.html" target="_blank" rel="noopener">GenericServlet和HttpServlet有什么区别？</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在写一个class 并 implement Servlet时，需要重写Servlet中的5个方法，但是&lt;strong&gt;大多时候都只用到 service 方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;虽然中用到service方法，但其余的4个方法还得重写。&lt;/p&gt;
&lt;p&gt;那我们能不能编写一个class，去继承或实现 Servlet 后，只用定义一个 service 方法就可以了。其他方法想有就有，不想有就没有？&lt;/p&gt;
&lt;p&gt;这时候我们就要聊聊 Servlet 体系结构了。&lt;/p&gt;
&lt;h1 id=&quot;Servlet-体系结构&quot;&gt;&lt;a href=&quot;#Servlet-体系结构&quot; class=&quot;headerlink&quot; title=&quot;Servlet 体系结构&quot;&gt;&lt;/a&gt;Servlet 体系结构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Servlet&lt;/code&gt;&lt;/strong&gt; – interface，接口&lt;/p&gt;
&lt;p&gt;↓|&lt;em&gt;实现&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;GenericServlet&lt;/code&gt;&lt;/strong&gt; – 实现类，抽象类&lt;/p&gt;
&lt;p&gt;↓|&lt;em&gt;继承&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;HttpServlet&lt;/code&gt;&lt;/strong&gt; – 实现类，抽象类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做项目时，创建Servlet时候，推荐使用第三种方式：👉继承HttpServlet👉定义类继承HttpServlet👉 复写doGet/doPost方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Servlet" scheme="https://melodyjerry.github.io/blog/tags/Servlet/"/>
    
  </entry>
  
</feed>
