<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-23T02:00:23.567Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>推荐文本编辑器：Notepad 3、Sublime和Atom</title>
    <link href="http://yoursite.com/2019/11/18/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://yoursite.com/2019/11/18/文本编辑器/</id>
    <published>2019-11-18T02:34:04.000Z</published>
    <updated>2019-11-23T02:00:23.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天作者推荐两款文本编辑器。</p><p>我先后使用的Notepad 3、Sublime、Atom、VS Code、Vim。</p><p>这里作者就只推荐<strong>Notepad 3、Sublime和Atom</strong>。</p><p>关于VS Code和Vim，文末有两篇教程供大家入手。</p><h3 id="Notepad-3"><a href="#Notepad-3" class="headerlink" title="Notepad 3"></a>Notepad 3</h3><blockquote><p> 虽然 Windows 操作系统在过去几年中有了显著变化，但是，默认的 Windows 记事本却鲜有更新。如果您需要一个简单且适于编程的文本编辑器，Notepad3 将是一个不错的选择！</p></blockquote><blockquote><p> Notepad3是一款轻便快捷的基于 Scintilla 的文本编辑器，具有语法高亮、代码折叠、括号匹配、自动缩进、编码转换、换行格式转换、多次撤销或重做、书签、基于正则表达式的查找和替换等实用功能。它占用的内存很小，但功能强大，足以处理大多数编程工作。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191031213142427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Notepad 3 的界面 可能 是我见过所有主流文本编辑器里最最最简单清爽的吧？</p><p>蓝奏云：<a href="https://www.lanzous.com/b821830" target="_blank" rel="noopener">下载链接</a>（作者提供了已经汉化过的便携版本）</p><p> （注意：Notepad 3和Notepad++没有关系 ） </p><h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><p><a href="http://www.sublimetext.cn/" target="_blank" rel="noopener">官方</a>的介绍简单又粗暴</p><blockquote><p><em>一款用于代码、标记和散文的精致文本编辑器</em></p></blockquote><p>Sublime支持 Windows 、Mac 平台。<br>插件是程序员的灵魂，Sublime不失这点。<br>类似于 Eclipse，IDEA，它有着丰富的插件系统，完全可以满足各种开发编辑需求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031180340340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>1）安装</p><p><img src="https://img-blog.csdnimg.cn/20191031180945945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">官网关于Sublime的介绍语下就是win版的下载入口<br>或者点击<a href="https://download.sublimetext.com/Sublime%20Text%20Build%203207%20x64%20Setup.exe" target="_blank" rel="noopener">这里</a>快速下载最新版==Sublime Text 3 (Build 3207)==</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031181222467.png" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>下载得到的是<em>exe</em>，双击开始<em>安装</em>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031182801147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>安装导向界面，点击【Next】继续安装。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031182659507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>选择Sublime Text 3安装位置，您可以点击【Next】，软件会自动安装。或者您可以单击【Browse】，在弹出的安装位置窗口中，您可以自己选择Sublime Text安装位置，选择完成后点击【Next】。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031181142946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>这里可选择    <em>添加到资源管理器上下文菜单</em>  。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031182552911.png" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>安装完后可以在桌面或者开始菜单中找到Sublime。</p><p>2）使用<br><strong><em>Sublime的界面特别简洁，让人看着很舒服。</em></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031183010233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>这里，作者已经汉化过了。初始语言是English。</p><p>3）汉化</p><blockquote><p>sublime 的插件的强大之处，sublime 通过 package control来统一管理安装的插件。现版本sublime 3自带package control功能。</p></blockquote><p>将English变成Chinese，也可以通过Sublime的插件实现。</p><p>作者已经汉化过。为了教程，故在win7虚拟机上教大家如何实现汉化。</p><ol><li><p>官网下载，并安装好, 刚安装好的是没有 Package Control 选项</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031202515113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>找到  Tools-&gt;Install Package Control  选项，即可调出 Package Contro</p></li><li><p>不能直接找到 Install Package Control，去找“Tools-&gt;Command Palette…”选项</p></li><li><p>输入 ipc ,点击 Install Package Control，即可调出 Package Control</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031202906101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>等待完成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031203048139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>找到  Preferences-&gt;Package Control</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031203441795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>选项弹出命令行输入框，输入ip，点击“install Package</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031203509845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>弹出命令行输入框，输入clz，点击“ChineseLocalizations”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/2019103120320989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>搞定，设置成中文了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031203530411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li><p>开开心心地食用汉化地Sublime吧    o(<em>￣▽￣</em>)o</p></li></ol><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><blockquote><p>Atom 是 Github 专门为程序员推出的一个跨平台文本编辑器。具有简洁和直观的图形用户界面，并有很多有趣的特点：支持CSS，HTML，JavaScript等网页编程语言。它支持宏，自动完成分屏功能，集成了文件管理器。</p></blockquote><p>官网在<a href="https://atom.io/" target="_blank" rel="noopener">这里</a>👈</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031204039143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>友情链接：<br><a href="https://www.w3cschool.cn/atom/" target="_blank" rel="noopener">w3school之Atom教程</a><br><a href="https://atom-china.org/" target="_blank" rel="noopener">Atom 中文社区</a></p><p>1）安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031204609113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>官网地Downloa或者点击<a href="https://atom-installer.github.com/v1.41.0/AtomSetup-x64.exe?s=1571754161&amp;ext=.exe" target="_blank" rel="noopener">这里</a>快速下载最新版==Atom (1.41.0)==</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031205131795.png" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>下载得到exe，双击开始安装。<br>安装过程很简单，直接省略。</p><p>2）使用<br><strong><em>Atom 的界面也比较简洁。<br>Atom提供了侧栏、标签栏，可提高效率。<br>Atom还能链接到GitHub，这真是GitHub用户的<a href="https://www.jianshu.com/p/4c68bb302969" target="_blank" rel="noopener">福利</a>。(当然，Atom本来就是Github推出的hhhh)</em></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031205823193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><p>3）汉化<br>Atom的汉化有两种方法：</p><p><strong>方法一</strong></p><ol><li>打开软件后，点击 File&gt; Settings&gt; install <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031210904530.png" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li></ol><ol start="2"><li>搜索 chinese，安装两个插件<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031210703975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li>重启软件<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031211026850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure>因为插件托管在国外，可能因为网速原因，会非常慢，因此推荐下载中文插件包，请看方法二👇</li></ol><p><strong>方法二</strong></p><ol><li>打开<a href="https://atom.io/packages/" target="_blank" rel="noopener">https://atom.io/packages/</a>去官网下载中文包，搜索【Chinese】，找到【atom-simplified-chinese-menu】点击进入主页（如上图），然后再点【Verions】，之后，找到最新版本，点【zip】包下载即可。。<br>作者在这已经准备好中文包了，点击<a href="http://down-ww3.7down.net/pcdown/soft/xiazai/atomchs_chinese.rar" target="_blank" rel="noopener">这里</a>下载<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031211522938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li>将下载好了的压缩包解压到 C:/user/&lt;用户名&gt;/.atom/packages/目录下面<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031211810975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li><li>打开Atom，发现已经Chinese了。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191031211915728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQzODA1Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure></li></ol><h2 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h2><p><font color="red">主流的文本编辑器有很多。每个人的需求不一样，找到合适自己的才是好的。</font></p><p>Notepad 3、Sublime、Atom、VS Code、Vim、<del>Notepad++（前段时间闹事，作者不方便再提）</del></p><ul><li>VS Code：<a href="https://www.jianshu.com/p/0187d02434eb" target="_blank" rel="noopener">传送门</a></li><li>Vim：<a href="https://blog.csdn.net/Alisebeast/article/details/79868694" target="_blank" rel="noopener">传送门</a> </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天作者推荐两款文本编辑器。&lt;/p&gt;
&lt;p&gt;我先后使用的Notepad 3、Sublime、Atom、VS Code、Vim。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>教会你怎么安装和使用 Visio 哦 ~ ~</title>
    <link href="http://yoursite.com/2019/11/18/Visio%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/11/18/Visio教程/</id>
    <published>2019-11-18T01:34:04.000Z</published>
    <updated>2019-11-23T01:52:44.903Z</updated>
    
    <content type="html"><![CDATA[<p><font size="1">本博客第一次发表于【简书】：<a href="https://www.jianshu.com/writer#/notebooks/16381025/notes/55831765。现转载到作者的网站上。" target="_blank" rel="noopener">https://www.jianshu.com/writer#/notebooks/16381025/notes/55831765。现转载到作者的网站上。</a></font></p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>很多学生会在编程、设计或其他时候可能使用到【制图工具】。最好用的莫不过【微软的Visio】了。<del>但是很多学生不会使用Visio，甚至不会安装Visio。</del>   &gt;    </p></blockquote><p>Visio 这么好的工具，一定要会用。    </p><p>今天，作者写一份教程，教会大家了解如何<strong>安装和使用 ==Visio==</strong>。    </p><p>在正式教程之前，我们先介绍 Visio。  </p><blockquote><p>Visio 是office软件系列中的负责绘制流程图和示意图的软件，是一款便于IT和商务人员就复杂信息、系统和流程进行可视化处理、分析和交流的软件。使用具有专业外观的 Office Visio 图表，可以促进对系统和流程的了解，深入了解复杂信息并利用这些知识做出更好的业务决策。  &gt; Microsoft Office Visio帮助您创建具有专业外观的图表，以便理解、记录和分析信息、数据、系统和过程。    </p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/7853719-f645f42093457c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1. 【下载资源】  网上也有很多资源，但是包是不完整的。版本也很多，要激活也不容易。  作者在这里已经打包好“Visio 2019”和“激活工具”了，点击<a href="https://pan.baidu.com/s/1VQUlOEQw8lEAM_odBLaSyA" target="_blank" rel="noopener">这里</a>(提取码: rwtr)开始下载。  由于现在的笔记本都是预装win10的，所以不用担心Visio 2019合不合适。毕竟Visio 2019在win7上是安装不了的。<br>2. 【解压】  下载得到压缩包，解压，打开文件夹。  </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-6752e1bf36c9996f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/7853719-939e863b6908cbfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>3. 【打开Setup】  打开“Visio 2019”，右键“Setup”选中“以管理员身份运行”。（似乎不用管理员也行？？？）  </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-d4ff83129c3c5a44?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  4. 【正在安装】  等待就好，很快的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/7853719-c2465643b5a71d48?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>  <p>5. 【安装完成】  安装结束，点击“关闭”。  </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-ae304f9e867c893f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>6. 【激活】  <strong>Visio 2019是==必须激活==才可以使用的。</strong>  <em>否则，会一直弹窗提示激活的。</em>  激活工具在另一个文件夹里。 </p><p> <img src="https://upload-images.jianshu.io/upload_images/7853719-2cf6249adc017c7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>补充一些关于KMS：  KMS（全称:Key Management Service），这个是微软的一种新型产品激活机制，目的是为了Microsoft更好的遏制非法软件授权行为(盗版)。 </p></blockquote><p><strong>当然作者不提倡破解、或盗版。  对于有能力的人，还是支持正版。但是学生嘛，能用就好了。</strong>    </p><p>使用激活工具前，作者建议：    </p><p>==最好关闭杀毒软件，如果有的话。==    </p><p>作者没安装360那些，很流畅地激活成功。    </p><p>==激活工具无毒的。不关闭的话，可能被误报。==    </p><p>1).【打开】  界面如下：    </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-fb12ec4b684e7438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <del>这个激活工具还可以xxxxxx。（你懂的）</del> 我啥都没说哦hh    </p><p>2).【激活】  简单一按，等待激活成功就好。 </p><p> <img src="https://upload-images.jianshu.io/upload_images/7853719-e188fe3f4c046d22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>可能有的电脑打开软件时会提示这个。解决很简单，安装框架就好。   </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-83dc5ed8a02c5b03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>（1）打开“控制面板”。<br>（2）找到并点击“程序和功能”项，在打开的页面中，点击“启用或关闭Windows功能”。<br>（3）在打开的“Windows功能”对话框中，找到并勾选“Microsoft.Net Framework”服务，单击“确定”即可。    </p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>激活后，就可以安安心心、大大方方地使用 Visio 了。o(<em>￣▽￣</em>)o    </p><p>【打开】  </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-6b5817725712d366?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>【新建】<br>新建页面，有一些初始模板可以使用。<br>一般选择“基本框图”就好，然后“新建”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/7853719-3a1e6a4555ed990f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>【制图】    </p><p>左侧可以选择很多官方自带的形状，当然还可以自己建立自己的模型。<br> 右侧可以对图形自定义，包括颜色、线条、端点等等。  </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-c8e5e449f3f4fe09?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>使用 Visio 来制图真的很爽。<br>但是，如果只是临时制图使用 Visio ，还得安装确实不太方便。<br>因此 作者还<strong>收藏了几个线上制图的网站，在这提供给大家临时使用。</strong></p><p>1. <a href="https://www.draw.io/" target="_blank" rel="noopener">https://www.draw.io/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/7853719-c3e59ce28a769f78?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>   <p> 2. <a href="https://zh.numberempire.com/graphingcalculator.php" target="_blank" rel="noopener">https://zh.numberempire.com/graphingcalculator.php</a>  </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-7db5b8c573bb0704?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>3. <a href="https://www.processon.com" target="_blank" rel="noopener">https://www.processon.com</a> </p><p><img src="https://upload-images.jianshu.io/upload_images/7853719-ca6bd2e1c074bee9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image">      </p><p>4. 当然用电脑自带的【画图】也是可以的，你看。 </p><p> <img src="https://upload-images.jianshu.io/upload_images/7853719-579f858f50189480?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  emmm只是好难看啊hhhh。    </p><h5 id="这就是结尾：如果教程上有什么不足的或者有问题的，可以私信我。谢谢你的阅读！"><a href="#这就是结尾：如果教程上有什么不足的或者有问题的，可以私信我。谢谢你的阅读！" class="headerlink" title="这就是结尾：如果教程上有什么不足的或者有问题的，可以私信我。谢谢你的阅读！"></a>这就是结尾：如果教程上有什么不足的或者有问题的，可以私信我。谢谢你的阅读！</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;1&quot;&gt;本博客第一次发表于【简书】：&lt;a href=&quot;https://www.jianshu.com/writer#/notebooks/16381025/notes/55831765。现转载到作者的网站上。&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>解除课程中心看视频时的“ 窗口获取焦点事件 ”</title>
    <link href="http://yoursite.com/2019/11/16/%E8%A7%A3%E9%99%A4%E8%AF%BE%E7%A8%8B%E4%B8%AD%E5%BF%83%E7%9C%8B%E8%A7%86%E9%A2%91%E6%97%B6%E7%9A%84%E2%80%9C%20%E7%AA%97%E5%8F%A3%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9%E4%BA%8B%E4%BB%B6%20%E2%80%9D/"/>
    <id>http://yoursite.com/2019/11/16/解除课程中心看视频时的“ 窗口获取焦点事件 ”/</id>
    <published>2019-11-16T09:54:59.000Z</published>
    <updated>2019-11-16T12:41:49.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解除课程中心看视频时的“-窗口获取焦点事件-”"><a href="#解除课程中心看视频时的“-窗口获取焦点事件-”" class="headerlink" title="解除课程中心看视频时的“ 窗口获取焦点事件 ”"></a>解除课程中心看视频时的“ 窗口获取焦点事件 ”</h1><p>创建时间：2019-11-16 17:54:59</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，在观看课程中心的马克思视频，因为要<strong>至少看到80%以上</strong>。</p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>那我挂着刷不就得了？偏偏。。。。。</p><p>发现这个课程中心存在某个机制——<strong>一定要使视频一直处于“置顶”的状态，否者会自动暂停视频</strong>，就像下图这样：</p><p>操作鼠标前——&gt;</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/16/jAVgqoWRcBYCbNx.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>操作鼠标后——&gt;</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/16/zH3BSiqobAepMtw.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>你会注意到，视频的播放状态跟鼠标的行为有关，准确来说是==和鼠标点击的位置（焦点）有关==。</p><p>第一时间想到“这不就是windows的<strong>“窗口获取焦点”</strong>吗？</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>先补充补充什么是<strong>窗口获取焦点</strong>？</p><blockquote><ul><li><p>在你浏览其他窗口页面、或是浏览器最小化、又或是点击了程序窗口时，等等都算是浏览器窗口失去焦点，这时候 <strong><code>window.onblur</code></strong> 事件就会触发。 </p></li><li><p>当然，当你的页面获得焦点的时候一样也会触发<strong><code>window.onfocus</code></strong>。</p></li><li><p>应该有人会注意到过，当你点击不同窗口时，窗口栏会有不同的颜色反馈，就比如win 10的资源管理器，前置窗口和后置窗口的窗口颜色是不是不一样？</p>  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/16/LSU5XReK4Pzylaj.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure></li></ul></blockquote><h2 id="寻找"><a href="#寻找" class="headerlink" title="寻找"></a>寻找</h2><p>直接按下<code>F12</code>，打开控制台，查看Elements……</p><p>emmmmmm结果，没找到对应的代码（或许我没仔细去挖hh）</p><h2 id="再试"><a href="#再试" class="headerlink" title="再试"></a>再试</h2><p>那我直接Console。不就是当前窗口获取了焦点吗？？？？直接暴力敲下代码，并Enter，嘿嘿……</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:<span class="built_in">window</span>.onblur=<span class="literal">null</span>;<span class="keyword">void</span> <span class="number">0</span><span class="comment">//有无`void 0`，都可以</span></span><br></pre></td></tr></tbody></table></figure><h2 id="当我Enter时，诶，成功了hhh"><a href="#当我Enter时，诶，成功了hhh" class="headerlink" title="当我Enter时，诶，成功了hhh"></a>当我Enter时，诶，成功了hhh</h2><p>效果就是这样。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/16/EyMkej7OPU2dTaQ.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>测试了一段时间后，成功率基本达97%左右。后来就分享到班群，让更多人试试效果。两天刷完所有马克思的视频哈哈有木有？</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li><p><strong>一次最多同时两个视频在看</strong>，因为后台有个计时器再加上我不会写自动播放、自动静音的脚本hhhhh（有时间再去琢磨哈）</p></li><li><p><strong><em>一旦刷新页面，就得重新Enter脚本</em></strong></p></li><li><p>极小几率会失败，原因我也不清楚，失败重新Enter即可。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解除课程中心看视频时的“-窗口获取焦点事件-”&quot;&gt;&lt;a href=&quot;#解除课程中心看视频时的“-窗口获取焦点事件-”&quot; class=&quot;headerlink&quot; title=&quot;解除课程中心看视频时的“ 窗口获取焦点事件 ”&quot;&gt;&lt;/a&gt;解除课程中心看视频时的“ 窗口获取
      
    
    </summary>
    
    
    
      <category term="脚本" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记——对象、类</title>
    <link href="http://yoursite.com/2019/11/15/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/11/15/Java笔记——对象、类/</id>
    <published>2019-11-15T09:54:59.000Z</published>
    <updated>2019-11-14T10:04:30.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java笔记——对象、类"><a href="#Java笔记——对象、类" class="headerlink" title="Java笔记——对象、类"></a>Java笔记——对象、类</h3><p>创建时间：2019.11.11</p><p>说明：持续更新ing</p><hr><ol><li><code>对象</code>和<code>类</code>的概念。</li></ol><ul><li><blockquote><p><code>对象</code>：对象是类的一个实例（实实在在存在的个体），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></blockquote></li><li><blockquote><p><code>类</code>：类是对现实生活中事物的描述。类是一个模板，它描述一类对象的行为和状态。</p></blockquote></li></ul><p>下图中<strong>男孩（boy）</strong>、<strong>女孩（girl）</strong>为<strong>类（class）</strong>，而具体的每个人为该类的<strong>对象（object）</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/12/P8M5LWHdIcs42yB.png" alt="菜鸟教程.png" title="">                </div>                <div class="image-caption">菜鸟教程.png</div>            </figure><hr><ol start="2"><li>问：类设计get方法和set方法的作用是什么？<blockquote><p>答1：一般类的成员变量被设置为private（私有的），这样设置安全性比较高，但是设置为私有的后其他的类和对象则无法调用该对象了，所以会有get和set方法，这两个方法一般设置为public，在其他的类中通过对象调用set或get方法即可操作私有的变量，增强程序的安全性，set为给对象赋值的方法，而get则是取得变量值的方法！</p></blockquote></li></ol><blockquote><p>答2：get set常用在自定义类，类创建了一个实例对象后，用set设置对象的某一个属性，get得到对象某一属性。如果不使用get set，你就得用点，点出来还得是个方法。其实就是给get set换个名而已。而且get set作为内部方法，可以访问私有数据</p></blockquote><blockquote><p>答3：别说的那么专业化了，理解都要半天。<br>就这么理解吧，面向对象中，想对类的成员变量设置访问一些权限，于是，就将该字段设置为private的，这样别的类就不能访问了，然后在该内定义两个方法，一个专门用于获取，一个用于修改，这样，在你不想让别人乱动该字段的时候，就在该方法内写一些限制条件。<br>而为了规范起见（团队开发需要嘛），就根据人家老外的习惯，将方法名设置为set+字段名，get+字段名（名字乱改没问题），既然规范了，那就是别人都叫这名了，于是，有些框架给对象赋值就有方法了，方法名称由get或set开始的又有private变量名的，就找出来调用。hibernate1框架就这样弄得，至于后面的版本是不是这样就不大清楚了。<br>JavaBean就是一个JAVA类，既然是JAVA类就不需要什么组件了，这玩意直接深入到虚拟机了的</p></blockquote><hr><ol start="3"><li></li></ol><ul><li>Java中的对象<br>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。<br>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。<br>对比现实对象和软件对象，它们之间十分相似。</li></ul><p><strong><em>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。<br>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</em></strong></p><ul><li>Java中的类<br>类可以看成是创建Java对象的模板。<br>通过下面一个简单的类来理解下Java中类的定义：<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>{</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>{</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>{</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>一个类可以包含以下类型变量：<br><code>局部变量</code>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。<br><code>成员变量</code>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。<br><code>类变量</code>：类变量也声明在类中，方法体之外，但必须声明为static类型。<br>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。</li></ul><hr><ol start="4"><li>类和对象的关系：</li></ol><ul><li><p>现实生活中的对象：张三、李四。</p></li><li><p>【想要描述】提取对象中的共性内容。<strong>对具体的抽象。</strong></p></li><li><p>【描述时】这些对象的共性有：姓名、学号、年龄、性别、学习Java等等。（即<strong>定义类：描述事物的属性和行为，就是在定义属性和行为。<em>属性和行为共同成为类中的成员（成员变量和成员方法）。</em></strong>）</p></li><li><p>映射到Java中，<strong>描述就是class定义的类，具体对象就是new建立的实体</strong>。</p></li><li><p>这些描述在Java当中是用类的形式来体现的。而对象是通过Java的new操作符所产生的一个实体，这个的实体存在于==堆内存==当中。</p>  <img src="https://i.loli.net/2019/11/13/znyBu9gp1jtdEFs.png" alt="image.png" style="zoom:80%;">  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类，就是描述事物，就是在定义属性和行为。属性和行为共同成为类中的成员（成员变量和成员方法）。</span></span><br><span class="line"><span class="comment">//需求：描述车汽车（颜色，轮胎数）。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span><span class="title">Car</span> </span>{</span><br><span class="line">    <span class="comment">//描述颜色</span></span><br><span class="line">    String color = <span class="string">"red"</span>;</span><br><span class="line">    <span class="comment">//描述轮胎数</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//运行行为。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(color+<span class="string">".."</span>+num);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span><span class="title">CarDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//生产汽车：在Java中通过new操作符来完成。</span></span><br><span class="line">        <span class="comment">//其实就是在堆内存中产生一个实体。</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car();<span class="comment">//c就是一个【类类型】变量。记住：类类型变量只想对象。</span></span><br><span class="line">        <span class="comment">//需求：将已有车的颜色的颜色改成蓝色。指定该对象做使用。</span></span><br><span class="line">        <span class="comment">//在Java指挥方式是：【对象.对象成员】</span></span><br><span class="line">        c.color = <span class="string">"blue"</span>;</span><br><span class="line">        <span class="comment">//需求：想要车运行起来。</span></span><br><span class="line">        c.run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><code>Car c = new Car();</code>在内存中的示意图——&gt;</p><img src="https://i.loli.net/2019/11/13/1X4VFtqIwDN5Epx.png" alt="image.png" style="zoom:80%;"><p><code>c.run();</code>——&gt;输出这个车的颜色“蓝色”和轮胎数“4”。</p><p>(1)倘若在<code>c.run();</code>后加入<code>Car c1=new Car();c1.run();</code>——&gt;</p><img src="https://i.loli.net/2019/11/13/9TSkMDwUR2z4ILe.png" alt="image.png" style="zoom:80%;"><p>(2)若main的代码块改为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span><span class="title">CarDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.num = <span class="number">5</span>;</span><br><span class="line">Car c1 = c;</span><br><span class="line">c1.color = <span class="string">"green"</span>;</span><br><span class="line">c.run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在内存中的示意图——&gt;</p><img src="C:\Users\丶Melody\AppData\Roaming\Typora\typora-user-images\image-20191113105054592.png" alt="image-20191113105054592" style="zoom:80%;"><blockquote><p>对对象调用的基本概念：用new建立对象，在堆内存中产生对象。那么<strong>对象的特点在于封装数据，数据包含属性和行为</strong>。想要操作对象中的内容就指挥对象做事，指挥哪个对象要明确，操作什么也要明确，用<strong><code>对象.xyz</code></strong>的形式就能完成。</p></blockquote><p>【注意】：<br>如下图，</p><img src="https://i.loli.net/2019/11/13/PkjShzpB5GDg3On.png" alt="image.png" style="zoom:80%;"><p>以前定义在函数里面，现在定义在函数外面                 </p><hr><ol start="5"><li><p>【方法】<br> 方法的定义：</p><ul><li><p>方法是类或对象的行为特征的抽象。</p></li><li><p>Java中的方法不能独立存在，所有的方法必须定义在类中。</p></li><li><p>使用 “类名.方法” 或 “对象.方法” 的形式调用。</p></li><li><p>语法格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符　返回值类型　方法名（参数类型　参数名） {</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法分类：</p></li><li><p>无参数无返回值</p></li><li><p>有参数无返回值</p></li><li><p>无参数有返回值</p></li><li><p>有参数有返回值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"无参数无返回值的方法"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bMethod</span><span class="params">(<span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"有参数无返回值的方法"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"无参数有返回值的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dMethod</span><span class="params">(<span class="keyword">int</span> d)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"有参数有返回值的方法"</span>);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ret;　　　　　<span class="comment">// 创建Method类的对象</span></span><br><span class="line">        Method md = <span class="keyword">new</span> Method();　　　　　<span class="comment">// 通过对象.方法调用</span></span><br><span class="line">        md.aMethod();</span><br><span class="line">        md.bMethod(<span class="number">10</span>);</span><br><span class="line">        ret = md.cMethod();</span><br><span class="line">        ret = md.dMethod(<span class="number">10</span>);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法的参数：</p></li><li><p>方法可以没有参数，或者有多个参数，参数类型可以是任意类型</p></li><li><p>方法参数也是局部变量</p><p>参数为引用数据类型时：</p></li><li><p>当对象实例作为参数传递给方法时，传递的是对象的引用，为地址传递，接受参数的方法可以改变参数的值。</p><p>参数为简单数据类型时：</p></li><li><p>传递的是参数的副本，为值传递，接受参数的方法中不会改变参数的值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParam</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 方法的参数为基本数据类型时，传递的是值的副本（值拷贝）</span></span><br><span class="line"><span class="comment">     * 方法中不会改变元参数的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{<span class="comment">//a, b为形参</span></span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        tmp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">100</span>, y = <span class="number">200</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法的参数为引用数据类型时，传递的对象的引用（传地址）</span></span><br><span class="line"><span class="comment">     * 方法中可以改变参数的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap2</span><span class="params">(MethodParam mp)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> tmp = mp.x;</span><br><span class="line">        mp.x = mp.y;</span><br><span class="line">        mp.y = tmp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MethodParam mp = <span class="keyword">new</span> MethodParam();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>, n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"交换前：a = "</span>+m+<span class="string">",b = "</span>+n);</span><br><span class="line">        mp.swap(m, n);<span class="comment">// m,n为实参</span></span><br><span class="line">        System.out.println(<span class="string">"交换后：a = "</span>+m+<span class="string">",b = "</span>+n);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"交换前：x = "</span>+mp.x+<span class="string">",y = "</span>+mp.y);</span><br><span class="line">        mp.swap2(mp);</span><br><span class="line">        System.out.println(<span class="string">"交换后：x = "</span>+mp.x+<span class="string">",y = "</span>+mp.y);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><hr><ol start="6"><li>【构造方法】</li></ol><p>构造方法需满足以下三个条件 ：</p><ul><li><p>1、方法名与类名同名</p></li><li><p>2、在方法中不能使用return 语句返回 </p></li><li><p>3、在方法名的前面没有返回值的类型声明 </p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>{</span><br><span class="line">    <span class="keyword">private</span>  String name; <span class="comment">//成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Me</span><span class="params">(String name)</span></span>{ <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{ <span class="comment">//成员方法</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{<span class="comment">//成员方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 我如果我在添加一age 如下 添加方法依然是成员方法 , </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me;</span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Me</span> </span>{</span><br><span class="line">    <span class="keyword">private</span>  String name; <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String age; <span class="comment">//成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Me</span><span class="params">(String name)</span></span>{ <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{ <span class="comment">//成员方法</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{<span class="comment">//成员方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>{<span class="comment">//成员方法</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>{<span class="comment">//成员方法</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>个人理解：无论多少方法，==除了构造方法以为都是成员方法==，当然这样理解可能有点偏见..</p><p>它们的区别：</p><ol><li><p>构造方法一般是给对象的数据进行初始化,没有返回值</p></li><li><p>成员方法一般实现对类中成员变量的操作，提供某些功能,有返回类型，可以为void类型</p></li></ol><p>成员方法与构造方法调用的区别</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        </span><br><span class="line">        Me me = <span class="keyword">new</span> Me(<span class="string">"张三"</span>);<span class="comment">//构造方法调用    </span></span><br><span class="line">        System.out.println(me);         </span><br><span class="line">        me.setName(<span class="string">"李四"</span>);<span class="comment">//成员方法调用       </span></span><br><span class="line">        System.out.println(me.getName());     </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从上面的demo中可以看出，<strong>==构造方法通过new运算符调用==</strong>，<strong>==成员方法通过对象调用==</strong>。</p><p><strong>注意：</strong></p><p><strong>类中除了构造方法以外的方法都是成员方法。</strong></p><p><strong>原因是在类中，除了变量外的基本都是成员方法。</strong></p><hr><ol start="7"><li>【成员方法】</li></ol><hr><ol start="8"><li><p>【方法重载，重构，覆盖，重写的区别】</p><p>方法重载还是比较好理解的，就是在类的内部，定义多个方法，这些方法的方法名字相同，参数类型和参数个数不同，注意，返回值类型并不能区分重载 。</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span></span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> c)</span></span>{</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> d)</span></span>{<span class="keyword">return</span>  <span class="number">1</span>;}   <span class="comment">//报错，方法已经定义了</span></span><br></pre></td></tr></tbody></table></figure><p> 在看方法重写（<code>override</code>)<br>方法重写和方法覆盖都是一个道理，发生在子类继承父类或者实现接口的类，要求的是：</p><blockquote><p>1.方法名字相同，<br>2.参数个数不同，<br>3.返回值类型不同 ，</p></blockquote><p>代码： </p><img src="https://i.loli.net/2019/11/14/hMWBc8wnbZr7PtG.png" alt="image.png"><img src="https://i.loli.net/2019/11/14/5bCilLKw1uFWEGy.png" alt="image.png"><p> 方法重构：</p><blockquote><p>定义：在不改变外界外界访问的情况下对代码进行修改，但是不改变原方法的效果，提高其性能，使程序更加易读，可维护。<br>重构是在不改变软件可观察行为的前提下改善其内部结构<br>重构通常不是一次性的，它贯穿软件的整个生命周期，只要觉得不合理都是重构的时机。 </p></blockquote><hr><ol start="9"><li></li></ol><p><strong>题目：</strong>下面说法中，错误的有（  ）</p><p>​            A. Java面向对象语言容许单独的过程与函数存在；</p><p>​            B. Java面向对象语言容许单独的方法存在；</p><p>​            C. Java语言中的方法属于类中的成员（member）；</p><p>​            D. Java语言中的方法必定隶属于某一类（对象），调用方法与过程或函数相同。</p><p> 答案：ABC</p><p> 解释：</p><blockquote><p>方法与函数：这两个概念不严格区分，就是一个东西，通过对象调用的，就是方法，直接调用，就是函数；</p><p>在java中，everything is object 所以，方法，函数，必须隶属于某一个类或对象， java中没有过程。（类中的代码块不知道算不算，就算代码块是过程，也是必须在类中才有的）</p><p>对于C选项，方法分为静态方法和非静态方法，静态方法属于类成员，非静态方法属于实例成员。</p></blockquote><hr><ol start="10"><li></li></ol><ul><li><p>类其实一种类型，它封装了数据和操作。</p></li><li><p>对象是类的实例</p></li><li><p>一个对象比属于某个类</p></li><li><p>一个类可以声明多个对象</p></li></ul><hr><ol start="11"><li>问：构造方法可以调用本类的其他方法吗？</li></ol><blockquote><p>1,构造方法可以调用本类的其他方法。既然可以调用本类的属性,那么也就可以调用属于本类的其他方法。</p></blockquote><blockquote><p>2,需要注意的是,如果要在构造方法里调用一个非静态方法时,应该将该方法声明为private。<br>因为如果这个类被其他类继承成为父类时,这个方法不是private的又被子类所重载，这样在实际创建子类的过程中递归调用到了父类的构造器时，父类构造器对这个方法的调用就会由于多态而实际上调用了子类的方法，当这个子类方法需要用到子类中实例变量<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的时候，就会由于变量没有初始化而出现异常（子类中的实例变量没有初始化这种情况还是会遇见的），这是Java不想看到的情况。 </p></blockquote><hr><ol start="12"><li>一个类的构造方法有多个，在其他类中是否可以被调用？</li></ol><blockquote><p> 只要不是私有的构造函数，在其他类中就可以调用。 传对应的参数就行了 。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>` `<span class="title">A</span></span>{</span><br><span class="line">  ``<span class="keyword">public</span>` `A(String s){}</span><br><span class="line">  ``<span class="keyword">public</span>` `A(``<span class="keyword">int</span>` `n){}</span><br><span class="line">  ``<span class="keyword">public</span>` `A(String s, ``<span class="keyword">int</span>` `n){}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span>` `<span class="title">B</span></span>{</span><br><span class="line">  ``A a1 = ``<span class="keyword">new</span>` `A(``<span class="string">"abc"</span>``);</span><br><span class="line">  ``A a2 = ``<span class="keyword">new</span>` `A(``<span class="number">1</span>``);</span><br><span class="line">  ``A a3 = ``<span class="keyword">new</span>` `A(``<span class="string">"aaa"</span>``,``<span class="number">2</span>``);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></blockquote><hr><ol start="13"><li>类是一种<strong>引用类型</strong>。</li></ol><p>Java的引用类型只有三种，分别是</p><ul><li><p><strong>类(class)</strong></p></li><li><p><strong>接口(interface)</strong></p></li><li><p><strong>数组</strong></p><p>  <a href="https://blog.csdn.net/aEzreal/article/details/80822062" target="_blank" rel="noopener">参考资料</a></p></li></ul><hr><ol start="14"><li>问：方法一定是在类内部被定义的？</li></ol><blockquote><p> 所有方法必须写在类体里，也包括构造方法<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>的。</p><p> static方法同样属于类，叫类方法或静态方法，它与类一同被加载时，处于内存的公共代码区中，无需创建实例来调用，只需用类名引用即可。<br> static方法既可以通过类名来调用，也可以通过类的实例调用。</p><p> Java一切都是以类的形式存在，方法是类的一部分，需要通过类才能进行方法的调用。<br> 从内存存储角度来说，java中找对应方法时，都是先找对应类实例，类实例是根据类来初始化内存的。如果方法在类外部，则无法找到该方法。<br> 所以方法必须在类体里。 </p><p> 注意： 可以在其他类里使用这个类的方法（在不同的包下就要引ltem这个类），继承就是一个类从另一个类继承通过关键字extends 来实现 </p></blockquote><hr><ol start="15"><li>问：构造方法中可不可以有return语句呢?</li></ol><blockquote><p> 可以。而是我们写成这个样子就OK了：<code>return;</code><br> 其实，在任何的<strong>void类型的方法</strong>的最后你都可以写上：<code>return;</code></p></blockquote><hr><ol start="16"><li>问：非构造方法的一般成员方法必须有return语句？</li></ol><blockquote></blockquote><hr><ol start="17"><li>问：类中的数据成员可以按需选择任意类型，包括类本身？</li></ol><blockquote><p>可以。可以参考下图，图源于<a href="https://blog.csdn.net/weixin_38088772/article/details/91041309" target="_blank" rel="noopener">陈三千的博客</a></p></blockquote><img src="https://img-blog.csdnimg.cn/20190606111353386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODA4ODc3Mg==,size_16,color_FFFFFF,t_70" alt="举例.png"><hr><ol start="18"><li></li></ol><hr><ol start="19"><li></li></ol><hr><ol start="20"><li></li></ol><hr><h3 id="注脚："><a href="#注脚：" class="headerlink" title="注脚："></a>注脚：</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.jianshu.com/p/08562e95ed49" target="_blank" rel="noopener">实例变量（全局变量）</a>、<a href="https://www.cnblogs.com/huangzs/p/9961703.html" target="_blank" rel="noopener">成员变量、实例变量、属性</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.jianshu.com/p/773a8e5e199c" target="_blank" rel="noopener">java的构造方法</a>、<a href="https://blog.csdn.net/qq_40393000/article/details/82866470" target="_blank" rel="noopener">java的构造方法</a>、<a href="https://blog.csdn.net/weixin_30455365/article/details/95613213" target="_blank" rel="noopener">Java入门：构造方法</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">暂无</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java笔记——对象、类&quot;&gt;&lt;a href=&quot;#Java笔记——对象、类&quot; class=&quot;headerlink&quot; title=&quot;Java笔记——对象、类&quot;&gt;&lt;/a&gt;Java笔记——对象、类&lt;/h3&gt;&lt;p&gt;创建时间：2019.11.11&lt;/p&gt;
&lt;p&gt;说明：持续更新
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记——面向对象</title>
    <link href="http://yoursite.com/2019/11/13/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2019/11/13/Java笔记——面向对象/</id>
    <published>2019-11-13T04:54:46.000Z</published>
    <updated>2019-11-13T04:57:45.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java笔记——面向对象"><a href="#Java笔记——面向对象" class="headerlink" title="Java笔记——面向对象"></a>Java笔记——面向对象</h3><p>创建时间：2019.11.11</p><p>说明：持续更新ing</p><hr><ol><li><p><strong>Java作为一种面向对象语言</strong>。支持以下基本概念：<br> <strong><code>多态</code></strong> | <strong><code>继承</code></strong> | <strong><code>封装</code></strong> | <strong><code>抽象</code></strong><br>  <strong><code>类</code></strong>  | <strong><code>对象</code></strong> | <strong><code>实例</code></strong> | <strong><code>方法</code></strong> | <strong><code>重载</code></strong></p></li><li><p>“面向对象”和“面向过程”的区别：</p></li></ol><ul><li><code>面向过程</code>：如 C/C++</li></ul><blockquote><p>例子：冰箱装大象。1、打开冰箱门；2、放进大象；3、关上冰箱门。<br>强调过程，“打开”、“存储”、“关闭”三个动作。<br><strong>注重过程，注重的是过程涉及的行为（即功能）。</strong></p></blockquote><ul><li><code>面向对象</code>：如 Java</li></ul><blockquote><p><strong>将功能封装进对象，强调具备了功能的对象。</strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/7WFrJqdjnfpTa4c.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><blockquote><p><strong><em><code>面向对象</code>是基于<code>面向过程</code>的。</em></strong></p></blockquote></li></ul><ol start="3"><li>使用不同思想，对“冰箱装大象”的理解——&gt;</li></ol><p>问：“人开冰箱”事件，其中人、冰箱都是实物（对象），开是动作。若使用面向对象思维，“开”的这个动作是属于“人”还是属于“冰箱”？</p><blockquote><p>答：属于“冰箱”，“人”只是调用了“冰箱”的“开”的方法（或功能），用力作用了门一下并将门打开了。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">人开门：名词提炼法。</span><br><span class="line">/*</span><br><span class="line">人{</span><br><span class="line">    开门（门）{</span><br><span class="line">        门.开（）;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">门{</span><br><span class="line">    开（）{</span><br><span class="line">        操作门轴;</span><br><span class="line">        ……等等;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>面向对象的三个特征：<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>。<br> 以后开发：<code>其实就是找对象使用，没有对象就创建一个对象</code>。<br> <strong><em>找对象，建立对象，使用对象，维护对象的关系。</em></strong></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java笔记——面向对象&quot;&gt;&lt;a href=&quot;#Java笔记——面向对象&quot; class=&quot;headerlink&quot; title=&quot;Java笔记——面向对象&quot;&gt;&lt;/a&gt;Java笔记——面向对象&lt;/h3&gt;&lt;p&gt;创建时间：2019.11.11&lt;/p&gt;
&lt;p&gt;说明：持续更新
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记——语法</title>
    <link href="http://yoursite.com/2019/11/13/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/13/Java笔记——语法/</id>
    <published>2019-11-13T04:54:20.000Z</published>
    <updated>2019-11-13T04:57:45.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java笔记——语法"><a href="#Java笔记——语法" class="headerlink" title="Java笔记——语法"></a>Java笔记——语法</h3><p>创建时间：2019.11.11<br>说明：持续更新ing</p><hr><ol><li>单引号’’中存放一个字符，不能存放字符串。双引号””中存放字符串。</li><li><strong>Java是强类型语言。对于每一种数据都定义了明确的具体数据类型，在内存中总分配了不同的内存空间。</strong></li><li>布尔型常量只有2个值：true、false</li><li>标识符由字母：26个，大小写；数字：0-  8；符号：$ _  组成。</li><li>标识符不能数字开头、不能使用关键字</li><li>main不是关键字，但是是被JVM识别的名字，是程序的入口</li><li>Java中的名称规范：</li></ol><ul><li><p>包名：多单词组成，全为小写</p><blockquote><p>xxxyyyy</p></blockquote></li><li><p>类名接口： 多单词组成，所有单词的首字母大写</p><blockquote><p>XxxYyyZzz</p></blockquote></li><li><p>变量名和函数名：多单词组成时，第一个单词的首字母小写，其余首字母大写</p><blockquote><p>xxxYyyZzz</p></blockquote></li><li><p>常量名：所有字母都大写。每个单词用_隔开</p><blockquote><p>XXX_YYY_ZZZ</p></blockquote></li></ul><ol start="8"><li>注释，写在代码前面</li><li>对于整数：Java有三种表现形式。<br>· 十进制：0-9，满10进1<br>· 八进制：0-7，满8进1，<strong>用0开头表示</strong><br>· 十六进制：0-9，A-F或a-f（A\a是10，B\b是11…F\f是15），满16进1，<strong>用0x开头表示</strong></li><li>null常量：只有一个值null。在对象、引用数据类型时会用上。</li><li>二进制。一个字节8位0、1组合。</li><li>八进制：3位二进制位代表1位八进制位；十六进制：4位二进制位代表1位十六进制位。<br><strong>进制转换：进制越大，表示越短，更方便地表示数据。</strong></li><li>二进制计算：<br><code>5 + 4 = 9</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/hP5DS9bqTnHLZkw.png" alt="十进制转二进制.png" title="">                </div>                <div class="image-caption">十进制转二进制.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/arJOKCdRLm6wfXZ.png" alt="进制之间转换.png" title="">                </div>                <div class="image-caption">进制之间转换.png</div>            </figure></li><li>负数地二进制表现形式：<strong>对应的整数二进制取反加1</strong>。<br><code>负数的最高位都是1</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/53E4DtdvXCkjQLz.png" alt="负数的二进制.png" title="">                </div>                <div class="image-caption">负数的二进制.png</div>            </figure></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java笔记——语法&quot;&gt;&lt;a href=&quot;#Java笔记——语法&quot; class=&quot;headerlink&quot; title=&quot;Java笔记——语法&quot;&gt;&lt;/a&gt;Java笔记——语法&lt;/h3&gt;&lt;p&gt;创建时间：2019.11.11&lt;br&gt;说明：持续更新ing&lt;/p&gt;
&lt;hr&gt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>博客v1.4上线</title>
    <link href="http://yoursite.com/2019/11/08/v1.4/"/>
    <id>http://yoursite.com/2019/11/08/v1.4/</id>
    <published>2019-11-08T14:30:21.000Z</published>
    <updated>2019-11-09T10:29:05.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ul><li><ol><li>主页动画，点击体验效果（<a href="https://melodyhub.ltd/" target="_blank" rel="noopener">这里</a>）</li></ol></li><li><ol start="2"><li>文字跳动（menu、head中的文字均可跳动）,比如顶部的“你用走，可是我用跑”……</li></ol></li><li><ol start="3"><li>新增<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine评论</a>（可以使用表情；发送前浏览）。想用别的，但是暂时先着Valine。可以试着来骚扰我（滑稽~~</li></ol></li><li><ol start="4"><li>有评论，邮件提示(还未测试)。接入Leancloud（<a href="https://leancloud.cn/docs/" target="_blank" rel="noopener">文档</a>）。</li></ol></li><li><ol start="5"><li>底部开启鼠标滑动渲染</li></ol></li><li><ol start="6"><li>开启“一言”api。menu中作者名（Melody Jerry）下面随机显示一句话。同时，使用文字扭曲动画。</li></ol></li></ul><hr><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li>1.重写三个按钮（menu、搜索、回到顶部）的代码，现在可以正常使用了。</li><li><ol start="2"><li>更新menu的Github的url</li></ol></li><li><ol start="3"><li>修复移动端提示证书错误的问题（移动端重定向太多次了，难怪hhh）</li></ol></li><li><ol start="4"><li>主页和首页分仓（也不算是修复，不知道写哪而已）</li></ol></li></ul><hr><h3 id="已知问题（加粗的为重要问题）"><a href="#已知问题（加粗的为重要问题）" class="headerlink" title="已知问题（加粗的为重要问题）"></a>已知问题（加粗的为重要问题）</h3><ul><li><ol><li><strong>menu中的“分类”、“标签”、“关于”，仍然无法正常使用（原因未知）</strong></li></ol></li><li><ol start="2"><li>menu的Email仍旧无法mailto</li></ol></li><li><ol start="3"><li><strong>文章增加标签或类名，无法被tags或categories绑定</strong></li></ol></li><li><ol start="4"><li>浏览人数、浏览次数，无法使用（接口有问题？）</li></ol></li><li><ol start="5"><li><strong>文字截断，异常。（原因位置）</strong></li></ol></li><li><ol start="6"><li>等待发现</li></ol></li></ul><hr><h3 id="未来加入"><a href="#未来加入" class="headerlink" title="未来加入"></a>未来加入</h3><ul><li><ol><li>音乐控件（自动？手动？浮窗？嵌入？音源线上还是本地？）</li></ol></li><li><ol start="2"><li>实时颜色</li></ol></li><li><ol start="3"><li>加载网页时、侧栏、搜索、进度条等动画</li></ol></li><li><ol start="4"><li>留言板？</li></ol></li><li><ol start="5"><li>友情链接？快速导航？</li></ol></li><li><ol start="6"><li>嵌入播放（这个很想要，链接一些学习视频）</li></ol></li><li><ol start="7"><li>天气控件</li></ol></li><li><ol start="8"><li>等待脑洞大开</li></ol></li></ul><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>从早上9点搞到下午4点，午饭还没吃hh，就一直坐在电脑前。<br><del>找模板中的问题代码、修改代码，还是很麻烦的。</del><br>最后分享一首今天网易日推的英文歌（版权原因，没法生成外联播放器）<br><a href="https://music.163.com/#/song?id=555931250" target="_blank" rel="noopener">I’ll Be There-Jess Glynne</a><br>对于我的博客有问题或建议，欢迎在评论或邮件中告诉我。<br>谢谢每一位读者。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;新增&quot;&gt;&lt;a href=&quot;#新增&quot; class=&quot;headerlink&quot; title=&quot;新增&quot;&gt;&lt;/a&gt;新增&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;主页动画，点击体验效果（&lt;a href=&quot;https://melodyhub.ltd/&quot; target=&quot;_b
      
    
    </summary>
    
    
    
      <category term="发布" scheme="http://yoursite.com/tags/%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub建站</title>
    <link href="http://yoursite.com/2019/11/07/Hexo+GitHub/"/>
    <id>http://yoursite.com/2019/11/07/Hexo+GitHub/</id>
    <published>2019-11-07T11:24:01.000Z</published>
    <updated>2019-11-13T04:52:11.915Z</updated>
    
    <content type="html"><![CDATA[<p>前言： 使用CSDN平台撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。</p><hr><h1 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h1><hr><h2 id="一、安装-【hexo】-前的准备"><a href="#一、安装-【hexo】-前的准备" class="headerlink" title="一、安装 【hexo】 前的准备"></a>一、安装 【hexo】 前的准备</h2><h3 id="安装hexo前的必要工作"><a href="#安装hexo前的必要工作" class="headerlink" title="安装hexo前的必要工作"></a>安装hexo前的必要工作</h3><h4 id="1-安装以下两个程序："><a href="#1-安装以下两个程序：" class="headerlink" title="1).安装以下两个程序："></a>1).安装以下两个程序：</h4><table><thead><tr><th>程序</th><th>下载地址</th><th>说明</th></tr></thead><tbody><tr><td>Git</td><td><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git - Downloads</a></td><td>网速的同学，可以自行百度移步到国内镜像</td></tr><tr><td>Node.js</td><td><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js - Downloads</a></td><td>有LTS和Current两个版本，安装 LTS 版即可</td></tr></tbody></table><p>注意：关于Git和Node.js的安装可能会有问题，尤其是Git的安装。这里贴上几张安装界面的截图（来源见水印，作者GroovRain）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/bUgMBmks7VwjPIe.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/9OkM4l2Szbe5RQs.png" alt="f3e0287f.png" title="">                </div>                <div class="image-caption">f3e0287f.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/PKTDE54qpkQ1S8J.png" alt="774cdfb9.png" title="">                </div>                <div class="image-caption">774cdfb9.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/8RYLQNsVoCZpxqB.png" alt="2e023781.png" title="">                </div>                <div class="image-caption">2e023781.png</div>            </figure><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/pFcNrU8QYBVROGw.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h4 id="2-配置（可以在未来部署，并非一定现在）"><a href="#2-配置（可以在未来部署，并非一定现在）" class="headerlink" title="2).配置（可以在未来部署，并非一定现在）"></a>2).配置（<em>可以在未来部署，并非一定现在</em>）</h4><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><pre><code>$ git config --global user.name  "your name"`$ git config --global user.email "your Email"</code></pre><h2 id="二、正式安装【hexo】"><a href="#二、正式安装【hexo】" class="headerlink" title="二、正式安装【hexo】"></a>二、正式安装【hexo】</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。——官方</p></blockquote><p>准备工作完成后，来安装hexo框架吧！<br> <strong>== 主要根据hexo官方的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>来安装hexo ==</strong></p><p>==使用 npm 安装 Hexo==</p><p><code>$ npm install -g hexo-cli</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/BZIuA2XzYeaDQ8k.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>这样,【hexo】就安装完成了。</p><a id="more"></a><!-- more --><!-- more --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言： 使用CSDN平台撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;安装篇&quot;&gt;&lt;a href=&quot;#安装篇&quot; class=&quot;headerlink&quot; title=&quot;安装篇&quot;&gt;&lt;/a&gt;安装篇&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、安装-【hexo】-前的准备&quot;&gt;&lt;a href=&quot;#一、安装-【hexo】-前的准备&quot; class=&quot;headerlink&quot; title=&quot;一、安装 【hexo】 前的准备&quot;&gt;&lt;/a&gt;一、安装 【hexo】 前的准备&lt;/h2&gt;&lt;h3 id=&quot;安装hexo前的必要工作&quot;&gt;&lt;a href=&quot;#安装hexo前的必要工作&quot; class=&quot;headerlink&quot; title=&quot;安装hexo前的必要工作&quot;&gt;&lt;/a&gt;安装hexo前的必要工作&lt;/h3&gt;&lt;h4 id=&quot;1-安装以下两个程序：&quot;&gt;&lt;a href=&quot;#1-安装以下两个程序：&quot; class=&quot;headerlink&quot; title=&quot;1).安装以下两个程序：&quot;&gt;&lt;/a&gt;1).安装以下两个程序：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;程序&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Git&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git - Downloads&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;网速的同学，可以自行百度移步到国内镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js - Downloads&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;有LTS和Current两个版本，安装 LTS 版即可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;注意：关于Git和Node.js的安装可能会有问题，尤其是Git的安装。这里贴上几张安装界面的截图（来源见水印，作者GroovRain）。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/bUgMBmks7VwjPIe.png&quot; alt=&quot;image.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/9OkM4l2Szbe5RQs.png&quot; alt=&quot;f3e0287f.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;f3e0287f.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/PKTDE54qpkQ1S8J.png&quot; alt=&quot;774cdfb9.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;774cdfb9.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/8RYLQNsVoCZpxqB.png&quot; alt=&quot;2e023781.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;2e023781.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;安装完成后，在开始菜单里找到“Git”-&amp;gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/pFcNrU8QYBVROGw.png&quot; alt=&quot;image.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image.png&lt;/div&gt;
            &lt;/figure&gt;

&lt;h4 id=&quot;2-配置（可以在未来部署，并非一定现在）&quot;&gt;&lt;a href=&quot;#2-配置（可以在未来部署，并非一定现在）&quot; class=&quot;headerlink&quot; title=&quot;2).配置（可以在未来部署，并非一定现在）&quot;&gt;&lt;/a&gt;2).配置（&lt;em&gt;可以在未来部署，并非一定现在&lt;/em&gt;）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name  &quot;your name&quot;`

$ git config --global user.email &quot;your Email&quot;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、正式安装【hexo】&quot;&gt;&lt;a href=&quot;#二、正式安装【hexo】&quot; class=&quot;headerlink&quot; title=&quot;二、正式安装【hexo】&quot;&gt;&lt;/a&gt;二、正式安装【hexo】&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。——官方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准备工作完成后，来安装hexo框架吧！&lt;br&gt; &lt;strong&gt;== 主要根据hexo官方的&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;来安装hexo ==&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;==使用 npm 安装 Hexo==&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install -g hexo-cli&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/BZIuA2XzYeaDQ8k.png&quot; alt=&quot;image.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image.png&lt;/div&gt;
            &lt;/figure&gt;


&lt;p&gt;这样,【hexo】就安装完成了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo+GitHub" scheme="http://yoursite.com/tags/Hexo-GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/06/hello-world/"/>
    <id>http://yoursite.com/2019/11/06/hello-world/</id>
    <published>2019-11-06T08:49:56.000Z</published>
    <updated>2019-11-09T09:34:35.824Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
