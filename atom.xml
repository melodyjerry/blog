<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-07-16T08:35:26.696Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo发布文章报错</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/20/hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/20/hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%8A%A5%E9%94%99/</id>
    <published>2020-07-20T09:21:35.763Z</published>
    <updated>2020-07-16T08:35:26.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>提示<code>YAMLException: end of the stream or a document separator is expected at line 2, column 5:</code><br><img src="https://s1.ax1x.com/2020/07/16/UDn9KA.png" srcset="/blog/img/loading.gif" alt="UDn9KA.png"></p><div class="hljs"><pre><code class="hljs subunit">$ hexo gINFO  Start processing<span class="hljs-keyword">ERROR </span>Process failed: _posts/Druid的配置及连接.mdYAMLException: end of the stream or a document separator is expected at line 2, column 5:    date: 2020<span class="hljs-string">-02</span><span class="hljs-string">-23</span> 17:36:53        ^</code></pre></div><p><strong>解决</strong></p><p>出现这种情况，一般都是缺少空格，在 <code>:</code> 冒号之后要有<strong>空格</strong>！</p><p>检查x行y列附近的冒号，其之后是否跟了空格。</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>提示<code>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5:</code></p><p><img src="https://s1.ax1x.com/2020/07/16/UD3Ql8.png" srcset="/blog/img/loading.gif" alt="UD3Ql8.png"></p><div class="hljs"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>Process failed: _posts/随机动漫图片api.mdYAMLException: end of the stream or a document separator is expected at line 2, column 5:    tags:        ^</code></pre></div><p><strong>解决</strong></p><p>可能是缺少了必要的<strong>空格</strong>，和上面的解决一样</p><p>但是也可能是缺少必要的引号，比如<code>''</code></p><p><img src="https://s1.ax1x.com/2020/07/16/UD3f1K.png" srcset="/blog/img/loading.gif" alt="UD3f1K.png"></p><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>官方问题解答：<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/troubleshooting.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;p&gt;提示&lt;code&gt;YAMLException: end of the stream or a document separator is expect
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【LeetCode】167. 两数之和 II - 输入有序数组</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/20/%E3%80%90LeetCode%E3%80%91167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-II-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/20/%E3%80%90LeetCode%E3%80%91167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-II-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-20T03:28:57.000Z</published>
    <updated>2020-07-20T09:12:33.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><p>说明:</p><blockquote><p>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p></blockquote><p>示例:</p><div class="hljs"><pre><code class="hljs angelscript">输入: numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>输出: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]解释: <span class="hljs-number">2</span> 与 <span class="hljs-number">7</span> 之和等于目标数 <span class="hljs-number">9</span> 。因此 index1 = <span class="hljs-number">1</span>, index2 = <span class="hljs-number">2</span> 。</code></pre></div><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h2><p>时间复杂度：O(n2)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) {        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];        <span class="hljs-keyword">int</span> len = numbers.length;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) {            <span class="hljs-keyword">int</span> need = target - numbers[i];            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) {                <span class="hljs-keyword">if</span> (numbers[j] == need) {                    ans[<span class="hljs-number">0</span>] = i + <span class="hljs-number">1</span>;                    ans[<span class="hljs-number">1</span>] = j + <span class="hljs-number">1</span>;                    <span class="hljs-keyword">return</span> ans;                }            }        }        <span class="hljs-keyword">return</span> ans;    }}</code></pre></div><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>时间复杂度：O(n)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) {        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = numbers.length - <span class="hljs-number">1</span>, mid;        <span class="hljs-keyword">while</span>(left &lt; right){            mid = numbers[left] + numbers[right];            <span class="hljs-keyword">if</span>(mid == target)                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] {left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>};            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(mid &lt; target)                left ++;            <span class="hljs-keyword">else</span>                right --;        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }}</code></pre></div><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>时间复杂度：O(nlogn)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] num, <span class="hljs-keyword">int</span> target) {        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.length; i++) {            <span class="hljs-keyword">int</span> low = i + <span class="hljs-number">1</span>, high = num.length - <span class="hljs-number">1</span>;            <span class="hljs-keyword">int</span> val = target - num[i];            <span class="hljs-keyword">while</span> (low &lt;= high) {                <span class="hljs-keyword">int</span> mid = low + (high - low) / <span class="hljs-number">2</span>; <span class="hljs-comment">//用&gt;&gt;会超时。。。</span>                <span class="hljs-keyword">if</span> (num[mid] == val)                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]{i + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>};                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num[mid] &lt; val)                    low = mid + <span class="hljs-number">1</span>;                <span class="hljs-keyword">else</span>                    high = mid - <span class="hljs-number">1</span>;            }        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }}</code></pre></div><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] num, <span class="hljs-keyword">int</span> target) {        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(num.length);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.length; i++) {            <span class="hljs-keyword">if</span> (map.get(target - num[i]) != <span class="hljs-keyword">null</span>) {                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]{map.get(target - num[i]) + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>};            }            map.put(num[i], i);        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }}<span class="hljs-comment">/* 或者</span><span class="hljs-comment">public int[] twoSum(int[] numbers, int target) {</span><span class="hljs-comment">    int[] ans = new int[2];</span><span class="hljs-comment">    int len = numbers.length;</span><span class="hljs-comment">    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><span class="hljs-comment">    for (int i = 0; i &lt; len; i++) {</span><span class="hljs-comment">        map.put(numbers[i], i + 1);</span><span class="hljs-comment">    }</span><span class="hljs-comment">    for (int i = 0; i &lt; len; i++) {</span><span class="hljs-comment">        int need = target - numbers[i];</span><span class="hljs-comment">        if (map.containsKey(need)) {</span><span class="hljs-comment">            ans[0] = i + 1;</span><span class="hljs-comment">            ans[1] = map.get(need);</span><span class="hljs-comment">            return ans;</span><span class="hljs-comment">        }</span><span class="hljs-comment">    }</span><span class="hljs-comment">    return ans;</span><span class="hljs-comment">}</span><span class="hljs-comment">*/</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 inde
      
    
    </summary>
    
    
    
      <category term="算法" scheme="https://melodyjerry.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java获取项目访问路径的相关方法</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/20/Java%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/20/Java%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-20T02:33:41.000Z</published>
    <updated>2020-07-20T02:33:41.730Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在jsp和class文件中调用的相对路径不同。</strong></p><p>在jsp里，根目录是<code>WebRoot在class</code><br>文件中，根目录是<code>WebRoot/WEB-INF/classes</code><br>当然你也可以用<code>System.getProperty("user.dir")</code>获取你工程的绝对路径。</p><a id="more"></a><p>1.jsp中取得路径：</p><p>以工程名为TEST为例：</p><p>(1)得到包含工程名的当前页面全路径：<code>request.getRequestURI()</code></p><p>结果：/TEST/test.jsp</p><p>(2)得到工程名：<code>request.getContextPath()</code></p><p>结果：/TEST</p><p>(3)得到当前页面所在目录下全名称：<code>request.getServletPath()</code></p><p>结果：如果页面在jsp目录下 /TEST/jsp/test.jsp</p><p>(4)得到页面所在服务器的全路径：<code>application.getRealPath("页面.jsp")</code></p><p>结果：D:\resin\webapps\TEST\test.jsp</p><p>(5)得到页面所在服务器的绝对路径：<code>absPath=new java.io.File(application.getRealPath(request.getRequestURI())).getParent();</code></p><p>结果：D:\resin\webapps\TEST</p><p>2.在类中取得路径：</p><p>(1)类的绝对路径：<code>Class.class.getClass().getResource("/").getPath()</code></p><p>结果：/D:/TEST/WebRoot/WEB-INF/classes/pack/</p><p>(2)得到工程的路径：<code>System.getProperty("user.dir")</code></p><p>结果：D:\TEST</p><p>3.在Servlet中取得路径：</p><p>(1)得到工程目录：<code>request.getSession().getServletContext().getRealPath("")</code> 参数可具体到包名。</p><p>结果：E:\Tomcat\webapps\TEST</p><p>(2)得到IE地址栏地址：<code>request.getRequestURL()</code></p><p>结果：<a href="http://localhost:8080/TEST/test" target="_blank" rel="noopener">http://localhost:8080/TEST/test</a></p><p>(3)得到相对地址：<code>request.getRequestURI()</code></p><p>结果：/TEST/test</p><p>另，Class类还有一个<code>getResourceAsStream</code>方法，记得以前有个项目要读取在同一个包内的一个xml，就用的这个。</p><p>1.如何获得当前文件路径</p><p>常用：</p><p>(1).<code>Test.class.getResource("")</code></p><p>得到的是当前类FileTest.class文件的URI目录。不包括自己！</p><p>(2).<code>Test.class.getResource("/")</code></p><p>得到的是当前的classpath的绝对URI。</p><p>(3).<code>Thread.currentThread().getContextClassLoader().getResource("")</code></p><p>得到的也是当前ClassPath的绝对URI。</p><p>(4).<code>Test.class.getClassLoader().getResource("")</code></p><p>得到的也是当前ClassPath的绝对URI。</p><p>(5).<code>ClassLoader.getSystemResource("")</code></p><p>得到的也是当前ClassPath的绝对URI。</p><p>尽量不要使用相对于<code>System.getProperty("user.dir")</code>当前用户目录的相对路径，后面可以看出得出结果五花八门。</p><p>(6) <code>new File("").getAbsolutePath()</code>也可用。</p><p>注：若这些路径中出现空格，并且空格被 代替，则可以使用<code>path = java.net.URLDecoder.decode(path,"utf-8")</code>进行转化;</p><p>2.Web服务器</p><p>(1).Tomcat</p><p>在类中输出<code>System.getProperty("user.dir");</code>显示的是<code>%Tomcat_Home%/bin</code></p><p>(2).Resin</p><p>不是你的JSP放的相对路径，是JSP引擎执行这个JSP编译成Servlet的路径为根.比如用新建文件法测试<code>File f = new File("a.htm");</code></p><p>这个a.htm在resin的安装目录下</p><p>(3).如何读文件</p><p>使用<code>ServletContext.getResourceAsStream()</code>就可以</p><p>(4).获得文件真实路径</p><p><code>String   file_real_path=ServletContext.getRealPath("mypath/filename");</code></p><p>不建议使用<code>request.getRealPath("/");</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在jsp和class文件中调用的相对路径不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在jsp里，根目录是&lt;code&gt;WebRoot在class&lt;/code&gt;&lt;br&gt;文件中，根目录是&lt;code&gt;WebRoot/WEB-INF/classes&lt;/code&gt;&lt;br&gt;当然你也可以用&lt;code&gt;System.getProperty(&quot;user.dir&quot;)&lt;/code&gt;获取你工程的绝对路径。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="java" scheme="https://melodyjerry.github.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>js代码屏蔽网站鼠标右键，屏蔽按键刷新审核元素</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/20/%E7%9F%AD%E7%9F%AD%E4%BB%A3%E7%A0%81%E5%B1%8F%E8%94%BD%E7%BD%91%E7%AB%99%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%EF%BC%8C%E5%B1%8F%E8%94%BD%E6%8C%89%E9%94%AE%E5%88%B7%E6%96%B0%E5%AE%A1%E6%A0%B8%E5%85%83%E7%B4%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/20/%E7%9F%AD%E7%9F%AD%E4%BB%A3%E7%A0%81%E5%B1%8F%E8%94%BD%E7%BD%91%E7%AB%99%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%EF%BC%8C%E5%B1%8F%E8%94%BD%E6%8C%89%E9%94%AE%E5%88%B7%E6%96%B0%E5%AE%A1%E6%A0%B8%E5%85%83%E7%B4%A0/</id>
    <published>2020-07-20T02:29:55.000Z</published>
    <updated>2020-07-20T09:09:45.317Z</updated>
    
    <content type="html"><![CDATA[<div class="hljs"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<span class="hljs-keyword">var</span> OriginTitile = <span class="hljs-built_in">document</span>.title;<span class="hljs-keyword">var</span> titleTime;<span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'visibilitychange'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.hidden) {        $(<span class="hljs-string">'[rel="shortcut icon"]'</span>).attr(<span class="hljs-string">'href'</span>, <span class="hljs-string">"http://pjax.cn/loss.ico"</span>);        <span class="hljs-built_in">document</span>.title = <span class="hljs-string">'404 Not Found'</span>;        clearTimeout(titleTime);    }    <span class="hljs-keyword">else</span> {        $(<span class="hljs-string">'[rel="shortcut icon"]'</span>).attr(<span class="hljs-string">'href'</span>, <span class="hljs-string">"http://pjax.cn/favicon.ico"</span>);        <span class="hljs-built_in">document</span>.title = <span class="hljs-string">'(/≧▽≦/)咦！又好了！'</span> + OriginTitile;        titleTime = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{            <span class="hljs-built_in">document</span>.title = OriginTitile;        }, <span class="hljs-number">2000</span>);    }});<span class="hljs-comment">//屏蔽鼠标右键</span><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;};<span class="hljs-comment">//屏蔽f12等</span><span class="hljs-built_in">document</span>.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{    <span class="hljs-keyword">var</span> e = e || event;    <span class="hljs-keyword">var</span> nums = [<span class="hljs-number">113</span>,<span class="hljs-number">114</span>,<span class="hljs-number">115</span>,<span class="hljs-number">116</span>,<span class="hljs-number">117</span>,<span class="hljs-number">118</span>,<span class="hljs-number">119</span>,<span class="hljs-number">120</span>,<span class="hljs-number">121</span>,<span class="hljs-number">122</span>,<span class="hljs-number">123</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> nums){        <span class="hljs-keyword">if</span>(e.keyCode == nums[i]){            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        }    }};});&lt;<span class="hljs-regexp">/script&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs js&quot;&gt;&amp;lt;script type=&lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;
	$(&lt;span class=&quot;hljs-fun
      
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>给网站加入欢迎语音</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/20/%E7%BB%99%E7%BD%91%E7%AB%99%E5%8A%A0%E5%85%A5%E6%AC%A2%E8%BF%8E%E8%AF%AD%E9%9F%B3/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/20/%E7%BB%99%E7%BD%91%E7%AB%99%E5%8A%A0%E5%85%A5%E6%AC%A2%E8%BF%8E%E8%AF%AD%E9%9F%B3/</id>
    <published>2020-07-20T02:27:35.000Z</published>
    <updated>2020-07-20T02:27:35.703Z</updated>
    
    <content type="html"><![CDATA[<p>有一个网站，想让用户进入主页后听到语音欢迎，其实就是给网站加背景音乐的代码啊!这里我提供的代码是调用的百度语音，代码如下：</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://tts.baidu.com/text2audio?lan=zh&amp;ie=UTF-8&amp;text=欢迎访问笑忘歌"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">embed</span>&gt;</span></code></pre></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个网站，想让用户进入主页后听到语音欢迎，其实就是给网站加背景音乐的代码啊!这里我提供的代码是调用的百度语音，代码如下：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;embed&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://tts.baidu.com/text2audio?lan=zh&amp;amp;ie=UTF-8&amp;amp;text=欢迎访问笑忘歌&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;embed&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门踩坑记录</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/19/MyBatis%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/19/MyBatis%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-07-19T15:01:00.000Z</published>
    <updated>2020-07-20T09:15:55.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis入门程序"><a href="#MyBatis入门程序" class="headerlink" title="MyBatis入门程序"></a><a href="https://www.cnblogs.com/melodyjerry/p/13346153.html" target="_blank" rel="noopener">MyBatis入门程序</a></h1><h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>学习过程中遇到很多问题，记录一下。</p><h2 id="Maven静态资源过滤问题"><a href="#Maven静态资源过滤问题" class="headerlink" title="Maven静态资源过滤问题"></a>Maven静态资源过滤问题</h2><p><img src="https://s1.ax1x.com/2020/07/19/UWu9VU.png" srcset="/blog/img/loading.gif" alt="UWu9VU.png"></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resource，来防止我们资源导出失败的问题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><h2 id="Junit测试时，可能会提示"><a href="#Junit测试时，可能会提示" class="headerlink" title="Junit测试时，可能会提示"></a>Junit测试时，可能会提示</h2><div class="hljs"><pre><code class="hljs java">org.apache.ibatis.binding.BindingException: Type <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">com</span>.<span class="hljs-title">melodyhub</span>.<span class="hljs-title">dao</span>.<span class="hljs-title">UserDao</span> <span class="hljs-title">is</span> <span class="hljs-title">not</span> <span class="hljs-title">known</span> <span class="hljs-title">to</span> <span class="hljs-title">the</span> <span class="hljs-title">MapperRegistry</span>.</span></code></pre></div><p><strong><code>MapperRegistry</code>是什么？</strong></p><p><font color="red" size="5">每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！</font></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"com/melodyhub/dao/UserMapper.xml"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre></div><h2 id="MySQL时区"><a href="#MySQL时区" class="headerlink" title="MySQL时区"></a>MySQL时区</h2><p>由于MySQL底层是使用的时区是CST，跟中国时间相差挣好8个小时。</p><p>解决办法是在<code>mybatis-config.xml</code>中``jdbc<code>的</code>url`末尾加上，二选一即可：</p><div class="hljs"><pre><code class="hljs xml">&amp;amp;serverTimezone=GMT%2B8&amp;amp;useTimezone=true&amp;amp;serverTimezone=UTC`</code></pre></div><p>参考：<a href="https://blog.csdn.net/ziningyihao/article/details/90644295" target="_blank" rel="noopener">https://blog.csdn.net/ziningyihao/article/details/90644295</a></p><h2 id="MySQL驱动-版本问题"><a href="#MySQL驱动-版本问题" class="headerlink" title="MySQL驱动/版本问题"></a>MySQL驱动/版本问题</h2><p>所有的代码都没有问题，但是就是连接不上数据库，经过排查，发现我的MySQL版本是8.0，驱动包是5.1.47，差距太大，不兼容。</p><p>将MySQL降级到5.7.29，问题解决。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis入门程序&quot;&gt;&lt;a href=&quot;#MyBatis入门程序&quot; class=&quot;headerlink&quot; title=&quot;MyBatis入门程序&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/melodyjerry/p/133461
      
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门程序</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/19/MyBatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/19/MyBatis%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-07-19T15:00:00.000Z</published>
    <updated>2020-07-20T08:58:39.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路流程"><a href="#思路流程" class="headerlink" title="思路流程"></a>思路流程</h1><p><strong>搭建环境–&gt;导入Mybatis—&gt;编写代码—&gt;测试</strong></p><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><h2 id="1、搭建实验数据库"><a href="#1、搭建实验数据库" class="headerlink" title="1、搭建实验数据库"></a>1、搭建实验数据库</h2><div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-string">`mybatis`</span>;<span class="hljs-keyword">USE</span> <span class="hljs-string">`mybatis`</span>;<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (<span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`pwd`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> <span class="hljs-string">`user`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`pwd`</span>) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">'狂神'</span>,<span class="hljs-string">'123456'</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">'张三'</span>,<span class="hljs-string">'abcdef'</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">'李四'</span>,<span class="hljs-string">'987654'</span>);</code></pre></div><h2 id="2、导入MyBatis相关-jar-包"><a href="#2、导入MyBatis相关-jar-包" class="headerlink" title="2、导入MyBatis相关 jar 包"></a>2、导入MyBatis相关 jar 包</h2><ul><li>GitHub上找，或<a href="https://mvnrepository.com，或https://maven.aliyun.com/mvn/search" target="_blank" rel="noopener">https://mvnrepository.com，或https://maven.aliyun.com/mvn/search</a></li><li>pom.xml</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-comment">&lt;!--父工程--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.melodyhub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-comment">&lt;!--子模块--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-02<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-03<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span>    <span class="hljs-comment">&lt;!--导入依赖--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--MyBatis--&gt;</span>        <span class="hljs-comment">&lt;!--https://mvnrepository.com/artifact/org.mybatis/mybatis--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--junit--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!--在build中配置resource，来防止我们资源导出失败的问题--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><h2 id="3、编写MyBatis核心配置文件"><a href="#3、编写MyBatis核心配置文件" class="headerlink" title="3、编写MyBatis核心配置文件"></a>3、编写MyBatis核心配置文件</h2><ul><li>查看<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">帮助文档</a></li><li>mybatis-config.xml</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-comment">&lt;!--configuration 核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--environments 可配置多个环境--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>        <span class="hljs-comment">&lt;!--多个环境，不同id--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>            <span class="hljs-comment">&lt;!--事务管理--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"com/melodyhub/dao/UserMapper.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><h2 id="4、编写MyBatis工具类"><a href="#4、编写MyBatis工具类" class="headerlink" title="4、编写MyBatis工具类"></a>4、编写MyBatis工具类</h2><ul><li>查看<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">帮助文档</a></li></ul><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.utils;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-comment">//sqlSessionFactory --&gt; sqlSession</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> {        <span class="hljs-comment">//使用MyBatis获取sqlSessionFactory对象</span>        <span class="hljs-keyword">try</span> {            String resource = <span class="hljs-string">"mybatis-config.xml"</span>;            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        } <span class="hljs-keyword">catch</span> (IOException e) {            e.printStackTrace();        }    }    <span class="hljs-comment">//获取SqlSession连接</span>    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例4</span>    <span class="hljs-comment">//SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();        <span class="hljs-comment">/* SqlSession sqlSession = sqlSessionFactory.openSession();</span><span class="hljs-comment">        return  sqlSession; */</span>    }}</code></pre></div><h2 id="5、创建实体类"><a href="#5、创建实体类" class="headerlink" title="5、创建实体类"></a>5、创建实体类</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-comment">//变量名必须和数据库的列名相同</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{        toString();    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>{        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.pwd = pwd;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> id;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> pwd;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{        <span class="hljs-keyword">this</span>.id = id;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>{        <span class="hljs-keyword">this</span>.pwd = pwd;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"User{"</span> +                <span class="hljs-string">"id="</span> + id +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">", pwd='"</span> + pwd + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><h2 id="6、编写Mapper接口类"><a href="#6、编写Mapper接口类" class="headerlink" title="6、编写Mapper接口类"></a>6、编写Mapper接口类</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.dao;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-comment">//查询全部用户</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//根据id查询用户</span>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-comment">//insert一个用户</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-comment">//修改用户</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-comment">//删除一个用户</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;}</code></pre></div><h2 id="7、编写Mapper-xml配置文件"><a href="#7、编写Mapper-xml配置文件" class="headerlink" title="7、编写Mapper.xml配置文件"></a>7、编写Mapper.xml配置文件</h2><ul><li>namespace 十分重要，不能写错！</li><li>原理：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">#探究已映射的 SQL 语句</a></li><li>UserMapper.xml</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="hljs-comment">&lt;!--namespace="绑定一个对应的Dao/Mapper接口"--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.melodyhub.dao.UserMapper"</span>&gt;</span>    <span class="hljs-comment">&lt;!--select查询语句--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserList"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.melodyhub.pojo.User"</span>&gt;</span>        select * from mybatis.user;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><h2 id="8、编写测试类"><a href="#8、编写测试类" class="headerlink" title="8、编写测试类"></a>8、编写测试类</h2><ul><li>Junit 包测试（在绿色图标的java包中<img src="https://s1.ax1x.com/2020/07/20/UhzCKH.png" srcset="/blog/img/loading.gif" alt="UhzCKH.png" style="zoom:60%;">）</li><li>test/java/com/melody/dao/UserDaoTest.java</li></ul><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.dao;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> com.melodyhub.utils.MyBatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>{    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//第一步：获取SqlSession对象</span>        SqlSession sqlSession = MyBatisUtils.getSqlSession();        <span class="hljs-comment">//第二部：执行SQL</span>        <span class="hljs-comment">//方式1：getMapper</span>        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        List&lt;User&gt; userList = userMapper.getUserList();        <span class="hljs-comment">//方式2：</span>        <span class="hljs-comment">//遍历结果集</span>        <span class="hljs-keyword">for</span> (User user : userList) {            System.out.println(user);        }        <span class="hljs-comment">//关闭SqlSession对象</span>        sqlSession.close();    }}</code></pre></div><h2 id="9、运行测试，成功的查询出来的我们的数据，ok！"><a href="#9、运行测试，成功的查询出来的我们的数据，ok！" class="headerlink" title="9、运行测试，成功的查询出来的我们的数据，ok！"></a>9、运行测试，成功的查询出来的我们的数据，ok！</h2><p><img src="https://s1.ax1x.com/2020/07/20/UhzAat.png" srcset="/blog/img/loading.gif" alt="UhzAat.png"></p><h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>学习过程中遇到很多问题，记录一下。</p><h2 id="Maven静态资源过滤问题"><a href="#Maven静态资源过滤问题" class="headerlink" title="Maven静态资源过滤问题"></a>Maven静态资源过滤问题</h2><p><img src="https://s1.ax1x.com/2020/07/19/UWu9VU.png" srcset="/blog/img/loading.gif" alt="UWu9VU.png"></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resource，来防止我们资源导出失败的问题--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><h2 id="Junit测试时，可能会提示"><a href="#Junit测试时，可能会提示" class="headerlink" title="Junit测试时，可能会提示"></a>Junit测试时，可能会提示</h2><div class="hljs"><pre><code class="hljs java">org.apache.ibatis.binding.BindingException: Type <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">com</span>.<span class="hljs-title">melodyhub</span>.<span class="hljs-title">dao</span>.<span class="hljs-title">UserDao</span> <span class="hljs-title">is</span> <span class="hljs-title">not</span> <span class="hljs-title">known</span> <span class="hljs-title">to</span> <span class="hljs-title">the</span> <span class="hljs-title">MapperRegistry</span>.</span></code></pre></div><p><strong><code>MapperRegistry</code>是什么？</strong></p><p><font color="red" size="5">每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！</font></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"com/melodyhub/dao/UserMapper.xml"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre></div><h2 id="MySQL时区"><a href="#MySQL时区" class="headerlink" title="MySQL时区"></a>MySQL时区</h2><p>由于MySQL底层是使用的时区是CST，跟中国时间相差挣好8个小时。</p><p>解决办法是在<code>mybatis-config.xml</code>中``jdbc<code>的</code>url`末尾加上，二选一即可：</p><div class="hljs"><pre><code class="hljs xml">&amp;amp;serverTimezone=GMT%2B8&amp;amp;useTimezone=true&amp;amp;serverTimezone=UTC`</code></pre></div><p>参考：<a href="https://blog.csdn.net/ziningyihao/article/details/90644295" target="_blank" rel="noopener">https://blog.csdn.net/ziningyihao/article/details/90644295</a></p><h2 id="MySQL驱动-版本问题"><a href="#MySQL驱动-版本问题" class="headerlink" title="MySQL驱动/版本问题"></a>MySQL驱动/版本问题</h2><p>所有的代码都没有问题，但是就是连接不上数据库，经过排查，发现我的MySQL版本是8.0，驱动包是5.1.47，差距太大，不兼容。</p><p>将MySQL降级到5.7.29，问题解决。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;思路流程&quot;&gt;&lt;a href=&quot;#思路流程&quot; class=&quot;headerlink&quot; title=&quot;思路流程&quot;&gt;&lt;/a&gt;思路流程&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;搭建环境–&amp;gt;导入Mybatis—&amp;gt;编写代码—&amp;gt;测试&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis问题解决Error building SqlSession.</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/19/MyBatis%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3Error-building-SqlSession/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/19/MyBatis%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3Error-building-SqlSession/</id>
    <published>2020-07-19T12:59:52.000Z</published>
    <updated>2020-07-20T09:00:28.740Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/07/19/UWh0kq.png" srcset="/blog/img/loading.gif" alt="UWh0kq.png"></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/19/UWh0kq.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;UWh0kq.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL配置文件参数详解</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/19/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/19/MySQL%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-07-19T12:31:32.000Z</published>
    <updated>2020-07-19T12:32:42.553Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Windows中是<code>my.ini</code></li><li>Linux中是<code>my.cnf</code><a id="more"></a><div class="hljs"><pre><code class="hljs makefile"><span class="hljs-comment">#*** client options 相关选项 ***#</span><span class="hljs-comment">#以下选项会被MySQL客户端应用读取。注意只有MySQL附带的客户端应用程序保证可以读取这段内容。如果你想你自己的MySQL应用程序获取这些值。需要在MySQL客户端库初始化的时候指定这些选项。</span>[client]port = 3309socket =  /usr/local/mysql/tmp/mysql.sock[mysqld]!<span class="hljs-keyword">include</span>  /usr/local/mysql/etc/mysqld.cnf <span class="hljs-comment">#包含的配置文件 ，把用户名，密码文件单独存放</span>port = 3309bind-address = 0.0.0.0server-id = 1 <span class="hljs-comment">#表示是本机的序号为1,唯一</span>socket =  /usr/local/mysql/tmp/mysql.sockpid-file =  /usr/local/mysql/var/mysql.pidbasedir =  /usr/local/mysql/datadir =  /usr/local/mysql/var/tmpdir =  /usr/local/mysql/tmp/ <span class="hljs-comment">#此目录被 MySQL用来保存临时文件.例如,它被用来处理基于磁盘的大型排序,和内部排序一样，以及简单的临时表.如果你不创建非常大的临时文件,将其放置到 swapfs/tmpfs 文件系统上也许比较好。另一种选择是你也可以将其放置在独立的磁盘上.你可以使用”;”来放置多个路径，他们会按照 roud-robin 方法被轮询使用.</span>slave-load-tmpdir =  /usr/local/mysql/tmp/ <span class="hljs-comment">#当 slave 执行 load data infile 时用</span><span class="hljs-comment">#*** skip options 相关选项 ***#</span>skip-name-resolve <span class="hljs-comment">#禁止 MySQL 对外部连接进行 DNS 解析，使用这一选项可以消除 MySQL 进行 DNS 解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用 IP 地址方式，否则 MySQL 将无法正常处理连接请求！</span>skip-symbolic-links <span class="hljs-comment">#不能使用连接文件，多个客户可能会访问同一个数据库，因此这防止外部客户锁定 MySQL 服务器。 该选项默认开启</span>skip-external-locking <span class="hljs-comment">#不使用系统锁定，要使用 myisamchk,必须关闭服务器 ,避免 MySQL的外部锁定，减少出错几率增强稳定性。</span>skip-slave-start <span class="hljs-comment">#启动 mysql,不启动复制</span>skip-networking <span class="hljs-comment">#开启该选项可以彻底关闭 MySQL 的 TCP/IP 连接方式，如果 WEB 服务器是以远程连接的方式访问 MySQL 数据库服务器则不要开启该选项！否则将无法正常连接！ 如果所有的进程都是在同一台服务器连接到本地的 mysqld, 这样设置将是增强安全的方法</span>sysdate-is-now = 1 <span class="hljs-comment">#把SYSDATE 函数编程为 NOW的别名</span><span class="hljs-comment">#*** 系统资源相关选项 ***#</span>back_log = 50 <span class="hljs-comment">#接受队列，对于没建立 tcp 连接的请求队列放入缓存中，队列大小为 back_log，受限制与 OS 参数，试图设定 back_log 高于你的操作系统的限制将是无效的。默认值为 50。对于 Linux 系统推荐设置为小于512的整数。如果系统在一个短时间内有很多连接，则需要增大该参数的值</span>max_connections = 1000 <span class="hljs-comment">#指定MySQL允许的最大连接进程数。如果在访问数据库时经常出现"Too Many Connections"的错误提 示，则需要增大该参数值。</span>max_connect_errors = 10000 <span class="hljs-comment">#如果某个用户发起的连接 error 超过该数值，则该用户的下次连接将被阻塞，直到管理员执行 flush hosts ; 命令或者服务重启， 防止黑客 ， 非法的密码以及其他在链接时的错误会增加此值</span>open_files_limit = 10240 <span class="hljs-comment">#MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit-n的值，哪个大用哪个，当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span>connect-timeout = 10 <span class="hljs-comment">#连接超时之前的最大秒数,在 Linux 平台上，该超时也用作等待服务器首次回应的时间</span>wait-timeout = 28800 <span class="hljs-comment">#等待关闭连接的时间</span>interactive-timeout = 28800 <span class="hljs-comment">#关闭连接之前，允许 interactive_timeout（取代了wait_timeout）秒的不活动时间。客户端的会话 wait_timeout 变量被设为会话interactive_timeout 变量的值。如果前端程序采用短连接，建议缩短这2个值, 如果前端程序采用长连接，可直接注释掉这两个选项，默认配置(8小时)  </span>slave-net-timeout = 600 <span class="hljs-comment">#从服务器也能够处理网络连接中断。但是，只有从服务器超过slave_net_timeout 秒没有从主服务器收到数据才通知网络中断</span>net_read_timeout = 30 <span class="hljs-comment">#从服务器读取信息的超时</span>net_write_timeout = 60 <span class="hljs-comment">#从服务器写入信息的超时</span>net_retry_count = 10 <span class="hljs-comment">#如果某个通信端口的读操作中断了，在放弃前重试多次</span>net_buffer_length = 16384 <span class="hljs-comment">#包消息缓冲区初始化为 net_buffer_length 字节，但需要时可以增长到 max_allowed_packet 字节</span>max_allowed_packet = 64M<span class="hljs-comment"># 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB 字段一起工作时相当必要)， 每个连接独立的大小.大小动态增加。 设置最大包,限制server接受的数据包大小，避免超长SQL的执行有问题 默认值为16M，当MySQL客户端或mysqld</span>服务器收到大于 max_allowed_packet 字节的信息包时，将发出“信息包过大”错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到“丢失与 MySQL 服务器的连接”错误。默认值 16M。table_cache = 512 <span class="hljs-comment"># 所有线程所打开表的数量. 增加此值就增加了mysqld所需要的文件描述符的数量这样你需要确认在[mysqld_safe]中 “open-files-limit” 变量设置打开文件数量允许至少4096</span>thread_stack = 192K <span class="hljs-comment"># 线程使用的堆大小. 此容量的内存在每次连接时被预留.MySQL 本身常不会需要超过 64K 的内存如果你使用你自己的需要大量堆的 UDF 函数或者你的操作系统对于某些操作需要更多的堆,你也许需要将其设置的更高一点.默认设置足以满足大多数应用</span>thread_cache_size = 20 <span class="hljs-comment"># 我们在 cache 中保留多少线程用于重用.当一个客户端断开连接后,如果 cache 中的线程还少于 thread_cache_size,则客户端线程被放入 cache 中.这可以在你需要大量新连接的时候极大的减少线程创建的开销(一般来说如果你有好的线程模型的话,</span>这不会有明显的性能提升.)服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时如果缓存中还有空间,那么客户端的线程将被放到缓存中,如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用根据物理内存设置规则如下：1G  —&gt; 82G  —&gt; 163G  —&gt; 32大于3G  —&gt; 64thread_concurrency = 8 <span class="hljs-comment">#此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量.该参数取值为服务器逻辑CPU数量×2，在本例中，服务器有 2 颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为 4 × 2 ＝ 8.设置 thread_concurrency的值的正确与否, </span>对 mysql 的性能影响很大, 在多个 cpu(或多核)的情况下，错误设置了 thread_concurrency 的值, 会导致 mysql 不能充分利用多 cpu(或多核),出现同一时刻只能一个 cpu(或核)在工作的情况。 thread_concurrency 应设为 CPU 核数的 2 倍.比如有一个双核的 CPU, 那么 thread_concurrency 的应该为 4; 2 个双核的 cpu,thread_concurrency 的值应为 8,属重点优化参数  <span class="hljs-comment">#*** qcache settings 相关选项 ***#</span>query_cache_limit = 2M <span class="hljs-comment">#不缓存查询大于该值的结果.只有小于此设定值的结果才会被缓冲,  此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.</span>query_cache_min_res_unit = 2K <span class="hljs-comment">#查询缓存分配的最小块大小.默认是 4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费</span>查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%如果查询缓存碎片率超过 20%，可以用 FLUSH QUERY CACHE 整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size *100%查询缓存利用率在 25%以下的话说明 query_cache_size 设置的过大，可适当减小;查询缓存利用率在 80%以上而且 Qcache_lowmem_prunes &gt; 50 的话说明 query_cache_size 可能有点小，要不就是碎片太多。查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%query_cache_size = 64M  <span class="hljs-comment">#指定 MySQL 查询缓冲区的大小。可以通过在 MySQL 控制台执行以下命令观察：</span><span class="hljs-section">代码:</span>&gt; SHOW VARIABLES LIKE '%query_cache%';&gt; SHOW STATUS LIKE 'Qcache%';如果 Qcache_lowmem_prunes 的值非常大，则表明经常出现缓冲不够的情况；如果 Qcache_hits 的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲； Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。memlock <span class="hljs-comment"># 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的 mysql 在在内存高度</span>紧张的时候,数据在内存中保持锁定并且防止可能被 swapping out,此选项对于性能有益<span class="hljs-comment">#*** default settings 相关选项 ***#</span>default_table_type = InnoDB <span class="hljs-comment"># 当创建新表时作为默认使用的表类型,如果在创建表示没有特别执行表类型,将会使用此值</span>default-time-zone = system <span class="hljs-comment">#服务器时区</span>character-set-server = utf8 <span class="hljs-comment">#server 级别字符集</span>default-storage-engine = InnoDB <span class="hljs-comment">#默认存储引擎</span><span class="hljs-comment">#*** tmp &amp;&amp; heap settings 相关选项 ***#</span>tmp_table_size = 512M <span class="hljs-comment">#临时表的最大大小，如果超过该值，则结果放到磁盘中,此限制是针对单个表的,而不是总和.</span>max_heap_table_size = 512M <span class="hljs-comment">#独立的内存表所允许的最大容量.此选项为了防止意外创建一个超大的内存表导致永尽所有的内存资源.</span><span class="hljs-comment">#*** log settings 相关选项 ***#</span>log-bin = mysql-bin <span class="hljs-comment">#打开二进制日志功能.在复制(replication)配置中,作为 MASTER 主服务器必须打开此项.如果你需要从你最后的备份中做基于时间点的恢复,你也同样需要二进制日志.这些路径相对于 datadir</span>log_slave_updates = 1 <span class="hljs-comment">#表示slave将复制事件写进自己的二进制日志</span>log-bin-index = mysql-bin.index <span class="hljs-comment">#二进制的索引文件名</span>relay-log = relay-log <span class="hljs-comment">#定义relay_log的位置和名称，如果值为空，则默认位置在数据文件的目录，文件名为host_name-relay-bin.nnnnnn（By default, relay log file names have the form host_name-relay-bin.nnnnnn in the data directory）；</span>relay_log_index = relay-log.index  <span class="hljs-comment">#relay-log的索引文件名</span>log-warnings = 1 <span class="hljs-comment"># 将警告打印输出到错误 log 文件.如果你对于MySQL有任何问题，你应该打开警告 log 并且仔细审查错误日志,查出可能的原因.</span>log-error =  /usr/local/mysql/log/mysql.err <span class="hljs-comment">#错误日志路径</span>log_output = FILE <span class="hljs-comment">#参数 log_output 指定了慢查询输出的格式，默认为 FILE，你可以将它设为 TABLE，然后就可以查询 mysql 架构下的 slow_log 表了</span>log_slow_queries <span class="hljs-comment">#指定是否开启慢查询日志(该参数要被slow_query_log取代，做兼容性保留)</span>slow_query_log = 1 <span class="hljs-comment"># 指定是否开启慢查询日志. 慢查询是指消耗了比 “long_query_time” 定义的更多时间的查询.如果 log_long_format 被打开,那些没有使用索引的查询也会被记录.如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意,</span>long-query-time = 1 <span class="hljs-comment">#设定慢查询的阀值，超出次设定值的SQL即被记录到慢查询日志，缺省值为10s.所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.不要在这里使用”1″, 否则会导致所有的查询,甚至非常快的查询页被记录下来(由于MySQL 目前时间的精确度只能达到秒的级别).</span>log_long_format <span class="hljs-comment"># 在慢速日志中记录更多的信息.一般此项最好打开，打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里</span>slow_query_log_file =  /usr/local/mysql/log/slow.log <span class="hljs-comment"># 指定慢日志文件存放位置，可以为空，系统会给一个缺省的文件host_name-slow.log</span>log-queries-not-using-indexes <span class="hljs-comment">#如果运行的SQL语句没有使用索引，则mysql数据库同样会将这条SQL语句记录到慢查询日志文件中。</span>min_examined_row_limit=1000　　　　<span class="hljs-comment">#记录那些由于查找了多余1000次而引发的慢查询</span>long-slow-admin-statements　　　　<span class="hljs-comment">#记录那些慢的optimize table，analyze table和alter table语句</span>log-slow-slave-statements <span class="hljs-comment">#记录由Slave所产生的慢查询</span>general_log = 1 <span class="hljs-comment">#将所有到达MySQL Server的SQL语句记录下来,默认关闭 </span>general_log_file =  /usr/local/mysql/log/mysql.log <span class="hljs-comment">#general_log路径</span>max_binlog_size = 1G <span class="hljs-comment">#如果二进制日志写入的内容超出给定值，日志就会发生滚动。你不能将该变量设置为大于1GB或小于4096字节。 默认值是1GB。如果你正使用大的事务，二进制日志还会超过max_binlog_size</span>max_relay_log_size = 1G <span class="hljs-comment">#标记relaylog允许的最大值，如果该值为0，则默认值为max_binlog_size(1G)；如果不为0，则max_relay_log_size则为最大的relay_log文件大小；</span>relay-log-purge = 1 <span class="hljs-comment">#是否自动清空不再需要中继日志时。默认值为1(启用)</span>expire_logs_days = 30 <span class="hljs-comment">#超过 30 天的 binlog 删除</span>binlog_cache_size = 1M <span class="hljs-comment"># 在一个事务中 binlog 为了记录 SQL 状态所持有的 cache 大小,如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.所有从事务来的状态都将被缓冲在 binlog 缓冲中然后在提交后一次性写入到 binlog 中,如果事务比此值大, 会使用磁盘上的临时文件来替代.此缓冲在每个连接的事务第一次更新状态时被创建.session 级别</span>replicate-wild-ignore-table = mysql.% <span class="hljs-comment">#复制时忽略数据库及表</span>slave_skip_errors=all <span class="hljs-comment">#定义复制过程中从服务器可以自动跳过的错误号，当复制过程中遇到定义的错误号，就可以自动跳过，直接执行后面的SQL语句。</span>slave_skip_errors选项有四个可用值，分别为：off，all，ErorCode，ddl_exist_errors。  默认情况下该参数值是off，我们可以列出具体的error code，也可以选择all，mysql5.6及MySQL Cluster NDB 7.3以及后续版本增加了参数ddl_exist_errors，该参数包含一系列error code（1007,1008,1050,1051,1054,1060,1061,1068,1094,1146）    一些error code代表的错误如下：    1007：数据库已存在，创建数据库失败    1008：数据库不存在，删除数据库失败    1050：数据表已存在，创建数据表失败    1051：数据表不存在，删除数据表失败    1054：字段不存在，或程序文件跟数据库有冲突    1060：字段重复，导致无法插入    1061：重复键名    1068：定义了多个主键    1094：位置线程ID    1146：数据表缺失，请恢复数据库    1053：复制过程中主服务器宕机    1062：主键冲突 Duplicate entry '%s' for key %d        <span class="hljs-comment">#*** MyISAM 相关选项 ***#</span>key_buffer_size = 256M <span class="hljs-comment">#指定用于索引的缓冲区大小，增加它可得到更好的索引处理性能。如果是以InnoDB引擎为主的DB，专用于MyISAM引擎的 key_buffer_size 可以设置较小，8MB 已足够  如果是以MyISAM引擎为主，可设置较大，但不能超过4G. 在这里，强烈建议不使用MyISAM引擎，默认都是用InnoDB引擎.注意：该参数值设置的过大反而会是服务器整体效率降低！</span>sort_buffer_size = 2M <span class="hljs-comment">#查询排序时所能使用的缓冲区大小。排序缓冲被用来处理类似 ORDER BY 以及 GROUP BY 队列所引起的排序.一个用来替代的基于磁盘的合并分类会被使用.查看 “Sort_merge_passes” 状态变量. 在排序发生时由每个线程分配 注意：该参数对应的分配内存是每连接独占！如果有 100 个连接，那么实际分配的总共排序缓冲区大小为 100 × 6 ＝600MB,所以,对于内存在 4GB 左右的服务器推荐设置为 6-8M。 </span>read_buffer_size = 2M <span class="hljs-comment">#读查询操作所能使用的缓冲区大小。和 sort_buffer_size 一样，该参数对应的分配内存也是每连接独享！用来做 MyISAM 表全表扫描的缓冲大小.当全表扫描需要时,在对应线程中分配.</span>join_buffer_size = 8M <span class="hljs-comment">#联合查询操作所能使用的缓冲区大小，和 sort_buffer_size 一样，该参数对应的分配内存也是每连接独享!此缓冲被使用来优化全联合(full JOINs 不带索引的联合).类似的联合在极大多数情况下有非常糟糕的性能表现, 但是将此值设大能够减轻性能影响.通过 “Select_full_join”状态变量查看全联合的数量， 当全联合发生时,在每个线程中分配。</span>read_rnd_buffer_size = 8M <span class="hljs-comment">#MyISAM 以索引扫描(Random Scan)方式扫描数据的 buffer大小 </span>bulk_insert_buffer_size = 64M <span class="hljs-comment">#MyISAM 使用特殊的类似树的 cache 来使得突发插入(这些插入是,INSERT … SELECT, INSERT … VALUES (…), (…), …, 以及 LOAD DATAINFILE) 更快. 此变量限制每个进程中缓冲树的字节数.设置为 0 会关闭此优化.为了最优化不要将此值设置大于 “key_buffer_size”.当突发插入被检测到时此缓冲将被分配MyISAM 用在块插入优化中的树缓冲区的大小。注释：这是一个 per thread 的限制 （ bulk 大量）.此缓冲当 MySQL 需要在 REPAIR, OPTIMIZE, ALTER 以及 LOAD DATA INFILE到一个空表中引起重建索引时被分配.这在每个线程中被分配.所以在设置大值时需要小心.</span>myisam_sort_buffer_size = 64M <span class="hljs-comment">#MyISAM 设置恢复表之时使用的缓冲区的尺寸,当在REPAIR TABLE 或用 CREATE INDEX 创建索引或 ALTER TABLE 过程中排序 MyISAM 索引分配的缓冲区</span>myisam_max_sort_file_size = 10G<span class="hljs-comment">#mysql重建索引时允许使用的临时文件最大大小</span>myisam_repair_threads = 1 <span class="hljs-comment">#如果该值大于 1，在 Repair by sorting 过程中并行创建MyISAM 表索引(每个索引在自己的线程内).如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.这对于拥有多个 CPU 以及大量内存情况的用户,是一个很好的选择.</span>myisam_recover = 64K<span class="hljs-comment">#允许的 GROUP_CONCAT()函数结果的最大长度</span>transaction_isolation = REPEATABLE-READ <span class="hljs-comment"># 设定默认的事务隔离级别.可用的级别如下:READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ,SERIALIZABLE</span>1.READ UNCOMMITTED-读未提交 2.READ COMMITTE-读已提交 3.REPEATABLE READ -可重复读 4.SERIALIZABLE -串行<span class="hljs-comment"># *** INNODB 相关选项 ***#</span>skip-innodb <span class="hljs-comment"># 如果你的 MySQL 服务包含 InnoDB 支持但是并不打算使用的话,使用此选项会节省内存以及磁盘空间,并且加速某些部分</span>innodb_file_per_table = 1 <span class="hljs-comment"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span>独立表空间优点：1．每个表都有自已独立的表空间。2．每个表的数据和索引都会存在自已的表空间中。3．可以实现单表在不同的数据库中移动。4．空间可以回收（除drop table操作处，表空不能自已回收）缺点：1.单表增加过大，如超过100G结论：共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_filesinnodb_status_file = 1 <span class="hljs-comment">#启用InnoDB的status file，便于管理员查看以及监控等</span>innodb_open_files = 2048 <span class="hljs-comment"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span>innodb_additional_mem_pool_size = 100M <span class="hljs-comment">#设置InnoDB存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小，所以当我们一个MySQL Instance中的数据库对象非常多的时候，是需要适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率的。 </span>innodb_buffer_pool_size = 2G <span class="hljs-comment">#包括数据页、索引页、插入缓存、锁信息、自适应哈希所以、数据字典信息.InnoDB 使用一个缓冲池来保存索引和原始数据, 不像 MyISAM.这里你设置越大,你在存取表里面数据时所需要的磁盘 I/O 越少.在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的 80%,不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.注意在 32 位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,所以不要设置的太高.</span>innodb_write_io_threads = 4innodb_read_io_threads = 4<span class="hljs-comment"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span><span class="hljs-comment"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span>innodb_data_home_dir =  /usr/local/mysql/var/ <span class="hljs-comment">#设置此选项如果你希望 InnoDB 表空间文件被保存在其他分区.默认保存在 MySQL 的 datadir 中.</span>innodb_data_file_path = ibdata1:500M;ibdata2:2210M:autoextend<span class="hljs-comment">#InnoDB将数据保存在一个或者多个数据文件中成为表空间.如果你只有单个逻辑驱动保存你的数据,一个单个的自增文件就足够好了.其他情况下.每个设备一个文件一般都是个好的选择.你也可以配置 InnoDB 来使用裸盘分区 – 请参考手册来获取更多相关内容</span>innodb_file_io_threads = 4 <span class="hljs-comment">#用来同步 IO 操作的 IO 线程的数量. 此值在 Unix 下被硬编码为 4,但是在 Windows 磁盘 I/O 可能在一个大数值下表现的更好.</span>innodb_thread_concurrency = 16<span class="hljs-comment">#在 InnoDb 核心内的允许线程数量,InnoDB 试着在 InnoDB 内保持操作系统线程的数量少于或等于这个参数给出的限制,最优值依赖于应用程序,硬件以及操作系统的调度方式.过高的值可能导致线程的互斥颠簸.默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span>innodb_flush_log_at_trx_commit = 1 <span class="hljs-comment">#如果设置为 1 ,InnoDB 会在每次提交后刷新(fsync)事务日志到磁盘上,这提供了完整的 ACID 行为.如果你愿意对事务安全折衷, 并且你正在运行一个小的食物, 你可以设置此值到 0 或者 2 来减少由事务日志引起的磁盘 I/O</span>代表日志只大约每秒写入日志文件并且日志文件刷新到磁盘.代表日志写入日志文件在每次提交后,但是日志文件只有大约每秒才会刷新到磁盘上.innodb_log_buffer_size = 8M <span class="hljs-comment">#用来缓冲日志数据的缓冲区的大小.当此值快满时, InnoDB 将必须刷新数据到磁盘上.由于基本上每秒都会刷新一次,所以没有必要将此值设置的太大(甚至对于长事务而言)</span>innodb_log_file_size = 500M <span class="hljs-comment">#事物日志大小.在日志组中每个日志文件的大小，你应该设置日志文件总合大小到你缓冲池大小的5%~100%，来避免在日志文件覆写上不必要的缓冲池刷新行为.不论如何, 请注意一个大的日志文件大小会增加恢复进程所需要的时间.</span>innodb_log_files_in_group = 2 <span class="hljs-comment">#在日志组中的文件总数.通常来说 2~3 是比较好的.</span>innodb_log_group_home_dir =  /usr/local/mysql/var/<span class="hljs-comment"># InnoDB 的日志文件所在位置. 默认是 MySQL 的 datadir.你可以将其指定到一个独立的硬盘上或者一个 RAID1 卷上来提高其性能innodb_max_dirty_pages_pct = 90 #innodb 主线程刷新缓存池中的数据，使脏数据比例小于 90%,这是一个软限制,不被保证绝对执行.</span>innodb_lock_wait_timeout = 50 <span class="hljs-comment">#InnoDB 事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB 在它自己的 锁定表中自动检测事务死锁并且回滚事务。 InnoDB 用 LOCK TABLES 语句注意到锁定设置。默认值是 50 秒</span>innodb_flush_method = O_DSYNC <span class="hljs-comment"># InnoDB 用来刷新日志的方法.表空间总是使用双重写入刷新方法.默认值是 “fdatasync”, 另一个是 “O_DSYNC”.</span>innodb_force_recovery=1<span class="hljs-comment"># 如果你发现 InnoDB 表空间损坏, 设置此值为一个非零值可能帮助你导出你的表.从1 开始并且增加此值知道你能够成功的导出表.</span>innodb_fast_shutdown <span class="hljs-comment"># 加速 InnoDB 的关闭. 这会阻止 InnoDB 在关闭时做全清除以及插入缓冲合并.这可能极大增加关机时间, 但是取而代之的是 InnoDB 可能在下次启动时做这些操作.</span><span class="hljs-comment"># *** 其他 相关选项 ***#</span>[mysqldump]quick <span class="hljs-comment">#支持较大数据库的转储，在导出非常巨大的表时需要此项。增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或mysqld必须返回大的结果行时mysqld才会分配更多内存。该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。 如果你正是用大的BLOB值，而且未为mysqld授予为处理查询而访问足够内存的权限，也会遇到与大信息包有关的奇怪问题。如果怀疑出现了该情况，请尝试在mysqld_safe脚本开始增加ulimit -d 256000，并重启mysqld。</span>[mysql]auto-rehash <span class="hljs-comment">#允许通过 TAB 键提示</span>default-character-set = utf8 <span class="hljs-comment">#数据库字符集</span>connect-timeout = 3[mysqld_safe]open-files-limit = 8192 <span class="hljs-comment">#增加每个进程的可打开文件数量.确认你已经将全系统限制设定的足够高!打开大量表需要将此值设大</span></code></pre></div></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Windows中是&lt;code&gt;my.ini&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux中是&lt;code&gt;my.cnf&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://melodyjerry.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>IDEA技巧</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/19/IDEA%E6%8A%80%E5%B7%A7/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/19/IDEA%E6%8A%80%E5%B7%A7/</id>
    <published>2020-07-19T09:20:29.000Z</published>
    <updated>2020-07-19T09:21:02.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速遍历数组"><a href="#快速遍历数组" class="headerlink" title="快速遍历数组"></a>快速遍历数组</h2><p><img src="https://s1.ax1x.com/2020/07/19/UWeLdg.gif" srcset="/blog/img/loading.gif" alt="UWeLdg.gif"></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速遍历数组&quot;&gt;&lt;a href=&quot;#快速遍历数组&quot; class=&quot;headerlink&quot; title=&quot;快速遍历数组&quot;&gt;&lt;/a&gt;快速遍历数组&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/19/UWeLdg.gif&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;UWeLdg.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>服务器开启可任意IP远程连接数据库</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF%E5%8F%AF%E4%BB%BB%E6%84%8FIP%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF%E5%8F%AF%E4%BB%BB%E6%84%8FIP%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-07-19T06:00:00.000Z</published>
    <updated>2020-07-20T02:21:07.461Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>首先进入sql安装目录：</p><div class="hljs"><pre><code class="hljs angelscript">cd C:\mysql<span class="hljs-number">-5.6</span><span class="hljs-number">.17</span>\bin  <span class="hljs-comment">//这是本人的目录，找到自己的mysql安装目录</span></code></pre></div></li><li><p>登录：</p><div class="hljs"><pre><code class="hljs elixir">mysql -u root -p 输入密码<span class="hljs-keyword">use</span> mysql         <span class="hljs-comment">#打开mysql数据库</span></code></pre></div></li><li><p>将host设置为%表示任何ip都能连接mysql，当然您也可以将host指定为某个ipd”</p><div class="hljs"><pre><code class="hljs routeros">update<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">host</span>=<span class="hljs-string">'%'</span> where <span class="hljs-attribute">user</span>=<span class="hljs-string">'root'</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">host</span>=<span class="hljs-string">'localhost'</span>;flush privileges;     #刷新权限表，使配置生效</code></pre></div></li><li><p>然后我们就能远程连接我们的mysql了。</p></li><li><p>如果您想关闭远程连接，恢复mysql的默认设置（只能本地连接），您可以通过以下步骤操作：</p><div class="hljs"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> mysql         <span class="hljs-comment">#打开mysql数据库</span></code></pre></div></li><li><p>将host设置为localhost表示只能本地连接mysql</p><div class="hljs"><pre><code class="hljs routeros">update<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">host</span>=<span class="hljs-string">'localhost'</span> where <span class="hljs-attribute">user</span>=<span class="hljs-string">'root'</span>;flush privileges;     #刷新权限表，使配置生效</code></pre></div><p>备注：您也可以添加一个用户名为root，密码为123456，权限为%（表示任意ip都能连接）的远程连接用户。命令参考如下：</p><div class="hljs"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'123456'</span>;<span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code></pre></div></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先进入sql安装目录：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;cd C:\mysql&lt;span class=&quot;hljs-number&quot;&gt;-5.6&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;.17&lt;/span&gt;\bin  &lt;span class=&quot;hljs-comment&quot;&gt;//这是本人的目录，找到自己的mysql安装目录&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs elixir&quot;&gt;mysql -u root -p 输入密码

&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; mysql         &lt;span class=&quot;hljs-comment&quot;&gt;#打开mysql数据库&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将host设置为%表示任何ip都能连接mysql，当然您也可以将host指定为某个ipd”&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs routeros&quot;&gt;update&lt;span class=&quot;hljs-built_in&quot;&gt; user &lt;/span&gt;&lt;span class=&quot;hljs-builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;host&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;%&#39;&lt;/span&gt; where &lt;span class=&quot;hljs-attribute&quot;&gt;user&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;root&#39;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;host&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;;

flush privileges;     #刷新权限表，使配置生效&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后我们就能远程连接我们的mysql了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果您想关闭远程连接，恢复mysql的默认设置（只能本地连接），您可以通过以下步骤操作：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs elixir&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;use&lt;/span&gt; mysql         &lt;span class=&quot;hljs-comment&quot;&gt;#打开mysql数据库&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将host设置为localhost表示只能本地连接mysql&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs routeros&quot;&gt;update&lt;span class=&quot;hljs-built_in&quot;&gt; user &lt;/span&gt;&lt;span class=&quot;hljs-builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;host&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;localhost&#39;&lt;/span&gt; where &lt;span class=&quot;hljs-attribute&quot;&gt;user&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;root&#39;&lt;/span&gt;;

flush privileges;     #刷新权限表，使配置生效&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;备注：您也可以添加一个用户名为root，密码为123456，权限为%（表示任意ip都能连接）的远程连接用户。命令参考如下：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs sql&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;on&lt;/span&gt; *.* &lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;root&#39;&lt;/span&gt;@&lt;span class=&quot;hljs-string&quot;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&#39;123456&#39;&lt;/span&gt;;

&lt;span class=&quot;hljs-keyword&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;privileges&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://melodyjerry.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis中文文档</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/18/Mybatis%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/18/Mybatis%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</id>
    <published>2020-07-18T09:15:39.000Z</published>
    <updated>2020-07-18T09:37:42.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis文档"><a href="#Mybatis文档" class="headerlink" title="Mybatis文档"></a>Mybatis文档</h2><p>学习和研究Mybatis框架，我一般会参考Mybatis中文文档，这是Mybatis官方维护的一份指导学习文档，具有权威性：</p><p><a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></p><p>此文档开头会标明Mybatis当前最新版本号：</p><p><img src="http://www.mybatis.cn/usr/uploads/2019/11/3344303279.png" srcset="/blog/img/loading.gif" alt="mybatis-version.png"></p><p>Mybatis中文文档分为以下几个部分：</p><p>XML配置：<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html</a></p><p>XML映射：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html</a></p><p>动态SQL：<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></p><p>Java API：<a href="https://mybatis.org/mybatis-3/zh/java-api.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/java-api.html</a></p><p>SQL语句构建器：<a href="https://mybatis.org/mybatis-3/zh/statement-builders.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/statement-builders.html</a></p><p>日志：<a href="https://mybatis.org/mybatis-3/zh/logging.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/logging.html</a></p><h2 id="另外，Spring与Mybatis相结合使用的中文文档为："><a href="#另外，Spring与Mybatis相结合使用的中文文档为：" class="headerlink" title="另外，Spring与Mybatis相结合使用的中文文档为："></a>另外，Spring与Mybatis相结合使用的中文文档为：</h2><p><a href="http://mybatis.org/spring/zh/" target="_blank" rel="noopener">http://mybatis.org/spring/zh/</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mybatis文档&quot;&gt;&lt;a href=&quot;#Mybatis文档&quot; class=&quot;headerlink&quot; title=&quot;Mybatis文档&quot;&gt;&lt;/a&gt;Mybatis文档&lt;/h2&gt;&lt;p&gt;学习和研究Mybatis框架，我一般会参考Mybatis中文文档，这是Mybatis官方维护的一份指导学习文档，具有权威性：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此文档开头会标明Mybatis当前最新版本号：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.mybatis.cn/usr/uploads/2019/11/3344303279.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;mybatis-version.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Mybatis中文文档分为以下几个部分：&lt;/p&gt;
&lt;p&gt;XML配置：&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/configuration.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;XML映射：&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/sqlmap-xml.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/sqlmap-xml.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;动态SQL：&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/dynamic-sql.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/dynamic-sql.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java API：&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/java-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/java-api.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SQL语句构建器：&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/statement-builders.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/statement-builders.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日志：&lt;a href=&quot;https://mybatis.org/mybatis-3/zh/logging.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/mybatis-3/zh/logging.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;另外，Spring与Mybatis相结合使用的中文文档为：&quot;&gt;&lt;a href=&quot;#另外，Spring与Mybatis相结合使用的中文文档为：&quot; class=&quot;headerlink&quot; title=&quot;另外，Spring与Mybatis相结合使用的中文文档为：&quot;&gt;&lt;/a&gt;另外，Spring与Mybatis相结合使用的中文文档为：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://mybatis.org/spring/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mybatis.org/spring/zh/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ全家桶永久激活</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/18/IntelliJ%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/18/IntelliJ%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB/</id>
    <published>2020-07-18T06:00:00.000Z</published>
    <updated>2020-07-18T08:13:06.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA2020-1激活，IntelliJ-IDEA2020注册码，IntelliJ全家桶激活码"><a href="#IDEA2020-1激活，IntelliJ-IDEA2020注册码，IntelliJ全家桶激活码" class="headerlink" title="IDEA2020.1激活，IntelliJ IDEA2020注册码，IntelliJ全家桶激活码"></a>IDEA2020.1激活，IntelliJ IDEA2020注册码，IntelliJ全家桶激活码</h1><p>申明：本教程 IntelliJ IDEA 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除</p><h2 id="IntelliJ全家桶IDEA-2020-1-3-激活方式"><a href="#IntelliJ全家桶IDEA-2020-1-3-激活方式" class="headerlink" title="IntelliJ全家桶IDEA 2020.1.3 激活方式"></a>IntelliJ全家桶IDEA 2020.1.3 激活方式</h2><ul><li><strong><em>激活到 2089 年</em></strong></li></ul><p><strong>1、</strong> 本教程适用于 IntelliJ <strong>IDEA</strong> <strong>2020.1.3</strong> 以下所有版本，请放心食用~<br><strong>2、</strong> 本教程适用于 JetBrains 全系列产品，包括 <strong>IDEA、 Pycharm、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等</strong><br><strong>3、</strong> 本教程适用 Windows/Mac/Linux 系统，文中以 Windows 系统为例做讲解。</p><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/12.png" srcset="/blog/img/loading.gif" alt="img"></p><a id="more"></a><h2 id="二、下载最新的-IDEA-2020-版本安装包"><a href="#二、下载最新的-IDEA-2020-版本安装包" class="headerlink" title="二、下载最新的 IDEA 2020 版本安装包"></a>二、下载最新的 <strong>IDEA</strong> 2020 版本安装包</h2><p>我们选择从 <strong>IDEA</strong> 官网下载：</p><p><a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download</a></p><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/0.png" srcset="/blog/img/loading.gif" alt="img"></p><p>点击下载，下载完成即可。</p><h2 id="三、开始激活"><a href="#三、开始激活" class="headerlink" title="三、开始激活"></a>三、开始激活</h2><h3 id="1、-下载完成后，双击-ideaIU-2020-1-3-exe-打开安装软件；"><a href="#1、-下载完成后，双击-ideaIU-2020-1-3-exe-打开安装软件；" class="headerlink" title="1、 下载完成后，双击 ideaIU-2020.1.3.exe,打开安装软件；"></a><strong>1、</strong> 下载完成后，双击 <code>ideaIU-2020.1.3.exe</code>,打开安装软件；</h3><blockquote><p>PS: 确保电脑没有安装老版本软件，如有请卸载。</p></blockquote><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/1.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="2、-安装目录选择；"><a href="#2、-安装目录选择；" class="headerlink" title="2、 安装目录选择；"></a><strong>2、</strong> 安装目录选择；</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/2.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="3、-按自己电脑配置勾选："><a href="#3、-按自己电脑配置勾选：" class="headerlink" title="3、 按自己电脑配置勾选："></a><strong>3、</strong> 按自己电脑配置勾选：</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/3.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="4、-点击-next-安心等待其安装完成："><a href="#4、-点击-next-安心等待其安装完成：" class="headerlink" title="4、 点击 next, 安心等待其安装完成："></a><strong>4、</strong> 点击 <code>next</code>, 安心等待其安装完成：</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/4.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="5、-安装完成后，勾选-Run-IntelliJ-IDEA，点击-finish-运行软件"><a href="#5、-安装完成后，勾选-Run-IntelliJ-IDEA，点击-finish-运行软件" class="headerlink" title="5、 安装完成后，勾选 Run IntelliJ IDEA，点击 finish 运行软件:"></a><strong>5、</strong> 安装完成后，勾选 <code>Run IntelliJ IDEA</code>，点击 <code>finish</code> 运行软件:</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/5.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="6、-会先弹出一个注册框，勾选-Evaluate-for-free-点击-Evaluate"><a href="#6、-会先弹出一个注册框，勾选-Evaluate-for-free-点击-Evaluate" class="headerlink" title="6、 会先弹出一个注册框，勾选 Evaluate for free, 点击 Evaluate:"></a><strong>6、</strong> 会先弹出一个注册框，勾选 <code>Evaluate for free</code>, 点击 <code>Evaluate</code>:</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/6.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="7、-将激活补丁-jetbrains-agent-jar拖入-IDEA-界面中"><a href="#7、-将激活补丁-jetbrains-agent-jar拖入-IDEA-界面中" class="headerlink" title="7、 将激活补丁 jetbrains-agent.jar拖入 IDEA 界面中"></a><strong>7、</strong> 将激活补丁 <code>jetbrains-agent.jar</code>拖入 <strong>IDEA</strong> 界面中</h3><blockquote><p>链接: <a href="https://pan.baidu.com/s/1s6tiktsNDAOSxvb9WCPH_w" target="_blank" rel="noopener">https://pan.baidu.com/s/1s6tiktsNDAOSxvb9WCPH_w</a> </p><p>提取码: 2iyt</p></blockquote><p>补丁，拖不进去，请重启 IDEA ，新建一个Java 项目，写一个空的 main 方法，再次试试</p><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/7.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>激活补丁，拖进去之后，激活补丁的位置不要更换，不要删除。否则激活之后还会失效，</li><li>激活补丁，拖进去，等于是程序，帮你去写一个激活补丁的位置，你换补丁jar位置，或者，删除补丁jar，就找不到激活补丁了</li></ul><h3 id="8、-拖入补丁后会弹框，点击-restart-重启-idea："><a href="#8、-拖入补丁后会弹框，点击-restart-重启-idea：" class="headerlink" title="8、 拖入补丁后会弹框，点击 restart 重启 idea："></a><strong>8、</strong> 拖入补丁后会弹框，点击 <code>restart</code> 重启 <strong>idea</strong>：</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/8.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="9、-配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的-Activation-Code，通过注册码来激活，点击为IDEA安装："><a href="#9、-配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的-Activation-Code，通过注册码来激活，点击为IDEA安装：" class="headerlink" title="9、 配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的 Activation Code，通过注册码来激活，点击为IDEA安装："></a><strong>9、</strong> 配置助手会提示您，需要使用哪种激活方式，这里我们选择默认的 <code>Activation Code</code>，通过注册码来激活，点击<code>为IDEA安装</code>：</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/9.png" srcset="/blog/img/loading.gif" alt="img"></p><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/10.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="10、-点击是，重启-IDEA-即可"><a href="#10、-点击是，重启-IDEA-即可" class="headerlink" title="10、 点击是，重启 IDEA 即可"></a><strong>10、</strong> 点击<code>是</code>，重启 <strong>IDEA</strong> 即可</h3><h2 id="三、验证是否激活成功"><a href="#三、验证是否激活成功" class="headerlink" title="三、验证是否激活成功"></a>三、验证是否激活成功</h2><p>验证步骤如下：</p><h3 id="1、-进入-IDEA-界面后，点击-Help-gt-Register-查看："><a href="#1、-进入-IDEA-界面后，点击-Help-gt-Register-查看：" class="headerlink" title="1、 进入 IDEA 界面后，点击 Help -> Register 查看："></a><strong>1、</strong> 进入 <strong>IDEA</strong> 界面后，点击 <code>Help</code> -&gt; <code>Register</code> 查看：</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/11.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="2、-可以看到，已经成功激活至-2089-年，为确保不失效，请勿随意更新"><a href="#2、-可以看到，已经成功激活至-2089-年，为确保不失效，请勿随意更新" class="headerlink" title="2、 可以看到，已经成功激活至 2089 年，为确保不失效，请勿随意更新"></a><strong>2、</strong> 可以看到，已经成功激活至 2089 年，为确保不失效，请勿随意更新</h3><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/12.png" srcset="/blog/img/loading.gif" alt="img"></p><hr><p><img src="https://tech.souyunku.com/wp-content/uploads/2020/05/01-200.png" srcset="/blog/img/loading.gif" alt="img"><br>注：补丁来自公众号，回复关键词 <strong>“IDEA”</strong> 获取 2020 版本文件夹中的激活补丁，或关注本文补丁链接的更新</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1s6tiktsNDAOSxvb9WCPH_w" target="_blank" rel="noopener">https://pan.baidu.com/s/1s6tiktsNDAOSxvb9WCPH_w</a> </p><p>提取码: 2iyt</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IDEA2020-1激活，IntelliJ-IDEA2020注册码，IntelliJ全家桶激活码&quot;&gt;&lt;a href=&quot;#IDEA2020-1激活，IntelliJ-IDEA2020注册码，IntelliJ全家桶激活码&quot; class=&quot;headerlink&quot; title=&quot;IDEA2020.1激活，IntelliJ IDEA2020注册码，IntelliJ全家桶激活码&quot;&gt;&lt;/a&gt;IDEA2020.1激活，IntelliJ IDEA2020注册码，IntelliJ全家桶激活码&lt;/h1&gt;&lt;p&gt;申明：本教程 IntelliJ IDEA 破解补丁、激活码均收集于网络，请勿商用，仅供个人学习使用，如有侵权，请联系作者删除&lt;/p&gt;
&lt;h2 id=&quot;IntelliJ全家桶IDEA-2020-1-3-激活方式&quot;&gt;&lt;a href=&quot;#IntelliJ全家桶IDEA-2020-1-3-激活方式&quot; class=&quot;headerlink&quot; title=&quot;IntelliJ全家桶IDEA 2020.1.3 激活方式&quot;&gt;&lt;/a&gt;IntelliJ全家桶IDEA 2020.1.3 激活方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;激活到 2089 年&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;/strong&gt; 本教程适用于 IntelliJ &lt;strong&gt;IDEA&lt;/strong&gt; &lt;strong&gt;2020.1.3&lt;/strong&gt; 以下所有版本，请放心食用~&lt;br&gt;&lt;strong&gt;2、&lt;/strong&gt; 本教程适用于 JetBrains 全系列产品，包括 &lt;strong&gt;IDEA、 Pycharm、WebStorm、Phpstorm、Datagrip、RubyMine、CLion、AppCode 等&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3、&lt;/strong&gt; 本教程适用 Windows/Mac/Linux 系统，文中以 Windows 系统为例做讲解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tech.souyunku.com/wp-content/uploads/2020/05/12.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>本站已接入音乐播放器API</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/17/%E6%9C%AC%E7%AB%99%E5%B7%B2%E6%8E%A5%E5%85%A5%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8API/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/17/%E6%9C%AC%E7%AB%99%E5%B7%B2%E6%8E%A5%E5%85%A5%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8API/</id>
    <published>2020-07-17T14:00:00.000Z</published>
    <updated>2020-07-17T07:39:10.555Z</updated>
    
    <content type="html"><![CDATA[<p>优先接入：<a href="https://player.ilt.me/" target="_blank" rel="noopener">宅音乐播放器-一款方便快捷的HTML5音乐播放器</a><br>效果如左下角<br><img src="https://s1.ax1x.com/2020/07/17/UyKBQO.png" srcset="/blog/img/loading.gif" alt="UyKBQO.png"></p><blockquote><p>备选接入：<a href="https://myhkw.cn/admin/#/player/158754196744" target="_blank" rel="noopener">明月浩空音乐播放器</a>（免费版只能最多使用一个播放器、一个站点）</p></blockquote><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优先接入：&lt;a href=&quot;https://player.ilt.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宅音乐播放器-一款方便快捷的HTML5音乐播放器&lt;/a&gt;&lt;br&gt;效果如左下角&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/07/17/UyKBQO.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;UyKBQO.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备选接入：&lt;a href=&quot;https://myhkw.cn/admin/#/player/158754196744&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;明月浩空音乐播放器&lt;/a&gt;（免费版只能最多使用一个播放器、一个站点）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】35. 搜索插入位置</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/17/%E3%80%90LeetCode%E3%80%9135.-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/17/%E3%80%90LeetCode%E3%80%9135.-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</id>
    <published>2020-07-17T07:17:00.000Z</published>
    <updated>2020-07-17T09:19:05.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p>示例 1:</p><div class="hljs"><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], <span class="hljs-number">5</span>输出: <span class="hljs-number">2</span></code></pre></div><p>示例 2:</p><div class="hljs"><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], <span class="hljs-number">2</span>输出: <span class="hljs-number">1</span></code></pre></div><p>示例 3:</p><div class="hljs"><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], <span class="hljs-number">7</span>输出: <span class="hljs-number">4</span></code></pre></div><p>示例 4:</p><div class="hljs"><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], <span class="hljs-number">0</span>输出: <span class="hljs-number">0</span></code></pre></div><a id="more"></a><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/* 暴力匹配 */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>{        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length == <span class="hljs-number">0</span>){            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        }        <span class="hljs-comment">//考虑边界情况</span>        <span class="hljs-keyword">if</span>(target &lt; nums[<span class="hljs-number">0</span>]){            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        }        <span class="hljs-keyword">if</span>(target == nums[nums.length -<span class="hljs-number">1</span>]){             <span class="hljs-keyword">return</span> nums.length-<span class="hljs-number">1</span>;        }        <span class="hljs-keyword">if</span> (target &gt; nums[nums.length - <span class="hljs-number">1</span>]) { <span class="hljs-comment">//正序，判断最后一位数是否比目标值小</span>            <span class="hljs-keyword">return</span> nums.length; <span class="hljs-comment">//如果大，直接返回数组长度</span>        }        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++) {            <span class="hljs-keyword">if</span>(nums[i] == target){                <span class="hljs-keyword">return</span> i;            }            <span class="hljs-keyword">if</span> ((nums[i] &lt; target &amp;&amp; nums[i+<span class="hljs-number">1</span>] &gt; target)) { <span class="hljs-comment">//相邻的两个数比较</span>                <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;            }        }        <span class="hljs-keyword">return</span> index;    }}</code></pre></div><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>{        <span class="hljs-comment">// 不需要额外考虑数组为空的情况，因为此时low(0)&lt;=low(-1)不成立，直接返回0</span>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>, high = nums.length - <span class="hljs-number">1</span>, mid = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(low &lt;= high) {            mid = (low + high) &gt;&gt; <span class="hljs-number">1</span>;            <span class="hljs-keyword">if</span>(nums[mid] == target)                <span class="hljs-keyword">return</span> mid;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &gt; target)                high = mid - <span class="hljs-number">1</span>;            <span class="hljs-keyword">else</span>                low = mid + <span class="hljs-number">1</span>;        }        <span class="hljs-keyword">return</span> low;    }}</code></pre></div><h1 id="精选题解"><a href="#精选题解" class="headerlink" title="精选题解"></a>精选题解</h1><ul><li><a href="https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/" target="_blank" rel="noopener">二分查找算法简介</a></li></ul><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>实验室一兄弟使用js提交，但是遇到了这样的问题</p><p>将<code>let mid = (hi + lo) &gt;&gt; 1;</code>改为<code>let mid = (hi + lo) / 2;</code></p><p>结果不通过<img src="https://s1.ax1x.com/2020/07/17/UyWzvt.gif" srcset="/blog/img/loading.gif" alt="UyWzvt.gif" style="zoom:67%;"></p><ul><li><code>let mid = (hi + lo) &gt;&gt; 1;</code></li></ul><p><img src="https://s1.ax1x.com/2020/07/17/UyRjXV.png" srcset="/blog/img/loading.gif" alt="UyRjXV.png"></p><ul><li><code>let mid = (hi + lo) / 2;</code></li></ul><p><img src="https://s1.ax1x.com/2020/07/17/UyWFpR.png" srcset="/blog/img/loading.gif" alt="UyWFpR.png"></p><p>请路过的大佬，能不能解决？欢迎评论/私信我！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可以假设数组中无重复元素。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;输入: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;
输出: &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;输入: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;
输出: &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;输入: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;
输出: &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例 4:&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs angelscript&quot;&gt;输入: [&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;], &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;
输出: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="https://melodyjerry.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式及工具</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%B7%A5%E5%85%B7/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%B7%A5%E5%85%B7/</id>
    <published>2020-07-17T07:00:00.000Z</published>
    <updated>2020-07-17T10:01:28.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h1><ul><li><a href="https://regexr.com/" target="_blank" rel="noopener">RegExr – 正则表达式在线测试工具。</a></li><li><a href="https://jex.im/regulex/#!flags=&amp;re=^(a|b)*%3F%24" target="_blank" rel="noopener">Regulex – 正则表达式在线测试工具。</a></li><li><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">正则表达式在线测试 – 菜鸟教程</a></li></ul><a id="more"></a><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$"等字符：<strong>[^%&amp;’,;=?$\x22]+</strong></li><li>禁止输入含有<del>的字符：**[^</del>\x22]+**</li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：<strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</strong></li><li>InternetURL：<strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</strong></li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<strong>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</strong></li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符：<strong>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：<strong>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li><li>腾讯QQ号：<strong>[1-9][0-9]{4,} (腾讯QQ号从10000开始)</strong></li><li>中国邮政编码：<strong>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</strong></li><li>IP地址：<strong>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</strong></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相关工具&quot;&gt;&lt;a href=&quot;#相关工具&quot; class=&quot;headerlink&quot; title=&quot;相关工具&quot;&gt;&lt;/a&gt;相关工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://regexr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RegExr – 正则表达式在线测试工具。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jex.im/regulex/#!flags=&amp;amp;re=^(a|b)*%3F%24&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Regulex – 正则表达式在线测试工具。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://c.runoob.com/front-end/854&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;正则表达式在线测试 – 菜鸟教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 正则表达式</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/17/Java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/17/Java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-07-17T06:00:00.000Z</published>
    <updated>2020-07-17T09:29:18.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-正则表达式"><a href="#Java-正则表达式" class="headerlink" title="Java 正则表达式"></a>Java 正则表达式</h1><p>正则表达式定义了字符串的模式。</p><p>正则表达式可以用来搜索、编辑或处理文本。</p><p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p><p>Java正则表达式和Perl的是最为相似的。</p><p>java.util.regex包主要包括以下三个类：</p><ul><li><p>Pattern类：</p><p>  pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</p></li><li><p>Matcher类：</p><p>  Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</p></li><li><p>PatternSyntaxException：</p><p>  PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><a id="more"></a><hr><h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h2><p>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</p><p>例如，正则表达式(dog) 创建了单一分组，组里包含”d”，”o”，和”g”。</p><p>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：</p><ul><li>((A)(B(C)))</li><li>(A)</li><li>(B(C))</li><li>(C)</li></ul><p>可以通过调用matcher对象的groupCount方法来查看表达式有多少个分组。groupCount方法返回一个int值，表示matcher对象当前有多个捕获组。</p><p>还有一个特殊的组（组0），它总是代表整个表达式。该组不包括在groupCount的返回值中。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面的例子说明如何从一个给定的字符串中找到数字串：</p><div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.regex.Matcher; <span class="hljs-keyword">import</span> java.util.regex.Pattern; <span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> RegexMatches { <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main( String args[] ){ // 按指定模式在字符串查找 String <span class="hljs-type">line</span> = "This order was placed for QT3000! OK?"; String pattern = "(.*)(\\d+)(.*)"; // 创建 Pattern 对象 Pattern r = Pattern.compile(pattern); // 现在创建 matcher 对象 Matcher m = r.matcher(<span class="hljs-type">line</span>); <span class="hljs-keyword">if</span> (m.find( )) { <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("Found value: " + m.<span class="hljs-keyword">group</span>(<span class="hljs-number">0</span>) ); <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("Found value: " + m.<span class="hljs-keyword">group</span>(<span class="hljs-number">1</span>) ); <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("Found value: " + m.<span class="hljs-keyword">group</span>(<span class="hljs-number">2</span>) ); } <span class="hljs-keyword">else</span> { <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("NO MATCH"); } } }</code></pre></div><p>以上实例编译运行结果如下：</p><div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-built_in">Found</span> <span class="hljs-keyword">value</span>: This <span class="hljs-keyword">order</span> was placed <span class="hljs-keyword">for</span> QT3000! OK? <span class="hljs-built_in">Found</span> <span class="hljs-keyword">value</span>: This <span class="hljs-keyword">order</span> was placed <span class="hljs-keyword">for</span> QT300 <span class="hljs-built_in">Found</span> <span class="hljs-keyword">value</span>: <span class="hljs-number">0</span></code></pre></div><hr><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>\</td><td>将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，”n”匹配字符”n”。”\n”匹配换行符。序列”\“匹配”"，”(“匹配”(“。</td></tr><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr><tr><td>*</td><td>零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td></tr><tr><td>+</td><td>一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td></tr><tr><td>?</td><td>零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td></tr><tr><td>{<em>n</em>}</td><td><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td></tr><tr><td>{<em>n</em>,}</td><td><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td></tr><tr><td>{<em>n</em>,<em>m</em>}</td><td><em>M</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td></tr><tr><td>?</td><td>当此字符紧随任何其他限定符（<em>、+、?、{*n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td></tr><tr><td>.</td><td>匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td></tr><tr><td>(<em>pattern</em>)</td><td>匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td></tr><tr><td>(?:<em>pattern</em>)</td><td>匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td></tr><tr><td>(?=<em>pattern</em>)</td><td>执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td>(?!<em>pattern</em>)</td><td>执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td><em>x</em>|<em>y</em></td><td>匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td></tr><tr><td>[<em>xyz</em>]</td><td>字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td></tr><tr><td>[^<em>xyz</em>]</td><td>反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td></tr><tr><td>[<em>a-z</em>]</td><td>字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td></tr><tr><td>[^<em>a-z</em>]</td><td>反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td></tr><tr><td>\b</td><td>匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td></tr><tr><td>\B</td><td>非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td></tr><tr><td>\c<em>x</em></td><td>匹配 <em>x</em> 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td></tr><tr><td>\d</td><td>数字字符匹配。等效于 [0-9]。</td></tr><tr><td>\D</td><td>非数字字符匹配。等效于 [^0-9]。</td></tr><tr><td>\f</td><td>换页符匹配。等效于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>换行符匹配。等效于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等效于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</td></tr><tr><td>\t</td><td>制表符匹配。与 \x09 和 \cI 等效。</td></tr><tr><td>\v</td><td>垂直制表符匹配。与 \x0b 和 \cK 等效。</td></tr><tr><td>\w</td><td>匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td></tr><tr><td>\W</td><td>与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td></tr><tr><td>\x<em>n</em></td><td>匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\x41”匹配”A”。”\x041”与”\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td></tr><tr><td>*num*</td><td>匹配 <em>num*，此处的 *num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\1”匹配两个连续的相同字符。</td></tr><tr><td>*n*</td><td>标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td></tr><tr><td>*nm*</td><td>标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm*，其中 *n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td></tr><tr><td>\nml</td><td>当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td></tr><tr><td>\u<em>n</em></td><td>匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。</td></tr></tbody></table><h2 id="Matcher类的方法"><a href="#Matcher类的方法" class="headerlink" title="Matcher类的方法"></a>Matcher类的方法</h2><h2 id="索引方法"><a href="#索引方法" class="headerlink" title="索引方法"></a>索引方法</h2><p>索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法及说明</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public int start()</strong> 返回以前匹配的初始索引。</td></tr><tr><td>2</td><td><strong>public int start(int group)</strong>  返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引</td></tr><tr><td>3</td><td><strong>public int end()</strong> 返回最后匹配字符之后的偏移量。</td></tr><tr><td>4</td><td><strong>public int end(int group)</strong> 返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。</td></tr></tbody></table><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法及说明</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public boolean lookingAt()</strong>  尝试将从区域开头开始的输入序列与该模式匹配。</td></tr><tr><td>2</td><td><strong>public boolean find()</strong> 尝试查找与该模式匹配的输入序列的下一个子序列。</td></tr><tr><td>3</td><td><strong>public boolean find(int start**</strong>）** 重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</td></tr><tr><td>4</td><td><strong>public boolean matches()</strong> 尝试将整个区域与模式匹配。</td></tr></tbody></table><h2 id="替换方法"><a href="#替换方法" class="headerlink" title="替换方法"></a>替换方法</h2><p>替换方法是替换输入字符串里文本的方法：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法及说明</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public Matcher appendReplacement(StringBuffer sb, String replacement)</strong> 实现非终端添加和替换步骤。</td></tr><tr><td>2</td><td><strong>public StringBuffer appendTail(StringBuffer sb)</strong> 实现终端添加和替换步骤。</td></tr><tr><td>3</td><td><strong>public String replaceAll(String replacement)</strong>  替换模式与给定替换字符串相匹配的输入序列的每个子序列。</td></tr><tr><td>4</td><td><strong>public String replaceFirst(String replacement)</strong>  替换模式与给定替换字符串匹配的输入序列的第一个子序列。</td></tr><tr><td>5</td><td><strong>public static String quoteReplacement(String s)</strong> 返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement 方法一个字面字符串一样工作。</td></tr></tbody></table><h2 id="start-和end-方法"><a href="#start-和end-方法" class="headerlink" title="start 和end 方法"></a>start 和end 方法</h2><p>下面是一个对单词”cat”出现在输入字符串中出现次数进行计数的例子：</p><div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.regex.Matcher; <span class="hljs-keyword">import</span> java.util.regex.Pattern; <span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> RegexMatches { private static final String REGEX = "\\bcat\\b"; private static final String INPUT = "cat cat cat cattie cat"; <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main( String args[] ){ Pattern p = Pattern.compile(REGEX); Matcher m = p.matcher(<span class="hljs-keyword">INPUT</span>); // 获取 matcher 对象 <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-keyword">while</span>(m.find()) { count++; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("Match number "+count); <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("start(): "+m.<span class="hljs-keyword">start</span>()); <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("end(): "+m.<span class="hljs-keyword">end</span>()); } } }</code></pre></div><p>以上实例编译运行结果如下：</p><div class="hljs"><pre><code class="hljs sql">Match number 1 <span class="hljs-keyword">start</span>(): <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>(): <span class="hljs-number">3</span> <span class="hljs-keyword">Match</span> <span class="hljs-built_in">number</span> <span class="hljs-number">2</span> <span class="hljs-keyword">start</span>(): <span class="hljs-number">4</span> <span class="hljs-keyword">end</span>(): <span class="hljs-number">7</span> <span class="hljs-keyword">Match</span> <span class="hljs-built_in">number</span> <span class="hljs-number">3</span> <span class="hljs-keyword">start</span>(): <span class="hljs-number">8</span> <span class="hljs-keyword">end</span>(): <span class="hljs-number">11</span> <span class="hljs-keyword">Match</span> <span class="hljs-built_in">number</span> <span class="hljs-number">4</span> <span class="hljs-keyword">start</span>(): <span class="hljs-number">19</span> <span class="hljs-keyword">end</span>(): <span class="hljs-number">22</span></code></pre></div><p>可以看到这个例子是使用单词边界，以确保字母 “c” “a” “t” 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。</p><p>Start方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end方法最后一个匹配字符的索引加1。</p><h2 id="matches-和lookingAt-方法"><a href="#matches-和lookingAt-方法" class="headerlink" title="matches 和lookingAt 方法"></a>matches 和lookingAt 方法</h2><p>matches 和lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是matcher要求整个序列都匹配，而lookingAt 不要求。</p><p>这两个方法经常在输入字符串的开始使用。</p><p>我们通过下面这个例子，来解释这个功能：</p><div class="hljs"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.regex.Matcher; <span class="hljs-keyword">import</span> java.util.regex.Pattern; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegexMatches</span> {</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">String</span> REGEX = <span class="hljs-string">"foo"</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">String</span> <span class="hljs-literal">INPUT</span> = <span class="hljs-string">"fooooooooooooooooo"</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Pattern pattern; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Matcher matcher; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-keyword">String</span> args[] )</span></span>{ pattern = Pattern.compile(REGEX); matcher = pattern.matcher(<span class="hljs-literal">INPUT</span>); System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"Current REGEX is: "</span>+REGEX); System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"Current INPUT is: "</span>+<span class="hljs-literal">INPUT</span>); System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"lookingAt(): "</span>+matcher.lookingAt()); System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">"matches(): "</span>+matcher.matches()); } }</code></pre></div><p>以上实例编译运行结果如下：</p><div class="hljs"><pre><code class="hljs pgsql"><span class="hljs-keyword">Current</span> REGEX <span class="hljs-keyword">is</span>: foo <span class="hljs-keyword">Current</span> <span class="hljs-keyword">INPUT</span> <span class="hljs-keyword">is</span>: fooooooooooooooooolookingAt(): <span class="hljs-keyword">true</span> matches(): <span class="hljs-keyword">false</span></code></pre></div><h2 id="replaceFirst-和replaceAll-方法"><a href="#replaceFirst-和replaceAll-方法" class="headerlink" title="replaceFirst 和replaceAll 方法"></a>replaceFirst 和replaceAll 方法</h2><p>replaceFirst 和replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</p><p>下面的例子来解释这个功能：</p><div class="hljs"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.regex.Matcher; <span class="hljs-keyword">import</span> java.util.regex.Pattern; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegexMatches</span> {</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> REGEX = <span class="hljs-string">"dog"</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-literal">INPUT</span> = <span class="hljs-string">"The dog says meow. "</span> + <span class="hljs-string">"All dogs say meow."</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> REPLACE = <span class="hljs-string">"cat"</span>; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>{ Pattern p = Pattern.compile(REGEX); <span class="hljs-comment">// get a matcher object Matcher m = p.matcher(INPUT); INPUT = m.replaceAll(REPLACE); System.out.println(INPUT); } }</span></code></pre></div><p>以上实例编译运行结果如下：</p><div class="hljs"><pre><code class="hljs ada">The cat says meow. <span class="hljs-keyword">All</span> cats say meow.</code></pre></div><h2 id="appendReplacement-和-appendTail-方法"><a href="#appendReplacement-和-appendTail-方法" class="headerlink" title="appendReplacement 和 appendTail 方法"></a>appendReplacement 和 appendTail 方法</h2><p>Matcher 类也提供了appendReplacement 和appendTail 方法用于文本替换：</p><p>看下面的例子来解释这个功能：</p><div class="hljs"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.regex.Matcher; <span class="hljs-keyword">import</span> java.util.regex.Pattern; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegexMatches</span> {</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> REGEX = <span class="hljs-string">"a*b"</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> <span class="hljs-literal">INPUT</span> = <span class="hljs-string">"aabfooaabfooabfoob"</span>; <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> REPLACE = <span class="hljs-string">"-"</span>; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>{ Pattern p = Pattern.compile(REGEX); <span class="hljs-comment">// 获取 matcher 对象 Matcher m = p.matcher(INPUT); StringBuffer sb = new StringBuffer(); while(m.find()){ m.appendReplacement(sb,REPLACE); } m.appendTail(sb); System.out.println(sb.toString()); } }</span></code></pre></div><p>以上实例编译运行结果如下：</p><div class="hljs"><pre><code class="hljs diff"><span class="hljs-deletion">-foo-foo-foo-</span></code></pre></div><h2 id="PatternSyntaxException-类的方法"><a href="#PatternSyntaxException-类的方法" class="headerlink" title="PatternSyntaxException 类的方法"></a>PatternSyntaxException 类的方法</h2><p>PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。</p><p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法及说明</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public String getDescription()</strong> 获取错误的描述。</td></tr><tr><td>2</td><td><strong>public int getIndex()</strong>  获取错误的索引。</td></tr><tr><td>3</td><td><strong>public String getPattern()</strong> 获取错误的正则表达式模式。</td></tr><tr><td>4</td><td><strong>public String getMessage()</strong> 返回多行字符串，包含语法错误及其索引的描述、错误的正则表达式模式和模式中错误索引的可视化指示。</td></tr></tbody></table><h1 id="更多详见"><a href="#更多详见" class="headerlink" title="更多详见"></a>更多详见</h1><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">正则表达式 - 菜鸟教程</a></p><h1 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h1><ul><li><p><a href="https://regexr.com/" target="_blank" rel="noopener">RegExr – 正则表达式在线测试工具。</a></p></li><li><p><a href="https://jex.im/regulex/#!flags=&amp;re=^(a|b)*%3F%24" target="_blank" rel="noopener">Regulex – 正则表达式在线测试工具。</a></p></li><li><p><a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">正则表达式在线测试 – 菜鸟教程</a></p></li></ul><p>常用正则表达式</p><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$"等字符：<strong>[^%&amp;’,;=?$\x22]+</strong></li><li>禁止输入含有<del>的字符：**[^</del>\x22]+**</li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：<strong>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?</strong></li><li>InternetURL：<strong>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</strong></li><li>手机号码：<strong>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：<strong>(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</strong></li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：<strong>[\u4e00-\u9fa5]</strong></li><li>双字节字符：<strong>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</strong></li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：<strong>&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</strong></li><li>腾讯QQ号：<strong>[1-9][0-9]{4,} (腾讯QQ号从10000开始)</strong></li><li>中国邮政编码：<strong>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</strong></li><li>IP地址：<strong>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</strong></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-正则表达式&quot;&gt;&lt;a href=&quot;#Java-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;Java 正则表达式&quot;&gt;&lt;/a&gt;Java 正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式定义了字符串的模式。&lt;/p&gt;
&lt;p&gt;正则表达式可以用来搜索、编辑或处理文本。&lt;/p&gt;
&lt;p&gt;正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。&lt;/p&gt;
&lt;p&gt;Java正则表达式和Perl的是最为相似的。&lt;/p&gt;
&lt;p&gt;java.util.regex包主要包括以下三个类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pattern类：&lt;/p&gt;
&lt;p&gt;  pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Matcher类：&lt;/p&gt;
&lt;p&gt;  Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PatternSyntaxException：&lt;/p&gt;
&lt;p&gt;  PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>配置NodeJs环境变量</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/17/%E9%85%8D%E7%BD%AENodeJs%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/17/%E9%85%8D%E7%BD%AENodeJs%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2020-07-17T04:57:00.000Z</published>
    <updated>2020-07-17T06:16:55.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>写在前面的话：</p><blockquote><p>这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。</p></blockquote><ol><li><p>在F:\node新建一个文件夹，名称为<code>node_global</code></p></li><li><p>在F:\node新建一个文件夹，名称为<code>node_cache</code></p></li><li><p>如果你是zip安装直接接着往下走，如果你是msi安装方式，请直接到第五步；</p></li><li><p>配置npm系统环境path变量<strong>“我的电脑”-右键-“属性”-“高级系统设置”（快速点，直接win+R输入``sysdm.cpl<code>）-“高级”-“环境变量”-“</code>path`”</strong></p></li><li><p>创建完两个空文件夹之后，打开cmd命令窗口，输入；</p></li><li><p><code>npm config set prefix “F:\node\node_global”；</code></p></li><li><p><code>npm config set cache “F:\node\node_cache”；</code></p></li><li><p>修改”F:\node\node_modules\npm”的npmrc文件：</p> <div class="hljs"><pre><code class="hljs crmsh"><span class="hljs-attr">prefix=</span>F:\<span class="hljs-keyword">node</span><span class="hljs-title">\node_global</span><span class="hljs-attr">cache=</span>F:\<span class="hljs-keyword">node</span><span class="hljs-title">\node_cache</span></code></pre></div></li><li><p>“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”；</p></li><li><p>在【系统变量】下新建【<code>NODE_PATH</code>】，输入【F:\node\node_global\node_modules</p></li><li><p>将【用户变量】下的【Path】修改为<code>prefix</code>的值【F:\node\node_global】</p></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;写在前面的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在F:\node新建一个文件夹，名称为&lt;code&gt;node_global&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在F:\node新建一个文件夹，名称为&lt;code&gt;node_cache&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你是zip安装直接接着往下走，如果你是msi安装方式，请直接到第五步；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置npm系统环境path变量&lt;strong&gt;“我的电脑”-右键-“属性”-“高级系统设置”（快速点，直接win+R输入``sysdm.cpl&lt;code&gt;）-“高级”-“环境变量”-“&lt;/code&gt;path`”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建完两个空文件夹之后，打开cmd命令窗口，输入；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm config set prefix “F:\node\node_global”；&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm config set cache “F:\node\node_cache”；&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改”F:\node\node_modules\npm”的npmrc文件：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs crmsh&quot;&gt;&lt;span class=&quot;hljs-attr&quot;&gt;prefix=&lt;/span&gt;F:\&lt;span class=&quot;hljs-keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;hljs-title&quot;&gt;\node_global&lt;/span&gt;
&lt;span class=&quot;hljs-attr&quot;&gt;cache=&lt;/span&gt;F:\&lt;span class=&quot;hljs-keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;hljs-title&quot;&gt;\node_cache&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在【系统变量】下新建【&lt;code&gt;NODE_PATH&lt;/code&gt;】，输入【F:\node\node_global\node_modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将【用户变量】下的【Path】修改为&lt;code&gt;prefix&lt;/code&gt;的值【F:\node\node_global】&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub博客连接多仓库</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/16/%E5%88%A9%E7%94%A8GitHub%E5%8D%9A%E5%AE%A2%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%BB%93%E5%BA%93/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/16/%E5%88%A9%E7%94%A8GitHub%E5%8D%9A%E5%AE%A2%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%BB%93%E5%BA%93/</id>
    <published>2020-07-16T10:55:00.000Z</published>
    <updated>2020-07-16T10:54:08.395Z</updated>
    
    <content type="html"><![CDATA[<p>在根目录下执行<code>npm run build</code> 后，会将项目文件生成到 <code>dist</code> 目录。</p><p>然后，你可以将<code>dist</code>目录部署到你喜欢的服务器托管商。</p><p>下面以<code>GithubPage</code> 举例：</p><ol><li><p>新建 <code>你的用户名.github.io</code> 仓库</p></li><li><div class="hljs"><pre><code>cd distgit init git add -Agit commit -am"init"git remote add origin https://github.com/你的用户名/你的用户名.github.io.gitgit push -f origin master</code></pre></div></li><li><p>然后在<code>Github</code>设置好仓库的<code>GithubPage</code> 选项</p></li><li><p>访问 <code>你的用户名.github.io</code> 即可浏览啦！</p></li></ol><p>假如你之前的<code>用户名.github.io</code>仓库已经有内容了,可以新建另一个的仓库，比如<code>blog</code>。</p><p>再将所占用项目迁移到<code>blog</code>，并设置好这个仓库的<code>GithubPage</code> 选项。</p><p>而这个仓库即成为了一个子目录<code>用户名.github.io/blog</code>。</p><p>如此一来，你的<code>用户名.github.io</code>仓库便可留给首页了！</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在根目录下执行&lt;code&gt;npm run build&lt;/code&gt; 后，会将项目文件生成到 &lt;code&gt;dist&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;然后，你可以将&lt;code&gt;dist&lt;/code&gt;目录部署到你喜欢的服务器托管商。&lt;/p&gt;
&lt;p&gt;下面以&lt;code&gt;GithubPage&lt;/code&gt; 举例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;新建 &lt;code&gt;你的用户名.github.io&lt;/code&gt; 仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code&gt;cd dist
git init 
git add -A
git commit -am&quot;init&quot;
git remote add origin https://github.com/你的用户名/你的用户名.github.io.git
git push -f origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在&lt;code&gt;Github&lt;/code&gt;设置好仓库的&lt;code&gt;GithubPage&lt;/code&gt; 选项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问 &lt;code&gt;你的用户名.github.io&lt;/code&gt; 即可浏览啦！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假如你之前的&lt;code&gt;用户名.github.io&lt;/code&gt;仓库已经有内容了,可以新建另一个的仓库，比如&lt;code&gt;blog&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再将所占用项目迁移到&lt;code&gt;blog&lt;/code&gt;，并设置好这个仓库的&lt;code&gt;GithubPage&lt;/code&gt; 选项。&lt;/p&gt;
&lt;p&gt;而这个仓库即成为了一个子目录&lt;code&gt;用户名.github.io/blog&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如此一来，你的&lt;code&gt;用户名.github.io&lt;/code&gt;仓库便可留给首页了！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>随机图片API</title>
    <link href="https://melodyjerry.github.io/blog/2020/07/16/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API/"/>
    <id>https://melodyjerry.github.io/blog/2020/07/16/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87API/</id>
    <published>2020-07-16T09:55:00.000Z</published>
    <updated>2020-07-16T06:58:48.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://api.mz-moe.cn/img.php" target="_blank" rel="noopener">https://api.mz-moe.cn/img.php</a></p></blockquote><img style="width:720px" src="https://api.mz-moe.cn/img.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" target="_blank" rel="noopener">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture</a></p></blockquote><img style="width:720px" src="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://ds.qqlepay.cn/" target="_blank" rel="noopener">https://ds.qqlepay.cn/</a></p><p>内含2个接口</p><p>高清壁纸：https://acg.xydwz.cn/gqapi/gqapi.php</p><p>动漫壁纸：https://acg.xydwz.cn/api/api.php</p></blockquote><img style="width:720px" src="https://acg.xydwz.cn/gqapi/gqapi.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><img style="width:720px" src="https://acg.xydwz.cn/api/api.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://img.xjh.me" target="_blank" rel="noopener">https://img.xjh.me</a></p></blockquote><img style="width:720px" src="https://img.xjh.me/random_img.php?return=302&amp;type=bg&amp;ctype=acg" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://misaka.asia" target="_blank" rel="noopener">https://misaka.asia</a></p></blockquote><img style="width:720px" src="https://Misaka.asia/api.jpg?order=4" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://acg.iclart.com" target="_blank" rel="noopener">https://acg.iclart.com</a></p></blockquote><img style="width:720px" src="https://acg.iclart.com/api.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.paugram.com/help/wallpaper" target="_blank" rel="noopener">https://api.paugram.com/help/wallpaper</a></p></blockquote><img style="width:720px" src="https://api.paugram.com/wallpaper/?source=sina&amp;category=jp" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://s0.xinger.ink" target="_blank" rel="noopener">https://s0.xinger.ink</a></p></blockquote><img style="width:720px" src="https://s0.xinger.ink/acgimg/acgurl.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.isoyu.com" target="_blank" rel="noopener">https://api.isoyu.com</a></p></blockquote><img style="width:720px" src="https://api.isoyu.com/bing_images.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://ds.qqlepay.cn" target="_blank" rel="noopener">https://ds.qqlepay.cn</a></p></blockquote><img style="width:720px" src="https://acg.xydwz.cn/api/api.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.meetgudu.com" target="_blank" rel="noopener">https://api.meetgudu.com</a></p></blockquote><img style="width:720px" src="https://api.meetgudu.com/api/acg/" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.btstu.cn/doc/sjbz.php" target="_blank" rel="noopener">https://api.btstu.cn/doc/sjbz.php</a></p></blockquote><img style="width:720px" src="https://api.btstu.cn/sjbz/api.php?lx=dongman&amp;format=images" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://acg.toubiec.cn" target="_blank" rel="noopener">https://acg.toubiec.cn</a></p></blockquote><img style="width:720px" src="https://acg.toubiec.cn/random" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="http://api.mtyqx.cn" target="_blank" rel="noopener">http://api.mtyqx.cn</a></p></blockquote><img style="width:720px" src="http://api.mtyqx.cn/tapi/random.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.w0ai1uo.org" target="_blank" rel="noopener">https://api.w0ai1uo.org</a></p></blockquote><img style="width:720px" src="https://api.w0ai1uo.org/api/dongman/" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="https://api.yuzhitu.cn/sjbz" target="_blank" rel="noopener">https://api.yuzhitu.cn/sjbz</a></p></blockquote><img style="width:720px" src="https://api.yuzhitu.cn//sjbz/api.php?lx=dongman" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="http://api.52yi.vip" target="_blank" rel="noopener">http://api.52yi.vip</a></p></blockquote><img style="width:720px" src="http://api.52yi.vip/api" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><blockquote><p><a href="http://api.laolibab.cn/king/dm_tupian.php" target="_blank" rel="noopener">http://api.laolibab.cn/king/dm_tupian.php</a></p></blockquote><img style="width:720px" src="http://api.laolibab.cn/king/dm_tupian.php" srcset="/blog/img/loading.gif" alt="看样子这个 API 挂了" align="center"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://api.mz-moe.cn/img.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.mz-moe.cn/img.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="API" scheme="https://melodyjerry.github.io/blog/tags/API/"/>
    
  </entry>
  
</feed>
