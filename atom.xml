<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-09-24T08:55:08.023Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下安装node v12.16.3</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/23/Linux%E4%B8%8B%E5%AE%89%E8%A3%85node-v12.16.3/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/23/Linux%E4%B8%8B%E5%AE%89%E8%A3%85node-v12.16.3/</id>
    <published>2020-09-23T09:21:21.000Z</published>
    <updated>2020-09-24T08:55:08.023Z</updated>
    
    <content type="html"><![CDATA[<ol><li>下载nodejs</li></ol><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~wget http://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.gz</code></pre></div><ol start="2"><li>解压并修改解压后文件名</li></ol><div class="hljs"><pre><code class="hljs bash">tar -zxvf node-v12.16.3-linux-x64.tar.gz mv node-v12.16.3-linux-x64 nodejs</code></pre></div><ol start="3"><li>切换路径到解压后文件</li></ol><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> nodejs/bin   //　　切换路径./node -v        //查看node是否安装成功 若成功返回 v12.16.3pwm               //查看node路径   (我安装在根目录下)返回 /root/nodejs/bin</code></pre></div><ol start="4"><li>配置环境变量</li></ol><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~ //切换到根目录vim ~/.bash_profile     //查看环境变量文件//在配置文件里面，设置PATH环境变量//我查看时，PATH环境变量为PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/bin。在其后面添加：，在：后面添加之前执行pwm返回的路径PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/bin:/root/nodejs/bin     //键盘输入i 切换为输入状态。编辑完之后 点击esc键 退出编辑状态  输入：wq 保存离开<span class="hljs-built_in">source</span> ~/.bash_profile     //保存配置文件  可不执行</code></pre></div><ol start="5"><li>查看node版本</li></ol><div class="hljs"><pre><code class="hljs bash">node -v</code></pre></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;下载nodejs&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; ~
wget http://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-x64.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;解压并修改解压后文件名&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;tar -zxvf node-v12.16.3-linux-x64.tar.gz 
mv node-v12.16.3-linux-x64 nodejs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;切换路径到解压后文件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; nodejs/bin   //　　切换路径
./node -v        //查看node是否安装成功 若成功返回 v12.16.3
pwm               //查看node路径   (我安装在根目录下)返回 /root/nodejs/bin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; ~ //切换到根目录
vim ~/.bash_profile     //查看环境变量文件
//在配置文件里面，设置PATH环境变量
//我查看时，PATH环境变量为PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;hljs-variable&quot;&gt;$HOME&lt;/span&gt;/bin。在其后面添加：，在：后面添加之前执行pwm返回的路径
PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;hljs-variable&quot;&gt;$HOME&lt;/span&gt;/bin:/root/nodejs/bin     //键盘输入i 切换为输入状态。编辑完之后 点击esc键 退出编辑状态  输入：wq 保存离开
&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; ~/.bash_profile     //保存配置文件  可不执行&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;查看node版本&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;node -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>yum常见命令-安装与卸载软件</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/23/yum%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/23/yum%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/</id>
    <published>2020-09-23T04:21:21.000Z</published>
    <updated>2020-09-24T08:55:08.043Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="1-使用yum安装和卸载软件"><a href="#1-使用yum安装和卸载软件" class="headerlink" title="1.使用yum安装和卸载软件"></a>1.使用yum安装和卸载软件</h2><ul><li>有个前提是yum安装的软件包都是rpm格式的</li></ul><p>安装的命令是，<code>yum install ~</code>，yum会查询数据库，有无这一软件包，如果有，则检查其依赖冲突关系，如果没有依赖冲突，那么最好，下载安装;如果有，则会给出提示，询问是否要同时安装依赖，或删除冲突的包，你可以自己作出判断；</p><p>删除的命令是，<code>yum remove ~</code>，同安装一样，yum也会查询数据库，给出解决依赖关系的提示。</p><p>其中<code>~</code>代表软件名</p><p>1) 用YUM安装软件包命令：<code>yum install ~</code></p><p>2) 用YUM删除软件包命令：<code>yum remove ~</code></p><h2 id="2-用yum查询想安装的软件"><a href="#2-用yum查询想安装的软件" class="headerlink" title="2.用yum查询想安装的软件"></a>2.用yum查询想安装的软件</h2><p>​    我们常会碰到这样的情况，想安装一个软件，只知道它和某方面有关，但又不能确切知道它的名字。这时yum的查询功能就起作用了。我们可以用<code>yum search keyword</code>这样的命令来进行搜索，比如我们要则安装一个InstantMessenger，但又不知到底有哪些，这时不妨用<code>yum search messenger</code>这样的指令进行搜索，yum会搜索所有可用rpm的描述，列出所有描述中和messeger有关的rpm包，于是我们可能得到 gaim，kopete等等，并从中选择。</p><p>有时我们还会碰到安装了一个包，但又不知道其用途，我们可以用<code>yuminfo packagename</code>这个指令来获取信息。</p><ol><li><p>使用YUM查找软件包</p><p>命令：<code>yum search ~</code></p><p>2.列出所有可安装的软件包</p><p>命令：<code>yum list</code></p><p>3.列出所有可更新的软件包</p><p>命令：<code>yum list updates</code></p><p>4.列出所有已安装的软件包</p><p>命令：<code>yum list installed</code></p><p>5.列出所有已安装但不在Yum Repository內的软件包</p><p>命令：<code>yum list extras</code></p><p>6.列出所指定软件包</p><p>命令：<code>yum list ~</code></p><p>7.使用YUM获取软件包信息</p><p>命令：<code>yum info ~</code></p><p>8.列出所有软件包的信息</p><p>命令：<code>yum info</code></p><p>9.列出所有可更新的软件包信息</p><p>命令：<code>yum info updates</code></p><p>10.列出所有已安裝的软件包信息</p><p>命令：<code>yum info installed</code></p><p>11.列出所有已安裝但不在Yum Repository內的软件包信息</p><p>命令：<code>yum info extras</code></p><p>12.列出软件包提供哪些文件</p><p>命令：<code>yum provides ~</code></p></li></ol><h2 id="3-清除yum缓存"><a href="#3-清除yum缓存" class="headerlink" title="3.清除yum缓存"></a>3.清除yum缓存</h2><p>yum会把下载的软件包和header存储在cache中，而不会自动删除。如果我们觉得它们占用了磁盘空间，可以使用<code>yum clean</code>指令进行清除，更精确的用法是<code>yumclean headers</code>清除header，<code>yum clean packages</code>清除下载的rpm包，<code>yum clean all</code> 清除所有。</p><p>1.清除缓存目录(/var/cache/yum)下的软件包</p><p>命令：<code>yum clean packages</code></p><p>2.清除缓存目录(/var/cache/yum)下的 headers</p><p>命令：<code>yum clean headers</code></p><p>3.清除缓存目录(/var/cache/yum)下旧的 headers</p><p>命令：<code>yum clean oldheaders</code></p><p>4.清除缓存目录(/var/cache/yum)下的软件包及旧的headers</p><p>命令：<code>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</code></p><h2 id="4-yum命令工具使用举例"><a href="#4-yum命令工具使用举例" class="headerlink" title="4.yum命令工具使用举例"></a>4.yum命令工具使用举例</h2><p><code>yum update</code> 升级系统</p><p><code>yum install  ~</code> 安装指定软件包</p><p><code>yum update ~</code> 升级指定软件包</p><p><code>yum remove ~</code> 卸载指定软件</p><p><code>yum grouplist</code> 查看系统中已经安装的和可用的软件组，可用的可以安装</p><p><code>yum groupinstall ~</code> 安装上一个命令显示的可用的软件组中的一个</p><p><code>yum groupupdate ~</code> 更新指定软件组的软件包</p><p><code>yum groupremove ~</code> 卸载指定软件组中的软件包</p><p><code>yum deplist ~</code> 查询指定软件包的依赖关系</p><p><code>yum list yum\*</code> 列出所有以yum开头的软件包</p><p><code>yum localinstall ~</code> 从硬盘安装rpm包并使用yum解决依赖</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;1-使用yum安装和卸载软件&quot;&gt;&lt;a href=&quot;#1-使用yum安装和卸载软件&quot; class=&quot;headerlink&quot; title=&quot;1.使用yum安装和卸载软件&quot;&gt;&lt;/a&gt;1.使用yum安装和卸载软件&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下更新Node到最新版本</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/Linux%E4%B8%8B%E6%9B%B4%E6%96%B0Node%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/Linux%E4%B8%8B%E6%9B%B4%E6%96%B0Node%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/</id>
    <published>2020-09-22T14:21:21.000Z</published>
    <updated>2020-09-24T08:55:08.024Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-查看当前node的版本号"><a href="#1-查看当前node的版本号" class="headerlink" title="1. 查看当前node的版本号"></a>1. 查看当前node的版本号</h5><div class="hljs"><pre><code class="hljs bash">node --version</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/22/wXeQwF.png" srcset="/blog/img/loading.gif" alt="wXeQwF.png"></p><h5 id="2-清理npm的cache"><a href="#2-清理npm的cache" class="headerlink" title="2. 清理npm的cache"></a>2. 清理npm的cache</h5><div class="hljs"><pre><code class="hljs bash">npm cache clean -f</code></pre></div><h5 id="3-版本管理工具-名称：-n"><a href="#3-版本管理工具-名称：-n" class="headerlink" title="3. 版本管理工具 名称： n"></a>3. 版本管理工具 名称： n</h5><div class="hljs"><pre><code class="hljs undefined">npm install -g n</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/22/wXe8Y9.png" srcset="/blog/img/loading.gif" alt="wXe8Y9.png"></p><h5 id="4-更新到最新版"><a href="#4-更新到最新版" class="headerlink" title="4. 更新到最新版"></a>4. 更新到最新版</h5><div class="hljs"><pre><code class="hljs undefined">n latest</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/22/wXeqXV.png" srcset="/blog/img/loading.gif" alt="wXeqXV.png"></p><ul><li><code>n</code> 常用的命令有：<br>  <code>n</code> 会列出所有安装的版本供你切换<br>  <code>n latest</code> 安装最新版本<br>  <code>n stable</code> 安装最新稳定版<br>  <code>n lts</code> 安装最新长期支持版本<br>  <code>n rm [版本号]</code> 删除某一版本<br>  <code>n -h</code> 帮助命令<br>  <code>n [版本号]</code> 安装指定版本node</li></ul><h5 id="5-验证是否成功"><a href="#5-验证是否成功" class="headerlink" title="5. 验证是否成功"></a>5. 验证是否成功</h5><div class="hljs"><pre><code class="hljs undefined">node -v</code></pre></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-查看当前node的版本号&quot;&gt;&lt;a href=&quot;#1-查看当前node的版本号&quot; class=&quot;headerlink&quot; title=&quot;1. 查看当前node的版本号&quot;&gt;&lt;/a&gt;1. 查看当前node的版本号&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;node --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/22/wXeQwF.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wXeQwF.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-清理npm的cache&quot;&gt;&lt;a href=&quot;#2-清理npm的cache&quot; class=&quot;headerlink&quot; title=&quot;2. 清理npm的cache&quot;&gt;&lt;/a&gt;2. 清理npm的cache&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;npm cache clean -f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-版本管理工具-名称：-n&quot;&gt;&lt;a href=&quot;#3-版本管理工具-名称：-n&quot; class=&quot;headerlink&quot; title=&quot;3. 版本管理工具 名称： n&quot;&gt;&lt;/a&gt;3. 版本管理工具 名称： n&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs undefined&quot;&gt;npm install -g n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/22/wXe8Y9.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wXe8Y9.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;4-更新到最新版&quot;&gt;&lt;a href=&quot;#4-更新到最新版&quot; class=&quot;headerlink&quot; title=&quot;4. 更新到最新版&quot;&gt;&lt;/a&gt;4. 更新到最新版&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs undefined&quot;&gt;n latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/22/wXeqXV.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wXeqXV.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 常用的命令有：&lt;br&gt;  &lt;code&gt;n&lt;/code&gt; 会列出所有安装的版本供你切换&lt;br&gt;  &lt;code&gt;n latest&lt;/code&gt; 安装最新版本&lt;br&gt;  &lt;code&gt;n stable&lt;/code&gt; 安装最新稳定版&lt;br&gt;  &lt;code&gt;n lts&lt;/code&gt; 安装最新长期支持版本&lt;br&gt;  &lt;code&gt;n rm [版本号]&lt;/code&gt; 删除某一版本&lt;br&gt;  &lt;code&gt;n -h&lt;/code&gt; 帮助命令&lt;br&gt;  &lt;code&gt;n [版本号]&lt;/code&gt; 安装指定版本node&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-验证是否成功&quot;&gt;&lt;a href=&quot;#5-验证是否成功&quot; class=&quot;headerlink&quot; title=&quot;5. 验证是否成功&quot;&gt;&lt;/a&gt;5. 验证是否成功&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs undefined&quot;&gt;node -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下mongodb安装</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/Ubuntu%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/Ubuntu%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85/</id>
    <published>2020-09-22T13:21:21.000Z</published>
    <updated>2020-09-24T08:55:08.025Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载mongodb源码，并解压：</p> <div class="hljs"><pre><code class="hljs bash">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.0.11.tgztar -zxvf mongodb-linux-x86_64-ubuntu1604-4.0.11.tgz</code></pre></div></li><li><p>创建mongo专属目录，拷贝bin下文件到mongodb目录下bin中：</p> <div class="hljs"><pre><code class="hljs bash">mkdir /usr/<span class="hljs-built_in">local</span>/mongodb<span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/mongodbmkdir bincp .../mongodb-linux-x86_64-ubuntu1604-4.0.11/bin/* ./bin/</code></pre></div></li><li><p>创建数据库文件目录、日志目录、配置文件：</p> <div class="hljs"><pre><code class="hljs bash">mkdir datatouch mongodb.logtouch mongodb.conf</code></pre></div></li><li><p>配置文件内容：</p> <div class="hljs"><pre><code class="hljs bash">dbpath=/usr/<span class="hljs-built_in">local</span>/mongodb/datalogpath=/usr/<span class="hljs-built_in">local</span>/mongodb/mongodb.loglogappend=<span class="hljs-literal">true</span>journal=<span class="hljs-literal">true</span>fork=<span class="hljs-literal">true</span>bind_ip = 127.0.0.1port = 27017noauth = <span class="hljs-literal">true</span><span class="hljs-comment">#auth = true</span></code></pre></div></li><li><p>将mongo添加path：</p> <div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">#打开profile</span>vi /etc/profile<span class="hljs-comment">#输入下面内容：</span>MONGO_DB=<span class="hljs-string">"/usr/local/mongodb"</span>PATH=<span class="hljs-variable">$MONGO_DB</span>/bin:<span class="hljs-variable">$PATH</span>:<span class="hljs-built_in">export</span> PATH<span class="hljs-comment">#加载配置</span><span class="hljs-built_in">source</span> /etc/profile</code></pre></div></li><li><p>启动mongodb：</p> <div class="hljs"><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/mongodb/bin/mongod --config /usr/<span class="hljs-built_in">local</span>/mongodb/mongodb.conf</code></pre></div> <div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">#启动后会看到：</span>about to fork child process, waiting until server is ready <span class="hljs-keyword">for</span> connections.forked process: 1361child process started successfully, parent exiting</code></pre></div>  <a id="more"></a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载mongodb源码，并解压：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.0.11.tgz

tar -zxvf mongodb-linux-x86_64-ubuntu1604-4.0.11.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建mongo专属目录，拷贝bin下文件到mongodb目录下bin中：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mkdir /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb

&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb

mkdir bin

cp .../mongodb-linux-x86_64-ubuntu1604-4.0.11/bin/* ./bin/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建数据库文件目录、日志目录、配置文件：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mkdir data

touch mongodb.log

touch mongodb.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置文件内容：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;dbpath=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/data
logpath=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/mongodb.log

logappend=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
journal=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
fork=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;

bind_ip = 127.0.0.1
port = 27017

noauth = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;#auth = true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将mongo添加path：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#打开profile&lt;/span&gt;
vi /etc/profile

&lt;span class=&quot;hljs-comment&quot;&gt;#输入下面内容：&lt;/span&gt;
MONGO_DB=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/local/mongodb&quot;&lt;/span&gt;
PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$MONGO_DB&lt;/span&gt;/bin:&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:
&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PATH

&lt;span class=&quot;hljs-comment&quot;&gt;#加载配置&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动mongodb：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/bin/mongod --config /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/mongodb.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#启动后会看到：&lt;/span&gt;

about to fork child process, waiting until server is ready &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; connections.
forked process: 1361
child process started successfully, parent exiting&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[转]JavaScript 初学者教程（指南）</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/JavaScript-%E5%88%9D%E5%AD%A6%E8%80%85%E6%95%99%E7%A8%8B%EF%BC%88%E6%8C%87%E5%8D%97%EF%BC%89/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/JavaScript-%E5%88%9D%E5%AD%A6%E8%80%85%E6%95%99%E7%A8%8B%EF%BC%88%E6%8C%87%E5%8D%97%EF%BC%89/</id>
    <published>2020-09-22T13:21:13.000Z</published>
    <updated>2020-09-24T08:55:08.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-初学者教程（指南）"><a href="#JavaScript-初学者教程（指南）" class="headerlink" title="JavaScript 初学者教程（指南）"></a>JavaScript 初学者教程（指南）</h1><blockquote><p>原文链接：<a href="https://segmentfault.com/a/1190000016337325" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016337325</a></p><p>作者：joyqi</p></blockquote><p>JavaScript 是前端开发者使用的主要编程语言，随着前端技术的发展，这门语言的边界也得以不断扩展。我们在这里选择了与 JavaScript 相关的经典文章，可以让大家对如何学习这门语言有一些全面的认识。特别的，我们还着重于 JavaScript 这门语言与其它编程语言的不同之处，方便大家深入理解。</p><h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><ul><li><a href="https://segmentfault.com/a/1190000016110909" target="_blank" rel="noopener">JavaScript 循环</a></li><li><a href="https://segmentfault.com/a/1190000009324194" target="_blank" rel="noopener">JavaScript 正则表达式</a></li><li><a href="https://segmentfault.com/a/1190000000652891" target="_blank" rel="noopener">JavaScript 闭包</a></li><li><a href="https://segmentfault.com/a/1190000007535316" target="_blank" rel="noopener">JavaScript async/await</a></li><li><a href="https://segmentfault.com/a/1190000016133613" target="_blank" rel="noopener">ES6 元编程</a></li><li><a href="https://segmentfault.com/a/1190000015569915" target="_blank" rel="noopener">JavaScript 垃圾内存回收机制</a></li><li><a href="https://segmentfault.com/a/1190000014495089" target="_blank" rel="noopener">JavaScript 装饰器</a></li><li><a href="https://segmentfault.com/a/1190000016231512" target="_blank" rel="noopener">JavaScript AST 抽象语法树</a></li><li><a href="https://segmentfault.com/a/1190000012925872" target="_blank" rel="noopener">JavaScript 单线程运行机制</a></li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li><a href="https://segmentfault.com/a/1190000015727237" target="_blank" rel="noopener">JavaScript 继承 原型链 prototype</a></li><li><a href="https://segmentfault.com/a/1190000011801127" target="_blank" rel="noopener">JavaScript <strong>proto</strong> 与 prototype</a></li><li><a href="https://segmentfault.com/a/1190000015444951" target="_blank" rel="noopener">JavaScript this</a></li><li><a href="https://segmentfault.com/a/1190000013107871" target="_blank" rel="noopener">JavaScript 拷贝对象</a></li></ul><h2 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h2><ul><li><a href="https://segmentfault.com/a/1190000003810652" target="_blank" rel="noopener">JavaScript Fetch</a></li><li><a href="https://segmentfault.com/a/1190000007434923" target="_blank" rel="noopener">JavaScript Object.defineProperty</a></li><li><a href="https://segmentfault.com/a/1190000012578794" target="_blank" rel="noopener">JavaScript cookie/localStorage/sessionStorage</a></li><li><a href="https://segmentfault.com/a/1190000015908109" target="_blank" rel="noopener">JavaScript Array 数组</a></li><li><a href="https://segmentfault.com/a/1190000010731933" target="_blank" rel="noopener">JavaScript Array.reduce</a></li><li><a href="https://segmentfault.com/a/1190000011652907" target="_blank" rel="noopener">JavaScript Promise</a></li><li><a href="https://segmentfault.com/a/1190000011389726" target="_blank" rel="noopener">JavaScript call/apply/bind</a></li><li><a href="https://segmentfault.com/a/1190000016098130" target="_blank" rel="noopener">JavaScript Date</a></li><li><a href="https://segmentfault.com/a/1190000000410506" target="_blank" rel="noopener">JavaScript Array.sort</a></li><li><a href="https://segmentfault.com/a/1190000016116657" target="_blank" rel="noopener">JavaScript setInterval/setTimeout</a></li></ul><h2 id="编程技巧"><a href="#编程技巧" class="headerlink" title="编程技巧"></a>编程技巧</h2><ul><li><a href="https://segmentfault.com/a/1190000016256731" target="_blank" rel="noopener">Chrome 调试技巧</a></li><li><a href="https://segmentfault.com/a/1190000016005163" target="_blank" rel="noopener">JavaScript 获取参数</a></li><li><a href="https://segmentfault.com/a/1190000012673854" target="_blank" rel="noopener">JavaScript 代码简写</a></li><li><a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">JavaScript 跨域问题</a></li><li><a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="noopener">script标签放在body里还是header里</a></li></ul><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><ul><li><a href="https://segmentfault.com/a/1190000016276287" target="_blank" rel="noopener">JavaScript 模块化</a></li><li><a href="https://segmentfault.com/a/1190000014919700" target="_blank" rel="noopener">JavaScript 设计模式</a></li><li><a href="https://segmentfault.com/a/1190000016101940" target="_blank" rel="noopener">JavaScript 全栈开发</a></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://segmentfault.com/a/1190000015668383" target="_blank" rel="noopener">Ajax 基础知识</a></li><li><a href="https://segmentfault.com/a/1190000004322358" target="_blank" rel="noopener">JavaScript 同步 异步 事件循环</a></li><li><a href="https://segmentfault.com/a/1190000014643900" target="_blank" rel="noopener">JavaScript WebSocket</a></li><li><a href="https://segmentfault.com/a/1190000000481884" target="_blank" rel="noopener">JavaScript console对象</a></li><li><a href="https://segmentfault.com/a/1190000013412206" target="_blank" rel="noopener">JavaScript 剪贴板</a></li></ul><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-初学者教程（指南）&quot;&gt;&lt;a href=&quot;#JavaScript-初学者教程（指南）&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 初学者教程（指南）&quot;&gt;&lt;/a&gt;JavaScript 初学者教程（指南）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://segmentfault.com/a/1190000016337325&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000016337325&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：joyqi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript 是前端开发者使用的主要编程语言，随着前端技术的发展，这门语言的边界也得以不断扩展。我们在这里选择了与 JavaScript 相关的经典文章，可以让大家对如何学习这门语言有一些全面的认识。特别的，我们还着重于 JavaScript 这门语言与其它编程语言的不同之处，方便大家深入理解。&lt;/p&gt;
&lt;h2 id=&quot;语言特性&quot;&gt;&lt;a href=&quot;#语言特性&quot; class=&quot;headerlink&quot; title=&quot;语言特性&quot;&gt;&lt;/a&gt;语言特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016110909&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000009324194&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000652891&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007535316&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript async/await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016133613&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ES6 元编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015569915&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 垃圾内存回收机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014495089&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 装饰器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016231512&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript AST 抽象语法树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012925872&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 单线程运行机制&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015727237&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 继承 原型链 prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000011801127&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript &lt;strong&gt;proto&lt;/strong&gt; 与 prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015444951&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000013107871&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 拷贝对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;函数解析&quot;&gt;&lt;a href=&quot;#函数解析&quot; class=&quot;headerlink&quot; title=&quot;函数解析&quot;&gt;&lt;/a&gt;函数解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003810652&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007434923&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Object.defineProperty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012578794&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript cookie/localStorage/sessionStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015908109&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Array 数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000010731933&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Array.reduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000011652907&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000011389726&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript call/apply/bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016098130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000410506&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript Array.sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016116657&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript setInterval/setTimeout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;编程技巧&quot;&gt;&lt;a href=&quot;#编程技巧&quot; class=&quot;headerlink&quot; title=&quot;编程技巧&quot;&gt;&lt;/a&gt;编程技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016256731&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome 调试技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016005163&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 获取参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012673854&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 代码简写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015597029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 跨域问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004292479&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;script标签放在body里还是header里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;编程思想&quot;&gt;&lt;a href=&quot;#编程思想&quot; class=&quot;headerlink&quot; title=&quot;编程思想&quot;&gt;&lt;/a&gt;编程思想&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016276287&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 模块化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014919700&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016101940&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 全栈开发&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015668383&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ajax 基础知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004322358&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 同步 异步 事件循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014643900&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000481884&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript console对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000013412206&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 剪贴板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>[转]Yapi环境搭建(史上最详细步骤)</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/[%E8%BD%AC]Yapi%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4)/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/[%E8%BD%AC]Yapi%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4)/</id>
    <published>2020-09-22T09:21:21.000Z</published>
    <updated>2020-09-24T08:55:08.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/94297858" target="_blank" rel="noopener">内网搭建yapi接口管理平台</a></p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p><strong>操作系统：</strong>centos 7</p></li><li><p>环境要求：</p><ul><li>nodejs 7.6+</li><li>mongodb 2.6+</li><li>git</li></ul></li></ul><a id="more"></a><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li>获取资源（部署nodejs尽可能选择偶数版本，因为偶数版本官方有较长的维护时间，故这次选择8.x。）<br> <code>curl -sL https://rpm.nodesource.com/setup_8.x | bash -</code></li><li>安装<br> <code>yum install -y nodejs</code></li><li>查看版本<br> <code>node -v</code></li><li>查看npm版本<br> <code>npm -v</code></li></ol><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><ol><li>更新yum源，非必须但是更新一下无害<br> <code>yum -y update</code></li><li>添加mongodb源文件，在/etc/yum.repos.d 创建一个 mongodb-org.repo 文件<br> <code>touch /etc/yum.repos.d/mongodb-org.repo</code></li><li>编辑mongodb-org.repo文件<br> <code>vim /etc/yum.repos.d/mongodb-org.repo</code></li><li>添加文件内容</li></ol><div class="hljs"><pre><code class="hljs ini"><span class="hljs-section">[mongodb-org]</span><span class="hljs-attr">name</span>=MongoDB Repository<span class="hljs-attr">baseurl</span>=http://mirrors.aliyun.com/mongodb/yum/redhat/<span class="hljs-number">7</span>Server/mongodb-org/<span class="hljs-number">3.2</span>/x<span class="hljs-number">86_64</span>/<span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span></code></pre></div><blockquote><p>这里可能退不出Vim，参考<a href="https://www.cnblogs.com/melodyjerry/p/13714705.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13714705.html</a></p></blockquote><ol><li>安装mongodb<br> <code>yum install -y mongodb-org</code></li><li>启动mongodb<br> <code>service mongod start</code></li><li>设置开机启动<br> <code>chkconfig mongod on</code></li><li>打开moMongoDB(可忽略)<br> <code>/bin/mongo</code></li><li>配置远程访问</li></ol><ul><li>修改mongod.conf配置文件<br>  <code>vim /etc/mongod.conf</code></li><li>注释 bindIp: 127.0.0.1<br>  <code>#bindIp: 127.0.0.1</code></li><li>重启mongod<br>  <code>service mongod restart</code></li></ul><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li>官方推荐，在内网部署的时候安装git，可以根据自己所需安装<br>  <code>yum -y install git</code></li></ul><h2 id="搭建YApi环境"><a href="#搭建YApi环境" class="headerlink" title="搭建YApi环境"></a>搭建YApi环境</h2><p><strong>搭建YApi</strong></p><ol><li>准备环境搭建完成后，开始搭建YApi,安装命令</li></ol><div class="hljs"><pre><code class="hljs bash">npm install -g yapi-cli --registry https://registry.npm.taobao.orgyapi server</code></pre></div><blockquote><div class="hljs"><pre><code class="hljs bash">$ yapi server/usr/lib/node_modules/yapi-cli/src/utils.js:68  getVersions: async <span class="hljs-function"><span class="hljs-title">function</span></span>(){                     ^^^^^^^^SyntaxError: Unexpected token <span class="hljs-keyword">function</span>    at createScript (vm.js:56:10)    at Object.runInThisContext (vm.js:97:10)    at Module._compile (module.js:549:28)    at Object.Module._extensions..js (module.js:586:10)    at Module.load (module.js:494:32)    at tryModuleLoad (module.js:453:12)    at Function.Module._load (module.js:445:3)    at Module.require (module.js:504:17)    at require (internal/module.js:20:19)    at Object.&lt;anonymous&gt; (/usr/lib/node_modules/yapi-cli/src/index.js:4:15)</code></pre></div><p>解决办法：将node升级到版本&gt;7.6</p><p><a href="https://www.cnblogs.com/melodyjerry/p/13715111.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13715111.html</a></p></blockquote><ul><li><p>实例截图：</p><p>  <img src="https://s1.ax1x.com/2020/09/22/wXMJrq.png" srcset="/blog/img/loading.gif" alt="wXMJrq.png"></p></li></ul><blockquote><p><code>yapi server</code>后提示：</p><div class="hljs"><pre><code class="hljs bash">Accessing non-existent property <span class="hljs-string">'cat'</span> of module exports inside circular dependency</code></pre></div><p>产生这个的原因是node的版本太高了<br>解决的办法很简单，卸载最新版的node v14，重新安装稳定版的node v12，这个问题就解决了</p></blockquote><blockquote><p>有使用宝塔的话，还需要到<strong>宝塔防火墙里放行9090端口</strong>。</p></blockquote><h2 id="部署YApi"><a href="#部署YApi" class="headerlink" title="部署YApi"></a>部署YApi</h2><ol><li>执行 yapi server 启动可视化部署程序，浏览器打开提示窗口上的地址，非本地服务器，将0.0.0.0替换指定的域名或IP，进入部署页面。</li></ol><ul><li>实例截图<br><img src="https://s1.ax1x.com/2020/09/23/wjZPfA.png" srcset="/blog/img/loading.gif" alt="wjZPfA.png"></li></ul><ol start="2"><li>根据项目实际需要可以修改部署信息，点击【开始部署】，完成部署任务</li></ol><ul><li><p>部署成功截图<br><img src="https://s1.ax1x.com/2020/09/23/wj66rn.png" srcset="/blog/img/loading.gif" alt="wj66rn.png"></p></li><li><p>MongoDB数据库连接失败，检查是不是配置文件的ip、port出错。或者，直接<code>shutdown -r now</code>重启一下服务器，反正我就是hh。<br><img src="https://s1.ax1x.com/2020/09/23/wjKeiD.png" srcset="/blog/img/loading.gif" alt="wjKeiD.png"></p></li></ul><p><strong>3.根据部署日志截图上的提示信息，启动服务</strong><br>启动服务：<code>node vendors/server/app.js</code><br>浏览器打开部署日志上的访问地址 <code>http://127.0.0.1:3000</code> 就可以访问搭建的YApi工具了（非本地服务器，将127.0.0.1替换指定的域名或IP），此时YApi本地环境搭建完成</p><p>如果是阿里云ecs服务器，端口需要在安全组里开放，不然访问不了</p><p><strong>4.pm2方式管理进程</strong></p><p>要保证后台保持进程，需要安装pm2。<br>全局安装：</p><div class="hljs"><pre><code class="hljs bash">npm install -g pm2`</code></pre></div><p>启动：</p><div class="hljs"><pre><code class="hljs bash">pm2 start /root/my-yapi/vendors/server/app.js --watch -i 1</code></pre></div><blockquote><p>这样以后就可以很方便的用<strong>pm2</strong>就行启动关闭啦~</p></blockquote><ol start="5"><li>通过<code>pm2 save</code>保存当前进程状态。</li></ol><p>查看：</p><div class="hljs"><pre><code class="hljs bash">pm2 list</code></pre></div><p>重启：</p><div class="hljs"><pre><code class="hljs bash">pm2 restart service/app.js</code></pre></div><p>停止：</p><p>可以先通过<code>pm2 list</code>获取应用的名字（–name指定的）或者进程id。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># pm2 stop app_name|app_id</span>pm2 stop /root/my-yapi/vendors/server/app.js</code></pre></div><blockquote><p>pm2使用参考文档：<br><a href="http://imweb.io/topic/57c8cbb27f226f687b365636" target="_blank" rel="noopener">http://imweb.io/topic/57c8cbb27f226f687b365636</a></p></blockquote><p><strong>6.升级</strong></p><p>升级项目版本是非常容易的，并且不会影响已有的项目数据，只会同步 vendors 目录下的源码文件。</p><div class="hljs"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> {项目目录}yapi <span class="hljs-keyword">ls</span> <span class="hljs-comment">//查看版本号列表</span>yapi <span class="hljs-keyword">update</span> <span class="hljs-comment">//更新到最新版本</span>yapi <span class="hljs-keyword">update</span> -v {<span class="hljs-keyword">Version</span>} <span class="hljs-comment">//更新到指定版本</span></code></pre></div><p><strong>9.nginx代理</strong></p><p>如果您是将服务器代理到 nginx 服务器，请配置 nginx 支持 websocket。</p><div class="hljs"><pre><code class="hljs routeros">在location /添加proxy_http_version 1.1;proxy_set_header<span class="hljs-built_in"> Upgrade </span><span class="hljs-variable">$http_upgrade</span>;proxy_set_header<span class="hljs-built_in"> Connection </span><span class="hljs-string">"upgrade"</span>;</code></pre></div><p><strong>10.禁止注册</strong></p><p>在 config.json 添加 <code>closeRegister:true</code> 配置项,就可以禁止用户注册 yapi 平台，修改完成后，请重启 yapi 服务器。</p><div class="hljs"><pre><code class="hljs json">{<span class="hljs-attr">"port"</span>: <span class="hljs-string">"*****"</span>,<span class="hljs-attr">"closeRegister"</span>:<span class="hljs-literal">true</span>}</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/94297858&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内网搭建yapi接口管理平台&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;操作系统：&lt;/strong&gt;centos 7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;环境要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nodejs 7.6+&lt;/li&gt;
&lt;li&gt;mongodb 2.6+&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="API" scheme="https://melodyjerry.github.io/blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Vim-类似于Vi的文本编辑器</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/21/Vim-%E7%B1%BB%E4%BC%BC%E4%BA%8EVi%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/21/Vim-%E7%B1%BB%E4%BC%BC%E4%BA%8EVi%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-09-21T13:54:00.000Z</published>
    <updated>2020-09-24T08:55:08.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。</p><h1 id="键盘图"><a href="#键盘图" class="headerlink" title="键盘图"></a>键盘图</h1><blockquote><p>来源见水印</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/21/wq1Y6I.png" srcset="/blog/img/loading.gif" alt="wq1Y6I.png"></p><a id="more"></a><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><ul><li>根据设定可以和原始vi完全兼容</li><li>多缓冲编辑</li><li>任意个数的分割窗口（横，竖）</li><li>具备列表和字典功能的脚本语言</li><li>可以在脚本中调用 Perl, Ruby, Python, Tcl, MzScheme</li><li>单词缩写功能</li><li>动态单词补完</li><li>多次撤销和重做</li><li>对应400种以上文本文件的语法高亮</li><li>C/C++, Perl, Java, Ruby, Python 等40种以上语言的自动缩排</li><li>利用ctags的标签中跳转</li><li>崩溃后文件恢复</li><li>光标位置和打开的缓冲状态的保存 复原（session功能）</li><li>可以对两个文件进行差分，同步功能的diff模式</li><li>远程文件编辑</li><li>Omni补完（上下文相关的补完）</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。&lt;/p&gt;
&lt;h1 id=&quot;键盘图&quot;&gt;&lt;a href=&quot;#键盘图&quot; class=&quot;headerlink&quot; title=&quot;键盘图&quot;&gt;&lt;/a&gt;键盘图&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;来源见水印&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/21/wq1Y6I.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wq1Y6I.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下删除普通用户步骤</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/21/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%AD%A5%E9%AA%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/21/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-09-21T13:47:00.000Z</published>
    <updated>2020-09-24T08:55:08.021Z</updated>
    
    <content type="html"><![CDATA[<ol><li>先用命令  <code>cat /etc/passwd</code> 查看一下所有的用户 可以看到片你需要删除的用户名</li><li>用命令  <code>who</code>  查询当前登录的用户</li><li>用命令  <code>ps -u 用户名</code>   查看该用户的pid </li><li>用命令 <code>kill pid</code>  杀掉他的sshd或者是shell进程</li><li>再用命令  <code>userdel -r 用户名</code>  删除用户</li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;先用命令  &lt;code&gt;cat /etc/passwd&lt;/code&gt; 查看一下所有的用户 可以看到片你需要删除的用户名&lt;/li&gt;
&lt;li&gt;用命令  &lt;code&gt;who&lt;/code&gt;  查询当前登录的用户&lt;/li&gt;
&lt;li&gt;用命令  &lt;code&gt;ps -u 用户名&lt;/code&gt;   查看该用户的pid &lt;/li&gt;
&lt;li&gt;用命令 &lt;code&gt;kill pid&lt;/code&gt;  杀掉他的sshd或者是shell进程&lt;/li&gt;
&lt;li&gt;再用命令  &lt;code&gt;userdel -r 用户名&lt;/code&gt;  删除用户&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Xshell-配色方案</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/21/Xshell-%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/21/Xshell-%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/</id>
    <published>2020-09-21T13:21:21.000Z</published>
    <updated>2020-09-24T08:55:08.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置命令行提示符"><a href="#设置命令行提示符" class="headerlink" title="设置命令行提示符"></a>设置命令行提示符</h1><p>在命令行提示符显示用户名，当前机器IP，当前时间，当前路径等信息。但有时候如果我们的目录很长，敲击命令很不方便，可以通过修改 PS1 环境变量，让命令提示符在第二行显示：</p><p>如下示例，后面的 \n 就是起到了提示符 $ 在第二行显示效果。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">"\[\033[01;31m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\][\[\033[01;33m\]\t\[\033[00m\]]:\[\033[01;34m\]\w\[\033[00m\]\n$ "</span></code></pre></div><p>效果如下：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/F3DD95CE99324FCEA6BA15337467F42A/34380" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>注：</strong></p><p>  <strong>设置为什么颜色，可以自己根据显示效果调，很灵活。</strong></p><a id="more"></a><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>如果要写入shell配置文件，建议写到<strong>环境变量文件</strong><code>~/.bash_profile</code>，而不要写入<code>~/.bashrc</code>，否则借助ssh类的工具都将因为trap DEBUG信号的特殊性而无限等待，比如scp/rsync等。</p><p>或者，直接判断是否是交互式登录，是的话就设置，否则不设置：</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">${-#*i}</span>"</span> != <span class="hljs-string">"$-"</span> ];<span class="hljs-keyword">then</span>    <span class="hljs-comment"># interactively shell</span>    PS1=<span class="hljs-string">"\[\033[01;31m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\][\[\033[01;33m\]\t\[\033[00m\]]:\[\033[01;34m\]\w\[\033[00m\]\n$ "</span>    <span class="hljs-built_in">trap</span> <span class="hljs-string">'echo -ne "\e[0m"'</span> DEBUG<span class="hljs-keyword">fi</span></code></pre></div><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 写入</span>vim ~/.bash_profile<span class="hljs-comment"># 立即生效</span><span class="hljs-built_in">source</span> ~/.bash_profile</code></pre></div><h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><blockquote><p>在终端上的显示的命令提示符：<code>[root@root ~]#</code></p><p>配置文件中的设置：<code>PS1="[\u@\h \W]\$"</code></p></blockquote><ul><li>设置提示符格式：<code>PS1</code></li></ul><p><code>PS1</code>的定义中个常用的参数的含义如下：</p><p><code>\d</code> ：#代表日期，格式为weekday month date，例如：”Mon Aug 1”</p><p><code>\H</code> ：#完整的主机名称</p><p><code>\h</code> ：#仅取主机的第一个名字</p><p><code>\T</code> ：#显示时间为24小时格式，如：HH：MM：SS</p><p><code>\t</code> ：#显示时间为12小时格式 , 如：HH：MM：SS</p><p><code>\A</code> ：#显示时间为12小时格式：HH：MM</p><p><code>\u</code> ：#当前用户的账号名称</p><p><code>\v</code> ：#BASH的版本信息</p><p><code>\w</code> ：#完整的工作目录名称</p><p><code>\W</code> ：#利用basename取得工作目录名称，所以只会列出最后一个目录</p><p>`#` ：#下达的第几个命令</p><p><code>$</code> ：#提示字符，如果是root时，提示符为：<code>#</code> ，普通用户则为：<code>$</code></p><h1 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h1><blockquote><p>在<code>PS1</code>中设置字符颜色的格式为：<code>[\e[F;Bm]</code>，其中<code>F</code>为字体颜色，编号为30-37，<code>B</code>为背景颜色，编号为40-47。</p></blockquote><p>颜色表如下：</p><p><code>[\e[F;Bm]</code>需要改变颜色的部分<code>[\e[0m]</code></p><p>开始颜色输入：<code>[\e[F;Bm]</code></p><p>结束颜色输入：<code>[\e[0m]</code></p><ul><li>F B 值分别对应的颜色<div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">40</span> 黑色<span class="hljs-symbol">31 </span><span class="hljs-number">41</span> 红色<span class="hljs-symbol">32 </span><span class="hljs-number">42</span> 绿色<span class="hljs-symbol">33 </span><span class="hljs-number">43</span> 黄色<span class="hljs-symbol">34 </span><span class="hljs-number">44</span> 蓝色<span class="hljs-symbol">35 </span><span class="hljs-number">45</span> 紫红色<span class="hljs-symbol">36 </span><span class="hljs-number">46</span> 青蓝色<span class="hljs-symbol">37 </span><span class="hljs-number">47</span> 白色</code></pre></div></li></ul><ul><li>设置特殊显示<div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-keyword">OFF</span>，关闭颜色<span class="hljs-symbol">1 </span>高亮显示<span class="hljs-symbol">4 </span>显示下划线<span class="hljs-symbol">5 </span>闪烁显示<span class="hljs-symbol">7 </span>反白显示<span class="hljs-symbol">8 </span>颜色不可见</code></pre></div>特殊显示可在结束颜色输入里面设置：<code>[\e[ 特殊颜色编号 m]</code></li></ul><h1 id="其他配色配置"><a href="#其他配色配置" class="headerlink" title="其他配色配置"></a>其他配色配置</h1><p>点击 Xshell 面板顶部的如下按钮。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/BD96E8E97F1041839D778415D8CABE9A/34339" srcset="/blog/img/loading.gif" alt="0"></p><p>点击 Browse 按钮，弹出如下面板，选择 ANSI Colors on Black，然后点击右侧save as 按钮，命名为 zkl。</p><p>这里其实就是复制一份 ANSI Colors on Black 的颜色方案，或者我们也可以 New 一个方案。</p><p>ANSI 颜色已经很好看，这里我们是沿用 ANSI 颜色，并加以修改，以得到自己想要的颜色方案。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/D1F435F681D641209349778E780A86D7/34342" srcset="/blog/img/loading.gif" alt="0"></p><p>然后，点击右侧的 edit 按钮，编辑前景色和背景色。</p><p><strong>1. 设置背景色</strong></p><p>点击 Backgroud 右侧的下拉列表， 在弹出的界面选择 other, 弹出一个界面，点击自定义颜色，然后会弹出如下界面：</p><p>按照如下 rgb 值填写颜色，（0，43, 53）</p><p>然后点击 Add to Custom Colors 按钮，添加自定义颜色到左侧面板中的 custom colors下，选择它。确定。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/39C2F44930674C0BA5109DAA2DC8C7EB/34330" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>2. 设置字体颜色（前景色）</strong></p><p>点击 Normal Text，进行设置。</p><p>rgb颜色：（131,148,150）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/590A9972CA694D2F8E9F0B8E99DD6FEB/34325" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>3. 设置目录颜色</strong></p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/32C463E5DEEA4F2E8A0BE945E80D02B5/34355" srcset="/blog/img/loading.gif" alt="0"></p><p>颜色 rgb 值如下：（128，128, 255）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/ABF6FAEC55324EB9831A00B1FC5B9201/34372" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>4. 设置压缩文件颜色</strong></p><p>ANSI 颜色中，压缩文件颜色默认是红色，不干扰视线，如果感觉不好，可以调整为如下颜色：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/346D3113708F402FA7010678897293A9/34366" srcset="/blog/img/loading.gif" alt="0"></p><p>颜色 rgb 值如下：（128，128, 0）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/12A178F7B6E64CB89158765374F356B0/34370" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>5. 设置VIM中注释的颜色</strong> </p><p>经过以上设置后，xshell的背景颜色，字体颜色，linux的目录，压缩文件颜色都比较好看了，效果如下。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/EE9F095AB52649F1AD384A170879FD59/34399" srcset="/blog/img/loading.gif" alt="0"></p><p>但是我们打开 vim，编辑一个 c++, python 代码文件时会发现注释的颜色很不好看。需要再进行设置。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/8CF1086E999A478682FE26CBBD6F66A4/34389" srcset="/blog/img/loading.gif" alt="0"></p><p>设置如下颜色即可：</p><p>rgb颜色：（255,128,64）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/D75AA5C048F846E2BC0DCFB897051CAE/34405" srcset="/blog/img/loading.gif" alt="0"></p><p>修改后的代码文件显示效果如下：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/F851D90807A74A27BDDD1905B947627E/34391" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>6. 导出颜色方案</strong></p><p>xshell 非常强大，各种功能。我们设置的颜色方案也可以导出保存，当我们在其他机器上使用时，可以导入颜色方案。</p><p>下面界面中的 import 和 export 即可完成导入和导出颜色方案，下面这个文件是上述配置对应的颜色方案文件：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/83051EC210554E98A38A8767481ADBA8/34432" srcset="/blog/img/loading.gif" alt="zkl.xcs"></p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/0E901C3307584455B61DF5E18A68D001/34427" srcset="/blog/img/loading.gif" alt="0"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设置命令行提示符&quot;&gt;&lt;a href=&quot;#设置命令行提示符&quot; class=&quot;headerlink&quot; title=&quot;设置命令行提示符&quot;&gt;&lt;/a&gt;设置命令行提示符&lt;/h1&gt;&lt;p&gt;在命令行提示符显示用户名，当前机器IP，当前时间，当前路径等信息。但有时候如果我们的目录很长，敲击命令很不方便，可以通过修改 PS1 环境变量，让命令提示符在第二行显示：&lt;/p&gt;
&lt;p&gt;如下示例，后面的 \n 就是起到了提示符 $ 在第二行显示效果。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PS1=&lt;span class=&quot;hljs-string&quot;&gt;&quot;\[\033[01;31m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\][\[\033[01;33m\]\t\[\033[00m\]]:\[\033[01;34m\]\w\[\033[00m\]\n$ &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;​    &lt;img src=&quot;http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/F3DD95CE99324FCEA6BA15337467F42A/34380&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;设置为什么颜色，可以自己根据显示效果调，很灵活。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub建站</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/19/Hexo+GitHub/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/19/Hexo+GitHub/</id>
    <published>2020-09-19T11:24:01.000Z</published>
    <updated>2020-09-24T08:55:08.019Z</updated>
    
    <content type="html"><![CDATA[<p>前言： 使用<a href="https://blog.csdn.net/weixin_43438052" target="_blank" rel="noopener">CSDN</a>或<strong>简书</strong>撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。</p><p>最终，个人选择了<strong>Hexo+GitHub（Pages）</strong>的方式。</p><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 是开源协作社区 GitHub 的一个服务，将博客部署到它上面再合适不过了。</p></blockquote><table><thead><tr><th>Q</th><th>W</th></tr></thead><tbody><tr><td>为什么要部署到 GitHub Pages 上？</td><td>首先免费，其次省心，最后可以学习使用 GitHub。</td></tr><tr><td>GitHub Pages 有容量限制吗？</td><td>有，由 <a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="noopener">What is GitHub Pages?</a> 可知：大小限制为 1GB，一个月 100GB 流量。</td></tr><tr><td>超出限制的容量怎么办？</td><td>讲真，如果图片音乐视频等大文件都放在<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云 KODO</a>、<a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">阿里云 OSS</a> 或其它云存储上。<br>图片我更多是存放在图床上，比如<a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a>或<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>。</td></tr><tr><td>国内访问速度行不行，有必要同时部署在 <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 上吗？</td><td>个人感觉可有可无吧，自己不用梯子时，感觉访问速度可以，毕竟站点的大文件都是放在了云存储上，图片都是国内图床，加载较快。</td></tr><tr><td>我可以用自己的域名吗？</td><td>可以，并且原生支持 https。</td></tr></tbody></table><a id="more"></a> <hr><h1 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h1><hr><h2 id="一、安装-Hexo前的准备"><a href="#一、安装-Hexo前的准备" class="headerlink" title="一、安装 Hexo前的准备"></a>一、安装 Hexo前的准备</h2><h3 id="1、安装Hexo前的必要工作"><a href="#1、安装Hexo前的必要工作" class="headerlink" title="1、安装Hexo前的必要工作"></a>1、安装Hexo前的必要工作</h3><p>安装以下两个程序：</p><p>程序 | 下载地址 | 说明|<br>–|–|–|–<br>Git|<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git - Downloads</a>| 网速的同学，可以自行百度移步到国内镜像 |<br>Node.js|<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js - Downloads</a>| 有LTS和Current两个版本，安装 LTS 版即可。 |由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 <strong>“npm -v”</strong> 来测试是否成功安装。</p><p>注意：关于Git和Node.js的安装可能会有问题，尤其是Git的安装。这里贴上几张安装界面的截图。</p><p><img src="https://s1.ax1x.com/2020/09/19/wI2wcT.png" srcset="/blog/img/loading.gif" alt="wI2wcT.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/wI2R9x.png" srcset="/blog/img/loading.gif" alt="wI2R9x.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/wI2oHH.png" srcset="/blog/img/loading.gif" alt="wI2oHH.png"></p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<br><img src="https://i.loli.net/2019/11/07/pFcNrU8QYBVROGw.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="2、新建GitHub仓库"><a href="#2、新建GitHub仓库" class="headerlink" title="2、新建GitHub仓库"></a>2、新建GitHub仓库</h3><ol><li>按照下图来新建一个Repo：</li></ol><ul><li>最好勾选``Initialize this repository with a README`，图中忘记勾选了。</li></ul><p><img src="https://s1.ax1x.com/2020/09/19/wIov7T.png" srcset="/blog/img/loading.gif" alt="wIov7T.png"></p><ol start="2"><li>访问GitHub Pages</li></ol><p>在建好的仓库右侧有个<code>settings</code>按钮，点击它</p><p><img src="https://s1.ax1x.com/2020/09/19/wITtUS.png" srcset="/blog/img/loading.gif" alt="wITtUS.png"></p><p>向下拉到<code>GitHub Pages</code>，提示的链接便是博客的首页了，可以点击浏览。（后期可以在这里绑定域名）</p><p><img src="https://s1.ax1x.com/2020/09/19/wIT5K1.png" srcset="/blog/img/loading.gif" alt="wIT5K1.png"></p><h2 id="二、正式安装Hexo"><a href="#二、正式安装Hexo" class="headerlink" title="二、正式安装Hexo"></a>二、正式安装Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。——官方</p></blockquote><p>准备工作完成后，来安装hexo框架吧！<br> <strong>主要根据hexo官方的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>来安装Hexo。</strong></p><ul><li><p>在本地电脑上新建一个文件夹，用来存放整个Hexo博客项目。这里默认路径是<strong>D:\blog</strong>。</p></li><li><p>使用 npm 安装 Hexo：</p></li></ul><div class="hljs"><pre><code class="hljs bash">$ npm install -g hexo-cli</code></pre></div><p><img src="https://i.loli.net/2019/11/07/BZIuA2XzYeaDQ8k.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>这样，Hexo就安装完成了。</p><blockquote><p>可使用输入<code>hexo -v</code>，检查<code>Hexo</code>是否安装成功</p></blockquote><h2 id="三、初始化Hexo"><a href="#三、初始化Hexo" class="headerlink" title="三、初始化Hexo"></a>三、初始化Hexo</h2><p><code>hexo init</code>，就会自动构建一个 <code>hexo</code> 项目，看到后面的<code>Start blogging with Hexo！</code>就说明初始化好了。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化Hexo</span>$ hexo init</code></pre></div><h2 id="四、安装npm必需组件"><a href="#四、安装npm必需组件" class="headerlink" title="四、安装npm必需组件"></a>四、安装npm必需组件</h2><div class="hljs"><pre><code class="hljs bash">$ npm install</code></pre></div><h2 id="五、生成并预览"><a href="#五、生成并预览" class="headerlink" title="五、生成并预览"></a>五、生成并预览</h2><p>执行 <code>hexo s</code>，浏览器访问 <code>localhost:4000</code> 就可以看到效果啦！</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 本地预览</span>$ hexo s</code></pre></div><p>初始化的默认博客页面：</p><p><img src="https://s1.ax1x.com/2020/09/19/wII0iQ.png" srcset="/blog/img/loading.gif" alt="wII0iQ.png"></p><h1 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h1><h2 id="一、配置git"><a href="#一、配置git" class="headerlink" title="一、配置git"></a>一、配置git</h2><h3 id="1、-全局变量name、email"><a href="#1、-全局变量name、email" class="headerlink" title="1、 全局变量name、email"></a>1、 全局变量name、email</h3><ul><li><em>可以在未来部署，并非一定现在</em></li></ul><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><div class="hljs"><pre><code>$ git config --global user.name  "your name"`$ git config --global user.email "your Email"</code></pre></div><h3 id="2、生成私钥和公钥"><a href="#2、生成私钥和公钥" class="headerlink" title="2、生成私钥和公钥"></a>2、生成私钥和公钥</h3><div class="hljs"><pre><code class="hljs ba">$ ssh-keygen -t rsa</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/18/wh8K6e.png" srcset="/blog/img/loading.gif" alt="wh8K6e.png"></p><h3 id="3、绑定SSH公钥"><a href="#3、绑定SSH公钥" class="headerlink" title="3、绑定SSH公钥"></a>3、绑定SSH公钥</h3><p>登录Github，点击头像下的<code>settings</code></p><p><img src="https://s1.ax1x.com/2020/09/19/wI7FPg.png" srcset="/blog/img/loading.gif" alt="wI7FPg.png"></p><p>左侧点击<code>SSH and GPG keys</code>，添加ssh，新建一个<code>New SSH key</code>，将<code>id_rsa.pub</code>文件里的内容复制上去</p><p><img src="https://s1.ax1x.com/2020/09/18/wh810A.png" srcset="/blog/img/loading.gif" alt="wh810A.png"></p><ul><li>Title可以直接不填，Key粘贴<code>id_rsa.pub</code>文件里的内容</li></ul><p><img src="https://s1.ax1x.com/2020/09/18/wh8oA1.png" srcset="/blog/img/loading.gif" alt="wh8oA1.png"></p><h3 id="4、修改-config-yml中的Deployment"><a href="#4、修改-config-yml中的Deployment" class="headerlink" title="4、修改_config.yml中的Deployment"></a>4、修改_config.yml中的Deployment</h3><p>配置<code>Deployment</code>，在其文件夹中，找到<code>_config.yml</code>文件，修改<code>repo</code>值（在末尾），<code>repo</code>值是<code>github</code>项目里的<code>ssh</code></p><p><img src="https://s1.ax1x.com/2020/09/19/wIbQgJ.png" srcset="/blog/img/loading.gif" alt="wIbQgJ.png"></p><h2 id="二、安装hexo-deployer-git插件"><a href="#二、安装hexo-deployer-git插件" class="headerlink" title="二、安装hexo-deployer-git插件"></a>二、安装hexo-deployer-git插件</h2><ul><li>HexoBlog部署到<code>git</code>我们需要安装<code>hexo-deployer-git</code>插件，在blog目录下运行一下命令进行安装</li></ul><div class="hljs"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save</code></pre></div><h2 id="三、写作"><a href="#三、写作" class="headerlink" title="三、写作"></a>三、写作</h2><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 创建文章，默认layout布局为：post</span>$ hexo new [layout] &lt;title&gt;<span class="hljs-comment"># 例如</span>$ hexo new post HelloHexo</code></pre></div><blockquote><p>关于这块，最好看官方文档：<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a></p></blockquote><p>之后会在<code>source</code>文件夹的<code>_post</code>文件夹中看到你新建的文件<code>HelloHexo.md</code></p><h2 id="四、生成并部署博客"><a href="#四、生成并部署博客" class="headerlink" title="四、生成并部署博客"></a>四、生成并部署博客</h2><div class="hljs"><pre><code class="hljs bash">$ hexo d -g</code></pre></div><p>生成以及部署了，在打开你的博客主页（melodyjerry.github.io）就可以看到你创建的文章了。</p><h1 id="高阶篇"><a href="#高阶篇" class="headerlink" title="高阶篇"></a>高阶篇</h1><h2 id="一、主题"><a href="#一、主题" class="headerlink" title="一、主题"></a>一、主题</h2><h3 id="1、选取喜欢的主题"><a href="#1、选取喜欢的主题" class="headerlink" title="1、选取喜欢的主题"></a>1、选取喜欢的主题</h3><p>在Hexo官方，有许多现成的主题了。当然，你想自己原创设计或二次开发也可以的<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8">👼</span></p><p>大量主题：<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/themes.html</a></p><p>找到合适的就按要求下载即可。</p><p>以主题<code>fluid</code>为例，<code>fluid</code>的配置文档在<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B" target="_blank" rel="noopener">这里</a>。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 下载到themes文件夹下</span>$ git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid fluid</code></pre></div><h3 id="2、-配置主题"><a href="#2、-配置主题" class="headerlink" title="2、 配置主题"></a>2、 配置主题</h3><p>找到<code>_config.yml</code>文件，修改<code>theme</code>值：</p><div class="hljs"><pre><code class="hljs bash">theme: fluid</code></pre></div><h3 id="3、重新生成并预览"><a href="#3、重新生成并预览" class="headerlink" title="3、重新生成并预览"></a>3、重新生成并预览</h3><div class="hljs"><pre><code class="hljs bash">$ hexo clean$ hexo g$ hexo s</code></pre></div><h2 id="部署优化"><a href="#部署优化" class="headerlink" title="部署优化"></a>部署优化</h2><p>每次都要执行 <code>hexo clean</code> 、<code>hexo generate</code>、 <code>hexo deploy</code>，不如写个新的脚本：</p><div class="hljs"><pre><code class="hljs javascript"><span class="hljs-comment">// package.json</span><span class="hljs-string">"dev"</span>: <span class="hljs-string">"hexo s"</span>,<span class="hljs-string">"build"</span>: <span class="hljs-string">"hexo clean &amp; hexo deploy"</span></code></pre></div><p>部署命令：</p><div class="hljs"><pre><code class="hljs javascript">$ npm run build</code></pre></div><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="站点文件和主题文件的区别"><a href="#站点文件和主题文件的区别" class="headerlink" title="站点文件和主题文件的区别"></a>站点文件和主题文件的区别</h2><p><img src="https://s1.ax1x.com/2020/09/19/wIOAud.png" srcset="/blog/img/loading.gif" alt="wIOAud.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言： 使用&lt;a href=&quot;https://blog.csdn.net/weixin_43438052&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSDN&lt;/a&gt;或&lt;strong&gt;简书&lt;/strong&gt;撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。&lt;/p&gt;
&lt;p&gt;最终，个人选择了&lt;strong&gt;Hexo+GitHub（Pages）&lt;/strong&gt;的方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Pages&lt;/a&gt; 是开源协作社区 GitHub 的一个服务，将博客部署到它上面再合适不过了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Q&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;为什么要部署到 GitHub Pages 上？&lt;/td&gt;
&lt;td&gt;首先免费，其次省心，最后可以学习使用 GitHub。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GitHub Pages 有容量限制吗？&lt;/td&gt;
&lt;td&gt;有，由 &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What is GitHub Pages?&lt;/a&gt; 可知：大小限制为 1GB，一个月 100GB 流量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;超出限制的容量怎么办？&lt;/td&gt;
&lt;td&gt;讲真，如果图片音乐视频等大文件都放在&lt;a href=&quot;https://www.qiniu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;七牛云 KODO&lt;/a&gt;、&lt;a href=&quot;https://www.aliyun.com/product/oss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云 OSS&lt;/a&gt; 或其它云存储上。&lt;br&gt;图片我更多是存放在图床上，比如&lt;a href=&quot;https://imgchr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;路过图床&lt;/a&gt;或&lt;a href=&quot;https://sm.ms/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SM.MS&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;国内访问速度行不行，有必要同时部署在 &lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding&lt;/a&gt; 上吗？&lt;/td&gt;
&lt;td&gt;个人感觉可有可无吧，自己不用梯子时，感觉访问速度可以，毕竟站点的大文件都是放在了云存储上，图片都是国内图床，加载较快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;我可以用自己的域名吗？&lt;/td&gt;
&lt;td&gt;可以，并且原生支持 https。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://melodyjerry.github.io/blog/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客加入聊天系统DaoVoice</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/%E5%8A%A0%E5%85%A5%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9Fdaovioce/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/%E5%8A%A0%E5%85%A5%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9Fdaovioce/</id>
    <published>2020-09-18T12:23:11.000Z</published>
    <updated>2020-09-19T04:24:28.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-DaoVoice"><a href="#关于-DaoVoice" class="headerlink" title="关于 DaoVoice"></a>关于 DaoVoice</h1><p>DaoVoice 是一款革命性的应用运营平台，致力于帮助企业实现以用户为中心的「精益运营」体系。</p><p>融合「在线聊天」、「客服支持」、「用户画像」、「消息推送」、「行为引导」等功能为一体， 按需获取用户信息和行为，实现场景化消息推送，让通知更富有人情味。</p><p>接入只需 5 行代码，即可创建与用户实时沟通的窗口，无缝接入企业原有产品体系，拉近企业与用户的距离。</p><p>秉承「数据驱动，精益运营」的理念，让用户定义产品，让参与感驱动产品迭代。</p><p>用 DaoVoice 驱动用户运营，帮你最终实现用户转化。</p><blockquote><p>“DaoVoice 帮我们更好地运营用户。实时在线沟通，可更快解决用户问题。后台管理可帮我们建立用户画像，针对不同的用户需求进行精准运营。此外，DaoVoice 团队会快速响应我们的反馈，给予高质量服务支持。”    ——<strong>Travis</strong>创始人 &amp; CEO</p></blockquote><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>layout\_third-party\daovoice.ejs：</p><div class="hljs"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(theme.daovoice.enable &amp;&amp; theme.daovoice.appid){ %&gt;  &lt;script&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) </span>{      i[<span class="hljs-string">'DaoVoiceObject'</span>] = r;      i[r] = i[r] ||        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{          (i[r].q = i[r].q || []).push(<span class="hljs-built_in">arguments</span>);        };      i[r].l = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();      a = s.createElement(o);      m = s.getElementsByTagName(o)[<span class="hljs-number">0</span>];      a.async = <span class="hljs-number">1</span>;      a.src = g;      a.charset = <span class="hljs-string">'utf-8'</span>;      m.parentNode.insertBefore(a, m);    })(<span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, (<span class="hljs-string">'https:'</span> === <span class="hljs-built_in">document</span>.location.protocol ? <span class="hljs-string">'https:'</span> : <span class="hljs-string">'http:'</span>) + <span class="hljs-string">"//widget.daovoice.io/widget/&lt;%= theme.daovoice.appid %&gt;.js"</span>, <span class="hljs-string">'daovoice'</span>);    daovoice(<span class="hljs-string">'init'</span>, {      app_id: <span class="hljs-string">"&lt;%= theme.daovoice.appid %&gt;"</span>,    });    daovoice(<span class="hljs-string">'update'</span>);  &lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp">&lt;% } %&gt;</span></code></pre></div><p>layout\index.ejs：</p><div class="hljs"><pre><code class="hljs js">&lt;!--DaoVoice服务http:<span class="hljs-comment">//blog.daovoice.io/--&gt;</span>&lt;%- partial(<span class="hljs-string">'_third-party/daovoice'</span>) %&gt;</code></pre></div><p>_config.yml：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">daovoice:</span>  <span class="hljs-comment"># 在线客服 Daovoice 参考：http://dashboard.daovoice.io</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启在线客服聊天</span>  <span class="hljs-attr">appid:</span> <span class="hljs-string">'exxxxxxx'</span>  <span class="hljs-comment"># 应用ID设置</span></code></pre></div><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s1.ax1x.com/2020/09/18/w46j3D.gif" srcset="/blog/img/loading.gif" alt="w46j3D.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-DaoVoice&quot;&gt;&lt;a href=&quot;#关于-DaoVoice&quot; class=&quot;headerlink&quot; title=&quot;关于 DaoVoice&quot;&gt;&lt;/a&gt;关于 DaoVoice&lt;/h1&gt;&lt;p&gt;DaoVoice 是一款革命性的应用运营平台，致力于帮助企业实现以用户为中心的「精益运营」体系。&lt;/p&gt;
&lt;p&gt;融合「在线聊天」、「客服支持」、「用户画像」、「消息推送」、「行为引导」等功能为一体， 按需获取用户信息和行为，实现场景化消息推送，让通知更富有人情味。&lt;/p&gt;
&lt;p&gt;接入只需 5 行代码，即可创建与用户实时沟通的窗口，无缝接入企业原有产品体系，拉近企业与用户的距离。&lt;/p&gt;
&lt;p&gt;秉承「数据驱动，精益运营」的理念，让用户定义产品，让参与感驱动产品迭代。&lt;/p&gt;
&lt;p&gt;用 DaoVoice 驱动用户运营，帮你最终实现用户转化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“DaoVoice 帮我们更好地运营用户。实时在线沟通，可更快解决用户问题。后台管理可帮我们建立用户画像，针对不同的用户需求进行精准运营。此外，DaoVoice 团队会快速响应我们的反馈，给予高质量服务支持。”    ——&lt;strong&gt;Travis&lt;/strong&gt;创始人 &amp;amp; CEO&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>AspectJ的切入点表达式---execution表达式</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/AspectJ%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F---execution%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/AspectJ%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F---execution%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-18T09:24:41.000Z</published>
    <updated>2020-09-24T08:55:08.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>execution(&lt;修饰符模式&gt;?&lt;返回类型模式&gt;&lt;方法名模式&gt;(&lt;参数模式&gt;)&lt;异常模式&gt;?) </p></blockquote> <a id="more"></a><p>除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。</p><p>一、通过方法签名定义切点</p><blockquote><p> execution(public * *(..))</p></blockquote><p>　　匹配所有目标类的public方法，但不匹配SmartSeller和protected voidshowGoods()方法。第一个<em>代表返回类型，第二个</em>代表方法名，而..代表任意入参的方法；</p><blockquote><p> execution(* *To(..))</p></blockquote><p>　　匹配目标类所有以To为后缀的方法。它匹配NaiveWaiter和NaughtyWaiter的greetTo()和serveTo()方法。第一个<em>代表返回类型，而</em>To代表任意以To为后缀的方法；</p><p>二、通过类定义切点</p><blockquote><p> execution(<em>com.baobaotao.Waiter.</em>(..))</p></blockquote><p>　　匹配Waiter接口的所有方法，它匹配NaiveWaiter和NaughtyWaiter类的greetTo()和serveTo()方法。第一个<em>代表返回任意类型，com.baobaotao.Waiter.</em>代表Waiter接口中的所有方法；</p><blockquote><p> execution(<em>com.baobaotao.Waiter+.</em>(..))</p></blockquote><p>　　匹配Waiter接口及其所有实现类的方法，它不但匹配NaiveWaiter和NaughtyWaiter类的greetTo()和serveTo()这两个Waiter接口定义的方法，同时还匹配NaiveWaiter#smile()和NaughtyWaiter#joke()这两个不在Waiter接口中定义的方法。</p><p>三、通过类包定义切点</p><p>　　在类名模式串中，”.*”表示包下的所有类，而”..*”表示包、子孙包下的所有类。</p><blockquote><p> execution(* com.baobaotao.*(..))l</p></blockquote><p>　　匹配com.baobaotao包下所有类的所有方法；</p><blockquote><p> execution(* com.baobaotao..*(..))l</p></blockquote><p>　　匹配com.baobaotao包、子孙包下所有类的所有方法，如com.baobaotao.dao，com.baobaotao.servier以及com.baobaotao.dao.user包下的所有类的所有方法都匹配。”..”出现在类名中时，后面必须跟”*”，表示包、子孙包下的所有类；  </p><blockquote><p> execution(* com..<em>.</em>Dao.find*(..))</p></blockquote><p>　　匹配包名前缀为com的任何包下类名后缀为Dao的方法，方法名必须以find为前缀。如com.baobaotao.UserDao#findByUserId()、com.baobaotao.dao.ForumDao#findById()的方法都匹配切点。</p><p>四、通过方法入参定义切点</p><p>　　切点表达式中方法入参部分比较复杂，可以使用”*”和”..”通配符，其中”*”表示任意类型的参数，而”..”表示任意类型参数且参数个数不限。 </p><blockquote><p> execution(* joke(String,int)))</p></blockquote><p>　　匹配joke(String,int)方法，且joke()方法的第一个入参是String，第二个入参是int。它匹配NaughtyWaiter#joke(String,int)方法。如果方法中的入参类型是<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>.lang包下的类，可以直接使用类名，否则必须使用全限定类名，如joke(java.util.List,int)；</p><blockquote><p> execution(* joke(String,*)))</p></blockquote><p>　　匹配目标类中的joke()方法，该方法第一个入参为String，第二个入参可以是任意类型，如joke(Strings1,String s2)和joke(String s1,double d2)都匹配，但joke(String s1,doubled2,String s3)则不匹配；</p><blockquote><p> execution(* joke(String,..)))</p></blockquote><p>　　匹配目标类中的joke()方法，该方法第 一个入参为String，后面可以有任意个入参且入参类型不限，如joke(Strings1)、joke(String s1,String s2)和joke(String s1,double d2,Strings3)都匹配。</p><blockquote><p> execution(* joke(Object+)))</p></blockquote><p>　　匹配目标类中的joke()方法，方法拥有一个入参，且入参是Object类型或该类的子类。它匹配joke(Strings1)和joke(Client c)。如果我们定义的切点是execution(*joke(Object))，则只匹配joke(Object object)而不匹配joke(Stringcc)或joke(Client c)。</p><p>五、args()和@args()</p><p>　　args()函数的入参是类名，@args()函数的入参必须是注解类的类名。虽然args()允许在类名后使用+通配符后缀，但该通配符在此处没有意义：添加和不添加效果都一样。</p><p>1、args()</p><p>　　该函数接受一个类名，表示目标类方法入参对象按类型匹配于指定类时，切点匹配，如下面的例子：</p><blockquote><p>args(com.baobaotao.Waiter)</p></blockquote><p>　　表示运行时入参是Waiter类型的方法，它和execution(**(com.baobaotao.Waiter))区别在于后者是针对类方法的签名而言的，而前者则针对运行时的入参类型而言。如args(com.baobaotao.Waiter)既匹配于addWaiter(Waiterwaiter)，也匹配于addNaiveWaiter(NaiveWaiter naiveWaiter)，而execution(**(com.baobaotao.Waiter))只匹配addWaiter(Waiterwaiter)方法；实际上，args(com.baobaotao.Waiter)等价于execution(**(com.baobaotao.Waiter+))，当然也等价于args(com.baobaotao.Waiter+)。</p><p>2、@args()</p><p>　　该函数接受一个注解类的类名，当方法的运行时入参对象标注发指定的注解时，方法匹配切点。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>通过类包定义切点</p><p>在类名模式串中，“.*”表示包下的所有类，而“..*”表示包、子孙包下的所有类。</p><p>execution(* com.baobaotao.*(..))</p><p>匹配com.baobaotao包下所有类的所有方法；</p><p>execution(* com.baobaotao..*(..))</p><p>匹 配com.baobaotao包、子孙包下所有类的所有方法，如com.baobaotao.dao，com.baobaotao.servier以及 com.baobaotao.dao.user包下的所有类的所有方法都匹配。“..”出现在类名中时，后面必须跟“*”，表示包、子孙包下的所有类</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;execution(&amp;lt;修饰符模式&amp;gt;?&amp;lt;返回类型模式&amp;gt;&amp;lt;方法名模式&amp;gt;(&amp;lt;参数模式&amp;gt;)&amp;lt;异常模式&amp;gt;?) &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java面向对象的七大原则</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/[%E8%BD%AC]Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/[%E8%BD%AC]Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</id>
    <published>2020-09-18T01:10:00.742Z</published>
    <updated>2020-09-24T08:55:08.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实没有设计模式我们也能完成开发工作。但是为什么需要设计模式呢？让你看起来很牛，没错这个算一个。让你的代码层次感分明，可读性强而且容易维护。让你像我一样有更多的摸鱼划水时间。<br>可能有人说我一个类或者方法就干完的东西，你搞了七八个。当然使用设计模式也是要斟酌的。一些简单稳定的业务也不推荐使用设计模式。设计模式多用于复杂多变的业务或者要求适配性、扩展性更强的场景中。不要为了设计模式而设计模式。</p><p>接下来我们结合实际开探讨一下设计模式的一些原则。</p><h1 id="1、开闭原则"><a href="#1、开闭原则" class="headerlink" title="1、开闭原则"></a>1、开闭原则</h1><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Seller</span> {    <span class="hljs-keyword">public</span> BigDecimal sellCar(Car car) {        <span class="hljs-keyword">return</span> car.getPrice();    }}</code></pre></div><p>上面模拟4S店一个销售在卖车。突然老板搞了一个促销：在双十一要开展打折活动。在sellCar方法内增加一个计算可行吗？这势必影响整个业务，导致所有车都打折。不行不行！那么在Car里面操作？然后你改啊改！结果各种逻辑流程判断。才实现了业务要求。如果后续打折活动结束了或者升级了，你还要再进行各种改动。你发现一个打折让你的代码面目全非、臃肿不堪。上面说了对于复杂而多变的业务使用设计模式就可以解决。<br>那么设计模式最重要的一个原则就是开闭原则。也就是说一个软件模型实体如类、模块和函数应该对扩展开放，对修改关闭。也就是需要我们将业务行为抽象出来，使用抽象来构建。具体的业务通过抽象的实现来解决。那么我们就搞一个DiscountCar来extends Car.这样sellCar是什么具体的实现就执行什么具体的逻辑。不会影响以前的逻辑，而且不会因为改动原来的代码影响其他逻辑。保证接口可靠性和稳定性。如下：</p><div class="hljs"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiscountCar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Car</span></span>{          <span class="hljs-keyword">private</span> <span class="hljs-type">BigDecimal</span> price;   <span class="hljs-keyword">private</span> <span class="hljs-type">BigDecimal</span> discount;   <span class="hljs-meta">@Override</span>   public <span class="hljs-type">BigDecimal</span> getPrice() {       <span class="hljs-keyword">return</span> price.multiply(discount);   }}</code></pre></div><h1 id="2、依赖倒置原则"><a href="#2、依赖倒置原则" class="headerlink" title="2、依赖倒置原则"></a>2、依赖倒置原则</h1><p>还拿上面的例子来说。经过一系列的打折活动4S店的生意蒸蒸日上。老板突然想扩展一下周边，同时压榨一下销售。让他们卖车的同时卖点玻璃水、防冻液之类的。这个需求当然又抛给了苦逼的程序员。sellCar太具体了不能满足需要了。很多情况下你会增加一个卖玻璃水、卖防冻液的方法。如果以后增加了卖大米，甚至买起了鸡蛋饼呢？总不能一直增加方法吧。我们需要考虑这种问题。我们可以抽象所有卖东西的场景。然后我们把卖的物品抽象成了一个抽象化的概念（java对应的是接口,把卖的行为抽象成了sell方法：</p><div class="hljs"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Any</span> {<span class="hljs-function">String <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>;<span class="hljs-function">BigDecimal <span class="hljs-title">getPrice</span>(<span class="hljs-params"></span>)</span>;}<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Seller</span> {<span class="hljs-function"><span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title">sell</span>(<span class="hljs-params">Any any</span>)</span> {<span class="hljs-keyword">return</span> any.getPrice();    }}</code></pre></div><p>这样随便老板以后卖什么你都可以通过该方法进行处理了，只需要关注于Any的实现。</p><h1 id="3、职责单一原则"><a href="#3、职责单一原则" class="headerlink" title="3、职责单一原则"></a>3、职责单一原则</h1><p>4S店销售卖了一段东西后，发现对客户的吸引力度不大。突然脑子比较灵活的老板又想起了电影中的一句台词：少林功夫加唱歌跳舞有没有搞头？对啊你们销售能不能搞搞什么唱、跳、Rap，当然打篮球就不要了别砸坏了车玻璃。但是人与人是不一样的，有的人只会唱，有的人只会跳，有的人可能唱跳Rap都会甚至篮球都很溜。所以为了适配这么多情况，我们必须把每种技能独立出来，根据不同的人来组合这些技能。</p><div class="hljs"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Seller</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Sing</span>, <span class="hljs-title">Jump</span>, <span class="hljs-title">Rap</span> </span>{<span class="hljs-keyword">public</span> <span class="hljs-function">BigDecimal <span class="hljs-title">sell</span><span class="hljs-params">(Any any)</span> </span>{<span class="hljs-function"><span class="hljs-keyword">return</span> any.<span class="hljs-title">doSell</span><span class="hljs-params">()</span></span>;    }<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"seller sing "</span>);    }<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"seller jumping "</span>);    }<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rap</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"seller raping "</span>);    }}</code></pre></div><p>但是注意一定要适度，根据业务来细分。否则会导致接口过多反而增大开发难度以及代码的复杂度。</p><h1 id="4、迪米特法则"><a href="#4、迪米特法则" class="headerlink" title="4、迪米特法则"></a>4、迪米特法则</h1><p>新的销售方法搞了一段时间后，老板想看看检验一下他这个馊主意的效果。于是就叫了一个销售让他提供一份报表出来看看。那么程序员该如何实现老板查看报表功能呢，很可能有人会这么写：</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Boss</span> {    <span class="hljs-keyword">private</span> Seller seller;    <span class="hljs-keyword">private</span> Report report;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> read() {        seller.apply(report);    }}</code></pre></div><p>乍看功能实现了，细看会发现逻辑不对。哪里不对呢？老板已经持有了报表，如果老板已经知道了你的业绩还叫你干什么？这种逻辑肯定是不对的！也就是说Boss直接依赖了Report；而这个Report不应该直接由Boss处理，而应由Seller控制。</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Boss</span> {    <span class="hljs-keyword">private</span> Seller seller;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> read(){         seller.apply();    }   }<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Seller</span> {      <span class="hljs-keyword">private</span> Report report;            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> apply(){         report.show();      ｝}</code></pre></div><p>这种最大化隔离了类与类之间的关系。降低了类之间的耦合。迪米特法则因此又得名最少知道原则。</p><h1 id="5、接口隔离原则"><a href="#5、接口隔离原则" class="headerlink" title="5、接口隔离原则"></a>5、接口隔离原则</h1><p>用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口。一个类对一个类的依赖应该建立在最小的接口上。<br>建立单一接口，不要建立庞大臃肿的接口尽量细化接口，接口中的方法尽量少，尽量细化接口。注意适度原则，一定要适度。不能滥用<br>就像上面的唱跳 rap，分离是最好的。</p><h1 id="6、里氏代换原则"><a href="#6、里氏代换原则" class="headerlink" title="6、里氏代换原则"></a>6、里氏代换原则</h1><p>这里主要针对类的继承关系而言。比较正式的定义：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2 时，程序P的行为没有发生变化，那么类型 S 是类型 T 的子类型。<br>在4S店老板眼里，只要新来的能在销售岗位上像销售老手一样卖出汽车，他就是一名合格的销售。感觉这种定义就像一句名言：不管你黑猫白猫，能抓老鼠的都是好猫。<br>从某种含义上里氏代换有着以下的契约：</p><ol><li>子类必须完全实现父类的方法。父类出现的地方子类都可以代替父类。</li><li>子类可以有自己的个性定义。里氏替换原则 可以正着用，但是不能反过来用。在子类出现的地方，父类未必就可以胜任。子类一般比父类有个性。</li><li>覆盖或实现父类的方法时输入参数可以被放大。如果4S店老板规定基础车谈价的折扣最多九折，销售打个九五折没有问题，打八折老板肯定要跟你说道说道了。</li><li>覆写或实现父类的方法时输出结果可以被缩小。同样是15W本来只能卖出给客户一个乞丐版，结果换了个销售结果给出了一辆旗舰版。怕不是过不了试用期哦。</li></ol><h1 id="7、合成-复用原则"><a href="#7、合成-复用原则" class="headerlink" title="7、合成/复用原则"></a>7、合成/复用原则</h1><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。<br>如果要使用继承关系，则必须严格遵循里氏替换原则。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。<br>欢迎大家关注我的公种浩【程序员追风】，文章都会在里面更新，整理的资料也会放在里面。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这七种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；单一职责原则告诉我们实现类要职责单一；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合度；合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。在实际开发中我们可以根据业务来进行设计模式的使用，但是很重要的一点千万不要被这些条条框框束缚了你的手脚。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;其实没有设计模式我们也能完成开发工作。但是为什么需要设计模式呢？让你看起来很牛，没错这个算一个。让你的代码层次感分明，可读性强而且容易维护。
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>关于Java的反射机制，4篇优选参考文章</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%8C4%E7%AF%87%E4%BC%98%E9%80%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%8C4%E7%AF%87%E4%BC%98%E9%80%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/</id>
    <published>2020-09-18T01:10:00.738Z</published>
    <updated>2020-09-18T04:43:03.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a></li><li><a href="https://blog.csdn.net/qq_36226453/article/details/82790375" target="_blank" rel="noopener">Java基础之—反射（非常重要）</a></li><li><a href="https://www.cnblogs.com/adamjwh/p/9683705.html" target="_blank" rel="noopener">Java高级篇（四）——反射</a></li><li><a href="https://www.zhihu.com/question/24304289" target="_blank" rel="noopener">学习java应该如何理解反射？</a></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/9be58ee20dee&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java高级特性——反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36226453/article/details/82790375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java基础之—反射（非常重要）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/adamjwh/p/9683705.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java高级篇（四）——反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/24304289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;学习java应该如何理解反射？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java+Spring+MyBatis实现多数据源的动态切换</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/08/Java+Spring+MyBatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/08/Java+Spring+MyBatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/</id>
    <published>2020-09-08T06:22:22.000Z</published>
    <updated>2020-09-18T04:43:02.959Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.cnblogs.com/zt2710/p/11116637.html" target="_blank" rel="noopener">https://www.cnblogs.com/zt2710/p/11116637.html</a></p><p>群聊天记录截图👇</p><img src="https://s1.ax1x.com/2020/09/08/wQE7DO.jpg" srcset="/blog/img/loading.gif" alt="wQE7DO.jpg" style="zoom:30%;"><a id="more"></a><hr><h1 id="固定多数据源切换"><a href="#固定多数据源切换" class="headerlink" title="固定多数据源切换"></a>固定多数据源切换</h1><p>  固定多数据源的动态切换，通过自定义注解实现切换，这样在切换数据源时比较灵活，具体的实现方式如下：</p><p>  1、配置多数据源</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义数据源1--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"oracledataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:oracle:thin:@127.0.0.1:1522:neworcl"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"emspdadev"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"emspdadev"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--定义数据源2--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mysqldataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/jbpmdb"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123456"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--动态数据源配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.ssm.datasource.DynamicDataSource"</span>&gt;</span><span class="hljs-comment">&lt;!--引入定义好的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">"targetDataSources"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>  <span class="hljs-attr">key-type</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"oracle"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"mysql"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"mysqldataSource"</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--定义默认数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultTargetDataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--spring和mybatis整合--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapping/*.xml"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.ssm.dao"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p> 2、定义注解(注解名为DataSource)，用于切换数据源，注解的值只能为上述配置中定义的key(对应于上面配置中定义的oracle、mysql)</p><div class="hljs"><pre><code class="hljs less"><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-variable">@Target</span>(ElementType.METHOD)pub lic <span class="hljs-variable">@interface</span> DataSource {    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">value</span>();}</code></pre></div><p>  3、根据Sping切面编程，当调用指定的切面类时，解释注解，并根据注解的定义使用对应的数据库</p><div class="hljs"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> DataSourceAspect {<span class="hljs-comment">/**</span><span class="hljs-comment">    * 定义切面，当调用com.ssm.service下的所有类的所有方法前都会执行beforeInvoke方法</span><span class="hljs-comment">    */</span>    @<span class="hljs-constructor">Pointcut(<span class="hljs-string">"execution(* com.ssm.service.*.*(..))"</span>)</span>    public void point<span class="hljs-constructor">Cut()</span>{};     @<span class="hljs-constructor">Before(<span class="hljs-params">value</span> = <span class="hljs-string">"pointCut()"</span>)</span>    public void before<span class="hljs-constructor">Invoke(JoinPoint <span class="hljs-params">joinpoint</span>)</span> {        <span class="hljs-keyword">try</span> {            String clazzName = joinpoint.get<span class="hljs-constructor">Target()</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span>;            String methodName = joinpoint.get<span class="hljs-constructor">Signature()</span>.get<span class="hljs-constructor">Name()</span>;            Class targetClazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>for<span class="hljs-constructor">Name(<span class="hljs-params">clazzName</span>)</span>;            Method<span class="hljs-literal">[]</span> methods = targetClazz.get<span class="hljs-constructor">Methods()</span>;            for(Method <span class="hljs-keyword">method</span> : methods) {                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Name()</span>.equals(methodName)) {                    <span class="hljs-comment">// 首先查看方法是否使用注解</span>                    <span class="hljs-comment">// 如果使用注解，则获取注解定义的值，并根据注解的值设置访问数据库的key</span>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.is<span class="hljs-constructor">AnnotationPresent(DataSource.<span class="hljs-params">class</span>)</span>) {                        DataSource dataSource = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(DataSource.<span class="hljs-params">class</span>)</span>;                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DataType(<span class="hljs-params">dataSource</span>.<span class="hljs-params">value</span>()</span>);                    }                    break;                }            }        } catch (Exception e) {            e.print<span class="hljs-constructor">StackTrace()</span>;        }     }}</code></pre></div><p>  4、定义动态切换数据源(继承Spring的AbstractRoutingDataSource)</p><div class="hljs"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRoutingDataSource</span> </span>{    <span class="hljs-comment">/**</span><span class="hljs-comment">    * 根据DatasourceHolder中DataType的值获取具体的数据源</span><span class="hljs-comment">    */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> determineCurrentLookupKey() {        <span class="hljs-keyword">return</span> <span class="hljs-type">DatasourceHolder</span>.getDataType();    }}</code></pre></div><p>  5、数据源切换的使用</p><div class="hljs"><pre><code class="hljs dart"><span class="hljs-meta">@Service</span>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdxServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IIdxSevice</span> </span>{     <span class="hljs-meta">@Autowired</span>    private IdxMapper idxMapper;     <span class="hljs-meta">@Override</span>    public <span class="hljs-built_in">List</span>&lt;Idx&gt; listIdxInfo() {        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }     <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>根据注解的配置，会访问oracle对应的数据源</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"oracle"</span>)    public <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; getIdxById(<span class="hljs-built_in">int</span> idxId) {        <span class="hljs-keyword">return</span> idxMapper.getIdxById(idxId);    }     <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>根据注解的配置，会访问mysql对应的数据源</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"mysql"</span>)    public <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; getJobInfo(<span class="hljs-built_in">int</span> dbId) {        <span class="hljs-keyword">return</span> idxMapper.getJobInfo(dbId);    }}</code></pre></div><p>通过以上的步骤即实现了数据源的动态切换</p><h1 id="动态多数据源切换"><a href="#动态多数据源切换" class="headerlink" title="动态多数据源切换"></a>动态多数据源切换</h1><p>  对于动态的多数据源，数据源的配置一般不放在配置文件中，因为如果放在配置文件中，每次新增或删除数据源，都需要重启项目，这样的实现方式非常不友好；通常情况向数据源的配置放在数据库中。实现方式如下：**<br>**</p><p>  1、配置数据源，这里配置的数据源用于保存其他数据源的配置信息，今后数据的新增、删除、修改均在该数据库中操作，配置如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义数据源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"oracledataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:oracle:thin:@127.0.0.1:1522:neworcl"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cfgmanage"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cfgmanage"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--查询动态配置的数据库连接信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"jdbcTemplate"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dbConfigService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.teamsun.datasource.DBConfigService"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcTemplate"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"jdbcTemplate"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--定义动态数据源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.teamsun.datasource.DynamicDataSource"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"masterDataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dbConfigService"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dbConfigService"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--spring和mybatis整合--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--&lt;property name="mapperLocations" value="classpath:mapping/*.xml" /&gt;--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.teamsun.mapper"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>2、实现查询数据源配置信息的类</p><div class="hljs"><pre><code class="hljs lsl">public class DBConfigService {     private JdbcTemplate jdbcTemplate;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询数据库配置信息</span><span class="hljs-comment">     * @param dbName  数据库名称</span><span class="hljs-comment">     * @return 数据库配置信息</span><span class="hljs-comment">     */</span>    public DBCfg getDBCfg(String dbName) throws Exception {        String querySql = <span class="hljs-string">"select<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"          t.db_type as <span class="hljs-subst">\"</span>dbType<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_name as <span class="hljs-subst">\"</span>dbName<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_comment as <span class="hljs-subst">\"</span>dbCommment<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_driver as <span class="hljs-subst">\"</span>driverClass<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_username as <span class="hljs-subst">\"</span>userName<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_password as <span class="hljs-subst">\"</span>passworld<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_url as <span class="hljs-subst">\"</span>jdbcURL<span class="hljs-subst">\"</span>"</span> +                <span class="hljs-string">"          from TB_RPT_DBCFG t<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"          where t.db_name = '"</span> + dbName + <span class="hljs-string">"'"</span>;         RowMapper&lt;DBCfg&gt; rowMapper = ParameterizedBeanPropertyRowMapper.newInstance(DBCfg.class);        DBCfg dbCfg = (DBCfg) jdbcTemplate.queryForObject(querySql, rowMapper);        return dbCfg;    }     public JdbcTemplate getJdbcTemplate() {        return jdbcTemplate;    }     public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }}</code></pre></div><p>3、实现动态切换数据源</p><div class="hljs"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment"> * &lt;p&gt;动态创建及访问多数据源&lt;/p&gt;</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> DynamicDataSource extends AbstractRoutingDataSource{     <span class="hljs-keyword">private</span> DBConfigService dbConfigService;     <span class="hljs-keyword">private</span> DataSource masterDataSource;     <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; targetDataSource = <span class="hljs-keyword">new</span> HashMap&lt;Object, Object&gt;<span class="hljs-literal">()</span>;     <span class="hljs-keyword">private</span> static final String DEFAULT_DB_NAME = <span class="hljs-string">"dataSource"</span>;  <span class="hljs-comment">// 默认数据库名</span>     <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>get<span class="hljs-constructor">Logger(DynamicDataSource.<span class="hljs-params">class</span>)</span>;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建并获取数据源</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    @Override    protected DataSource determine<span class="hljs-constructor">TargetDataSource()</span> {        <span class="hljs-comment">// 获取数据源名称</span>        String dbName = (String) determine<span class="hljs-constructor">CurrentLookupKey()</span>;         <span class="hljs-comment">// 获取默认数据源</span>        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DEFAULT_DB_NAME</span>.</span></span>equals(dbName)) {            return masterDataSource;        }         <span class="hljs-comment">// 创建数据源</span>        DataSource dataSource = (DataSource) targetDataSource.get(dbName);        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">if</span> (dataSource<span class="hljs-operator"> == </span>null) {                dataSource = get<span class="hljs-constructor">DataSourceByName(<span class="hljs-params">dbName</span>)</span>;            }        } catch (Exception e) {            e.print<span class="hljs-constructor">StackTrace()</span>;        }        return dataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取数据库名称，可根据获取的数据库名称查询数据库配置信息，</span><span class="hljs-comment">     * 通过配置信息动态创建数据源</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    @Override    protected Object determine<span class="hljs-constructor">CurrentLookupKey()</span> {        String dbName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>get<span class="hljs-constructor">DBName()</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">dbName</span>)</span>) {            dbName = DEFAULT_DB_NAME;        }         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>remove<span class="hljs-literal">()</span>;        return dbName;    }     @Override    public void after<span class="hljs-constructor">PropertiesSet()</span> {     }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过数据库的配置信息获取数据源</span><span class="hljs-comment">     * @param dbName 数据库名称</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    public synchronized DataSource get<span class="hljs-constructor">DataSourceByName(String <span class="hljs-params">dbName</span>)</span> throws Exception {                 <span class="hljs-comment">// 创建数据源</span>        BasicDataSource dataSource = create<span class="hljs-constructor">DataSource(<span class="hljs-params">dbName</span>)</span>;                 <span class="hljs-comment">// 如果创建数据源成功则缓存数据源，避免重复创建相同的数据源</span>        <span class="hljs-keyword">if</span>(dataSource != null) {            targetDataSource.put(dbName, dataSource);        }        return  dataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过数据库的配置创建数据源</span><span class="hljs-comment">     * @param dbName 数据库名称</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    public BasicDataSource create<span class="hljs-constructor">DataSource(String <span class="hljs-params">dbName</span>)</span> throws Exception {                 <span class="hljs-comment">// 查询动态数据源配置信息</span>        String oriDBName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>get<span class="hljs-constructor">DBName()</span>;         <span class="hljs-keyword">if</span>(dbConfigService<span class="hljs-operator"> == </span>null) {            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"创建数据源失败[dbCfgService is null......]"</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>debug(<span class="hljs-string">"创建数据源失败[dbCfgService is null......]"</span>);        }         <span class="hljs-comment">// 通过数据库名称查询相关的数据库配置信息</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(DEFAULT_DB_NAME)</span>;        DBCfg dbCfg = dbConfigService.get<span class="hljs-constructor">DBCfg(<span class="hljs-params">dbName</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">oriDBName</span>)</span>;         String driver = dbCfg.get<span class="hljs-constructor">DriverClass()</span>;  <span class="hljs-comment">// 数据库驱动</span>        String url = dbCfg.get<span class="hljs-constructor">JdbcURL()</span>;  <span class="hljs-comment">// 数据库连接地址</span>        String username = dbCfg.get<span class="hljs-constructor">UserName()</span>;  <span class="hljs-comment">// 数据库用户名</span>        String password = dbCfg.get<span class="hljs-constructor">Passworld()</span>;  <span class="hljs-comment">// 数据库密码</span>         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>debug(<span class="hljs-string">"动态连接的数据库为["</span> + url + <span class="hljs-string">"|"</span> + username + <span class="hljs-string">"]"</span>);         <span class="hljs-comment">// 创建数据源</span>        BasicDataSource basicDataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BasicDataSource()</span>;        basicDataSource.set<span class="hljs-constructor">DriverClassName(<span class="hljs-params">driver</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Url(<span class="hljs-params">url</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Password(<span class="hljs-params">password</span>)</span>;        basicDataSource.set<span class="hljs-constructor">TestWhileIdle(<span class="hljs-params">true</span>)</span>;         return basicDataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果修改或删除数据源的配置，则需要同步删除缓存的数据源</span><span class="hljs-comment">     * @param dbName</span><span class="hljs-comment">     */</span>    public void remove<span class="hljs-constructor">DataSource(String <span class="hljs-params">dbName</span>)</span> {        this.targetDataSource.remove(dbName);    }     public DataSource get<span class="hljs-constructor">MasterDataSource()</span> {        return masterDataSource;    }     public void set<span class="hljs-constructor">MasterDataSource(DataSource <span class="hljs-params">masterDataSource</span>)</span> {        this.masterDataSource = masterDataSource;    }     public DBConfigService get<span class="hljs-constructor">DbConfigService()</span> {        return dbConfigService;    }     public void set<span class="hljs-constructor">DbConfigService(DBConfigService <span class="hljs-params">dbConfigService</span>)</span> {        this.dbConfigService = dbConfigService;    }}</code></pre></div><p>4、使用动态切换数据源</p><div class="hljs"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ShowRptServiceImpl implements IShowRptService {     <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>get<span class="hljs-constructor">Logger(ShowRptServiceImpl.<span class="hljs-params">class</span>)</span>;     @Autowired    <span class="hljs-keyword">private</span> DBCfgMapper dbCfgMapper;     @Autowired    <span class="hljs-keyword">private</span> ShowRptInfoMapper showRptInfoMapper;     @Override    public RptResult query<span class="hljs-constructor">RptInfo(BaseRpt <span class="hljs-params">baseRpt</span>, Map&lt;String, String&gt; <span class="hljs-params">params</span>)</span> {        <span class="hljs-comment">// 在调用Mybatis执行数据库之前先选择数据源</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">dbCfg</span>.<span class="hljs-params">getDbName</span>()</span>);        <span class="hljs-comment">// 查询报表数据</span>        List&lt;Map&lt;String,Object&gt;&gt; resultList = showRptInfoMapper.query<span class="hljs-constructor">RptData(<span class="hljs-params">querySQL</span>)</span>;          <span class="hljs-comment">// 选择数据源</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">dbCfg</span>.<span class="hljs-params">getDbName</span>()</span>);        <span class="hljs-comment">// 查询数据数据量</span>        <span class="hljs-built_in">int</span> totalCount = showRptInfoMapper.query<span class="hljs-constructor">TotalCount(<span class="hljs-params">countSQL</span>)</span>;         RptResult rptResult = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RptResult()</span>;        return rptResult;    } }</code></pre></div><p>通过以上步骤即可实现动态多数据源的动态切换</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/zt2710/p/11116637.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/zt2710/p/11116637.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;群聊天记录截图👇&lt;/p&gt;
&lt;img src=&quot;https://s1.ax1x.com/2020/09/08/wQE7DO.jpg&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wQE7DO.jpg&quot; style=&quot;zoom:30%;&quot;&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>优化IDEA卡顿现象</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/07/%E4%BC%98%E5%8C%96IDEA%E5%8D%A1%E9%A1%BF%E7%8E%B0%E8%B1%A1/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/07/%E4%BC%98%E5%8C%96IDEA%E5%8D%A1%E9%A1%BF%E7%8E%B0%E8%B1%A1/</id>
    <published>2020-09-07T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:03.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改-vmoptions-文件"><a href="#修改-vmoptions-文件" class="headerlink" title="修改 vmoptions 文件"></a>修改 vmoptions 文件</h2><p>首先是找到 IDEA 的安装目录，之后到安装目录的 bin 目录下，找到如下两个文件：<br><code>idea.exe.vmoptions</code>和<code>idea64.exe.vmoptions</code><br>看你是多少位系统的你就该对应的就可以了，编辑这个配置文件。<br>修改前：</p><div class="hljs"><pre><code class="hljs haml">-<span class="ruby">Xms128m</span><span class="ruby">-Xmx750m</span><span class="ruby">-<span class="hljs-symbol">XX:</span>ReservedCodeCacheSize=<span class="hljs-number">240</span>m</span><span class="ruby">-<span class="hljs-symbol">XX:</span>+UseConcMarkSweepGC</span><span class="ruby">-<span class="hljs-symbol">XX:</span>SoftRefLRUPolicyMSPerMB=<span class="hljs-number">50</span></span><span class="ruby">-ea</span><span class="ruby">-<span class="hljs-symbol">XX:</span>CICompilerCount=<span class="hljs-number">2</span></span><span class="ruby">-Dsun.io.useCanonPrefixCache=<span class="hljs-literal">false</span></span><span class="ruby">-Djdk.http.auth.tunneling.disabledSchemes=<span class="hljs-string">""</span></span><span class="ruby">-<span class="hljs-symbol">XX:</span>+HeapDumpOnOutOfMemoryError</span><span class="ruby">-<span class="hljs-symbol">XX:</span>-OmitStackTraceInFastThrow</span><span class="ruby">-Djdk.attach.allowAttachSelf=<span class="hljs-literal">true</span></span><span class="ruby">-Dkotlinx.coroutines.debug=off</span><span class="ruby">-Djdk<span class="hljs-class">.<span class="hljs-keyword">module</span>.<span class="hljs-title">illegalAccess</span>.<span class="hljs-title">silent</span>=<span class="hljs-title">true</span></span></span></code></pre></div><p>修改后：<br>分别把<strong>内存</strong>的参数 <strong>128m</strong> 和 <strong>750m</strong> 改成你想要改的就可以了，我是分别改成了 <strong>1024m</strong> 和 <strong>2048m</strong>，之后如果还卡，再往大了调，可以根据自己电脑的实际内存设置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/evane1890/article/details/78941968" target="_blank" rel="noopener">JVM调优常用参数</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;修改-vmoptions-文件&quot;&gt;&lt;a href=&quot;#修改-vmoptions-文件&quot; class=&quot;headerlink&quot; title=&quot;修改 vmoptions 文件&quot;&gt;&lt;/a&gt;修改 vmoptions 文件&lt;/h2&gt;&lt;p&gt;首先是找到 IDEA 的安装目录，之后到安装目录的 bin 目录下，找到如下两个文件：&lt;br&gt;&lt;code&gt;idea.exe.vmoptions&lt;/code&gt;和&lt;code&gt;idea64.exe.vmoptions&lt;/code&gt;&lt;br&gt;看你是多少位系统的你就该对应的就可以了，编辑这个配置文件。&lt;br&gt;修改前：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs haml&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;Xms128m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Xmx750m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;ReservedCodeCacheSize=&lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UseConcMarkSweepGC&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;SoftRefLRUPolicyMSPerMB=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-ea&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;CICompilerCount=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Dsun.io.useCanonPrefixCache=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk.http.auth.tunneling.disabledSchemes=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+HeapDumpOnOutOfMemoryError&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;-OmitStackTraceInFastThrow&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk.attach.allowAttachSelf=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Dkotlinx.coroutines.debug=off&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk&lt;span class=&quot;hljs-class&quot;&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;illegalAccess&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;silent&lt;/span&gt;=&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后：&lt;br&gt;分别把&lt;strong&gt;内存&lt;/strong&gt;的参数 &lt;strong&gt;128m&lt;/strong&gt; 和 &lt;strong&gt;750m&lt;/strong&gt; 改成你想要改的就可以了，我是分别改成了 &lt;strong&gt;1024m&lt;/strong&gt; 和 &lt;strong&gt;2048m&lt;/strong&gt;，之后如果还卡，再往大了调，可以根据自己电脑的实际内存设置。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/evane1890/article/details/78941968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM调优常用参数&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>宝塔同IP或同域名不同端口分别对应不同网站教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/05/%E5%AE%9D%E5%A1%94%E5%90%8CIP%E6%88%96%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/05/%E5%AE%9D%E5%A1%94%E5%90%8CIP%E6%88%96%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-05T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:03.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>IP</p></li><li><p>服务器端放行所需端口</p></li><li><p>安装好的宝塔面板。</p></li></ul><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>192.168.1.666:80 站点一指向A项目</p><p>192.168.1.666:8081 站点二指向B项目</p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>1） 新建一个站点指向项目A</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514113737124-1200219923.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 2）再次添加一个站点指向项目B</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114000175-1939839843.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 提交之后打开设置</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114036225-1680296715.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 修改配置文件如下图：</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114317948-567330049.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 提交之后，切记一定要重启nginx，然后即打开站点就可以看到内容</p><p>照此可添加多个</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器端放行所需端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装好的宝塔面板。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h1&gt;&lt;p&gt;192.168.1.666:80 站点一指向A项目&lt;/p&gt;
&lt;p&gt;192.168.1.666:8081 站点二指向B项目&lt;/p&gt;
&lt;h1 id=&quot;具体步骤&quot;&gt;&lt;a href=&quot;#具体步骤&quot; class=&quot;headerlink&quot; title=&quot;具体步骤&quot;&gt;&lt;/a&gt;具体步骤&lt;/h1&gt;&lt;p&gt;1） 新建一个站点指向项目A&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514113737124-1200219923.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 2）再次添加一个站点指向项目B&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114000175-1939839843.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 提交之后打开设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114036225-1680296715.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 修改配置文件如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114317948-567330049.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 提交之后，切记一定要重启nginx，然后即打开站点就可以看到内容&lt;/p&gt;
&lt;p&gt;照此可添加多个&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/29/Git%E7%AC%94%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/29/Git%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-29T13:00:00.000Z</published>
    <updated>2020-09-18T04:43:02.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h4 id="在当前目录下初始化一个空的git仓库"><a href="#在当前目录下初始化一个空的git仓库" class="headerlink" title="在当前目录下初始化一个空的git仓库"></a>在当前目录下初始化一个空的git仓库</h4><ul><li><code>git init</code></li></ul><h4 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱"></a>设置全局用户名和邮箱</h4><ul><li><code>git config --global user.name "name"</code></li><li><code>git config --global user.email "xxxxx@email.com"</code></li><li><code>git config user.name</code> 查看git用户名</li><li><code>git config user.email</code> 查看邮箱配置</li></ul><h4 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h4><ul><li><code>git config --list</code></li></ul><h4 id="提交修改到暂存区"><a href="#提交修改到暂存区" class="headerlink" title="提交修改到暂存区"></a>提交修改到暂存区</h4><ul><li><code>git add -A</code> 提交全部修改。（git add -All）</li><li><code>git add -u</code> 只提交修改，不提交新文件。（git add -update)</li><li><code>git add .</code> 不提交删除文件</li><li><code>git add &lt;filename&gt;</code> 提交指定文件</li></ul><h4 id="查看暂存区"><a href="#查看暂存区" class="headerlink" title="查看暂存区"></a>查看暂存区</h4><ul><li><code>git status</code></li></ul><h4 id="修改最新提交的-commit-message"><a href="#修改最新提交的-commit-message" class="headerlink" title="修改最新提交的 commit message"></a>修改最新提交的 commit message</h4><ul><li><code>git commit --amend</code></li></ul><h4 id="修改某个提交的-commit-message"><a href="#修改某个提交的-commit-message" class="headerlink" title="修改某个提交的 commit message"></a>修改某个提交的 commit message</h4><ul><li><code>git commit -i &lt;commit id&gt;</code> commit id 为要修改的目标 commit 的父亲 commit id</li></ul><h4 id="合并连续的commit"><a href="#合并连续的commit" class="headerlink" title="合并连续的commit"></a>合并连续的commit</h4><ul><li><code>git rebase -i &lt;commit id&gt;</code> commit id 为目标commit的父亲commit id</li></ul><h4 id="提交修改到本地仓库"><a href="#提交修改到本地仓库" class="headerlink" title="提交修改到本地仓库"></a>提交修改到本地仓库</h4><ul><li><code>git commit -m 'msg'</code> 提交暂存区到本地仓库</li><li><code>git commit -a -m 'msg'</code> 提交修改到本地仓库（不提交新增文件）</li></ul><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><ul><li><code>git log</code></li></ul><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><ul><li><code>git remote add &lt;name&gt; &lt;url&gt;</code></li></ul><h4 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h4><ul><li><code>git remote show &lt;name&gt;</code></li></ul><h4 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h4><ul><li><code>git remote rm &lt;remote_name&gt;</code></li><li><code>git remote rename &lt;old_name&gt; &lt;new_name&gt;</code></li></ul><h4 id="拉取远程仓库数据到本地"><a href="#拉取远程仓库数据到本地" class="headerlink" title="拉取远程仓库数据到本地"></a>拉取远程仓库数据到本地</h4><ul><li><code>git pull &lt;remote_name&gt; &lt;branch_name&gt;</code></li></ul><h4 id="提交本地仓库到远程仓库"><a href="#提交本地仓库到远程仓库" class="headerlink" title="提交本地仓库到远程仓库"></a>提交本地仓库到远程仓库</h4><ul><li><code>git push &lt;remote_name&gt; &lt;branch_name&gt;</code></li></ul><h4 id="查看-amp-创建-amp-切换分支"><a href="#查看-amp-创建-amp-切换分支" class="headerlink" title="查看&amp;创建&amp;切换分支"></a>查看&amp;创建&amp;切换分支</h4><ul><li><code>git branch</code> 查看已有分支</li><li><code>git branch -v</code> 查看已有分支及各个分支最后一个提交对象的信息</li><li><code>git branch &lt;branch_name&gt;</code> 创建新的空分支</li><li><code>git branch &lt;branch_name&gt; &lt;exist_branch_name&gt;</code> 创建新分支</li><li><code>git checkout -b &lt;branch_name&gt; &lt;exist_branch_name&gt;</code> 创建并切换到新分支</li><li><code>git checkout &lt;branch_name&gt;</code> 切换分支</li></ul><h4 id="删除-amp-合并分支"><a href="#删除-amp-合并分支" class="headerlink" title="删除&amp;合并分支"></a>删除&amp;合并分支</h4><ul><li><code>git branch -D &lt;branch_name&gt;</code> 删除分支</li><li><code>git merge &lt;branch_name&gt;</code> 当前分支合并到指定分支</li></ul><h4 id="暂存区恢复到HEAD"><a href="#暂存区恢复到HEAD" class="headerlink" title="暂存区恢复到HEAD"></a>暂存区恢复到HEAD</h4><ul><li><code>git reset HEAD</code></li><li><code>git reset HEAD &lt;file_name&gt;</code></li></ul><h4 id="工作区恢复到暂存区"><a href="#工作区恢复到暂存区" class="headerlink" title="工作区恢复到暂存区"></a>工作区恢复到暂存区</h4><ul><li><code>git checkout -- &lt;file_name&gt;</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git笔记&quot;&gt;&lt;a href=&quot;#Git笔记&quot; class=&quot;headerlink&quot; title=&quot;Git笔记&quot;&gt;&lt;/a&gt;Git笔记&lt;/h1&gt;&lt;h4 id=&quot;在当前目录下初始化一个空的git仓库&quot;&gt;&lt;a href=&quot;#在当前目录下初始化一个空的git仓库&quot; cla
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="https://melodyjerry.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[转]Maven中静态资源和字节码文件的过滤</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/29/[%E8%BD%AC]Maven%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E6%BB%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/29/[%E8%BD%AC]Maven%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E6%BB%A4/</id>
    <published>2020-08-29T13:00:00.000Z</published>
    <updated>2020-09-18T04:43:03.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文的方法是针对Maven管理的Java Web工程</p></blockquote><a id="more"></a><h2 id="静态资源的过滤"><a href="#静态资源的过滤" class="headerlink" title="静态资源的过滤"></a>静态资源的过滤</h2><p>在maven中，静态资源的过滤使用基本上大家都知道，只需要在<code>&lt;build&gt;&lt;/build&gt;</code>中使用<code>resources</code>标签即可，示例如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>1234567891011</code></pre></div><p>在静态资源的过滤中，基本的元素有三种：</p><ul><li><code>directory</code>：指定资源所在的目录，这个目录的路径是相对于pom.xml文件；</li><li><code>includes</code>：指定要包含哪些文件，其中包括inlcude子节点来指定匹配的模式；</li><li><code>excludes</code>：指定要排除哪些文件，其中包括exclude子节点来指定匹配的模式；</li><li><code>filtering</code>：指定哪些文件需要过滤，这个过滤的目的是为了替换其中的占位符<code>${}</code>，其中的占位符属性在pom.xml文件中的<code>&lt;properties&gt;&lt;/properties&gt;</code>中指定；</li></ul><p>在其中可能遇到的问题如下：</p><ul><li>当includes和excludes冲突的时候，优先采取excludes中的设定，<a href="http://blog.csdn.net/bluishglc/article/details/6640889" target="_blank" rel="noopener">这篇文章</a>中详细的说明了，<a href="http://bylijinnan.iteye.com/blog/2298100" target="_blank" rel="noopener">这篇文章</a>从源码角度进行了分析；</li></ul><h2 id="字节码文件的过滤"><a href="#字节码文件的过滤" class="headerlink" title="字节码文件的过滤"></a>字节码文件的过滤</h2><p>相对于静态资源的过滤，针对字节码文件的过滤则比较生僻，尤其是在配置文件基本上都是<code>xml</code>或者<code>properties</code>的时候，如果你的工程的配置是Java Config风格的，那么就会遇到在不同的环境下加载不同的配置类的问题。不同于静态的配置文件直接使用<code>&lt;resources&gt;</code>标签（其实背后还是通过resource插件完成的），字节码的过滤需要直接使用<code>maven-war-plugin</code> ，实例如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/classes/test/dao/,         WEB-INF/classes/test/service/,         WEB-INF/classes/config/TestConfig.class,         WEB-INF/lib/log4j-*.jar      <span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>123456789101112</code></pre></div><p>从上面可以看到，该插件是通过<code>packagingExcludes</code>元素完成过滤的，这个元素的作用是在工程package之前， 通过一些模式来排除掉一些文件或者文件夹，如果有多个可以通过逗号“,”来分割，上述使用的例子：</p><ul><li>排除特定配置类：<code>WEB-INF/classes/config/TestConfig.class</code></li><li>排除特定文件夹：<code>WEB-INF/classes/test/service/</code></li><li>排除引用的jar包：<code>WEB-INF/lib/log4j-*.jar</code></li></ul><p>上述使用的路径是<strong>相对于war包的根路径的</strong>。</p><p>另外在<code>packagingExcludes</code>中还可以使用Java的正则表达式，通过<code>%regex[...]</code>包裹即可，具体可以看<a href="https://maven.apache.org/plugins/maven-war-plugin/examples/including-excluding-files-from-war.html" target="_blank" rel="noopener">官方文档</a> .</p><hr><p>转载链接：<a href="https://blog.csdn.net/lmy86263/article/details/71189485?locationNum=3&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/lmy86263/article/details/71189485?locationNum=3&amp;fps=1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的方法是针对Maven管理的Java Web工程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Maven" scheme="https://melodyjerry.github.io/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>[转]curl教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/28/curl%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/28/curl%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-28T04:11:11.000Z</published>
    <updated>2020-09-18T04:43:03.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="curl-的用法指南"><a href="#curl-的用法指南" class="headerlink" title="curl 的用法指南"></a>curl 的用法指南</h1><p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019090501.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自<a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">《curl cookbook》</a>。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的<a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">《curl 初学者教程》</a>。</p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl https://www.example.com</code></pre></div></blockquote><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="A"><a href="#A" class="headerlink" title="-A"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span> https://google.com</code></pre></div></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">''</span> https://google.com</code></pre></div></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'User-Agent: php/1.0'</span> https://google.com</code></pre></div></blockquote><h2 id="b"><a href="#b" class="headerlink" title="-b"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">'foo=bar'</span> https://google.com</code></pre></div></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">'foo1=bar;foo2=bar2'</span> https://google.com</code></pre></div></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="c"><a href="#c" class="headerlink" title="-c"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -c cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="d"><a href="#d" class="headerlink" title="-d"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d<span class="hljs-string">'login=emma＆password=123'</span>-X POST https://google.com/login<span class="hljs-comment"># 或者</span>$ curl -d <span class="hljs-string">'login=emma'</span> -d <span class="hljs-string">'password=123'</span> -X POST  https://google.com/login</code></pre></div></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">'@data.txt'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --data-urlencode <span class="hljs-string">'comment=hello world'</span> https://google.com/login</code></pre></div></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="e"><a href="#e" class="headerlink" title="-e"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><div class="hljs"><pre><code class="hljs bash">curl -e <span class="hljs-string">'https://google.com?q=example'</span> https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><div class="hljs"><pre><code class="hljs bash">curl -H <span class="hljs-string">'Referer: https://google.com?q=example'</span> https://www.example.com</code></pre></div></blockquote><h2 id="F"><a href="#F" class="headerlink" title="-F"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png;type=image/png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png;filename=me.png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="G"><a href="#G" class="headerlink" title="-G"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -G -d <span class="hljs-string">'q=kitties'</span> -d <span class="hljs-string">'count=20'</span> https://google.com/search</code></pre></div></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -G --data-urlencode <span class="hljs-string">'comment=hello world'</span> https://www.example.com</code></pre></div></blockquote><h2 id="H"><a href="#H" class="headerlink" title="-H"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'Accept-Language: en-US'</span> https://google.com</code></pre></div></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'Accept-Language: en-US'</span> -H <span class="hljs-string">'Secret-Message: xyzzy'</span> https://google.com</code></pre></div></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">'{"login": "emma", "pass": "123"}'</span> -H <span class="hljs-string">'Content-Type: application/json'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="i"><a href="#i" class="headerlink" title="-i"></a><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -i https://www.example.com</code></pre></div></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="I"><a href="#I" class="headerlink" title="-I"></a><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -I https://www.example.com</code></pre></div></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --head https://www.example.com</code></pre></div></blockquote><h2 id="k"><a href="#k" class="headerlink" title="-k"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -k https://www.example.com</code></pre></div></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="L"><a href="#L" class="headerlink" title="-L"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -L -d <span class="hljs-string">'tweet=hi'</span> https://api.twitter.com/tweet</code></pre></div></blockquote><h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a><strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --<span class="hljs-built_in">limit</span>-rate 200k https://google.com</code></pre></div></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o"><a href="#o" class="headerlink" title="-o"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -o example.html https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="O"><a href="#O" class="headerlink" title="-O"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -O https://www.example.com/foo/bar.html</code></pre></div></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="s"><a href="#s" class="headerlink" title="-s"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s https://www.example.com</code></pre></div></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><h2 id="S"><a href="#S" class="headerlink" title="-S"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2 id="u"><a href="#u" class="headerlink" title="-u"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">'bob:12345'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl https://bob:12345@google.com/login</code></pre></div></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">'bob'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v"><a href="#v" class="headerlink" title="-v"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -v https://www.example.com</code></pre></div></blockquote><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --trace - https://www.example.com</code></pre></div></blockquote><h2 id="x"><a href="#x" class="headerlink" title="-x"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="X"><a href="#X" class="headerlink" title="-X"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -X POST https://www.example.com</code></pre></div></blockquote><p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">Curl Cookbook</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;curl-的用法指南&quot;&gt;&lt;a href=&quot;#curl-的用法指南&quot; class=&quot;headerlink&quot; title=&quot;curl 的用法指南&quot;&gt;&lt;/a&gt;curl 的用法指南&lt;/h1&gt;&lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
