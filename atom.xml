<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2021-01-03T14:52:22.948Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Terminal，win10的最佳终端</title>
    <link href="https://melodyjerry.github.io/blog/2021/01/03/Terminal%EF%BC%8Cwin10%E7%9A%84%E6%9C%80%E4%BD%B3%E7%BB%88%E7%AB%AF/"/>
    <id>https://melodyjerry.github.io/blog/2021/01/03/Terminal%EF%BC%8Cwin10%E7%9A%84%E6%9C%80%E4%BD%B3%E7%BB%88%E7%AB%AF/</id>
    <published>2021-01-03T13:56:11.000Z</published>
    <updated>2021-01-03T14:52:22.948Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2021/01/03/sCF6IJ.png" srcset="/blog/img/loading.gif" alt="sCF6IJ.png"></p><p><font size="7">Terminal</font></p><ul><li>是我开发历程中，接触的、第二个微软Microsoft开源的开发者工具<ul><li>第一个是VS Code）。</li></ul></li><li>吸引我的是<ul><li>高自定义性</li><li>可扩展性</li><li>UI（个人审美比较……hh</li></ul></li></ul><h1 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h1><h2 id="毛玻璃"><a href="#毛玻璃" class="headerlink" title="毛玻璃"></a>毛玻璃</h2><ul><li>在配置文件<code>profiles.json</code>中的<code>profiles</code>，设置参数</li></ul><pre><code class="hljs shell">"profiles": [{//开启毛玻璃特效"useAcrylic": true,}],</code></pre><h2 id="设置-Powerline"><a href="#设置-Powerline" class="headerlink" title="设置 Powerline"></a>设置 Powerline</h2><blockquote><p>来自<a href="https://docs.microsoft.com/zh-cn/windows/terminal/tutorials/powerline-setup" target="_blank" rel="noopener">微软官方文档</a></p></blockquote><ul><li>Powerline 提供自定义的命令提示符体验，提供 Git 状态颜色编码和提示符。</li></ul><p><img src="https://docs.microsoft.com/zh-cn/windows/terminal/images/powerline-powershell.png" srcset="/blog/img/loading.gif" alt=""></p><h1 id="右键添加“在此处打开Terminal”"><a href="#右键添加“在此处打开Terminal”" class="headerlink" title="右键添加“在此处打开Terminal”"></a>右键添加“在此处打开Terminal”</h1><p><img src="https://s3.ax1x.com/2021/01/03/s9D6Qs.png" srcset="/blog/img/loading.gif" alt="s9D6Qs.png"></p><ul><li>新建一个注册表文件<code>.reg</code>，内容如下：</li></ul><pre><code class="hljs bash">Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\Directory\Background\shell\wt]@=<span class="hljs-string">"Windows Terminal Here"</span><span class="hljs-string">"Icon"</span>=<span class="hljs-string">"C:\\Users\\Administrator\\terminal.ico"</span>[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\<span class="hljs-built_in">command</span>]@=<span class="hljs-string">"C:\\Program</span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ol><li><a href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener">微软官方文档</a></li><li><a href="https://blog.n0ts.cn/1139.html" target="_blank" rel="noopener">windows terminal安装与毛玻璃教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/137595941" target="_blank" rel="noopener">Windows Terminal 完美配置 PowerShell 7.1</a></li></ol><h1 id="更多配色方案"><a href="#更多配色方案" class="headerlink" title="更多配色方案"></a>更多配色方案</h1><p><a href="https://windowsterminalthemes.dev/" target="_blank" rel="noopener">https://windowsterminalthemes.dev/</a></p><h1 id="完整配置文件"><a href="#完整配置文件" class="headerlink" title="完整配置文件"></a>完整配置文件</h1><pre><code class="hljs json"><span class="hljs-comment">// To view the default settings, hold "alt" while clicking on the "Settings" button.</span><span class="hljs-comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span>{    <span class="hljs-attr">"$schema"</span>: <span class="hljs-string">"https://aka.ms/terminal-profiles-schema"</span>,    <span class="hljs-attr">"theme"</span>: <span class="hljs-string">"dark"</span>,        <span class="hljs-attr">"profiles"</span>: [            {                <span class="hljs-attr">"name"</span> : <span class="hljs-string">"Powershell"</span>,                <span class="hljs-attr">"source"</span> : <span class="hljs-string">"Windows.Terminal.PowershellCore"</span>,                <span class="hljs-attr">"acrylicOpacity"</span> : <span class="hljs-number">0.3</span>,                <span class="hljs-attr">"colorScheme"</span> : <span class="hljs-string">"Campbell"</span>,                <span class="hljs-attr">"cursorColor"</span> : <span class="hljs-string">"#FFFFFD"</span>,                <span class="hljs-attr">"fontFace"</span> : <span class="hljs-string">"Cascadia Code PL"</span>,                <span class="hljs-attr">"useAcrylic"</span> : <span class="hljs-literal">true</span>,                <span class="hljs-attr">"acrylic"</span> : <span class="hljs-number">0.3</span>            }        ],    <span class="hljs-attr">"defaultProfile"</span>: <span class="hljs-string">"{574e775e-4f2a-5b96-ac1e-a2962a402336}"</span>,    <span class="hljs-attr">"profiles"</span>:    {        <span class="hljs-attr">"defaults"</span>:        {            <span class="hljs-comment">// Put settings here that you want to apply to all profiles</span>            <span class="hljs-comment">//将"在此处启动Windows Terminal"添加到右键菜单</span>            <span class="hljs-attr">"startingDirectory"</span> : <span class="hljs-string">"."</span>,        },        <span class="hljs-attr">"list"</span>:        [{<span class="hljs-comment">// Powershell 7.1.0-preview.2 配置</span><span class="hljs-attr">"guid"</span>: <span class="hljs-string">"{574e775e-4f2a-5b96-ac1e-a2962a402336}"</span>,<span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">"name"</span>: <span class="hljs-string">"pwsh"</span>,<span class="hljs-comment">// 注意：一定要写上 -nologo，否则开启 powershll 会有一段话输出，很讨厌！</span><span class="hljs-attr">"commandline"</span>: <span class="hljs-string">"C:/Program Files/PowerShell/7-preview/pwsh.exe -nologo"</span>,<span class="hljs-attr">"source"</span>: <span class="hljs-string">"Windows.Terminal.PowershellCore"</span>,<span class="hljs-comment">// 启动菜单一定要设置为 &lt;.&gt;，否则后面重要的一步将会无效！</span><span class="hljs-attr">"startingDirectory"</span>: <span class="hljs-string">"."</span>,<span class="hljs-comment">// 字体</span><span class="hljs-attr">"fontFace"</span>: <span class="hljs-string">"Cascadia Code PL"</span>,<span class="hljs-attr">"fontSize"</span>: <span class="hljs-number">11</span>,<span class="hljs-attr">"historySize"</span>: <span class="hljs-number">9001</span>,<span class="hljs-attr">"padding"</span>: <span class="hljs-string">"5, 5, 20, 25"</span>,<span class="hljs-attr">"snapOnInput"</span>: <span class="hljs-literal">true</span>,<span class="hljs-attr">"useAcrylic"</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//配色方案</span><span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"PencilDark"</span>,<span class="hljs-comment">//透明度</span><span class="hljs-attr">"backgroundImageOpacity"</span> : <span class="hljs-number">0.1</span>,<span class="hljs-comment">//毛玻璃</span><span class="hljs-attr">"useAcrylic"</span> : <span class="hljs-literal">true</span>,<span class="hljs-comment">//标题</span><span class="hljs-attr">"tabTitle"</span> : <span class="hljs-string">"PowerShell"</span>,<span class="hljs-comment">//未知</span><span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.1</span>,},            {                <span class="hljs-comment">// Make changes here to the powershell.exe profile</span>                <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}"</span>,                <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Windows PowerShell"</span>,                <span class="hljs-attr">"commandline"</span>: <span class="hljs-string">"powershell.exe"</span>,                <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,                <span class="hljs-comment">//配色方案</span><span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"Raspberry"</span>,<span class="hljs-comment">//透明度</span><span class="hljs-attr">"backgroundImageOpacity"</span> : <span class="hljs-number">0.1</span>,<span class="hljs-comment">//毛玻璃</span><span class="hljs-attr">"useAcrylic"</span> : <span class="hljs-literal">true</span>,            },            {                <span class="hljs-comment">// Make changes here to the cmd.exe profile</span>                <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}"</span>,                <span class="hljs-attr">"name"</span>: <span class="hljs-string">"cmd"</span>,                <span class="hljs-attr">"commandline"</span>: <span class="hljs-string">"cmd.exe"</span>,                <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,                <span class="hljs-comment">//配色方案</span><span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"rebecca"</span>,<span class="hljs-comment">//透明度</span><span class="hljs-attr">"backgroundImageOpacity"</span> : <span class="hljs-number">0.3</span>,<span class="hljs-comment">//毛玻璃</span><span class="hljs-attr">"useAcrylic"</span> : <span class="hljs-literal">true</span>,<span class="hljs-comment">//未知</span><span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.1</span>,<span class="hljs-attr">"acrylic"</span> : <span class="hljs-number">0.3</span>,            },            {                <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"{b453ae62-4e3d-5e58-b989-0a998ec441b8}"</span>,                <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Azure Cloud Shell"</span>,                <span class="hljs-attr">"source"</span>: <span class="hljs-string">"Windows.Terminal.Azure"</span>            },            {                <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"{574e775e-4f2a-5b96-ac1e-a2962a402336}"</span>,                <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">"name"</span>: <span class="hljs-string">"PowerShell"</span>,                <span class="hljs-attr">"source"</span>: <span class="hljs-string">"Windows.Terminal.PowershellCore"</span>            },            {                <span class="hljs-attr">"guid"</span>: <span class="hljs-string">"{2c4de342-38b7-51cf-b940-2309a097f518}"</span>,                <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Ubuntu"</span>,                <span class="hljs-attr">"source"</span>: <span class="hljs-string">"Windows.Terminal.Wsl"</span>,                <span class="hljs-attr">"hidden"</span>: <span class="hljs-literal">false</span>,                <span class="hljs-comment">//配色方案</span><span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"Solarized Darcula"</span>,<span class="hljs-comment">//透明度</span><span class="hljs-attr">"backgroundImageOpacity"</span> : <span class="hljs-number">0.3</span>,<span class="hljs-comment">//毛玻璃</span><span class="hljs-attr">"useAcrylic"</span> : <span class="hljs-literal">true</span>,<span class="hljs-comment">//未知</span><span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.1</span>,<span class="hljs-attr">"acrylic"</span> : <span class="hljs-number">0.3</span>,            },{<span class="hljs-comment">// Git Bash</span><span class="hljs-comment">//"closeOnExit": true,</span><span class="hljs-attr">"commandline"</span>: <span class="hljs-string">"E:\\Git\\usr\\bin\\bash.exe"</span>,<span class="hljs-comment">//"cursorColor": "#FFFFFF",</span><span class="hljs-attr">"hidden"</span> : <span class="hljs-literal">false</span>,<span class="hljs-comment">//"cursorShape": "bar",</span><span class="hljs-attr">"guid"</span>:<span class="hljs-string">"{cd411374-e41f-49dd-8ace-4f2b42b6cffa}"</span>,<span class="hljs-comment">//"historySize": 9001,</span>    <span class="hljs-attr">"icon"</span>:<span class="hljs-string">"E:\\Git\\mingw64\\share\\git\\git-for-windows.ico"</span>,<span class="hljs-attr">"name"</span>:<span class="hljs-string">"Git Bash"</span>,<span class="hljs-comment">//"padding": "0,0,0,0",</span><span class="hljs-comment">//"snapOnInput": true,</span><span class="hljs-comment">//"startingDirectory": "%USERPROFILE%",</span><span class="hljs-comment">// 启动菜单一定要设置为 &lt;.&gt;，否则后面重要的一步将会无效！</span><span class="hljs-attr">"startingDirectory"</span>: <span class="hljs-string">"."</span>,<span class="hljs-comment">// 字体</span><span class="hljs-attr">"fontFace"</span>: <span class="hljs-string">"Cascadia Code PL"</span>,<span class="hljs-attr">"fontSize"</span>: <span class="hljs-number">11</span>,<span class="hljs-attr">"historySize"</span>: <span class="hljs-number">9001</span>,<span class="hljs-attr">"padding"</span>: <span class="hljs-string">"5, 5, 20, 25"</span>,<span class="hljs-attr">"snapOnInput"</span>: <span class="hljs-literal">true</span>,<span class="hljs-attr">"useAcrylic"</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//配色方案</span><span class="hljs-attr">"colorScheme"</span>: <span class="hljs-string">"PencilDark"</span>,<span class="hljs-comment">//透明度</span><span class="hljs-attr">"backgroundImageOpacity"</span> : <span class="hljs-number">0.1</span>,<span class="hljs-comment">//毛玻璃</span><span class="hljs-attr">"useAcrylic"</span> : <span class="hljs-literal">true</span>,<span class="hljs-comment">//标题</span><span class="hljs-attr">"tabTitle"</span> : <span class="hljs-string">"PowerShell"</span>,<span class="hljs-comment">//未知</span><span class="hljs-attr">"acrylicOpacity"</span>: <span class="hljs-number">0.1</span>,},        ]    },    <span class="hljs-comment">// Add custom color schemes to this array</span>    <span class="hljs-attr">"schemes"</span>: [{<span class="hljs-comment">//默认</span><span class="hljs-comment">//配色方案</span><span class="hljs-attr">"name"</span>: <span class="hljs-string">"Homebrew"</span>,<span class="hljs-attr">"black"</span>: <span class="hljs-string">"#000000"</span>,<span class="hljs-attr">"red"</span>: <span class="hljs-string">"#FC5275"</span>,<span class="hljs-attr">"green"</span>: <span class="hljs-string">"#00a600"</span>,<span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#999900"</span>,<span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#6666e9"</span>,<span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#b200b2"</span>,<span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#00a6b2"</span>,<span class="hljs-attr">"white"</span>: <span class="hljs-string">"#bfbfbf"</span>,<span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#666666"</span>,<span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#e50000"</span>,<span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#00d900"</span>,<span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#e5e500"</span>,<span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#0000ff"</span>,<span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#e500e5"</span>,<span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#00e5e5"</span>,<span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#e5e5e5"</span>,<span class="hljs-attr">"background"</span>: <span class="hljs-string">"#757575"</span>,<span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#00ff00"</span>},{<span class="hljs-comment">//配色方案</span><span class="hljs-comment">//Ubuntu款式</span>            <span class="hljs-attr">"name"</span> : <span class="hljs-string">"Raspberry"</span>,            <span class="hljs-attr">"background"</span> : <span class="hljs-string">"#3C0315"</span>,            <span class="hljs-attr">"black"</span> : <span class="hljs-string">"#282A2E"</span>,            <span class="hljs-attr">"blue"</span> : <span class="hljs-string">"#0170C5"</span>,            <span class="hljs-attr">"brightBlack"</span> : <span class="hljs-string">"#676E7A"</span>,            <span class="hljs-attr">"brightBlue"</span> : <span class="hljs-string">"#80c8ff"</span>,            <span class="hljs-attr">"brightCyan"</span> : <span class="hljs-string">"#8ABEB7"</span>,            <span class="hljs-attr">"brightGreen"</span> : <span class="hljs-string">"#B5D680"</span>,            <span class="hljs-attr">"brightPurple"</span> : <span class="hljs-string">"#AC79BB"</span>,            <span class="hljs-attr">"brightRed"</span> : <span class="hljs-string">"#BD6D85"</span>,            <span class="hljs-attr">"brightWhite"</span> : <span class="hljs-string">"#FFFFFD"</span>,            <span class="hljs-attr">"brightYellow"</span> : <span class="hljs-string">"#FFFD76"</span>,            <span class="hljs-attr">"cyan"</span> : <span class="hljs-string">"#3F8D83"</span>,            <span class="hljs-attr">"foreground"</span> : <span class="hljs-string">"#FFFFFD"</span>,            <span class="hljs-attr">"green"</span> : <span class="hljs-string">"#76AB23"</span>,            <span class="hljs-attr">"purple"</span> : <span class="hljs-string">"#7D498F"</span>,            <span class="hljs-attr">"red"</span> : <span class="hljs-string">"#BD0940"</span>,            <span class="hljs-attr">"white"</span> : <span class="hljs-string">"#FFFFFD"</span>,            <span class="hljs-attr">"yellow"</span> : <span class="hljs-string">"#E0DE48"</span>,            <span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#00ff00"</span>         },         {<span class="hljs-attr">"name"</span> : <span class="hljs-string">"Frost"</span>,<span class="hljs-attr">"background"</span> : <span class="hljs-string">"#FFFFFF"</span>,<span class="hljs-attr">"black"</span> : <span class="hljs-string">"#3C5712"</span>,<span class="hljs-attr">"blue"</span> : <span class="hljs-string">"#17b2ff"</span>,<span class="hljs-attr">"brightBlack"</span> : <span class="hljs-string">"#749B36"</span>,<span class="hljs-attr">"brightBlue"</span> : <span class="hljs-string">"#27B2F6"</span>,<span class="hljs-attr">"brightCyan"</span> : <span class="hljs-string">"#13A8C0"</span>,<span class="hljs-attr">"brightGreen"</span> : <span class="hljs-string">"#89AF50"</span>,<span class="hljs-attr">"brightPurple"</span> : <span class="hljs-string">"#F2A20A"</span>,<span class="hljs-attr">"brightRed"</span> : <span class="hljs-string">"#F49B36"</span>,<span class="hljs-attr">"brightWhite"</span> : <span class="hljs-string">"#741274"</span>,<span class="hljs-attr">"brightYellow"</span> : <span class="hljs-string">"#991070"</span>,<span class="hljs-attr">"cyan"</span> : <span class="hljs-string">"#3C96A6"</span>,<span class="hljs-attr">"foreground"</span> : <span class="hljs-string">"#000000"</span>,<span class="hljs-attr">"green"</span> : <span class="hljs-string">"#6AAE08"</span>,<span class="hljs-attr">"purple"</span> : <span class="hljs-string">"#991070"</span>,<span class="hljs-attr">"red"</span> : <span class="hljs-string">"#8D0C0C"</span>,<span class="hljs-attr">"white"</span> : <span class="hljs-string">"#6E386E"</span>,<span class="hljs-attr">"yellow"</span> : <span class="hljs-string">"#991070"</span>         },         {<span class="hljs-attr">"name"</span>: <span class="hljs-string">"Solarized Darcula"</span>,<span class="hljs-attr">"black"</span>: <span class="hljs-string">"#25292a"</span>,<span class="hljs-attr">"red"</span>: <span class="hljs-string">"#f24840"</span>,<span class="hljs-attr">"green"</span>: <span class="hljs-string">"#629655"</span>,<span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#b68800"</span>,<span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#2075c7"</span>,<span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#797fd4"</span>,<span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#15968d"</span>,<span class="hljs-attr">"white"</span>: <span class="hljs-string">"#d2d8d9"</span>,<span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#25292a"</span>,<span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#f24840"</span>,<span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#629655"</span>,<span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#b68800"</span>,<span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#2075c7"</span>,<span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#797fd4"</span>,<span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#15968d"</span>,<span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#d2d8d9"</span>,<span class="hljs-attr">"background"</span>: <span class="hljs-string">"#3d3f41"</span>,<span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#d2d8d9"</span>},{<span class="hljs-attr">"name"</span>: <span class="hljs-string">"rebecca"</span>,<span class="hljs-attr">"black"</span>: <span class="hljs-string">"#12131e"</span>,<span class="hljs-attr">"red"</span>: <span class="hljs-string">"#dd7755"</span>,<span class="hljs-attr">"green"</span>: <span class="hljs-string">"#04dbb5"</span>,<span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#f2e7b7"</span>,<span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#7aa5ff"</span>,<span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#bf9cf9"</span>,<span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#56d3c2"</span>,<span class="hljs-attr">"white"</span>: <span class="hljs-string">"#e4e3e9"</span>,<span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#666699"</span>,<span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#ff92cd"</span>,<span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#01eac0"</span>,<span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#fffca8"</span>,<span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#69c0fa"</span>,<span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#c17ff8"</span>,<span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#8bfde1"</span>,<span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#f4f2f9"</span>,<span class="hljs-attr">"background"</span>: <span class="hljs-string">"#292a44"</span>,<span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#e8e6ed"</span>},{<span class="hljs-attr">"name"</span>: <span class="hljs-string">"PencilDark"</span>,<span class="hljs-attr">"black"</span>: <span class="hljs-string">"#212121"</span>,<span class="hljs-attr">"red"</span>: <span class="hljs-string">"#c30771"</span>,<span class="hljs-attr">"green"</span>: <span class="hljs-string">"#10a778"</span>,<span class="hljs-attr">"yellow"</span>: <span class="hljs-string">"#a89c14"</span>,<span class="hljs-attr">"blue"</span>: <span class="hljs-string">"#008ec4"</span>,<span class="hljs-attr">"purple"</span>: <span class="hljs-string">"#523c79"</span>,<span class="hljs-attr">"cyan"</span>: <span class="hljs-string">"#20a5ba"</span>,<span class="hljs-attr">"white"</span>: <span class="hljs-string">"#d9d9d9"</span>,<span class="hljs-attr">"brightBlack"</span>: <span class="hljs-string">"#424242"</span>,<span class="hljs-attr">"brightRed"</span>: <span class="hljs-string">"#fb007a"</span>,<span class="hljs-attr">"brightGreen"</span>: <span class="hljs-string">"#5fd7af"</span>,<span class="hljs-attr">"brightYellow"</span>: <span class="hljs-string">"#f3e430"</span>,<span class="hljs-attr">"brightBlue"</span>: <span class="hljs-string">"#20bbfc"</span>,<span class="hljs-attr">"brightPurple"</span>: <span class="hljs-string">"#6855de"</span>,<span class="hljs-attr">"brightCyan"</span>: <span class="hljs-string">"#4fb8cc"</span>,<span class="hljs-attr">"brightWhite"</span>: <span class="hljs-string">"#f1f1f1"</span>,<span class="hljs-attr">"background"</span>: <span class="hljs-string">"#212121"</span>,<span class="hljs-attr">"foreground"</span>: <span class="hljs-string">"#f1f1f1"</span>},    ],    <span class="hljs-comment">// Add any keybinding overrides to this array.</span>    <span class="hljs-comment">// To unbind a default keybinding, set the command to "unbound"</span>    <span class="hljs-attr">"keybindings"</span>: [<span class="hljs-comment">// Press ctrl+shift+f to open the search box</span><span class="hljs-comment">//自定义搜索键绑定</span>        { <span class="hljs-attr">"command"</span>: <span class="hljs-string">"find"</span>, <span class="hljs-attr">"keys"</span>: <span class="hljs-string">"ctrl+f"</span> },    ]}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/01/03/sCF6IJ.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;sCF6IJ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;7&quot;&gt;Terminal&lt;/fon
      
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Git" scheme="https://melodyjerry.github.io/blog/tags/Git/"/>
    
      <category term="Shell" scheme="https://melodyjerry.github.io/blog/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>[转]vue和微信小程序的区别、比较</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/26/[%E8%BD%AC]vue%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81%E6%AF%94%E8%BE%83/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/26/[%E8%BD%AC]vue%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81%E6%AF%94%E8%BE%83/</id>
    <published>2020-11-26T13:22:21.000Z</published>
    <updated>2021-01-03T14:28:21.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://segmentfault.com/a/1190000015684864" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015684864</a></p></blockquote><a id="more"></a><p>以下为原文内容：</p><hr><p><em>写了vue项目和小程序，发现二者有许多相同之处，在此想总结一下二者的共同点和区别。</em></p><h2 id="一、生命周期"><a href="#一、生命周期" class="headerlink" title="一、生命周期"></a>一、生命周期</h2><p>先贴两张图：</p><h5 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h5><p><img src="https://segmentfault.com/img/bVVORa?w=1200&amp;h=3039" srcset="/blog/img/loading.gif" alt="clipboard.png"></p><h5 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h5><p><img src="https://segmentfault.com/img/bVbcfCK?w=662&amp;h=1014" srcset="/blog/img/loading.gif" alt="clipboard.png"></p><p>相比之下，<code>小程序</code>的钩子函数要简单得多。</p><p><code>vue</code>的钩子函数在跳转新页面时，钩子函数都会触发，但是<code>小程序</code>的钩子函数，页面不同的跳转方式，触发的钩子并不一样。</p><ul><li><code>onLoad</code>: 页面加载<br>  一个页面只会调用一次，可以在 <code>onLoad</code> 中获取打开当前页面所调用的 <code>query</code> 参数。</li><li><code>onShow</code>: 页面显示<br>  每次打开页面都会调用一次。</li><li><code>onReady</code>: 页面初次渲染完成<br>  一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。<br>  对界面的设置如<code>wx.setNavigationBarTitle</code>请在<code>onReady</code>之后设置。详见生命周期</li><li><code>onHide</code>: 页面隐藏<br>  当<code>navigateTo</code>或底部tab切换时调用。</li><li><code>onUnload</code>: 页面卸载<br>  当<code>redirectTo</code>或<code>navigateBack</code>的时候调用。</li></ul><h5 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h5><p>在页面加载请求数据时，两者钩子的使用有些类似，<code>vue</code>一般会在<code>created</code>或者<code>mounted</code>中请求数据，而在<code>小程序</code>，会在<code>onLoad</code>或者<code>onShow</code>中请求数据。</p><h2 id="二、数据绑定"><a href="#二、数据绑定" class="headerlink" title="二、数据绑定"></a>二、数据绑定</h2><p><code>VUE</code>:vue动态绑定一个变量的值为元素的某个属性的时候，会在变量前面加上冒号：，例：</p><pre><code class="hljs elixir">&lt;img <span class="hljs-symbol">:src=<span class="hljs-string">"imgSrc"</span>/&gt;</span></code></pre><p><code>小程序</code>：绑定某个变量的值为元素属性时，会用两个大括号括起来，如果不加括号，为被认为是字符串。例：</p><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{imgSrc}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span></code></pre><h2 id="三、列表渲染"><a href="#三、列表渲染" class="headerlink" title="三、列表渲染"></a>三、列表渲染</h2><p>直接贴代码，两者还是有些相似<br><strong>vue：</strong></p><pre><code class="hljs javascript">&lt;ul id=<span class="hljs-string">"example-1"</span>&gt;  &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">"item in items"</span>&gt;    {{ item.message }}  &lt;<span class="hljs-regexp">/li&gt;</span><span class="hljs-regexp">&lt;/u</span>l&gt;<span class="hljs-keyword">var</span> example1 = <span class="hljs-keyword">new</span> Vue({  el: <span class="hljs-string">'#example-1'</span>,  data: {    items: [      { <span class="hljs-attr">message</span>: <span class="hljs-string">'Foo'</span> },      { <span class="hljs-attr">message</span>: <span class="hljs-string">'Bar'</span> }    ]  }})</code></pre><p><strong>小程序：</strong></p><pre><code class="hljs dust"><span class="xml">Page(</span><span class="hljs-template-variable">{</span><span class="hljs-template-variable">  data: {</span><span class="hljs-template-variable">    items: [</span><span class="hljs-template-variable">      { message: 'Foo' }</span><span class="xml">,</span><span class="xml">      </span><span class="hljs-template-variable">{ message: 'Bar' }</span><span class="xml">    ]</span><span class="xml">  }</span><span class="xml">})</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">{{items}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">}"</span>&gt;</span></span><span class="hljs-template-variable">{{item}</span><span class="xml">}<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span></code></pre><h2 id="四、显示与隐藏元素"><a href="#四、显示与隐藏元素" class="headerlink" title="四、显示与隐藏元素"></a>四、显示与隐藏元素</h2><p><code>vue</code>中，使用<code>v-if</code> 和<code>v-show</code>控制元素的显示和隐藏</p><p><code>小程序</code>中，使用<code>wx-if</code>和<code>hidden</code>控制元素的显示和隐藏</p><h2 id="五、事件处理"><a href="#五、事件处理" class="headerlink" title="五、事件处理"></a>五、事件处理</h2><p><code>vue</code>：使用<code>v-on:event</code>绑定事件，或者使用<code>@event</code>绑定事件,例如:</p><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> v-<span class="hljs-keyword">on</span>:click=<span class="hljs-string">"counter += 1"</span>&gt;Add <span class="hljs-number">1</span>&lt;/<span class="hljs-keyword">button</span>&gt;&lt;<span class="hljs-keyword">button</span> v-<span class="hljs-keyword">on</span>:click.stop=<span class="hljs-string">"counter+=1"</span>&gt;Add1&lt;/<span class="hljs-keyword">button</span>&gt;  <span class="hljs-comment">//阻止事件冒泡</span></code></pre><p><code>小程序</code>中，全用<code>bindtap(bind+event)</code>，或者<code>catchtap(catch+event)</code>绑定事件,例如：</p><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> bindtap=<span class="hljs-string">"noWork"</span>&gt;明天不上班&lt;/<span class="hljs-keyword">button</span>&gt;&lt;<span class="hljs-keyword">button</span> catchtap=<span class="hljs-string">"noWork"</span>&gt;明天不上班&lt;/<span class="hljs-keyword">button</span>&gt;  <span class="hljs-comment">//阻止事件冒泡</span></code></pre><h2 id="六、数据双向绑定"><a href="#六、数据双向绑定" class="headerlink" title="六、数据双向绑定"></a>六、数据双向绑定</h2><h5 id="1-设置值"><a href="#1-设置值" class="headerlink" title="1.设置值"></a>1.设置值</h5><p>在<code>vue</code>中,只需要再<code>表单</code>元素上加上<code>v-model</code>,然后再绑定<code>data</code>中对应的一个值，当表单元素内容发生变化时，<code>data</code>中对应的值也会相应改变，这是<code>vue</code>非常nice的一点。</p><pre><code class="hljs vim">&lt;div id=<span class="hljs-string">"app"</span>&gt;    &lt;<span class="hljs-built_in">input</span> v-model=<span class="hljs-string">"reason"</span> placeholder=<span class="hljs-string">"填写理由"</span> class=<span class="hljs-string">'reason'</span>/&gt;&lt;/div&gt;<span class="hljs-keyword">new</span> Vue({  <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span> <span class="hljs-string">'#app'</span>,  dat<span class="hljs-variable">a:</span> {   reason:<span class="hljs-string">''</span>  }})</code></pre><p>但是在<code>小程序</code>中，却没有这个功能。那怎么办呢？<br>当表单内容发生变化时，会触发表单元素上绑定的方法，然后在该方法中，通过<code>this.setData({key:value})</code>来将表单上的值赋值给<code>data</code>中的对应值。<br>下面是代码，可以感受一下:</p><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">input</span> bindinput=<span class="hljs-string">"bindReason"</span> placeholder=<span class="hljs-string">"填写理由"</span> class=<span class="hljs-string">'reason'</span> value=<span class="hljs-string">'{{reason}}'</span> name=<span class="hljs-string">"reason"</span> /&gt;Page({data:{    reason:<span class="hljs-string">''</span>},<span class="hljs-function"><span class="hljs-title">bindReason</span><span class="hljs-params">(e)</span></span> {    this.setData({      reason: e<span class="hljs-selector-class">.detail</span>.value    })  }})</code></pre><p>当页面表单元素很多的时候，更改值就是一件体力活了。和<code>小程序</code>一比较，<code>vue</code>的<code>v-model</code>简直爽的不要不要的。</p><h5 id="2-取值"><a href="#2-取值" class="headerlink" title="2.取值"></a>2.取值</h5><p><code>vue</code>中，通过<code>this.reason</code>取值</p><p><code>小程序</code>中，通过<code>this.data.reason</code>取值</p><p><img src="https://segmentfault.com/img/bVbdXrK?w=242&amp;h=180" srcset="/blog/img/loading.gif" alt="clipboard.png"></p><h2 id="七、绑定事件传参"><a href="#七、绑定事件传参" class="headerlink" title="七、绑定事件传参"></a>七、绑定事件传参</h2><p>在<code>vue</code>中，绑定事件传参挺简单，只需要在触发事件的方法中，把需要传递的数据作为形参传入就可以了，例如：</p><pre><code class="hljs vim">&lt;button @click=<span class="hljs-string">"say('明天不上班')"</span>&gt;&lt;/button&gt;<span class="hljs-keyword">new</span> Vue({  <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span> <span class="hljs-string">'#app'</span>,  method<span class="hljs-variable">s:</span>{    say(arg){    consloe.<span class="hljs-built_in">log</span>(arg)    }  }})</code></pre><p>在<code>小程序</code>中，不能直接在绑定事件的方法中传入参数，需要将参数作为属性值，绑定到元素上的<code>data-</code>属性上，然后在方法中，通过<code>e.currentTarget.dataset.*</code>的方式获取，从而完成参数的传递，很麻烦有没有…</p><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'tr'</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">'toApprove'</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">"{{item.id}}"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span>Page({data:{    reason:<span class="hljs-string">''</span>},toApprove(e) {    <span class="hljs-keyword">let</span><span class="hljs-built_in"> id</span> = e.currentTarget.dataset<span class="hljs-built_in">.id</span>;  }})</code></pre><p><img src="https://segmentfault.com/img/bVbdXGC?w=340&amp;h=327" srcset="/blog/img/loading.gif" alt="clipboard.png"></p><h2 id="八、父子组件通信"><a href="#八、父子组件通信" class="headerlink" title="八、父子组件通信"></a>八、父子组件通信</h2><h4 id="1-子组件的使用"><a href="#1-子组件的使用" class="headerlink" title="1.子组件的使用"></a>1.子组件的使用</h4><p>在<code>vue</code>中，需要：</p><ol><li>编写子组件</li><li>在需要使用的父组件中通过<code>import</code>引入</li><li>在<code>vue</code>的<code>components</code>中注册</li><li>在模板中使用</li></ol><pre><code class="hljs javascript"><span class="hljs-comment">//子组件 bar.vue</span>&lt;template&gt;  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"search-box"</span>&gt;    &lt;div @click=<span class="hljs-string">"say"</span> :title=<span class="hljs-string">"title"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"icon-dismiss"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">&lt;/</span>template&gt;&lt;script&gt;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{props:{    title:{       type:<span class="hljs-built_in">String</span>,       <span class="hljs-keyword">default</span>:<span class="hljs-string">''</span>      }    }},methods:{    say(){       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'明天不上班'</span>);       <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'helloWorld'</span>)    }}&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 父组件 foo.vue</span><span class="hljs-regexp">&lt;template&gt;</span><span class="hljs-regexp">  &lt;div class="container"&gt;</span><span class="hljs-regexp">    &lt;bar :title="title" @helloWorld="helloWorld"&gt;&lt;/</span>bar&gt;  &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">&lt;/</span>template&gt;&lt;script&gt;<span class="hljs-keyword">import</span> Bar <span class="hljs-keyword">from</span> <span class="hljs-string">'./bar.vue'</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{data(){    <span class="hljs-keyword">return</span>{        title:<span class="hljs-string">"我是标题"</span>    }},methods:{    helloWorld(){        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我接收到子组件传递的事件了'</span>)    }},components:{    Bar}&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>在<code>小程序</code>中，需要：</p><ol><li><p>编写子组件</p></li><li><p>在子组件的<code>json</code>文件中，将该文件声明为组件</p> <pre><code class="hljs json">{  <span class="hljs-attr">"component"</span>: <span class="hljs-literal">true</span>}</code></pre></li><li><p>在需要引入的父组件的<code>json</code>文件中，在<code>usingComponents</code>填写引入组件的组件名以及路径</p> <pre><code class="hljs 1c"><span class="hljs-string">"usingComponents"</span>: {    <span class="hljs-string">"tab-bar"</span>: <span class="hljs-string">"../../components/tabBar/tabBar"</span>  }</code></pre></li><li><p>在父组件中，直接引入即可</p> <pre><code class="hljs gauss">&lt;<span class="hljs-built_in">tab</span>-<span class="hljs-built_in">bar</span> currentpage=<span class="hljs-string">"index"</span>&gt;&lt;/<span class="hljs-built_in">tab</span>-<span class="hljs-built_in">bar</span>&gt;</code></pre><p> 具体代码:</p> <pre><code class="hljs htmlbars"><span class="xml">// 子组件</span><span class="xml"><span class="hljs-comment">&lt;!--components/tabBar/tabBar.wxml--&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'tabbar-wrapper'</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'left-bar </span></span></span><span class="hljs-template-variable">{{currentpage===<span class="hljs-string">"index"</span>?<span class="hljs-string">"active"</span>:<span class="hljs-string">""</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">'</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">'jumpToIndex'</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'iconfont icon-shouye'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'right-bar </span></span></span><span class="hljs-template-variable">{{currentpage===<span class="hljs-string">"setting"</span>?<span class="hljs-string">"active"</span>:<span class="hljs-string">""</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">'</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">'jumpToSetting'</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'iconfont icon-shezhi'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>设置<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span></code></pre></li></ol><h4 id="2-父子组件间通信"><a href="#2-父子组件间通信" class="headerlink" title="2.父子组件间通信"></a>2.父子组件间通信</h4><h5 id="在vue中"><a href="#在vue中" class="headerlink" title="在vue中"></a><strong>在<code>vue</code>中</strong></h5><p>父组件向子组件传递数据，只需要在子组件通过<code>v-bind</code>传入一个值，在子组件中，通过<code>props</code>接收，即可完成数据的传递，示例:</p><pre><code class="hljs javascript"><span class="hljs-comment">// 父组件 foo.vue</span>&lt;template&gt;  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"container"</span>&gt;    &lt;bar :title=<span class="hljs-string">"title"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bar</span>&gt;</span></span>  &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">&lt;/</span>template&gt;&lt;script&gt;<span class="hljs-keyword">import</span> Bar <span class="hljs-keyword">from</span> <span class="hljs-string">'./bar.vue'</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{data(){    <span class="hljs-keyword">return</span>{                title:<span class="hljs-string">"我是标题"</span>    }},components:{    Bar}&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp">/</span><span class="hljs-regexp">/ 子组件bar.vue</span><span class="hljs-regexp">&lt;template&gt;</span><span class="hljs-regexp">  &lt;div class="search-box"&gt;</span><span class="hljs-regexp">    &lt;div :title="title" &gt;&lt;/</span>div&gt;  &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">&lt;/</span>template&gt;&lt;script&gt;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>{props:{    title:{       type:<span class="hljs-built_in">String</span>,       <span class="hljs-keyword">default</span>:<span class="hljs-string">''</span>      }    }}&lt;<span class="hljs-regexp">/script&gt;</span></code></pre><p>子组件和父组件通信可以通过<code>this.$emit</code>将方法和数据传递给父组件。</p><h5 id="在小程序中"><a href="#在小程序中" class="headerlink" title="在小程序中"></a><strong>在<code>小程序</code>中</strong></h5><p>父组件向子组件通信和<code>vue</code>类似，但是<code>小程序</code>没有通过<code>v-bind</code>，而是直接将值赋值给一个变量，如下：</p><pre><code class="hljs gauss">&lt;<span class="hljs-built_in">tab</span>-<span class="hljs-built_in">bar</span> currentpage=<span class="hljs-string">"index"</span>&gt;&lt;/<span class="hljs-built_in">tab</span>-<span class="hljs-built_in">bar</span>&gt;此处， “index”就是要向子组件传递的值</code></pre><p>在子组件<code>properties</code>中，接收传递的值</p><pre><code class="hljs less"><span class="hljs-attribute">properties</span>: {    <span class="hljs-comment">// 弹窗标题</span>    <span class="hljs-attribute">currentpage</span>: {            <span class="hljs-comment">// 属性名</span>      <span class="hljs-attribute">type</span>: String,     <span class="hljs-comment">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span>      <span class="hljs-attribute">value</span>: <span class="hljs-string">'index'</span>     <span class="hljs-comment">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>    }  }</code></pre><p>子组件向父组件通信和<code>vue</code>也很类似，代码如下:</p><pre><code class="hljs javascript"><span class="hljs-comment">//子组件中</span>methods: {       <span class="hljs-comment">// 传递给父组件</span>    cancelBut: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{      <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span>;      <span class="hljs-keyword">var</span> myEventDetail = { <span class="hljs-attr">pickerShow</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'cancel'</span> } <span class="hljs-comment">// detail对象，提供给事件监听函数</span>      <span class="hljs-keyword">this</span>.triggerEvent(<span class="hljs-string">'myevent'</span>, myEventDetail) <span class="hljs-comment">//myevent自定义名称事件，父组件中使用</span>    },}<span class="hljs-comment">//父组件中</span>&lt;bar bind:myevent=<span class="hljs-string">"toggleToast"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bar</span>&gt;</span></span><span class="hljs-comment">// 获取子组件信息</span>toggleToast(e){    <span class="hljs-built_in">console</span>.log(e.detail)}</code></pre><h5 id="如果父组件想要调用子组件的方法"><a href="#如果父组件想要调用子组件的方法" class="headerlink" title="如果父组件想要调用子组件的方法"></a>如果父组件想要调用子组件的方法</h5><p><code>vue</code>会给子组件添加一个<code>ref</code>属性，通过<code>this.$refs.ref的值</code>便可以获取到该子组件，然后便可以调用子组件中的任意方法，例如：</p><pre><code class="hljs cs"><span class="hljs-comment">//子组件</span>&lt;bar <span class="hljs-keyword">ref</span>=<span class="hljs-string">"bar"</span>&gt;&lt;/bar&gt;<span class="hljs-comment">//父组件</span><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">ref</span>.bar.子组件的方法</code></pre><p><code>小程序</code>是给子组件添加<code>id</code>或者<code>class</code>，然后通过<code>this.selectComponent</code>找到子组件，然后再调用子组件的方法,示例：</p><pre><code class="hljs javascript"><span class="hljs-comment">//子组件</span>&lt;bar id=<span class="hljs-string">"bar"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bar</span>&gt;</span></span><span class="hljs-comment">// 父组件</span><span class="hljs-keyword">this</span>.selectComponent(<span class="hljs-string">'#id'</span>).syaHello()</code></pre><h5 id="小程序父组件改变子组件样式"><a href="#小程序父组件改变子组件样式" class="headerlink" title="小程序父组件改变子组件样式"></a>小程序父组件改变子组件样式</h5><p>1.父组件将style传入子组件<br>2.父组件传入变量控制子组件样式<br>3.在父组件样式中，在子组件类名前面加上父组件类名</p><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">'share-button-container'</span> bindtap=<span class="hljs-string">'handleShareBtn'</span>&gt;   &lt;<span class="hljs-keyword">share</span>-button  product="{{goodProduct}}" <span class="hljs-keyword">type</span>="1" back-color="#fff" fore-color="#9e292f" bind:error="on_error" /&gt;&lt;/<span class="hljs-keyword">view</span>&gt;.<span class="hljs-keyword">share</span>-button-container .button<span class="hljs-comment">--btn-navigator__hover{</span>  background: #fff;}</code></pre><p>小程序和vue在这点上太相似了，有木有。。。<br><img src="https://segmentfault.com/img/bVbdYtp?w=389&amp;h=324" srcset="/blog/img/loading.gif" alt="clipboard.png"></p><h2 id="九、废话"><a href="#九、废话" class="headerlink" title="九、废话"></a>九、废话</h2><p><strong>还有好多地方没写，之后再慢慢加上、精简。感觉自己写的有点冗余，大佬勿喷！！！</strong><br><strong>如果觉得有帮助，希望帮忙点个赞和收藏</strong></p><p><img src="https://segmentfault.com/img/bVbdYvN?w=180&amp;h=180" srcset="/blog/img/loading.gif" alt="clipboard.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://segmentfault.com/a/1190000015684864&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000015684864&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Vue" scheme="https://melodyjerry.github.io/blog/tags/Vue/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>IDEA写jsp没有代码提示或报错</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/19/IDEA%E5%86%99jsp%E6%B2%A1%E6%9C%89%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA%E6%88%96%E6%8A%A5%E9%94%99/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/19/IDEA%E5%86%99jsp%E6%B2%A1%E6%9C%89%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA%E6%88%96%E6%8A%A5%E9%94%99/</id>
    <published>2020-11-19T12:23:21.000Z</published>
    <updated>2021-01-03T14:28:20.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/19/DKo2tI.png" srcset="/blog/img/loading.gif" alt="DKo2tI.png"></p><p>好久没写jsp了，昨天一写，发现调用不了<code>request.getParameter</code>。</p><p>果然是太久没碰jsp了 =_=\\</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>好吧，解决也很简单，直接上图吧</p><ul><li>因为没有导入Tomcat的jar包</li></ul><ol><li><p><img src="https://s3.ax1x.com/2020/11/19/DKo5jS.png" srcset="/blog/img/loading.gif" alt="DKo5jS.png"></p></li><li><p><img src="https://s3.ax1x.com/2020/11/19/DKo77j.png" srcset="/blog/img/loading.gif" alt="DKo77j.png"></p></li><li><p><img src="https://s3.ax1x.com/2020/11/19/DKoLhq.png" srcset="/blog/img/loading.gif" alt="DKoLhq.png"></p></li><li><p><img src="https://s3.ax1x.com/2020/11/19/DKT9HJ.png" srcset="/blog/img/loading.gif" alt="DKT9HJ.png"></p></li><li><p><img src="https://s3.ax1x.com/2020/11/19/DKT5P1.png" srcset="/blog/img/loading.gif" alt="DKT5P1.png"></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/19/DKo2tI.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;DKo2tI.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;好久没写jsp了，昨天一写，发现调用不了&lt;code&gt;re
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>安装gitbook-cli时提示Installing GitBook 3.2.3</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/15/%E5%AE%89%E8%A3%85gitbook-cli%E6%97%B6%E6%8F%90%E7%A4%BAInstalling-GitBook-3.2.3/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/15/%E5%AE%89%E8%A3%85gitbook-cli%E6%97%B6%E6%8F%90%E7%A4%BAInstalling-GitBook-3.2.3/</id>
    <published>2020-11-15T13:24:11.000Z</published>
    <updated>2021-01-03T14:28:21.475Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.ax1x.com/2020/11/15/DF3uTI.png" srcset="/blog/img/loading.gif" alt="DF3uTI.png"></p><p>​        第一次安装<code>GitBook</code>时，不管是<code>gitbook -V</code>还是<code>gitbook init</code>后，都停止在<code>Installing GitBook 3.2.3 ……</code>。</p><p>​        通过控制台的报错提示，怀疑是：``gitbook-cli<code>引用了</code>旧版的graceful-fs`，导致出现该问题。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li>需要更新<code>graceful-fs</code>库</li></ul><ol><li>进入<code>gitbook-cli</code>全局安装目录的node依赖文件夹<code>node_modules</code>：</li></ol><pre><code class="hljs bash">F:\programs\nodejs\node_modules\gitbook-cli\node_modules\npm\node_modules</code></pre><ol start="2"><li>更新<code>graceful-fs</code>库：</li></ol><pre><code class="hljs bash"><span class="hljs-comment"># cmd执行以下命令</span>npm install graceful-fs@laster --save</code></pre><ol start="3"><li>再次执行<code>gitbook -V</code>或<code>gitbook init</code>。</li></ol><p><img src="https://s3.ax1x.com/2020/11/15/DF3lff.png" srcset="/blog/img/loading.gif" alt="DF3lff.png"></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/15/DF3uTI.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;DF3uTI.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;​        第一次安装&lt;code&gt;GitBook&lt;/code&gt;时，不管是&lt;code&gt;gitbook -V&lt;/code&gt;还是&lt;code&gt;gitbook init&lt;/code&gt;后，都停止在&lt;code&gt;Installing GitBook 3.2.3 ……&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​        通过控制台的报错提示，怀疑是：``gitbook-cli&lt;code&gt;引用了&lt;/code&gt;旧版的graceful-fs`，导致出现该问题。&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;需要更新&lt;code&gt;graceful-fs&lt;/code&gt;库&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;进入&lt;code&gt;gitbook-cli&lt;/code&gt;全局安装目录的node依赖文件夹&lt;code&gt;node_modules&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;F:\programs\nodejs\node_modules\gitbook-cli\node_modules\npm\node_modules&lt;/code&gt;&lt;/pre&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;更新&lt;code&gt;graceful-fs&lt;/code&gt;库：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# cmd执行以下命令&lt;/span&gt;
npm install graceful-fs@laster --save&lt;/code&gt;&lt;/pre&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;再次执行&lt;code&gt;gitbook -V&lt;/code&gt;或&lt;code&gt;gitbook init&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/11/15/DF3lff.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;DF3lff.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="npm" scheme="https://melodyjerry.github.io/blog/tags/npm/"/>
    
      <category term="Node" scheme="https://melodyjerry.github.io/blog/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>为什么建议js代码放在&lt;/body&gt;前</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AEjs%E4%BB%A3%E7%A0%81%E6%94%BE%E5%9C%A8body%E5%89%8D/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BB%BA%E8%AE%AEjs%E4%BB%A3%E7%A0%81%E6%94%BE%E5%9C%A8body%E5%89%8D/</id>
    <published>2020-11-12T13:24:11.000Z</published>
    <updated>2021-01-03T14:28:21.469Z</updated>
    
    <content type="html"><![CDATA[<p>理论上来说js标签放在html文档的任何位置都可以，规范起见，推荐放到body结束标签的末尾，包含到body标签内：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 这里是其他的HTML标签 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript"> <span class="hljs-comment">// 这里是代码 </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>这样处理的好处是无需担心因页面未完成加载，造成DOM节点获取不到，使脚本报错的问题，而且能避免因脚本运行缓慢造成页面卡死的问题。另外，Yahoo的前端优化指南里就有这一条。</p><blockquote><p>放在body后面是等body载入bai完后，du依次往下执行，避免，先载入了js，缺找不到zhibody里面的dom对象而造成js出错，所以一般要用window.onload来判断页面是否载入完成。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/bibiafa/p/9430833.html" target="_blank" rel="noopener">为什么要将js代码放在body最后 - Tinypan - 博客园 (cnblogs.com)</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;理论上来说js标签放在html文档的任何位置都可以，规范起见，推荐放到body结束标签的末尾，包含到body标签内：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的渲染机制</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</id>
    <published>2020-11-12T13:23:11.000Z</published>
    <updated>2021-01-03T14:28:21.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：<a href="https://blog.csdn.net/wozaixiaoximen/article/details/50640954" target="_blank" rel="noopener">https://blog.csdn.net/wozaixiaoximen/article/details/50640954</a></p></blockquote><h2 id="浏览器的渲染机制"><a href="#浏览器的渲染机制" class="headerlink" title="浏览器的渲染机制"></a>浏览器的渲染机制</h2><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><p>(1) DOM：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。</p><p>(2) CSSOM：CSS Object Model，浏览器将CSS代码解析成树形的数据结构。</p><p>(3) DOM 和 CSSOM 都是以Bytes → characters → tokens → nodes → object model. 这样的方式生成最终的数据。</p><h2 id="几个概念-1"><a href="#几个概念-1" class="headerlink" title="几个概念"></a>几个概念</h2><p>(1) DOM：Document Object Model，浏览器将HTML解析成树形的数据结构，简称DOM。</p><p>(2) CSSOM：CSS Object Model，浏览器将CSS代码解析成树形的数据结构。</p><p>(3) DOM 和 CSSOM 都是以<code>Bytes → characters → tokens → nodes → object model</code>. 这样的方式生成最终的数据。如下图所示：</p><p><img src="https://img-blog.csdn.net/20160206222845643" srcset="/blog/img/loading.gif" alt="这里写图片描述"></p><p>DOM树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</p><p>(4) Render Tree：DOM 和 CSSOM 合并后生成 Render Tree，如下图：</p><p><img src="https://img-blog.csdn.net/20160206222937972" srcset="/blog/img/loading.gif" alt="这里写图片描述"></p><p>Render Tree 和 DOM 一样，以多叉树的形式保存了每个节点的css属性、节点本身属性、以及节点的孩子节点。</p><p>注意：display:none 的节点不会被加入Render Tree，而visibility: hidden 则会，所以，如果某个节点最开始是不显示的，设为display:none是更优的。</p><h3 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h3><p>(1) Create/Update DOM And request css/image/js：浏览器请求到HTML代码后，在生成DOM的最开始阶段（应该是 Bytes → characters 后），并行发起css、图片、js的请求，无论他们是否在HEAD里。</p><p>注意：发起js文件的下载request并不需要DOM处理到那个script节点，比如：简单的正则匹配就能做到这一点，虽然实际上并不一定是通过正则：）。这是很多人在理解渲染机制的时候存在的误区。</p><p>(2) Create/Update Render CSSOM: CSS文件下载完成，开始构建CSSOM。</p><p>(3) Create/Update Render Tree：所有CSS文件下载完成，CSSOM构建结束后，和 DOM 一起生成 Render Tree。</p><p>(4) Layout：有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置。</p><p>(5) Painting：Layout后，浏览器已经知道了哪些节点要显示（which nodes are visible）、每个节点的CSS属性是什么（their computed styles）、每个节点在屏幕中的位置是哪里（geometry）。就进入了最后一步：Painting，按照算出来的规则，通过显卡，把内容画到屏幕上。</p><p>以上五个步骤前3个步骤之所有使用 “Create/Update” 是因为DOM、CSSOM、Render Tree都可能在第一次Painting后又被更新多次，比如JS修改了DOM或者CSS属性。</p><p>Layout 和 Painting 也会被重复执行，除了DOM、CSSOM更新的原因外，图片下载完成后也需要调用Layout 和 Painting来更新网页。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://blog.csdn.net/wozaixiaoximen/article/details/50640954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="CSS" scheme="https://melodyjerry.github.io/blog/tags/CSS/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>style标签放在body前和body后的区别</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/12/style%E6%A0%87%E7%AD%BE%E6%94%BE%E5%9C%A8body%E5%89%8D%E5%92%8Cbody%E5%90%8E%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/12/style%E6%A0%87%E7%AD%BE%E6%94%BE%E5%9C%A8body%E5%89%8D%E5%92%8Cbody%E5%90%8E%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-11-12T03:23:11.000Z</published>
    <updated>2021-01-03T14:28:21.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：<a href="https://blog.csdn.net/qq_44721831/article/details/102528073" target="_blank" rel="noopener">https://blog.csdn.net/qq_44721831/article/details/102528073</a></p></blockquote><h2 id="style标签写在body后与body前有什么区别？"><a href="#style标签写在body后与body前有什么区别？" class="headerlink" title="style标签写在body后与body前有什么区别？"></a>style标签写在body后与body前有什么区别？</h2><p>从有html标准以来到目前为止（2017年5月），标准一直是规定style元素不应出现在body元素中。（除非style处于template元素中，因为template中的内容是不直接在dom树中的。另外曾经</p><p>如果style元素出现在body元素，最终效果和style元素出现在head里是一样的。但是可能引起FOUC、重绘或重新布局。注意，根据当前标准，&lt;link rel=stylesheet …&gt; 是可以出现在body元素中的。并且也可能引起上述问题。然而link是引用资源，意味着可以用于故意设计的异步加载。而style元素是直接内嵌的，并没有合理的use case去使用它。所以html标准中允许body中出现link，而不允许style。</p><p>不过，虽然20年以来，把style放在body中一直是不合标准的，但仍然有大量网站这样用了，所以这个问题是有一定争议的。参见 style tag should be allowed in body · Issue #1605 · whatwg/html 。</p><p>PS. 有部分网站在body中使用style可能是出于组件或CMS的需求，之前html标准曾加入了</p><p>写在head标签中利于浏览器逐步渲染（resources downloading-&gt;CSSOM+DOM-&gt;RenderTree(composite)-&gt;Layout-&gt;paint）。具体渲染过程请参考<br><a href="https://blog.csdn.net/wozaixiaoximen/article/details/50640954##1" target="_blank" rel="noopener">http://blog.csdn.net/wozaixia…</a></p><p>写在body标签后由于浏览器以逐行方式对html文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://blog.csdn.net/qq_44721831/article/details/102528073&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.n
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="CSS" scheme="https://melodyjerry.github.io/blog/tags/CSS/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL忘记密码及重置密码</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/08/MySQL%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E5%8F%8A%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/08/MySQL%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E5%8F%8A%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81/</id>
    <published>2020-11-08T13:23:11.000Z</published>
    <updated>2021-01-03T14:28:21.414Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="主机上找到配置文件"><a href="#主机上找到配置文件" class="headerlink" title="主机上找到配置文件"></a>主机上找到配置文件</h2><p><img src="https://s1.ax1x.com/2020/11/08/BoEzt0.png" srcset="/blog/img/loading.gif" alt="BoEzt0.png"></p><ul><li><p>Windows：<code>my.ini</code></p><p>  选择默认的安装路径，则配置文件在：<code>C:\ProgramData\MySQL\MySQL Server 5.7/my.ini</code></p></li></ul><blockquote><p>可能找不到<code>ProgramData</code>文件夹，这是因为一般是被隐藏了，可以直接复制上边路径到资源管理器，再访问即可。</p></blockquote><ul><li><p>Linux：<code>my.cnf</code></p><p>  选择默认的安装路径，则配置文件在：<code>/etc/my.cnf</code></p></li></ul><blockquote><p>其他找到<code>my.cnf</code>的方法：</p><ol><li><p>首先找到mysqld的路径：</p> <pre><code class="hljs bash"><span class="hljs-built_in">which</span> mysqld</code></pre><p> 出来的路径就是<code>mysqld</code> 的路径。</p></li><li><p>敲命令：</p> <pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/mysql/bin/mysqld --verbose --<span class="hljs-built_in">help</span> |grep -A 1 <span class="hljs-string">'Default options'</span></code></pre><p> 在这里就可以看到<code>my.cnf</code>的路径。</p></li></ol></blockquote><h2 id="跳过登录时的权限检验"><a href="#跳过登录时的权限检验" class="headerlink" title="跳过登录时的权限检验"></a>跳过登录时的权限检验</h2><ol><li>修改配置文件，在<code>[mysqld]</code>下一行加入：</li></ol><pre><code class="hljs pgsql">[mysqld]skip-<span class="hljs-keyword">grant</span>-<span class="hljs-keyword">tables</span></code></pre><ol start="2"><li>重启 <code>MySQL</code> 服务：</li></ol><ul><li><p>Windows：</p><ul><li>推荐：<code>服务</code> =&gt; <code>MySQl</code> =&gt; <code>重启此服务</code><ul><li><img src="https://s1.ax1x.com/2020/11/08/Bou2X8.png" srcset="/blog/img/loading.gif" alt="Bou2X8.png"></li></ul></li><li>依次执行<code>net stop mysql</code>、<code>net start mysql</code><ul><li><img src="https://s1.ax1x.com/2020/11/08/BoKABD.png" srcset="/blog/img/loading.gif" alt="BoKABD.png"></li></ul></li></ul></li><li><p>Linux：</p><ul><li>启动：<ul><li><code>service mysql start</code></li></ul></li><li>停止：<ul><li>使用server方式：<code>service mysqld stop</code></li><li>使用mysqladmin方式：<code>mysqladmin shutdown</code></li></ul></li><li>重启：<ul><li><code>service mysqld restart</code></li><li><code>service mysql restart</code>(5.5.7版本命令)</li></ul></li></ul></li></ul><h2 id="重新登录MySQL"><a href="#重新登录MySQL" class="headerlink" title="重新登录MySQL"></a>重新登录MySQL</h2><ol><li>重启后，用 <code>mysql -uroot -p</code> 登录：</li></ol><ul><li>可以<code>不需要密码</code>就可以登陆，因为跳过了<code>登陆时的权限检验</code>。</li></ul><pre><code class="hljs shell">mysql -uroot -p</code></pre><p><img src="https://s1.ax1x.com/2020/11/08/BoK3DS.png" srcset="/blog/img/loading.gif" alt="BoK3DS.png"></p><h2 id="设置新的密码"><a href="#设置新的密码" class="headerlink" title="设置新的密码"></a>设置新的密码</h2><ol><li>选择 <code>mysql</code> 数据库：</li></ol><pre><code class="hljs mysql">use mysql</code></pre><ol start="2"><li>修改密码：</li></ol><pre><code class="hljs mysql">update user set authentication_string = password ('new-password') where user = 'root';</code></pre><blockquote><p>这里要更改的是 <code>authentication_string</code>， 而不是 ``password` 字段。否则就像下面的报错：</p><pre><code class="hljs mysql">mysql&gt; update user  set Password=password('new-password') where user='root';ERROR 1054 (42S22): Unknown column 'Password' in 'field list'</code></pre></blockquote><ol start="3"><li>删除配置文件中在<code>[mysqld]</code>下一行加入的：</li></ol><pre><code class="hljs pgsql">[mysqld]skip-<span class="hljs-keyword">grant</span>-<span class="hljs-keyword">tables</span></code></pre><ol start="4"><li>重启 <code>MySQL</code> 服务</li></ol><h2 id="验证新密码登录"><a href="#验证新密码登录" class="headerlink" title="验证新密码登录"></a>验证新密码登录</h2><ol><li>使用：</li></ol><ul><li><p>此时，需要<code>权限检验</code></p></li><li><blockquote><p>务必删除配置文件中的<code>skip-grant-tables</code>，为了<strong>数据库的安全。</strong></p></blockquote></li></ul><pre><code class="hljs bash">mysql -uroot -p</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上所有的命令行过程，如下图：</p><p><img src="https://s1.ax1x.com/2020/11/08/BoM3xx.png" srcset="/blog/img/loading.gif" alt="BoM3xx.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;主机上找到配置文件&quot;&gt;&lt;a href=&quot;#主机上找到配置文件&quot; class=&quot;headerlink&quot; title=&quot;主机上找到配置文件&quot;&gt;&lt;/a&gt;主机上找到配置文件&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="MySQL" scheme="https://melodyjerry.github.io/blog/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>js-禁止右键菜单代码、禁止复制粘贴代码</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/07/2020-11-07-js-%E7%A6%81%E6%AD%A2%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BB%A3%E7%A0%81%E3%80%81%E7%A6%81%E6%AD%A2%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E4%BB%A3%E7%A0%81/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/07/2020-11-07-js-%E7%A6%81%E6%AD%A2%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E4%BB%A3%E7%A0%81%E3%80%81%E7%A6%81%E6%AD%A2%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E4%BB%A3%E7%A0%81/</id>
    <published>2020-11-07T06:23:12.000Z</published>
    <updated>2021-01-03T14:28:20.938Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><pre><code class="hljs js">&lt; script type = <span class="hljs-string">"text/javascript"</span> &gt;<span class="hljs-comment">//屏蔽右键菜单</span><span class="hljs-built_in">document</span>.oncontextmenu = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.event) {    event = <span class="hljs-built_in">window</span>.event;  }  <span class="hljs-keyword">try</span> {    <span class="hljs-keyword">var</span> the = event.srcElement;    <span class="hljs-keyword">if</span> (! ((the.tagName == <span class="hljs-string">"INPUT"</span> &amp;&amp; the.type.toLowerCase() == <span class="hljs-string">"text"</span>) || the.tagName == <span class="hljs-string">"TEXTAREA"</span>)) {      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  } <span class="hljs-keyword">catch</span>(e) {    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  }}<span class="hljs-comment">//屏蔽粘贴</span><span class="hljs-built_in">document</span>.onpaste = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.event) {    event = <span class="hljs-built_in">window</span>.event;  }  <span class="hljs-keyword">try</span> {    <span class="hljs-keyword">var</span> the = event.srcElement;    <span class="hljs-keyword">if</span> (! ((the.tagName == <span class="hljs-string">"INPUT"</span> &amp;&amp; the.type.toLowerCase() == <span class="hljs-string">"text"</span>) || the.tagName == <span class="hljs-string">"TEXTAREA"</span>)) {      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  } <span class="hljs-keyword">catch</span>(e) {    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  }}<span class="hljs-comment">//屏蔽复制</span><span class="hljs-built_in">document</span>.oncopy = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.event) {    event = <span class="hljs-built_in">window</span>.event;  }  <span class="hljs-keyword">try</span> {    <span class="hljs-keyword">var</span> the = event.srcElement;    <span class="hljs-keyword">if</span> (! ((the.tagName == <span class="hljs-string">"INPUT"</span> &amp;&amp; the.type.toLowerCase() == <span class="hljs-string">"text"</span>) || the.tagName == <span class="hljs-string">"TEXTAREA"</span>)) {      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  } <span class="hljs-keyword">catch</span>(e) {    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  }}<span class="hljs-comment">//屏蔽剪切</span><span class="hljs-built_in">document</span>.oncut = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.event) {    event = <span class="hljs-built_in">window</span>.event;  }  <span class="hljs-keyword">try</span> {    <span class="hljs-keyword">var</span> the = event.srcElement;    <span class="hljs-keyword">if</span> (! ((the.tagName == <span class="hljs-string">"INPUT"</span> &amp;&amp; the.type.toLowerCase() == <span class="hljs-string">"text"</span>) || the.tagName == <span class="hljs-string">"TEXTAREA"</span>)) {      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  } <span class="hljs-keyword">catch</span>(e) {    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  }}<span class="hljs-comment">//屏蔽选中</span><span class="hljs-built_in">document</span>.onselectstart = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>{  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.event) {    event = <span class="hljs-built_in">window</span>.event;  }  <span class="hljs-keyword">try</span> {    <span class="hljs-keyword">var</span> the = event.srcElement;    <span class="hljs-keyword">if</span> (! ((the.tagName == <span class="hljs-string">"INPUT"</span> &amp;&amp; the.type.toLowerCase() == <span class="hljs-string">"text"</span>) || the.tagName == <span class="hljs-string">"TEXTAREA"</span>)) {      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    }    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  } <span class="hljs-keyword">catch</span>(e) {    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  }} &lt; <span class="hljs-regexp">/script&gt;/</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;pre&gt;&lt;code class=&quot;hljs js&quot;&gt;&amp;lt; script type = &lt;span class=&quot;hljs-string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &amp;gt;
&lt;span class=&quot;hljs-c
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>[转]记录B站关于视频的api</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/07/%E8%AE%B0%E5%BD%95B%E7%AB%99%E5%85%B3%E4%BA%8E%E8%A7%86%E9%A2%91%E7%9A%84api/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/07/%E8%AE%B0%E5%BD%95B%E7%AB%99%E5%85%B3%E4%BA%8E%E8%A7%86%E9%A2%91%E7%9A%84api/</id>
    <published>2020-11-07T06:11:12.000Z</published>
    <updated>2021-01-03T14:28:21.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因学习时预览到此博客，故做转载记录。</p><p>链接：<a href="https://rorical.blue/archives/80/" target="_blank" rel="noopener">记录B站关于视频的api - Rorical</a></p></blockquote><blockquote><p>随时更新，请不要用这些来麻烦哔哩哔哩</p></blockquote><p>请注意，所有的接口请求时候务必带上cookie，referer和csrf_token</p><p>通过各种id获取视频详情</p><pre><code class="hljs shell">GET https://api.bilibili.com/x/web-interface/view?bvid=#视频bvidGET https://api.bilibili.com/x/web-interface/view?aid=#视频avid正常返回{"code":0,"message":"0","ttl":1,"data":{"bvid":"#bvid","aid":#avid,"videos":#包含视频数量,"tid":#分区id,"tname":"#分区","copyright":1,"pic":"#头图","title":"#视频标题","pubdate":#发布时间,"ctime":#创建时间,"desc":"#视频简介","state":0,"attribute":#UnKnow,"duration":#UnKnow,"mission_id":#UnKnow,"rights":{"bp":0,"elec":0,"download":1,"movie":0,"pay":0,"hd5":1,"no_reprint":1,"autoplay":1,"ugc_pay":0,"is_cooperation":0,"ugc_pay_preview":0,"no_background":0},"owner":{"mid":#作者id,"name":"#作者名字","face":"#作者头像"},"stat":{"aid":avid,"view":#观看量,"danmaku":#弹幕,"reply":#评论,"favorite":#收藏,"coin":#投币,"share":#分享,"now_rank":0,"his_rank":0,"like":#点赞,"dislike":#差评,"evaluation":""},"dynamic":"分类？","cid":#UnKnow,"dimension":{"width":1920,"height":1080,"rotate":0},"no_cache":false,"pages":[{"cid":#UnKnow,"page":1,"from":"vupload","part":"fans","duration":#UnKnow,"vid":"","weblink":"","dimension":{"width":1920,"height":1080,"rotate":0}}],"subtitle":{"allow_submit":false,"list":[]}}}</code></pre><p>获取视频简介</p><pre><code class="hljs shell">GET https://api.bilibili.com/x/web-interface/archive/desc?callback=#回调参数&amp;aid=#视频avid&amp;page=&amp;jsonp=jsonp正常返回<span class="hljs-meta">#</span><span class="bash">回调函数({<span class="hljs-string">"code"</span>:0,<span class="hljs-string">"message"</span>:<span class="hljs-string">"0"</span>,<span class="hljs-string">"ttl"</span>:1,<span class="hljs-string">"data"</span>:<span class="hljs-string">"#内容"</span>})</span></code></pre><p>获取视频tags</p><pre><code class="hljs shell">GET https://api.bilibili.com/x/tag/archive/tags?callback=#回调参数&amp;aid=#视频avid&amp;jsonp=jsonp正常返回<span class="hljs-meta">#</span><span class="bash">回调函数({<span class="hljs-string">"code"</span>:0,<span class="hljs-string">"message"</span>:<span class="hljs-string">"0"</span>,<span class="hljs-string">"ttl"</span>:1,<span class="hljs-string">"data"</span>:[{<span class="hljs-string">"tag_id"</span>:716671,<span class="hljs-string">"tag_name"</span>:<span class="hljs-string">"饭圈"</span>,<span class="hljs-string">"cover"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"head_cover"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"content"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"short_content"</span>:<span class="hljs-string">""</span>,<span class="hljs-string">"type"</span>:0,<span class="hljs-string">"state"</span>:0,<span class="hljs-string">"ctime"</span>:1436866637,<span class="hljs-string">"count"</span>:{<span class="hljs-string">"view"</span>:0,<span class="hljs-string">"use"</span>:7196,<span class="hljs-string">"atten"</span>:942},<span class="hljs-string">"is_atten"</span>:0,<span class="hljs-string">"likes"</span>:122,<span class="hljs-string">"hates"</span>:18,<span class="hljs-string">"attribute"</span>:1,<span class="hljs-string">"liked"</span>:1,<span class="hljs-string">"hated"</span>:0}]})</span></code></pre><p>视频点赞接口</p><pre><code class="hljs shell">POST https://api.bilibili.com/x/web-interface/archive/likeaid: #视频avidlike: #1为点赞，2为取消正常返回{"code":0,"message":"0","ttl":1}</code></pre><p>获取你有没有给这个视频点赞</p><pre><code class="hljs shell">GET https://api.bilibili.com/x/web-interface/archive/has/like?jsonp=jsonp&amp;aid=#视频avid&amp;callback=#回调函数</code></pre><p>视频tag点赞接口</p><pre><code class="hljs shell">POST https://api.bilibili.com/x/tag/archive/like2tag_id: #tag的idaid: #视频avidjsonp: jsonp正常返回{"code":0,"message":"0","ttl":1}超出限制{"code":16012,"message":"顶/踩太多次啦,休息休息~","ttl":1}</code></pre><p>评论点赞</p><pre><code class="hljs shell">POST https://api.bilibili.com/x/v2/reply/actionoid: #视频avidtype: 1rpid: #评论的idaction: #1点赞，0取消点赞jsonp: jsonp正常返回{"code":0,"message":"0","ttl":1}</code></pre><p>评论点踩</p><pre><code class="hljs shell">POST https://api.bilibili.com/x/v2/reply/hateoid: #视频avidtype: 1rpid: #评论的idaction: #1点赞，0取消点赞jsonp: jsonp正常返回{"code":0,"message":"0","ttl":1}</code></pre><p>唉。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;因学习时预览到此博客，故做转载记录。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://rorical.blue/archives/80/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;记录B站关于视频的api - Roric
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="API" scheme="https://melodyjerry.github.io/blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>【纪念】博客一周年</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/06/%E3%80%90%E7%BA%AA%E5%BF%B5%E3%80%91%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/06/%E3%80%90%E7%BA%AA%E5%BF%B5%E3%80%91%E5%8D%9A%E5%AE%A2%E4%B8%80%E5%91%A8%E5%B9%B4/</id>
    <published>2020-11-06T13:23:11.000Z</published>
    <updated>2021-01-03T14:28:21.467Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#AFFF00">#</font><font color="#87FF00">博</font><font color="#5FFF00">客</font> <font color="#37FF00">#</font><font color="#0FFF00">坚</font><font color="#00FF28">持</font> <font color="#00FF50">#</font><font color="#00FF78">书</font><font color="#00FFA0">写</font><font color="#00FFC8">是</font><font color="#00FFF0">对</font><font color="#00D7FF">记</font><font color="#00AFFF">忆</font><font color="#0087FF">的</font><font color="#005FFF">缓</font><font color="#0037FF">存</font></p><ul><li>19年10月份决定走开发这条路，博客成了我第一个想坚持的事。</li><li>10月最后一天开始学习研究，到11.6完成页面样式优化，到今年4月扩展博客园，再到仍在筹备的服务器建站。</li><li>一路来花了大量时间金钱，只因为喜欢。</li><li>也正因此在这13个月内，认识了广财的大佬、上海冬哥、北京牛哥、腾讯楠哥、北京阿浪等十几个大神。一路上有他们，还有16、17师兄姐、同事、同学朋友。</li><li>回想过来，也可能是因为高中开始喜欢写随笔吧，或者是自己本来记性不好吧hh。</li><li><font color="#57cbc1">学习路上，懂的越多，不懂的也越多。</font></li><li>总之，正如页脚的那蓝字，<font color="#1bc3fb">“愿(有一天，)自己的努力终将获得回报。”</font></li><li>最后感谢过去所有帮助过我的人们，</li></ul><a id="more"></a><p><img src="https://s1.ax1x.com/2020/11/06/Bh8l9I.png" srcset="/blog/img/loading.gif" alt="Bh8l9I.png"></p><p><img src="https://s1.ax1x.com/2020/11/06/Bh813t.png" srcset="/blog/img/loading.gif" alt="Bh813t.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#AFFF00&quot;&gt;#&lt;/font&gt;&lt;font color=&quot;#87FF00&quot;&gt;博&lt;/font&gt;&lt;font color=&quot;#5FFF00&quot;&gt;客&lt;/font&gt; &lt;font color=&quot;#37FF00&quot;&gt;#&lt;/font&gt;&lt;font color=&quot;#0FFF00&quot;&gt;坚&lt;/font&gt;&lt;font color=&quot;#00FF28&quot;&gt;持&lt;/font&gt; &lt;font color=&quot;#00FF50&quot;&gt;#&lt;/font&gt;&lt;font color=&quot;#00FF78&quot;&gt;书&lt;/font&gt;&lt;font color=&quot;#00FFA0&quot;&gt;写&lt;/font&gt;&lt;font color=&quot;#00FFC8&quot;&gt;是&lt;/font&gt;&lt;font color=&quot;#00FFF0&quot;&gt;对&lt;/font&gt;&lt;font color=&quot;#00D7FF&quot;&gt;记&lt;/font&gt;&lt;font color=&quot;#00AFFF&quot;&gt;忆&lt;/font&gt;&lt;font color=&quot;#0087FF&quot;&gt;的&lt;/font&gt;&lt;font color=&quot;#005FFF&quot;&gt;缓&lt;/font&gt;&lt;font color=&quot;#0037FF&quot;&gt;存&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;19年10月份决定走开发这条路，博客成了我第一个想坚持的事。&lt;/li&gt;
&lt;li&gt;10月最后一天开始学习研究，到11.6完成页面样式优化，到今年4月扩展博客园，再到仍在筹备的服务器建站。&lt;/li&gt;
&lt;li&gt;一路来花了大量时间金钱，只因为喜欢。&lt;/li&gt;
&lt;li&gt;也正因此在这13个月内，认识了广财的大佬、上海冬哥、北京牛哥、腾讯楠哥、北京阿浪等十几个大神。一路上有他们，还有16、17师兄姐、同事、同学朋友。&lt;/li&gt;
&lt;li&gt;回想过来，也可能是因为高中开始喜欢写随笔吧，或者是自己本来记性不好吧hh。&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;#57cbc1&quot;&gt;学习路上，懂的越多，不懂的也越多。&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;总之，正如页脚的那蓝字，&lt;font color=&quot;#1bc3fb&quot;&gt;“愿(有一天，)自己的努力终将获得回报。”&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;最后感谢过去所有帮助过我的人们，&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>纯CSS实现跳动的文字</title>
    <link href="https://melodyjerry.github.io/blog/2020/11/05/%E7%BA%AFCSS%E5%AE%9E%E7%8E%B0%E8%B7%B3%E5%8A%A8%E7%9A%84%E6%96%87%E5%AD%97/"/>
    <id>https://melodyjerry.github.io/blog/2020/11/05/%E7%BA%AFCSS%E5%AE%9E%E7%8E%B0%E8%B7%B3%E5%8A%A8%E7%9A%84%E6%96%87%E5%AD%97/</id>
    <published>2020-11-05T13:23:11.000Z</published>
    <updated>2021-01-03T14:28:21.479Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>CSS代码：</p><pre><code class="hljs css"><span class="hljs-comment">/* start */</span> <span class="hljs-selector-class">.my-face</span> {    <span class="hljs-attribute">animation</span>: my-face <span class="hljs-number">5s</span> infinite ease-in-out;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#00f1ff</span>;    <span class="hljs-attribute">display</span>: inline-block;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;}@-<span class="hljs-keyword">webkit</span>-<span class="hljs-keyword">keyframes</span> my-face {    2%, 24%, 80% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    4%, 68%, 98% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    38%, 6% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    8%, 86% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    10%, 72% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    12%, 64%, 78%, 96% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    14%, 54% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    16% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    18%, 22% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    20%, 36%, 46% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    26%, 50% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    28% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    30%, 40%, 62%, 76%, 88% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    32%, 34%, 66% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    42% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    44%, 70% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    48%, 74%, 82% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    52%, 56%, 60% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    58% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    84% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    90% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    92% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    94% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    0%, 100% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 0) <span class="hljs-built_in">rotate</span>(0);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 0) <span class="hljs-built_in">rotate</span>(0)    }}@<span class="hljs-keyword">keyframes</span> my-face {    2%, 24%, 80% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    4%, 68%, 98% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    38%, 6% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    8%, 86% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    10%, 72% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    12%, 64%, 78%, 96% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    14%, 54% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    16% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    18%, 22% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    20%, 36%, 46% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -1.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    26%, 50% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    28% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(1.5deg)    }    30%, 40%, 62%, 76%, 88% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    32%, 34%, 66% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    42% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-1.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-1.5deg)    }    44%, 70% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    48%, 74%, 82% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, -.5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    52%, 56%, 60% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    58% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    84% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(2.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 1.5px) <span class="hljs-built_in">rotate</span>(2.5deg)    }    90% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    92% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, .5px) <span class="hljs-built_in">rotate</span>(-.5deg)    }    94% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(.5deg);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 2.5px) <span class="hljs-built_in">rotate</span>(.5deg)    }    0%, 100% {        <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translate</span>(0, 0) <span class="hljs-built_in">rotate</span>(0);        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(0, 0) <span class="hljs-built_in">rotate</span>(0)    }}<span class="hljs-comment">/* end */</span></code></pre><p>可以将以上代码写成一个独立的css文件导入，这里提供了现成的：</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//blog-static.cnblogs.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">files</span>/melodyjerry/tiaodongwenzi.css</code></pre><p>然后在想要的地方插入：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-face"</span>&gt;</span>(っ•̀ω•́)っ✎⁾⁾ 开心每一天<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><p>效果就把本博客页面拉到最下方，看看~~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;CSS代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* start */&lt;/span&gt;
 &lt;span class=&quot;hljs-selector-class
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="CSS" scheme="https://melodyjerry.github.io/blog/tags/CSS/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用VS Code创建Vue模板</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/20/%E4%BD%BF%E7%94%A8VS%20Code%E5%88%9B%E5%BB%BAVue%E6%A8%A1%E6%9D%BF/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/20/%E4%BD%BF%E7%94%A8VS%20Code%E5%88%9B%E5%BB%BAVue%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-10-20T15:23:23.000Z</published>
    <updated>2021-01-03T14:28:21.472Z</updated>
    
    <content type="html"><![CDATA[<ol><li>VS Code安装Vetur插件</li></ol><p><img src="https://s1.ax1x.com/2020/10/20/BpLozd.png" srcset="/blog/img/loading.gif" alt="BpLozd.png"></p><ol start="2"><li>新建代码片段：文件–&gt;首选项–&gt;用户代码片段–&gt;点击新建代码片段–&gt;取名vue.json –&gt;确定</li></ol><p><img src="https://s1.ax1x.com/2020/10/20/BpLxJg.png" srcset="/blog/img/loading.gif" alt="BpLxJg.png"></p><ol start="3"><li>使用模板：</li></ol><pre><code class="hljs json">{<span class="hljs-attr">"Print to console"</span>: {        <span class="hljs-attr">"prefix"</span>: <span class="hljs-string">"vue"</span>,        <span class="hljs-attr">"body"</span>: [            <span class="hljs-string">"&lt;!-- $1 --&gt;"</span>,            <span class="hljs-string">"&lt;template&gt;"</span>,            <span class="hljs-string">"&lt;div class='$2'&gt;$5&lt;/div&gt;"</span>,            <span class="hljs-string">"&lt;/template&gt;"</span>,            <span class="hljs-string">""</span>,            <span class="hljs-string">"&lt;script&gt;"</span>,            <span class="hljs-string">"//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）"</span>,            <span class="hljs-string">"//例如：import 《组件名称》 from '《组件路径》';"</span>,            <span class="hljs-string">""</span>,            <span class="hljs-string">"export default {"</span>,            <span class="hljs-string">"//import引入的组件需要注入到对象中才能使用"</span>,            <span class="hljs-string">"components: {},"</span>,            <span class="hljs-string">"data() {"</span>,            <span class="hljs-string">"//这里存放数据"</span>,            <span class="hljs-string">"return {"</span>,            <span class="hljs-string">""</span>,            <span class="hljs-string">"};"</span>,            <span class="hljs-string">"},"</span>,            <span class="hljs-string">"//监听属性 类似于data概念"</span>,            <span class="hljs-string">"computed: {},"</span>,            <span class="hljs-string">"//监控data中的数据变化"</span>,            <span class="hljs-string">"watch: {},"</span>,            <span class="hljs-string">"//方法集合"</span>,            <span class="hljs-string">"methods: {"</span>,            <span class="hljs-string">""</span>,            <span class="hljs-string">"},"</span>,            <span class="hljs-string">"//生命周期 - 创建完成（可以访问当前this实例）"</span>,            <span class="hljs-string">"created() {"</span>,            <span class="hljs-string">""</span>,            <span class="hljs-string">"},"</span>,            <span class="hljs-string">"//生命周期 - 挂载完成（可以访问DOM元素）"</span>,            <span class="hljs-string">"mounted() {"</span>,            <span class="hljs-string">""</span>,            <span class="hljs-string">"},"</span>,            <span class="hljs-string">"beforeCreate() {}, //生命周期 - 创建之前"</span>,            <span class="hljs-string">"beforeMount() {}, //生命周期 - 挂载之前"</span>,            <span class="hljs-string">"beforeUpdate() {}, //生命周期 - 更新之前"</span>,            <span class="hljs-string">"updated() {}, //生命周期 - 更新之后"</span>,            <span class="hljs-string">"beforeDestroy() {}, //生命周期 - 销毁之前"</span>,            <span class="hljs-string">"destroyed() {}, //生命周期 - 销毁完成"</span>,            <span class="hljs-string">"activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发"</span>,            <span class="hljs-string">"}"</span>,            <span class="hljs-string">"&lt;/script&gt;"</span>,            <span class="hljs-string">"&lt;style lang='scss' scoped&gt;"</span>,            <span class="hljs-string">"//@import url($3); 引入公共css类"</span>,            <span class="hljs-string">"$4"</span>,            <span class="hljs-string">"&lt;/style&gt;"</span>        ],        <span class="hljs-attr">"description"</span>: <span class="hljs-string">"Log output to console"</span>    }}</code></pre><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;VS Code安装Vetur插件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/20/BpLozd.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;BpLozd.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;新建代码片段：文件–&amp;gt;首选项–&amp;gt;用户代码片段–&amp;gt;点击新建代码片段–&amp;gt;取名vue.json –&amp;gt;确定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/20/BpLxJg.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;BpLxJg.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;使用模板：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;hljs json&quot;&gt;{
	&lt;span class=&quot;hljs-attr&quot;&gt;&quot;Print to console&quot;&lt;/span&gt;: {
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;prefix&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;vue&quot;&lt;/span&gt;,
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;body&quot;&lt;/span&gt;: [
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;!-- $1 --&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;template&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;div class=&#39;$2&#39;&amp;gt;$5&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/template&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;script&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//例如：import 《组件名称》 from &#39;《组件路径》&#39;;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;export default {&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//import引入的组件需要注入到对象中才能使用&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;components: {},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;data() {&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//这里存放数据&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;return {&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;};&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//监听属性 类似于data概念&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;computed: {},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//监控data中的数据变化&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;watch: {},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//方法集合&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;methods: {&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//生命周期 - 创建完成（可以访问当前this实例）&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;created() {&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//生命周期 - 挂载完成（可以访问DOM元素）&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;mounted() {&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;},&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;beforeCreate() {}, //生命周期 - 创建之前&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;beforeMount() {}, //生命周期 - 挂载之前&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;beforeUpdate() {}, //生命周期 - 更新之前&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;updated() {}, //生命周期 - 更新之后&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;beforeDestroy() {}, //生命周期 - 销毁之前&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;destroyed() {}, //生命周期 - 销毁完成&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;activated() {}, //如果页面有keep-alive缓存功能，这个函数会触发&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;}&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/script&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;style lang=&#39;scss&#39; scoped&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;//@import url($3); 引入公共css类&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;$4&quot;&lt;/span&gt;,
            &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/style&amp;gt;&quot;&lt;/span&gt;
        ],
        &lt;span class=&quot;hljs-attr&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;&quot;Log output to console&quot;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Vue" scheme="https://melodyjerry.github.io/blog/tags/Vue/"/>
    
      <category term="VS Code" scheme="https://melodyjerry.github.io/blog/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>npm run dev 报错：missing script:dev</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/12/npm-run-dev-%E6%8A%A5%E9%94%99%EF%BC%9Amissing-scriptdev/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/12/npm-run-dev-%E6%8A%A5%E9%94%99%EF%BC%9Amissing-scriptdev/</id>
    <published>2020-10-12T02:57:12.000Z</published>
    <updated>2021-01-03T14:28:21.462Z</updated>
    
    <content type="html"><![CDATA[<p>学习Vue-CLI时，使用命令<code>npm run dev</code>报错：</p><p><img src="https://s1.ax1x.com/2020/10/12/02dv5T.png" srcset="/blog/img/loading.gif" alt="02dv5T.png"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>查看了vue项目中的<code>package.json</code>文件，我的<code>scrip</code>参数信息：</p><p><img src="https://s1.ax1x.com/2020/10/12/02wUzQ.png" srcset="/blog/img/loading.gif" alt="02wUzQ.png"></p><p>在<code>script</code>里，并没有<code>dev</code>，而是<code>serve</code>，应该用<code>npm run serve</code>命令运行vue项目即可。</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Vue-CLI时，使用命令&lt;code&gt;npm run dev&lt;/code&gt;报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/12/02dv5T.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;02dv5T.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h1&gt;&lt;p&gt;查看了vue项目中的&lt;code&gt;package.json&lt;/code&gt;文件，我的&lt;code&gt;scrip&lt;/code&gt;参数信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/12/02wUzQ.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;02wUzQ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;script&lt;/code&gt;里，并没有&lt;code&gt;dev&lt;/code&gt;，而是&lt;code&gt;serve&lt;/code&gt;，应该用&lt;code&gt;npm run serve&lt;/code&gt;命令运行vue项目即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>js快速入门笔记</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/09/js%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/09/js%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-09T12:47:11.000Z</published>
    <updated>2021-01-03T14:28:21.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JavaScript是一种属于网络的高级脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p><blockquote><ul><li>是一种解释性脚本语言（代码不进行预编译）。</li><li>主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。</li><li>可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。</li><li>跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。</li><li>Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。</li><li>Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。</li><li>可以实现web页面的人机交互。</li></ul></blockquote><h1 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h1><h2 id="第一个JS程序"><a href="#第一个JS程序" class="headerlink" title="第一个JS程序"></a>第一个JS程序</h2><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>alert(<span class="hljs-string">"hello javascript"</span>); <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js/hello.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596870345761-260e5e7f-141d-4292-ab66-a5dfd8d6b2a3.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code class="hljs gml"><span class="hljs-comment">// 1.变量</span><span class="hljs-keywords">var</span> num =<span class="hljs-number">1</span>;<span class="hljs-string">"hello word"</span><span class="hljs-comment">// alert(num);</span><span class="hljs-comment">// 2.条件控制</span><span class="hljs-keywords">var</span> <span class="hljs-symbol">score</span> = <span class="hljs-number">70</span>;<span class="hljs-keywords">if</span>(<span class="hljs-symbol">score</span>&gt;=<span class="hljs-number">60</span> &amp;&amp; <span class="hljs-symbol">score</span>&lt;<span class="hljs-number">70</span>){    alert(<span class="hljs-string">"60-70"</span>);}<span class="hljs-keywords">else</span> <span class="hljs-keywords">if</span>(<span class="hljs-symbol">score</span>&gt;=<span class="hljs-number">70</span> &amp;&amp; <span class="hljs-symbol">score</span>&lt;<span class="hljs-number">80</span>) {    alert(<span class="hljs-string">"70-80"</span>);}<span class="hljs-keywords">else</span>{    alert(<span class="hljs-string">"other"</span>)}<span class="hljs-comment">//console.log(score) 弹窗</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596876397929-31ba3a18-2fbd-4e00-9386-215d0c120a59.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>调试：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596876982560-df230635-9ce0-4cc8-8600-f9a9d94891c0.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h2 id="数据类型快速浏览"><a href="#数据类型快速浏览" class="headerlink" title="数据类型快速浏览"></a>数据类型快速浏览</h2><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>js不区分小数和整数，Number</p><pre><code class="hljs angelscript"><span class="hljs-number">123</span>             <span class="hljs-comment">//整数</span><span class="hljs-number">123.1</span>           <span class="hljs-comment">//浮点数</span><span class="hljs-number">1.123e3</span>     <span class="hljs-comment">//科学计数法</span><span class="hljs-number">-99</span>             <span class="hljs-comment">//负数</span>NAN             <span class="hljs-comment">// not a number</span>Infinity    <span class="hljs-comment">// 无穷大</span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><pre><code class="hljs 1c"><span class="hljs-string">"abc"</span><span class="hljs-string">"bac</span></code></pre><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><pre><code class="hljs yaml"><span class="hljs-literal">true</span> <span class="hljs-literal">false</span></code></pre><h3 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h3><pre><code class="hljs 1c"><span class="hljs-meta">&amp;&amp;</span><span class="hljs-string">||</span>!</code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><pre><code class="hljs asciidoc">= <span class="hljs-section">== 等于               （类型不一样，值一样，结果也为true）</span><span class="hljs-section">=== 绝对等于    （类型一样，值一样，结果才为true）</span>NaN===NaNfalseisNaN(NaN)true(1/3)===(1-2/3)falseMath.abs(1/3-(1-2/3))&lt;0.000000001true</code></pre><p>注：</p><p>坚持不用==做比较</p><p>NaN===NaN (这个数与所有数都不相等，包括自己）</p><p>isNaN(NaN)</p><p>尽量避免使用浮点数进行运算，存在精度问题</p><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><pre><code class="hljs actionscript"><span class="hljs-literal">null</span>            <span class="hljs-comment">//空</span><span class="hljs-literal">undefined</span> <span class="hljs-comment">//未定义</span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Java中的数组是一系列相同类型的数，JS中没有这一要求</p><pre><code class="hljs angelscript">var arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-string">'hello'</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>]new Array(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);arr[<span class="hljs-number">1</span>];<span class="hljs-number">2</span>arr[<span class="hljs-number">8</span>]undefinedvar person = {     name:<span class="hljs-string">"nick"</span>,age:<span class="hljs-number">3</span>,tags:[<span class="hljs-string">'js'</span>,<span class="hljs-string">'java'</span>,<span class="hljs-string">'web'</span>]}person.name<span class="hljs-string">"nick"</span>person.age<span class="hljs-number">3</span>person.tags(<span class="hljs-number">3</span>) [<span class="hljs-string">"js"</span>, <span class="hljs-string">"java"</span>, <span class="hljs-string">"web"</span>]</code></pre><h2 id="严格检查模式"><a href="#严格检查模式" class="headerlink" title="严格检查模式"></a>严格检查模式</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">//全局变量</span></span>    i = 1;        /局部变量<span class="javascript"><span class="hljs-meta">    'use strict'</span></span><span class="javascript">        <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><ul><li>正常字符串我们使用单引号，或者双引号包裹</li><li>注意转义字符： '  \t  \n  \u4e2d(Unicode)  \x41(ASCII)</li></ul><pre><code class="hljs javascript"> &lt;script&gt;        <span class="hljs-string">'user strict'</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'a\''</span>);        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"a"</span>);&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp">  /</span><span class="hljs-regexp">/长字符串</span><span class="hljs-regexp">var msg = `hello</span><span class="hljs-regexp">world`</span><span class="hljs-regexp"></span><span class="hljs-regexp">/</span><span class="hljs-regexp">/拼接</span><span class="hljs-regexp">let name = "nick";</span><span class="hljs-regexp">let age = 3;</span><span class="hljs-regexp">let msg2 = `你好啊，${name}`;</span><span class="hljs-regexp">console.log(msg2);</span><span class="hljs-regexp">你好啊，nick</span><span class="hljs-regexp"></span><span class="hljs-regexp"></span><span class="hljs-regexp">/</span><span class="hljs-regexp">/字符串函数</span><span class="hljs-regexp">/</span><span class="hljs-regexp">/求长度</span><span class="hljs-regexp">var student ="student";</span><span class="hljs-regexp">console.log(student.length);</span><span class="hljs-regexp">7</span><span class="hljs-regexp">/</span><span class="hljs-regexp">/下标索引</span><span class="hljs-regexp">console.log(student[0]);</span><span class="hljs-regexp">s</span><span class="hljs-regexp">/</span><span class="hljs-regexp">/不能更改索引对应的值</span><span class="hljs-regexp">student[0]=1;</span><span class="hljs-regexp">1</span><span class="hljs-regexp">student</span><span class="hljs-regexp">"student"</span><span class="hljs-regexp"></span><span class="hljs-regexp">/</span><span class="hljs-regexp">/大小写转换</span><span class="hljs-regexp">student.toUpperCase();</span><span class="hljs-regexp">"STUDENT"</span><span class="hljs-regexp">student.toLowerCase();</span><span class="hljs-regexp">"student"</span><span class="hljs-regexp">/</span><span class="hljs-regexp">/获取下标</span><span class="hljs-regexp">student.indexOf('t');</span><span class="hljs-regexp">1</span><span class="hljs-regexp">/</span><span class="hljs-regexp">/截取</span><span class="hljs-regexp">[1,)</span><span class="hljs-regexp">student.substring(1);</span><span class="hljs-regexp">"tudent"</span><span class="hljs-regexp">[1,3)</span><span class="hljs-regexp">student.substring(1,3);</span><span class="hljs-regexp">"tu"</span></code></pre><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><p><strong>Array可以包含任意的数据类型</strong></p><p>**<br>**</p><p>   <img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596887090223-b47447be-19a4-49a5-a569-df0f79d6dabe.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>   <img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596887270134-f384d64b-6094-43c6-907c-7debab02a264.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>   <img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596887761370-4cfc888f-0803-4a7b-ac88-6145e572aa61.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><pre><code class="hljs gml"><span class="hljs-comment">// 定义person对象</span><span class="hljs-comment">// 属性是键值对</span><span class="hljs-keywords">var</span> person = {    name:<span class="hljs-string">'sinlearn'</span>,    age:<span class="hljs-number">23</span>,    email:<span class="hljs-string">'1111@qq.com'</span>,    <span class="hljs-symbol">score</span>:<span class="hljs-number">90</span>    <span class="hljs-comment">//最后一个属性不要加逗号</span>}</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596888544242-5f9f6b34-3190-4de7-9e49-9b7e40ebe5f9.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>其它的和java类似</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> age = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>];</span><span class="actionscript">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> n <span class="hljs-keyword">in</span> age){</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(age[n]);</span>    }<span class="actionscript">    age.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(value)</span> </span>{</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(value);</span>    })<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1596889277412-213bd0ea-474d-44fc-8424-a58be43605a9.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h2 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h2><pre><code class="hljs processing">&lt;script&gt;    <span class="hljs-comment">//ES6 Map</span>    <span class="hljs-string">'use strict'</span>    var <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> Map([[<span class="hljs-string">'tom'</span>,<span class="hljs-number">99</span>],[<span class="hljs-string">'jack'</span>,<span class="hljs-number">98</span>],[<span class="hljs-string">'michal'</span>,<span class="hljs-number">82</span>]]);    let tom = <span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(<span class="hljs-string">'tom'</span>);    console.<span class="hljs-built_in">log</span>(tom);    <span class="hljs-built_in">map</span>.<span class="hljs-built_in">set</span>(<span class="hljs-string">'nick'</span>,<span class="hljs-number">100</span>);    <span class="hljs-built_in">map</span>.delete(<span class="hljs-string">"nick"</span>);    <span class="hljs-comment">//ES6 Set: 无序不重复集合</span>    let <span class="hljs-built_in">set</span> = <span class="hljs-keyword">new</span> Set([<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]);    <span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-number">2</span>);    <span class="hljs-built_in">set</span>.<span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>);    <span class="hljs-built_in">set</span>.delete(<span class="hljs-number">3</span>);    <span class="hljs-built_in">set</span>.has(<span class="hljs-number">5</span>);&lt;/script&gt;</code></pre><h2 id="函数及面向对象"><a href="#函数及面向对象" class="headerlink" title="函数及面向对象"></a>函数及面向对象</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><blockquote><p>定义范式一：</p></blockquote><pre><code class="hljs gml">function <span class="hljs-built_in">abs</span>(<span class="hljs-symbol">x</span>) {    <span class="hljs-keywords">if</span> (<span class="hljs-symbol">x</span>&gt;=<span class="hljs-number">0</span>){                <span class="hljs-keywords">return</span> <span class="hljs-symbol">x</span>;    }<span class="hljs-keywords">else</span> {                <span class="hljs-keywords">return</span> -<span class="hljs-symbol">x</span>;    }}</code></pre><p>一旦执行return代表函数结束，返回结果，如果没有执行return，函数也会返回结果，结果是undefined</p><blockquote><p>定义方式二：</p></blockquote><pre><code class="hljs gml"><span class="hljs-keywords">var</span> <span class="hljs-built_in">abs</span> = function(<span class="hljs-symbol">x</span>) {    <span class="hljs-keywords">if</span> (<span class="hljs-symbol">x</span>&gt;=<span class="hljs-number">0</span>){                <span class="hljs-keywords">return</span> <span class="hljs-symbol">x</span>;    }<span class="hljs-keywords">else</span> {                <span class="hljs-keywords">return</span> -<span class="hljs-symbol">x</span>;    }}</code></pre><p>function(x) {….}这是一个匿名函数，但是可以把结果赋值给abs,通过abs就可以调用函数。</p><blockquote><p>参数问题：</p><p>javascript可以传任意个参数，也可以不传参数</p><p>参数进来是否存在的问题？假设不存在参数，如何规避？</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1597838482581-4240e6b3-cb45-4bd7-9833-88206de330ba.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1597838696621-9d6cb9ce-71c1-42fa-a340-83f3b1f6561e.png" srcset="/blog/img/loading.gif" alt="image.png"></p><blockquote><p>参数存在多个：<strong>arguments</strong>是JS免费赠送的一个关键字；代表传递进来的所有参数，是一个列表</p></blockquote><pre><code class="hljs matlab">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">"x--&gt;"</span>+x);<span class="hljs-keyword">for</span> (let <span class="hljs-built_in">i</span> = <span class="hljs-number">0</span>; <span class="hljs-built_in">i</span> &lt;arguments.<span class="hljs-built_in">length</span> ; <span class="hljs-built_in">i</span>++) {    console.<span class="hljs-built_in">log</span>(arguments[<span class="hljs-built_in">i</span>]);}</code></pre><blockquote><p>rest</p><p>ES6引入的新特性，获取除了已经定义的参数之外的所有参数~ …,只能写在最后面</p></blockquote><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span><span class="hljs-params">(a,b,<span class="hljs-rest_arg">...rest</span>)</span></span>{            console.log(a);            console.log(b);            console.log(rest);}</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1597839317387-0f55f22b-4cc6-43ab-97f4-721b586ceacf.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>在javascript中，var定义变量实际是有作用域的。</p><p>假设在函数体中声明，则在函数体外不可以使用，（非要实现的话，后面可以研究一下闭包）</p><p>内部函数可以访问外部函数的成员，相反则不可以</p><p>在JS中函数查找变量从自身函数开始，由“内”向“外”查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数变量。</p><p>JS执行引擎会自动提升变量的声明，但不会提升变量的赋值。这是JS的一个规范，要养成习惯。</p><pre><code class="hljs javascript">&lt;script&gt;    <span class="hljs-keyword">var</span> r;   <span class="hljs-comment">//全局变量</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>{   <span class="hljs-comment">// var x,y,z,a,b,c,d;</span>        <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;        <span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>;    }   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>{          <span class="hljs-keyword">var</span> x = <span class="hljs-string">'a'</span>;          <span class="hljs-keyword">return</span> x;    }    x = x +<span class="hljs-number">2</span>;&lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp">&lt;script&gt;</span><span class="hljs-regexp">   var x = 'xxx';</span><span class="hljs-regexp">     alert(x);</span><span class="hljs-regexp">     alert(window.x);</span><span class="hljs-regexp">     window.alert(x); /</span><span class="hljs-regexp">/window 表示全局对象</span><span class="hljs-regexp">&lt;/</span>script&gt;<span class="hljs-comment">//把代码全部放入自己定义的唯一空间名字中，降低全局命名空间的问题。</span><span class="hljs-keyword">var</span> KuangAPP = {};    KuangAPP.name = <span class="hljs-string">"kuangsheng"</span>;    KuangAPP.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>{       <span class="hljs-built_in">console</span>.log(a+b);}KuangAPP.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);JQuery --- $</code></pre><blockquote><p>局部作用域：let</p><p>建议用let去定义局部作用域的变量</p></blockquote><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span><span class="hljs-params">()</span> </span>{</span><span class="actionscript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">100</span> ; i++) {</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(i)</span>        }<span class="javascript">        <span class="hljs-built_in">console</span>.log(i+<span class="hljs-number">1</span>)    </span>    }    aaa();  1- 101<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span><span class="hljs-params">()</span> </span>{</span><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">100</span> ; i++) {</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(i)</span>        }<span class="javascript">        <span class="hljs-built_in">console</span>.log(i+<span class="hljs-number">1</span>)    <span class="hljs-comment">// Uncaught ReferenceError: i is not defined</span></span>    }    aaa();<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><blockquote><p>常量const</p><p>在ES6之前，怎么定义常量：只能用全部大写字母命名的变量就是常量,通过规范建议不要修改这样的值</p><p>在ES6引入了常量关键字: const，就不能修改了</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1281683/1597841574252-10b3c53e-0a76-432c-b5b8-c85f121c69ed.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> student= {</span><span class="actionscript">        name:<span class="hljs-string">"小明"</span>,</span>        birth: 1997,<span class="actionscript">        age: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{</span><span class="javascript">            <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();</span><span class="actionscript">            <span class="hljs-keyword">return</span> now - <span class="hljs-keyword">this</span>.birth;</span>        }    }<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p><p>对象调用： student.name</p><p>方法调用： student.age()</p><p>this.代表什么? </p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>{</span><span class="javascript">        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();</span><span class="actionscript">        <span class="hljs-keyword">return</span> now - <span class="hljs-keyword">this</span>.birth;</span>    }<span class="actionscript">    <span class="hljs-keyword">var</span> student= {</span><span class="actionscript">        name:<span class="hljs-string">"小明"</span>,</span>        birth: 1997,        age: getAge()    }<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>在js中可以通过apply控制this的指向</p><pre><code class="hljs gcode">getAge.apply<span class="hljs-comment">(student,[])</span> <span class="hljs-comment">//this指向了student,参数为空</span></code></pre><h2 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><a href="https://www.runoob.com/js/js-obj-date.html" target="_blank" rel="noopener">https://www.runoob.com/js/js-obj-date.html</a></p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><pre><code class="hljs scilab">var text = <span class="hljs-string">'{ "</span>sites<span class="hljs-string">" : ['</span> +    <span class="hljs-string">'{ "</span>name<span class="hljs-string">":"</span>Runoob<span class="hljs-string">" , "</span>url<span class="hljs-string">":"</span>www.runoob.com<span class="hljs-string">" },'</span> +    <span class="hljs-string">'{ "</span>name<span class="hljs-string">":"</span>Google<span class="hljs-string">" , "</span>url<span class="hljs-string">":"</span>www.google.com<span class="hljs-string">" },'</span> +    <span class="hljs-string">'{ "</span>name<span class="hljs-string">":"</span>Taobao<span class="hljs-string">" , "</span>url<span class="hljs-string">":"</span>www.taobao.com<span class="hljs-string">" } ]}'</span>;    obj = JSON.parse(text);</code></pre><h3 id="闭包（难点）"><a href="#闭包（难点）" class="headerlink" title="闭包（难点）"></a>闭包（难点）</h3><h3 id="箭头函数（新特性）"><a href="#箭头函数（新特性）" class="headerlink" title="箭头函数（新特性）"></a>箭头函数（新特性）</h3><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h3 id="class-继承（新特性）"><a href="#class-继承（新特性）" class="headerlink" title="class 继承（新特性）"></a>class 继承（新特性）</h3><h3 id="原型链继承（难点）"><a href="#原型链继承（难点）" class="headerlink" title="原型链继承（难点）"></a>原型链继承（难点）</h3><h2 id="操作Dom元素"><a href="#操作Dom元素" class="headerlink" title="操作Dom元素"></a>操作Dom元素</h2><h3 id="插入Dom"><a href="#插入Dom" class="headerlink" title="插入Dom"></a>插入Dom</h3><h3 id="更新Dom"><a href="#更新Dom" class="headerlink" title="更新Dom"></a>更新Dom</h3><h3 id="删除Dom"><a href="#删除Dom" class="headerlink" title="删除Dom"></a>删除Dom</h3><h2 id="操作Bom元素"><a href="#操作Bom元素" class="headerlink" title="操作Bom元素"></a>操作Bom元素</h2><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><h3 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h3><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;JavaScript是一种属于网络的高级脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Javascript" scheme="https://melodyjerry.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>[转]vue中“:”、“.”、“@”的意义</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/09/vue%E4%B8%AD%E2%80%9C%E2%80%9D%E3%80%81%E2%80%9C.%E2%80%9D%E3%80%81%E2%80%9C@%E2%80%9D%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/09/vue%E4%B8%AD%E2%80%9C%E2%80%9D%E3%80%81%E2%80%9C.%E2%80%9D%E3%80%81%E2%80%9C@%E2%80%9D%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2020-10-09T12:47:11.000Z</published>
    <updated>2021-01-03T14:28:21.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载：<a href="https://blog.csdn.net/yangfengjueqi/article/details/86536347" target="_blank" rel="noopener">https://blog.csdn.net/yangfengjueqi/article/details/86536347</a></p></blockquote><ul><li>“:” 是指令 “v-bind”的缩写</li><li>“@”是指令“v-on”的缩写</li><li>“.”是修饰符<a id="more"></a>详细如下：</li></ul><h3 id="v-bind-指令可以用于响应式地更新-HTML-特性："><a href="#v-bind-指令可以用于响应式地更新-HTML-特性：" class="headerlink" title="v-bind 指令可以用于响应式地更新 HTML 特性："></a><code>v-bind</code> 指令可以用于响应式地更新 HTML 特性：</h3><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">"app-2"</span>&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">"message"</span>&gt;</span>鼠标悬停几秒钟查看此处动态绑定的提示信息！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-string">``</span><span class="hljs-keyword">var</span> app2 = <span class="hljs-keyword">new</span> Vue({<span class="hljs-attr">el</span>: <span class="hljs-string">'#app-2'</span>,<span class="hljs-attr">data</span>: {<span class="hljs-attr">message</span>: <span class="hljs-string">'页面加载于 '</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()}})</code></pre><p>该指令的意思是：“将这个元素节点的 <code>title</code> 特性和 Vue 实例的 <code>message</code> 属性保持一致”。如果你再次打开浏览器的 JavaScript 控制台，输入 <code>app2.message = '新消息'</code>，就会再一次看到这个绑定了 <code>title</code> 特性的 HTML 已经进行了更新。</p><h3 id="v-on-指令，它用于监听-DOM-事件："><a href="#v-on-指令，它用于监听-DOM-事件：" class="headerlink" title="v-on 指令，它用于监听 DOM 事件："></a><code>v-on</code> 指令，它用于监听 DOM 事件：</h3><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span> v-<span class="hljs-keyword">on</span>:<span class="hljs-title">click</span>=<span class="hljs-string">"doSomething"</span>&gt;...&lt;/<span class="hljs-title">a</span>&gt;</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue.js 管理所有模板的<a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="noopener">单页面应用程序 (SPA - single page application)</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue.js 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p><h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><a href="https://cn.vuejs.org/v2/guide/syntax.html#v-bind-缩写" target="_blank" rel="noopener"><code>v-bind</code> 缩写</a></h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">"url"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">"url"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><a href="https://cn.vuejs.org/v2/guide/syntax.html#v-on-缩写" target="_blank" rel="noopener"><code>v-on</code> 缩写</a></h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 完整语法 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"doSomething"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-comment">&lt;!-- 缩写 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"doSomething"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><p>它们看起来可能与普通的 HTML 略有不同，但 <code>:</code> 与 <code>@</code> 对于特性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p><p><a href="https://cn.vuejs.org/v2/guide/syntax.html#修饰符" target="_blank" rel="noopener">修饰符</a></p><p>修饰符 (Modifiers) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> v-<span class="hljs-keyword">on</span>:submit.prevent=<span class="hljs-string">"onSubmit"</span>&gt;...&lt;/<span class="hljs-keyword">form</span>&gt;</code></pre><p>官方文档：<a href="https://cn.vuejs.org/v2/guide/syntax.html#参数" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/syntax.html#%E5%8F%82%E6%95%B0</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://blog.csdn.net/yangfengjueqi/article/details/86536347&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/yangfengjueqi/article/details/86536347&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;“:” 是指令 “v-bind”的缩写&lt;/li&gt;
&lt;li&gt;“@”是指令“v-on”的缩写&lt;/li&gt;
&lt;li&gt;“.”是修饰符&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vue" scheme="https://melodyjerry.github.io/blog/tags/Vue/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue指令：v-clock解决页面闪烁问题</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/08/Vue%E6%8C%87%E4%BB%A4%EF%BC%9Av-clock%E8%A7%A3%E5%86%B3%E9%A1%B5%E9%9D%A2%E9%97%AA%E7%83%81%E9%97%AE%E9%A2%98/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/08/Vue%E6%8C%87%E4%BB%A4%EF%BC%9Av-clock%E8%A7%A3%E5%86%B3%E9%A1%B5%E9%9D%A2%E9%97%AA%E7%83%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-08T06:47:11.000Z</published>
    <updated>2021-01-03T14:28:21.419Z</updated>
    
    <content type="html"><![CDATA[<p>如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标签加了css样式），当响应回来的时候改标签默认将css样式去除。</p><ul><li>此指令可以解决使用插值表达式页面闪烁问题。</li></ul><p>将该指令加在html标签中时，可以在该文件中加<code>style</code>属性为<code>display：none</code>，例子如下：</p><pre><code class="hljs css">&lt;!<span class="hljs-selector-tag">--v-clock</span> 解决闪烁问题<span class="hljs-selector-tag">--</span>&gt;&lt;<span class="hljs-selector-tag">style</span>&gt;    <span class="hljs-selector-attr">[v-clock]</span> {        <span class="hljs-attribute">display</span>: none;    }&lt;/style&gt;</code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"#app"</span> <span class="hljs-attr">v-clock</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{name}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果网速慢，而该标签内容是变量没有请求响应回来的时候，页面上先不显示该标签（vue给该标签加了css样式），当响应回来的时候改标签默认将css样式去除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;此指令可以解决使用插值表达式页面闪烁问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将该指令加在html标签中时，可以在该文件中加&lt;code&gt;style&lt;/code&gt;属性为&lt;code&gt;display：none&lt;/code&gt;，例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs css&quot;&gt;&amp;lt;!&lt;span class=&quot;hljs-selector-tag&quot;&gt;--v-clock&lt;/span&gt; 解决闪烁问题&lt;span class=&quot;hljs-selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class=&quot;hljs-selector-tag&quot;&gt;style&lt;/span&gt;&amp;gt;
    &lt;span class=&quot;hljs-selector-attr&quot;&gt;[v-clock]&lt;/span&gt; {
        &lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;: none;
    }
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;#app&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;v-clock&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vue" scheme="https://melodyjerry.github.io/blog/tags/Vue/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue踩坑记录</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/06/Vue%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/06/Vue%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-06T13:47:11.000Z</published>
    <updated>2021-01-03T14:28:21.418Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="组件名必须全小写"><a href="#组件名必须全小写" class="headerlink" title="组件名必须全小写"></a>组件名必须全小写</h1><p>官方文档没有声明<strong>组件名必须全小写</strong></p><pre><code class="hljs js">Vue.component(<span class="hljs-string">'my-component-name'</span>, {  <span class="hljs-comment">// ... options ...</span>})</code></pre><p>但是我的第一个Vue组件踩了这个坑</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My First Vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!-- view层 模板 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- &lt;li&gt; Hello, MelodyJerry! &lt;/li&gt; --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">melody</span>&gt;</span> Hello, MelodyJerry! <span class="hljs-tag">&lt;/<span class="hljs-name">melody</span>&gt;</span>        <span class="hljs-comment">&lt;!-- &lt;MelodyJerry&gt; Hello, MelodyJerry! &lt;/MelodyJerry&gt; --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-comment">&lt;!-- 1.导入Vue.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-comment">//先注册组件，定义一个Vue组件component</span></span><span class="actionscript">        Vue.component(<span class="hljs-string">"melody"</span>,{ <span class="hljs-comment">//组件名必须全小写，一旦有大写，就会注册错误</span></span><span class="actionscript">        <span class="hljs-comment">// Vue.component("MelodyJerry",{ </span></span><span class="handlebars"><span class="xml">            template: '<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> This is a Vue-Component. <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>'</span></span>        }); <span class="actionscript">        <span class="hljs-comment">//再实例化Vue</span></span><span class="actionscript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue({</span><span class="actionscript">            el: <span class="hljs-string">"#app"</span>,</span>        });    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>错误显示：</p><pre><code class="hljs autohotkey"><span class="hljs-built_in">Hello,</span> MelodyJerry!</code></pre><p>正确显示，应该是：</p><pre><code class="hljs mercury">· This <span class="hljs-keyword">is</span> a Vue-Component.</code></pre><h1 id="methods和computed里调用方法要不要"><a href="#methods和computed里调用方法要不要" class="headerlink" title="methods和computed里调用方法要不要()"></a>methods和computed里调用方法要不要()</h1><ul><li>调用<code>methods</code>里的方法,<code>得用()</code><ul><li><code>methods</code>是<code>方法</code></li></ul></li><li>调用<code>computed</code>的方法,<code>不能用()</code><ul><li><code>computed</code>是<code>计算属性</code>，是<code>属性</code></li></ul></li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My First Vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!-- view层 模板 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 调用methods里的方法,得用() --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>currentTime1: {{currentTime1()}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 调用计算属性computed的方法,不能用() --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>currentTime2: {{currentTime2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 1.导入Vue.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue({</span><span class="actionscript">            el: <span class="hljs-string">"#app"</span>,</span>            data: {<span class="actionscript">                message: <span class="hljs-string">"hello,melodyjerry."</span></span>            },            methods: {<span class="actionscript">                currentTime1: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{</span><span class="javascript">                    <span class="hljs-keyword">var</span> Xmas95 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"December 25, 1995 23:15:30"</span>);</span><span class="actionscript">                    <span class="hljs-keyword">return</span> Xmas95.getDay(); <span class="hljs-comment">//1;返回数值代表星期几：0代表星期日,1代表星期一,2代表星期二</span></span>                },            },<span class="actionscript">            <span class="hljs-comment">//计算属性</span></span><span class="actionscript">            computed: { <span class="hljs-comment">//methods、computed中的方法名不能重名;重名后，只会调用methods中的方法</span></span><span class="actionscript">                currentTime2: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{</span><span class="actionscript">                <span class="hljs-comment">//currentTime1: function() {</span></span><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">//返回一个时间戳</span></span>                },            },        })    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h1 id="methods、computed中的方法名不能重名"><a href="#methods、computed中的方法名不能重名" class="headerlink" title="methods、computed中的方法名不能重名"></a>methods、computed中的方法名不能重名</h1><ul><li>重名后，只会调用methods中的方法</li></ul><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My First Vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!-- view层 模板 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 调用方法得用() --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>currentTime1: {{currentTime1()}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>currentTime1: {{currentTime1}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 1.导入Vue.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue({</span><span class="actionscript">            el: <span class="hljs-string">"#app"</span>,</span>            data: {<span class="actionscript">                message: <span class="hljs-string">"hello,melodyjerry."</span></span>            },            methods: {<span class="actionscript">                currentTime1: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{</span><span class="javascript">                    <span class="hljs-keyword">var</span> Xmas95 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"December 25, 1995 23:15:30"</span>);</span><span class="actionscript">                    <span class="hljs-keyword">return</span> Xmas95.getDay(); <span class="hljs-comment">//1;返回数值代表星期几：0代表星期日,1代表星期一,2代表星期二</span></span>                },            },<span class="actionscript">            <span class="hljs-comment">//计算属性</span></span><span class="actionscript">            computed: { <span class="hljs-comment">//methods、computed中的方法名不能重名;重名后，只会调用methods中的方法</span></span><span class="actionscript">                currentTime1: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{</span><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now(); <span class="hljs-comment">//返回一个时间戳</span></span>                },            },        })    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>页面显示：</p><pre><code class="hljs http"><span class="hljs-attribute">currentTime1</span>: 1<span class="hljs-attribute">currentTime1</span>: function () { [native code] }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;组件名必须全小写&quot;&gt;&lt;a href=&quot;#组件名必须全小写&quot; class=&quot;headerlink&quot; title=&quot;组件名必须全小写&quot;&gt;&lt;/a&gt;组件名必须全小写&lt;/h1&gt;&lt;p&gt;官方文档没有声明&lt;strong&gt;组件名必须全小写&lt;/s
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vue" scheme="https://melodyjerry.github.io/blog/tags/Vue/"/>
    
      <category term="前端" scheme="https://melodyjerry.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>VS Code建立代码模板vue</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/06/VS-Code%E5%BB%BA%E7%AB%8B%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BFvue/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/06/VS-Code%E5%BB%BA%E7%AB%8B%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BFvue/</id>
    <published>2020-10-06T12:47:11.000Z</published>
    <updated>2021-01-03T14:28:21.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装Vetur插件"><a href="#1-安装Vetur插件" class="headerlink" title="1. 安装Vetur插件"></a>1. 安装Vetur插件</h1><h1 id="2-新建用户代码片段"><a href="#2-新建用户代码片段" class="headerlink" title="2.新建用户代码片段"></a>2.新建用户代码片段</h1><p><code>文件</code>–&gt;<code>首选项</code>–&gt;<code>用户代码片段</code>–&gt;<code>点击新建代码片段</code>–取名<code>vue.json</code></p><pre><code class="hljs jso">{  "Print to console": {    "prefix": "vue",    "body": [      "&lt;!-- $0 --&gt;",      "&lt;template&gt;",      "  &lt;div&gt;&lt;/div&gt;",      "&lt;/template&gt;",      "",      "&lt;script&gt;",      "export default {",      "  data () {",      "    return {",      "    };",      "  },",      "",      "  components: {},",      "",      "  computed: {},",      "",      "  mounted: {},",      "",      "  methods: {}",      "}",      "",      "&lt;/script&gt;",      "&lt;style lang='scss' scoped&gt;",      "&lt;/style&gt;"  ],    "description": "Log output to console"  }}</code></pre><blockquote><p>上面代码中的 </p><ul><li><code>"prefix": "vue"</code>, 就是快捷键,表示生成对应预设代码的命令；</li><li><code>$0</code> 表示你希望生成代码后光标的位置 ; </li></ul></blockquote><h1 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h1><p>新建<code>.vue</code>结尾的文件试试，编辑区输入<code>vue</code>，按<code>Tab</code>键</p><p><img src="https://s1.ax1x.com/2020/10/07/0dhVMR.png" srcset="/blog/img/loading.gif" alt="0dhVMR.png"></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-安装Vetur插件&quot;&gt;&lt;a href=&quot;#1-安装Vetur插件&quot; class=&quot;headerlink&quot; title=&quot;1. 安装Vetur插件&quot;&gt;&lt;/a&gt;1. 安装Vetur插件&lt;/h1&gt;&lt;h1 id=&quot;2-新建用户代码片段&quot;&gt;&lt;a href=&quot;#2-新建用户代码片段&quot; class=&quot;headerlink&quot; title=&quot;2.新建用户代码片段&quot;&gt;&lt;/a&gt;2.新建用户代码片段&lt;/h1&gt;&lt;p&gt;&lt;code&gt;文件&lt;/code&gt;–&amp;gt;&lt;code&gt;首选项&lt;/code&gt;–&amp;gt;&lt;code&gt;用户代码片段&lt;/code&gt;–&amp;gt;&lt;code&gt;点击新建代码片段&lt;/code&gt;–取名&lt;code&gt;vue.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs jso&quot;&gt;{
  &quot;Print to console&quot;: {
    &quot;prefix&quot;: &quot;vue&quot;,
    &quot;body&quot;: [
      &quot;&amp;lt;!-- $0 --&amp;gt;&quot;,
      &quot;&amp;lt;template&amp;gt;&quot;,
      &quot;  &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&quot;,
      &quot;&amp;lt;/template&amp;gt;&quot;,
      &quot;&quot;,
      &quot;&amp;lt;script&amp;gt;&quot;,
      &quot;export default {&quot;,
      &quot;  data () {&quot;,
      &quot;    return {&quot;,
      &quot;    };&quot;,
      &quot;  },&quot;,
      &quot;&quot;,
      &quot;  components: {},&quot;,
      &quot;&quot;,
      &quot;  computed: {},&quot;,
      &quot;&quot;,
      &quot;  mounted: {},&quot;,
      &quot;&quot;,
      &quot;  methods: {}&quot;,
      &quot;}&quot;,
      &quot;&quot;,
      &quot;&amp;lt;/script&amp;gt;&quot;,
      &quot;&amp;lt;style lang=&#39;scss&#39; scoped&amp;gt;&quot;,
      &quot;&amp;lt;/style&amp;gt;&quot;
  ],
    &quot;description&quot;: &quot;Log output to console&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;上面代码中的 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&quot;prefix&quot;: &quot;vue&quot;&lt;/code&gt;, 就是快捷键,表示生成对应预设代码的命令；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; 表示你希望生成代码后光标的位置 ; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-测试&quot;&gt;&lt;a href=&quot;#3-测试&quot; class=&quot;headerlink&quot; title=&quot;3. 测试&quot;&gt;&lt;/a&gt;3. 测试&lt;/h1&gt;&lt;p&gt;新建&lt;code&gt;.vue&lt;/code&gt;结尾的文件试试，编辑区输入&lt;code&gt;vue&lt;/code&gt;，按&lt;code&gt;Tab&lt;/code&gt;键&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/07/0dhVMR.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;0dhVMR.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Vue" scheme="https://melodyjerry.github.io/blog/tags/Vue/"/>
    
      <category term="VS Code" scheme="https://melodyjerry.github.io/blog/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>js中[]、{}、()的区别</title>
    <link href="https://melodyjerry.github.io/blog/2020/10/06/js%E4%B8%AD[]%E3%80%81%7B%7D%E3%80%81()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://melodyjerry.github.io/blog/2020/10/06/js%E4%B8%AD[]%E3%80%81%7B%7D%E3%80%81()%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-10-06T12:47:11.000Z</published>
    <updated>2021-01-03T14:28:21.458Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>{}</code>：表示对象</li><li><code>[]</code>：表示对象的属性、方法</li><li><code>()</code>：如果用在方法名后面，代表调用</li></ul><p><img src="https://s1.ax1x.com/2020/10/06/0Uybp6.png" srcset="/blog/img/loading.gif" alt="0Uybp6.png"></p><a id="more"></a><p>一、<code>{ }</code> 大括号，表示<strong>定义一个对象</strong>，大部分情况下要有成对的属性和值，或是函数体。</p><pre><code class="hljs js">如：<span class="hljs-keyword">var</span> LangShen = {<span class="hljs-string">"Name"</span>:<span class="hljs-string">"Langshen"</span>,<span class="hljs-string">"AGE"</span>:”<span class="hljs-number">28</span>”}; 上面声明了一个名为“LangShen”的对象，多个属性或函数用,（逗号）隔开，因为是对象的属性， 所以访问时，应该用.（点）来层层访问：LangShen.Name、LangShen.AGE，当然我们也可以用数组的方式来访问，如：LangShen[<span class="hljs-string">"Name"</span>]、LangShen[<span class="hljs-string">"AGE"</span>]，结果是一样的。<span class="hljs-keyword">var</span> LangShen = {     Name : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{         <span class="hljs-keyword">return</span> <span class="hljs-string">"LangShen"</span>;     },     Age : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{         <span class="hljs-keyword">return</span> <span class="hljs-string">"28"</span>;     } } 调用 LangShen.Name()</code></pre><p>二、<code>[ ]</code>中括号，表示<strong>一个数组，也可以理解为一个数组对象</strong>。</p><pre><code class="hljs js">如：<span class="hljs-keyword">var</span> LangShen = [ <span class="hljs-string">"Name"</span>,<span class="hljs-string">"LangShen"</span>,<span class="hljs-string">"AGE"</span>,<span class="hljs-string">"28"</span> ]; 很明显，每个值或函数，都是独立的，多个值之间只用,（逗号）隔开，因为是数组对象，所以它等于： <span class="hljs-keyword">var</span> LangShen = <span class="hljs-built_in">Array</span>( <span class="hljs-string">"Name"</span>,<span class="hljs-string">"LangShen"</span>,<span class="hljs-string">"AGE"</span>,<span class="hljs-string">"28"</span> ); 访问时，也是和数组一样，alert( LangShen[<span class="hljs-number">0</span>] )</code></pre><p>三、<code>{ }</code> 和<code>[ ]</code>一起使用，<code>{ }</code> 是一个对象，<code>[ ]</code> 是一个数组，我们可以组成一个对象数组。</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> LangShen = {     <span class="hljs-string">"Name"</span>:<span class="hljs-string">"Langshen"</span>,     <span class="hljs-string">"MyWife"</span>:[ <span class="hljs-string">"LuLu"</span>,<span class="hljs-string">"26"</span> ],     <span class="hljs-string">"MySon"</span>:[{<span class="hljs-string">"Name"</span>:<span class="hljs-string">"Son1"</span>},{<span class="hljs-string">"Name"</span>:<span class="hljs-string">"Son2"</span>},{<span class="hljs-string">"Name"</span>:<span class="hljs-string">"Son3"</span>}] } 从上面的结构来看，是一个对象里面的第一项是个属性，第二项是一个数组，第三个是包含有多个对象的数组。调用起来，也是一层一层访问，对象的属性用.（点）叠加，数组用 [下标] 来访问。如：alert( LangShen.MySon[<span class="hljs-number">1</span>].Name ) ；<span class="hljs-keyword">var</span> LangShen=[    {“name”：“wangwu”},    {“name”：“lieu”}];这是一个对象数组</code></pre><p>四、<code>()</code>多表示参数、<code>{}</code>表示函数体 <code>()</code>要看它放在什么位置才能知道它起什么作用，因为它有多种用法。</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">name</span>)</span>{    Alert(name);}es6中，<span class="hljs-keyword">let</span> show=<span class="hljs-function">(<span class="hljs-params">name</span>)=&gt;</span>{    alert(name);}在es6中如果参数只有一个，或者函数体只有一个话，可以省略（）、{},如<span class="hljs-keyword">let</span> show=<span class="hljs-function"><span class="hljs-params">name</span>=&gt;</span>alert(name);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt;：表示对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;：表示对象的属性、方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;：如果用在方法名后面，代表调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/10/06/0Uybp6.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;0Uybp6.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
</feed>
