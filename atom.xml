<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-09-19T04:24:28.823Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AspectJ的切入点表达式---execution表达式</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/28/AspectJ%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F---execution%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/28/AspectJ%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F---execution%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-28T09:24:41.000Z</published>
    <updated>2020-09-19T04:24:28.823Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>execution(&lt;修饰符模式&gt;?&lt;返回类型模式&gt;&lt;方法名模式&gt;(&lt;参数模式&gt;)&lt;异常模式&gt;?) </p></blockquote> <a id="more"></a><p>除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。</p><p>一、通过方法签名定义切点</p><blockquote><p> execution(public * *(..))</p></blockquote><p>　　匹配所有目标类的public方法，但不匹配SmartSeller和protected voidshowGoods()方法。第一个<em>代表返回类型，第二个</em>代表方法名，而..代表任意入参的方法；</p><blockquote><p> execution(* *To(..))</p></blockquote><p>　　匹配目标类所有以To为后缀的方法。它匹配NaiveWaiter和NaughtyWaiter的greetTo()和serveTo()方法。第一个<em>代表返回类型，而</em>To代表任意以To为后缀的方法；</p><p>二、通过类定义切点</p><blockquote><p> execution(<em>com.baobaotao.Waiter.</em>(..))</p></blockquote><p>　　匹配Waiter接口的所有方法，它匹配NaiveWaiter和NaughtyWaiter类的greetTo()和serveTo()方法。第一个<em>代表返回任意类型，com.baobaotao.Waiter.</em>代表Waiter接口中的所有方法；</p><blockquote><p> execution(<em>com.baobaotao.Waiter+.</em>(..))</p></blockquote><p>　　匹配Waiter接口及其所有实现类的方法，它不但匹配NaiveWaiter和NaughtyWaiter类的greetTo()和serveTo()这两个Waiter接口定义的方法，同时还匹配NaiveWaiter#smile()和NaughtyWaiter#joke()这两个不在Waiter接口中定义的方法。</p><p>三、通过类包定义切点</p><p>　　在类名模式串中，”.*”表示包下的所有类，而”..*”表示包、子孙包下的所有类。</p><blockquote><p> execution(* com.baobaotao.*(..))l</p></blockquote><p>　　匹配com.baobaotao包下所有类的所有方法；</p><blockquote><p> execution(* com.baobaotao..*(..))l</p></blockquote><p>　　匹配com.baobaotao包、子孙包下所有类的所有方法，如com.baobaotao.dao，com.baobaotao.servier以及com.baobaotao.dao.user包下的所有类的所有方法都匹配。”..”出现在类名中时，后面必须跟”*”，表示包、子孙包下的所有类；  </p><blockquote><p> execution(* com..<em>.</em>Dao.find*(..))</p></blockquote><p>　　匹配包名前缀为com的任何包下类名后缀为Dao的方法，方法名必须以find为前缀。如com.baobaotao.UserDao#findByUserId()、com.baobaotao.dao.ForumDao#findById()的方法都匹配切点。</p><p>四、通过方法入参定义切点</p><p>　　切点表达式中方法入参部分比较复杂，可以使用”*”和”..”通配符，其中”*”表示任意类型的参数，而”..”表示任意类型参数且参数个数不限。 </p><blockquote><p> execution(* joke(String,int)))</p></blockquote><p>　　匹配joke(String,int)方法，且joke()方法的第一个入参是String，第二个入参是int。它匹配NaughtyWaiter#joke(String,int)方法。如果方法中的入参类型是<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>.lang包下的类，可以直接使用类名，否则必须使用全限定类名，如joke(java.util.List,int)；</p><blockquote><p> execution(* joke(String,*)))</p></blockquote><p>　　匹配目标类中的joke()方法，该方法第一个入参为String，第二个入参可以是任意类型，如joke(Strings1,String s2)和joke(String s1,double d2)都匹配，但joke(String s1,doubled2,String s3)则不匹配；</p><blockquote><p> execution(* joke(String,..)))</p></blockquote><p>　　匹配目标类中的joke()方法，该方法第 一个入参为String，后面可以有任意个入参且入参类型不限，如joke(Strings1)、joke(String s1,String s2)和joke(String s1,double d2,Strings3)都匹配。</p><blockquote><p> execution(* joke(Object+)))</p></blockquote><p>　　匹配目标类中的joke()方法，方法拥有一个入参，且入参是Object类型或该类的子类。它匹配joke(Strings1)和joke(Client c)。如果我们定义的切点是execution(*joke(Object))，则只匹配joke(Object object)而不匹配joke(Stringcc)或joke(Client c)。</p><p>五、args()和@args()</p><p>　　args()函数的入参是类名，@args()函数的入参必须是注解类的类名。虽然args()允许在类名后使用+通配符后缀，但该通配符在此处没有意义：添加和不添加效果都一样。</p><p>1、args()</p><p>　　该函数接受一个类名，表示目标类方法入参对象按类型匹配于指定类时，切点匹配，如下面的例子：</p><blockquote><p>args(com.baobaotao.Waiter)</p></blockquote><p>　　表示运行时入参是Waiter类型的方法，它和execution(**(com.baobaotao.Waiter))区别在于后者是针对类方法的签名而言的，而前者则针对运行时的入参类型而言。如args(com.baobaotao.Waiter)既匹配于addWaiter(Waiterwaiter)，也匹配于addNaiveWaiter(NaiveWaiter naiveWaiter)，而execution(**(com.baobaotao.Waiter))只匹配addWaiter(Waiterwaiter)方法；实际上，args(com.baobaotao.Waiter)等价于execution(**(com.baobaotao.Waiter+))，当然也等价于args(com.baobaotao.Waiter+)。</p><p>2、@args()</p><p>　　该函数接受一个注解类的类名，当方法的运行时入参对象标注发指定的注解时，方法匹配切点。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>通过类包定义切点</p><p>在类名模式串中，“.*”表示包下的所有类，而“..*”表示包、子孙包下的所有类。</p><p>execution(* com.baobaotao.*(..))</p><p>匹配com.baobaotao包下所有类的所有方法；</p><p>execution(* com.baobaotao..*(..))</p><p>匹 配com.baobaotao包、子孙包下所有类的所有方法，如com.baobaotao.dao，com.baobaotao.servier以及 com.baobaotao.dao.user包下的所有类的所有方法都匹配。“..”出现在类名中时，后面必须跟“*”，表示包、子孙包下的所有类</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;execution(&amp;lt;修饰符模式&amp;gt;?&amp;lt;返回类型模式&amp;gt;&amp;lt;方法名模式&amp;gt;(&amp;lt;参数模式&amp;gt;)&amp;lt;异常模式&amp;gt;?) &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客加入聊天系统DaoVoice</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/%E5%8A%A0%E5%85%A5%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9Fdaovioce/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/%E5%8A%A0%E5%85%A5%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9Fdaovioce/</id>
    <published>2020-09-18T12:23:11.000Z</published>
    <updated>2020-09-19T04:24:28.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-DaoVoice"><a href="#关于-DaoVoice" class="headerlink" title="关于 DaoVoice"></a>关于 DaoVoice</h1><p>DaoVoice 是一款革命性的应用运营平台，致力于帮助企业实现以用户为中心的「精益运营」体系。</p><p>融合「在线聊天」、「客服支持」、「用户画像」、「消息推送」、「行为引导」等功能为一体， 按需获取用户信息和行为，实现场景化消息推送，让通知更富有人情味。</p><p>接入只需 5 行代码，即可创建与用户实时沟通的窗口，无缝接入企业原有产品体系，拉近企业与用户的距离。</p><p>秉承「数据驱动，精益运营」的理念，让用户定义产品，让参与感驱动产品迭代。</p><p>用 DaoVoice 驱动用户运营，帮你最终实现用户转化。</p><blockquote><p>“DaoVoice 帮我们更好地运营用户。实时在线沟通，可更快解决用户问题。后台管理可帮我们建立用户画像，针对不同的用户需求进行精准运营。此外，DaoVoice 团队会快速响应我们的反馈，给予高质量服务支持。”    ——<strong>Travis</strong>创始人 &amp; CEO</p></blockquote><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>layout\_third-party\daovoice.ejs：</p><div class="hljs"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(theme.daovoice.enable &amp;&amp; theme.daovoice.appid){ %&gt;  &lt;script&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) </span>{      i[<span class="hljs-string">'DaoVoiceObject'</span>] = r;      i[r] = i[r] ||        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{          (i[r].q = i[r].q || []).push(<span class="hljs-built_in">arguments</span>);        };      i[r].l = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();      a = s.createElement(o);      m = s.getElementsByTagName(o)[<span class="hljs-number">0</span>];      a.async = <span class="hljs-number">1</span>;      a.src = g;      a.charset = <span class="hljs-string">'utf-8'</span>;      m.parentNode.insertBefore(a, m);    })(<span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, (<span class="hljs-string">'https:'</span> === <span class="hljs-built_in">document</span>.location.protocol ? <span class="hljs-string">'https:'</span> : <span class="hljs-string">'http:'</span>) + <span class="hljs-string">"//widget.daovoice.io/widget/&lt;%= theme.daovoice.appid %&gt;.js"</span>, <span class="hljs-string">'daovoice'</span>);    daovoice(<span class="hljs-string">'init'</span>, {      app_id: <span class="hljs-string">"&lt;%= theme.daovoice.appid %&gt;"</span>,    });    daovoice(<span class="hljs-string">'update'</span>);  &lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp">&lt;% } %&gt;</span></code></pre></div><p>layout\index.ejs：</p><div class="hljs"><pre><code class="hljs js">&lt;!--DaoVoice服务http:<span class="hljs-comment">//blog.daovoice.io/--&gt;</span>&lt;%- partial(<span class="hljs-string">'_third-party/daovoice'</span>) %&gt;</code></pre></div><p>_config.yml：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">daovoice:</span>  <span class="hljs-comment"># 在线客服 Daovoice 参考：http://dashboard.daovoice.io</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启在线客服聊天</span>  <span class="hljs-attr">appid:</span> <span class="hljs-string">'exxxxxxx'</span>  <span class="hljs-comment"># 应用ID设置</span></code></pre></div><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s1.ax1x.com/2020/09/18/w46j3D.gif" srcset="/blog/img/loading.gif" alt="w46j3D.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-DaoVoice&quot;&gt;&lt;a href=&quot;#关于-DaoVoice&quot; class=&quot;headerlink&quot; title=&quot;关于 DaoVoice&quot;&gt;&lt;/a&gt;关于 DaoVoice&lt;/h1&gt;&lt;p&gt;DaoVoice 是一款革命性的应用运营平台，致力于帮助企业实现以用户为中心的「精益运营」体系。&lt;/p&gt;
&lt;p&gt;融合「在线聊天」、「客服支持」、「用户画像」、「消息推送」、「行为引导」等功能为一体， 按需获取用户信息和行为，实现场景化消息推送，让通知更富有人情味。&lt;/p&gt;
&lt;p&gt;接入只需 5 行代码，即可创建与用户实时沟通的窗口，无缝接入企业原有产品体系，拉近企业与用户的距离。&lt;/p&gt;
&lt;p&gt;秉承「数据驱动，精益运营」的理念，让用户定义产品，让参与感驱动产品迭代。&lt;/p&gt;
&lt;p&gt;用 DaoVoice 驱动用户运营，帮你最终实现用户转化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“DaoVoice 帮我们更好地运营用户。实时在线沟通，可更快解决用户问题。后台管理可帮我们建立用户画像，针对不同的用户需求进行精准运营。此外，DaoVoice 团队会快速响应我们的反馈，给予高质量服务支持。”    ——&lt;strong&gt;Travis&lt;/strong&gt;创始人 &amp;amp; CEO&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于Java的反射机制，4篇优选参考文章</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%8C4%E7%AF%87%E4%BC%98%E9%80%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%8C4%E7%AF%87%E4%BC%98%E9%80%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/</id>
    <published>2020-09-18T01:10:00.738Z</published>
    <updated>2020-09-18T04:43:03.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a></li><li><a href="https://blog.csdn.net/qq_36226453/article/details/82790375" target="_blank" rel="noopener">Java基础之—反射（非常重要）</a></li><li><a href="https://www.cnblogs.com/adamjwh/p/9683705.html" target="_blank" rel="noopener">Java高级篇（四）——反射</a></li><li><a href="https://www.zhihu.com/question/24304289" target="_blank" rel="noopener">学习java应该如何理解反射？</a></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/9be58ee20dee&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java高级特性——反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36226453/article/details/82790375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java基础之—反射（非常重要）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/adamjwh/p/9683705.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java高级篇（四）——反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/24304289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;学习java应该如何理解反射？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java+Spring+MyBatis实现多数据源的动态切换</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/08/Java+Spring+MyBatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/08/Java+Spring+MyBatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/</id>
    <published>2020-09-08T06:22:22.000Z</published>
    <updated>2020-09-18T04:43:02.959Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.cnblogs.com/zt2710/p/11116637.html" target="_blank" rel="noopener">https://www.cnblogs.com/zt2710/p/11116637.html</a></p><p>群聊天记录截图👇</p><img src="https://s1.ax1x.com/2020/09/08/wQE7DO.jpg" srcset="/blog/img/loading.gif" alt="wQE7DO.jpg" style="zoom:30%;"><a id="more"></a><hr><h1 id="固定多数据源切换"><a href="#固定多数据源切换" class="headerlink" title="固定多数据源切换"></a>固定多数据源切换</h1><p>  固定多数据源的动态切换，通过自定义注解实现切换，这样在切换数据源时比较灵活，具体的实现方式如下：</p><p>  1、配置多数据源</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义数据源1--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"oracledataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:oracle:thin:@127.0.0.1:1522:neworcl"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"emspdadev"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"emspdadev"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--定义数据源2--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mysqldataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/jbpmdb"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123456"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--动态数据源配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.ssm.datasource.DynamicDataSource"</span>&gt;</span><span class="hljs-comment">&lt;!--引入定义好的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">"targetDataSources"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>  <span class="hljs-attr">key-type</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"oracle"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"mysql"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"mysqldataSource"</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--定义默认数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultTargetDataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--spring和mybatis整合--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapping/*.xml"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.ssm.dao"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p> 2、定义注解(注解名为DataSource)，用于切换数据源，注解的值只能为上述配置中定义的key(对应于上面配置中定义的oracle、mysql)</p><div class="hljs"><pre><code class="hljs less"><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-variable">@Target</span>(ElementType.METHOD)pub lic <span class="hljs-variable">@interface</span> DataSource {    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">value</span>();}</code></pre></div><p>  3、根据Sping切面编程，当调用指定的切面类时，解释注解，并根据注解的定义使用对应的数据库</p><div class="hljs"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> DataSourceAspect {<span class="hljs-comment">/**</span><span class="hljs-comment">    * 定义切面，当调用com.ssm.service下的所有类的所有方法前都会执行beforeInvoke方法</span><span class="hljs-comment">    */</span>    @<span class="hljs-constructor">Pointcut(<span class="hljs-string">"execution(* com.ssm.service.*.*(..))"</span>)</span>    public void point<span class="hljs-constructor">Cut()</span>{};     @<span class="hljs-constructor">Before(<span class="hljs-params">value</span> = <span class="hljs-string">"pointCut()"</span>)</span>    public void before<span class="hljs-constructor">Invoke(JoinPoint <span class="hljs-params">joinpoint</span>)</span> {        <span class="hljs-keyword">try</span> {            String clazzName = joinpoint.get<span class="hljs-constructor">Target()</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span>;            String methodName = joinpoint.get<span class="hljs-constructor">Signature()</span>.get<span class="hljs-constructor">Name()</span>;            Class targetClazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>for<span class="hljs-constructor">Name(<span class="hljs-params">clazzName</span>)</span>;            Method<span class="hljs-literal">[]</span> methods = targetClazz.get<span class="hljs-constructor">Methods()</span>;            for(Method <span class="hljs-keyword">method</span> : methods) {                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Name()</span>.equals(methodName)) {                    <span class="hljs-comment">// 首先查看方法是否使用注解</span>                    <span class="hljs-comment">// 如果使用注解，则获取注解定义的值，并根据注解的值设置访问数据库的key</span>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.is<span class="hljs-constructor">AnnotationPresent(DataSource.<span class="hljs-params">class</span>)</span>) {                        DataSource dataSource = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(DataSource.<span class="hljs-params">class</span>)</span>;                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DataType(<span class="hljs-params">dataSource</span>.<span class="hljs-params">value</span>()</span>);                    }                    break;                }            }        } catch (Exception e) {            e.print<span class="hljs-constructor">StackTrace()</span>;        }     }}</code></pre></div><p>  4、定义动态切换数据源(继承Spring的AbstractRoutingDataSource)</p><div class="hljs"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRoutingDataSource</span> </span>{    <span class="hljs-comment">/**</span><span class="hljs-comment">    * 根据DatasourceHolder中DataType的值获取具体的数据源</span><span class="hljs-comment">    */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> determineCurrentLookupKey() {        <span class="hljs-keyword">return</span> <span class="hljs-type">DatasourceHolder</span>.getDataType();    }}</code></pre></div><p>  5、数据源切换的使用</p><div class="hljs"><pre><code class="hljs dart"><span class="hljs-meta">@Service</span>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdxServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IIdxSevice</span> </span>{     <span class="hljs-meta">@Autowired</span>    private IdxMapper idxMapper;     <span class="hljs-meta">@Override</span>    public <span class="hljs-built_in">List</span>&lt;Idx&gt; listIdxInfo() {        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }     <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>根据注解的配置，会访问oracle对应的数据源</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"oracle"</span>)    public <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; getIdxById(<span class="hljs-built_in">int</span> idxId) {        <span class="hljs-keyword">return</span> idxMapper.getIdxById(idxId);    }     <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>根据注解的配置，会访问mysql对应的数据源</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"mysql"</span>)    public <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; getJobInfo(<span class="hljs-built_in">int</span> dbId) {        <span class="hljs-keyword">return</span> idxMapper.getJobInfo(dbId);    }}</code></pre></div><p>通过以上的步骤即实现了数据源的动态切换</p><h1 id="动态多数据源切换"><a href="#动态多数据源切换" class="headerlink" title="动态多数据源切换"></a>动态多数据源切换</h1><p>  对于动态的多数据源，数据源的配置一般不放在配置文件中，因为如果放在配置文件中，每次新增或删除数据源，都需要重启项目，这样的实现方式非常不友好；通常情况向数据源的配置放在数据库中。实现方式如下：**<br>**</p><p>  1、配置数据源，这里配置的数据源用于保存其他数据源的配置信息，今后数据的新增、删除、修改均在该数据库中操作，配置如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义数据源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"oracledataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:oracle:thin:@127.0.0.1:1522:neworcl"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cfgmanage"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cfgmanage"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--查询动态配置的数据库连接信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"jdbcTemplate"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dbConfigService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.teamsun.datasource.DBConfigService"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcTemplate"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"jdbcTemplate"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--定义动态数据源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.teamsun.datasource.DynamicDataSource"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"masterDataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dbConfigService"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dbConfigService"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--spring和mybatis整合--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--&lt;property name="mapperLocations" value="classpath:mapping/*.xml" /&gt;--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.teamsun.mapper"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>2、实现查询数据源配置信息的类</p><div class="hljs"><pre><code class="hljs lsl">public class DBConfigService {     private JdbcTemplate jdbcTemplate;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询数据库配置信息</span><span class="hljs-comment">     * @param dbName  数据库名称</span><span class="hljs-comment">     * @return 数据库配置信息</span><span class="hljs-comment">     */</span>    public DBCfg getDBCfg(String dbName) throws Exception {        String querySql = <span class="hljs-string">"select<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"          t.db_type as <span class="hljs-subst">\"</span>dbType<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_name as <span class="hljs-subst">\"</span>dbName<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_comment as <span class="hljs-subst">\"</span>dbCommment<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_driver as <span class="hljs-subst">\"</span>driverClass<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_username as <span class="hljs-subst">\"</span>userName<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_password as <span class="hljs-subst">\"</span>passworld<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_url as <span class="hljs-subst">\"</span>jdbcURL<span class="hljs-subst">\"</span>"</span> +                <span class="hljs-string">"          from TB_RPT_DBCFG t<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"          where t.db_name = '"</span> + dbName + <span class="hljs-string">"'"</span>;         RowMapper&lt;DBCfg&gt; rowMapper = ParameterizedBeanPropertyRowMapper.newInstance(DBCfg.class);        DBCfg dbCfg = (DBCfg) jdbcTemplate.queryForObject(querySql, rowMapper);        return dbCfg;    }     public JdbcTemplate getJdbcTemplate() {        return jdbcTemplate;    }     public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }}</code></pre></div><p>3、实现动态切换数据源</p><div class="hljs"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment"> * &lt;p&gt;动态创建及访问多数据源&lt;/p&gt;</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> DynamicDataSource extends AbstractRoutingDataSource{     <span class="hljs-keyword">private</span> DBConfigService dbConfigService;     <span class="hljs-keyword">private</span> DataSource masterDataSource;     <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; targetDataSource = <span class="hljs-keyword">new</span> HashMap&lt;Object, Object&gt;<span class="hljs-literal">()</span>;     <span class="hljs-keyword">private</span> static final String DEFAULT_DB_NAME = <span class="hljs-string">"dataSource"</span>;  <span class="hljs-comment">// 默认数据库名</span>     <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>get<span class="hljs-constructor">Logger(DynamicDataSource.<span class="hljs-params">class</span>)</span>;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建并获取数据源</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    @Override    protected DataSource determine<span class="hljs-constructor">TargetDataSource()</span> {        <span class="hljs-comment">// 获取数据源名称</span>        String dbName = (String) determine<span class="hljs-constructor">CurrentLookupKey()</span>;         <span class="hljs-comment">// 获取默认数据源</span>        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DEFAULT_DB_NAME</span>.</span></span>equals(dbName)) {            return masterDataSource;        }         <span class="hljs-comment">// 创建数据源</span>        DataSource dataSource = (DataSource) targetDataSource.get(dbName);        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">if</span> (dataSource<span class="hljs-operator"> == </span>null) {                dataSource = get<span class="hljs-constructor">DataSourceByName(<span class="hljs-params">dbName</span>)</span>;            }        } catch (Exception e) {            e.print<span class="hljs-constructor">StackTrace()</span>;        }        return dataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取数据库名称，可根据获取的数据库名称查询数据库配置信息，</span><span class="hljs-comment">     * 通过配置信息动态创建数据源</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    @Override    protected Object determine<span class="hljs-constructor">CurrentLookupKey()</span> {        String dbName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>get<span class="hljs-constructor">DBName()</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">dbName</span>)</span>) {            dbName = DEFAULT_DB_NAME;        }         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>remove<span class="hljs-literal">()</span>;        return dbName;    }     @Override    public void after<span class="hljs-constructor">PropertiesSet()</span> {     }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过数据库的配置信息获取数据源</span><span class="hljs-comment">     * @param dbName 数据库名称</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    public synchronized DataSource get<span class="hljs-constructor">DataSourceByName(String <span class="hljs-params">dbName</span>)</span> throws Exception {                 <span class="hljs-comment">// 创建数据源</span>        BasicDataSource dataSource = create<span class="hljs-constructor">DataSource(<span class="hljs-params">dbName</span>)</span>;                 <span class="hljs-comment">// 如果创建数据源成功则缓存数据源，避免重复创建相同的数据源</span>        <span class="hljs-keyword">if</span>(dataSource != null) {            targetDataSource.put(dbName, dataSource);        }        return  dataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过数据库的配置创建数据源</span><span class="hljs-comment">     * @param dbName 数据库名称</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    public BasicDataSource create<span class="hljs-constructor">DataSource(String <span class="hljs-params">dbName</span>)</span> throws Exception {                 <span class="hljs-comment">// 查询动态数据源配置信息</span>        String oriDBName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>get<span class="hljs-constructor">DBName()</span>;         <span class="hljs-keyword">if</span>(dbConfigService<span class="hljs-operator"> == </span>null) {            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"创建数据源失败[dbCfgService is null......]"</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>debug(<span class="hljs-string">"创建数据源失败[dbCfgService is null......]"</span>);        }         <span class="hljs-comment">// 通过数据库名称查询相关的数据库配置信息</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(DEFAULT_DB_NAME)</span>;        DBCfg dbCfg = dbConfigService.get<span class="hljs-constructor">DBCfg(<span class="hljs-params">dbName</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">oriDBName</span>)</span>;         String driver = dbCfg.get<span class="hljs-constructor">DriverClass()</span>;  <span class="hljs-comment">// 数据库驱动</span>        String url = dbCfg.get<span class="hljs-constructor">JdbcURL()</span>;  <span class="hljs-comment">// 数据库连接地址</span>        String username = dbCfg.get<span class="hljs-constructor">UserName()</span>;  <span class="hljs-comment">// 数据库用户名</span>        String password = dbCfg.get<span class="hljs-constructor">Passworld()</span>;  <span class="hljs-comment">// 数据库密码</span>         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>debug(<span class="hljs-string">"动态连接的数据库为["</span> + url + <span class="hljs-string">"|"</span> + username + <span class="hljs-string">"]"</span>);         <span class="hljs-comment">// 创建数据源</span>        BasicDataSource basicDataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BasicDataSource()</span>;        basicDataSource.set<span class="hljs-constructor">DriverClassName(<span class="hljs-params">driver</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Url(<span class="hljs-params">url</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Password(<span class="hljs-params">password</span>)</span>;        basicDataSource.set<span class="hljs-constructor">TestWhileIdle(<span class="hljs-params">true</span>)</span>;         return basicDataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果修改或删除数据源的配置，则需要同步删除缓存的数据源</span><span class="hljs-comment">     * @param dbName</span><span class="hljs-comment">     */</span>    public void remove<span class="hljs-constructor">DataSource(String <span class="hljs-params">dbName</span>)</span> {        this.targetDataSource.remove(dbName);    }     public DataSource get<span class="hljs-constructor">MasterDataSource()</span> {        return masterDataSource;    }     public void set<span class="hljs-constructor">MasterDataSource(DataSource <span class="hljs-params">masterDataSource</span>)</span> {        this.masterDataSource = masterDataSource;    }     public DBConfigService get<span class="hljs-constructor">DbConfigService()</span> {        return dbConfigService;    }     public void set<span class="hljs-constructor">DbConfigService(DBConfigService <span class="hljs-params">dbConfigService</span>)</span> {        this.dbConfigService = dbConfigService;    }}</code></pre></div><p>4、使用动态切换数据源</p><div class="hljs"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ShowRptServiceImpl implements IShowRptService {     <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>get<span class="hljs-constructor">Logger(ShowRptServiceImpl.<span class="hljs-params">class</span>)</span>;     @Autowired    <span class="hljs-keyword">private</span> DBCfgMapper dbCfgMapper;     @Autowired    <span class="hljs-keyword">private</span> ShowRptInfoMapper showRptInfoMapper;     @Override    public RptResult query<span class="hljs-constructor">RptInfo(BaseRpt <span class="hljs-params">baseRpt</span>, Map&lt;String, String&gt; <span class="hljs-params">params</span>)</span> {        <span class="hljs-comment">// 在调用Mybatis执行数据库之前先选择数据源</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">dbCfg</span>.<span class="hljs-params">getDbName</span>()</span>);        <span class="hljs-comment">// 查询报表数据</span>        List&lt;Map&lt;String,Object&gt;&gt; resultList = showRptInfoMapper.query<span class="hljs-constructor">RptData(<span class="hljs-params">querySQL</span>)</span>;          <span class="hljs-comment">// 选择数据源</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">dbCfg</span>.<span class="hljs-params">getDbName</span>()</span>);        <span class="hljs-comment">// 查询数据数据量</span>        <span class="hljs-built_in">int</span> totalCount = showRptInfoMapper.query<span class="hljs-constructor">TotalCount(<span class="hljs-params">countSQL</span>)</span>;         RptResult rptResult = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RptResult()</span>;        return rptResult;    } }</code></pre></div><p>通过以上步骤即可实现动态多数据源的动态切换</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/zt2710/p/11116637.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/zt2710/p/11116637.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;群聊天记录截图👇&lt;/p&gt;
&lt;img src=&quot;https://s1.ax1x.com/2020/09/08/wQE7DO.jpg&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wQE7DO.jpg&quot; style=&quot;zoom:30%;&quot;&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>优化IDEA卡顿现象</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/07/%E4%BC%98%E5%8C%96IDEA%E5%8D%A1%E9%A1%BF%E7%8E%B0%E8%B1%A1/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/07/%E4%BC%98%E5%8C%96IDEA%E5%8D%A1%E9%A1%BF%E7%8E%B0%E8%B1%A1/</id>
    <published>2020-09-07T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:03.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改-vmoptions-文件"><a href="#修改-vmoptions-文件" class="headerlink" title="修改 vmoptions 文件"></a>修改 vmoptions 文件</h2><p>首先是找到 IDEA 的安装目录，之后到安装目录的 bin 目录下，找到如下两个文件：<br><code>idea.exe.vmoptions</code>和<code>idea64.exe.vmoptions</code><br>看你是多少位系统的你就该对应的就可以了，编辑这个配置文件。<br>修改前：</p><div class="hljs"><pre><code class="hljs haml">-<span class="ruby">Xms128m</span><span class="ruby">-Xmx750m</span><span class="ruby">-<span class="hljs-symbol">XX:</span>ReservedCodeCacheSize=<span class="hljs-number">240</span>m</span><span class="ruby">-<span class="hljs-symbol">XX:</span>+UseConcMarkSweepGC</span><span class="ruby">-<span class="hljs-symbol">XX:</span>SoftRefLRUPolicyMSPerMB=<span class="hljs-number">50</span></span><span class="ruby">-ea</span><span class="ruby">-<span class="hljs-symbol">XX:</span>CICompilerCount=<span class="hljs-number">2</span></span><span class="ruby">-Dsun.io.useCanonPrefixCache=<span class="hljs-literal">false</span></span><span class="ruby">-Djdk.http.auth.tunneling.disabledSchemes=<span class="hljs-string">""</span></span><span class="ruby">-<span class="hljs-symbol">XX:</span>+HeapDumpOnOutOfMemoryError</span><span class="ruby">-<span class="hljs-symbol">XX:</span>-OmitStackTraceInFastThrow</span><span class="ruby">-Djdk.attach.allowAttachSelf=<span class="hljs-literal">true</span></span><span class="ruby">-Dkotlinx.coroutines.debug=off</span><span class="ruby">-Djdk<span class="hljs-class">.<span class="hljs-keyword">module</span>.<span class="hljs-title">illegalAccess</span>.<span class="hljs-title">silent</span>=<span class="hljs-title">true</span></span></span></code></pre></div><p>修改后：<br>分别把<strong>内存</strong>的参数 <strong>128m</strong> 和 <strong>750m</strong> 改成你想要改的就可以了，我是分别改成了 <strong>1024m</strong> 和 <strong>2048m</strong>，之后如果还卡，再往大了调，可以根据自己电脑的实际内存设置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/evane1890/article/details/78941968" target="_blank" rel="noopener">JVM调优常用参数</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;修改-vmoptions-文件&quot;&gt;&lt;a href=&quot;#修改-vmoptions-文件&quot; class=&quot;headerlink&quot; title=&quot;修改 vmoptions 文件&quot;&gt;&lt;/a&gt;修改 vmoptions 文件&lt;/h2&gt;&lt;p&gt;首先是找到 IDEA 的安装目录，之后到安装目录的 bin 目录下，找到如下两个文件：&lt;br&gt;&lt;code&gt;idea.exe.vmoptions&lt;/code&gt;和&lt;code&gt;idea64.exe.vmoptions&lt;/code&gt;&lt;br&gt;看你是多少位系统的你就该对应的就可以了，编辑这个配置文件。&lt;br&gt;修改前：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs haml&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;Xms128m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Xmx750m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;ReservedCodeCacheSize=&lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UseConcMarkSweepGC&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;SoftRefLRUPolicyMSPerMB=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-ea&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;CICompilerCount=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Dsun.io.useCanonPrefixCache=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk.http.auth.tunneling.disabledSchemes=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+HeapDumpOnOutOfMemoryError&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;-OmitStackTraceInFastThrow&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk.attach.allowAttachSelf=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Dkotlinx.coroutines.debug=off&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk&lt;span class=&quot;hljs-class&quot;&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;illegalAccess&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;silent&lt;/span&gt;=&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后：&lt;br&gt;分别把&lt;strong&gt;内存&lt;/strong&gt;的参数 &lt;strong&gt;128m&lt;/strong&gt; 和 &lt;strong&gt;750m&lt;/strong&gt; 改成你想要改的就可以了，我是分别改成了 &lt;strong&gt;1024m&lt;/strong&gt; 和 &lt;strong&gt;2048m&lt;/strong&gt;，之后如果还卡，再往大了调，可以根据自己电脑的实际内存设置。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/evane1890/article/details/78941968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM调优常用参数&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>宝塔同IP或同域名不同端口分别对应不同网站教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/05/%E5%AE%9D%E5%A1%94%E5%90%8CIP%E6%88%96%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/05/%E5%AE%9D%E5%A1%94%E5%90%8CIP%E6%88%96%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-05T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:03.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>IP</p></li><li><p>服务器端放行所需端口</p></li><li><p>安装好的宝塔面板。</p></li></ul><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>192.168.1.666:80 站点一指向A项目</p><p>192.168.1.666:8081 站点二指向B项目</p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>1） 新建一个站点指向项目A</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514113737124-1200219923.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 2）再次添加一个站点指向项目B</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114000175-1939839843.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 提交之后打开设置</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114036225-1680296715.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 修改配置文件如下图：</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114317948-567330049.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 提交之后，切记一定要重启nginx，然后即打开站点就可以看到内容</p><p>照此可添加多个</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器端放行所需端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装好的宝塔面板。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h1&gt;&lt;p&gt;192.168.1.666:80 站点一指向A项目&lt;/p&gt;
&lt;p&gt;192.168.1.666:8081 站点二指向B项目&lt;/p&gt;
&lt;h1 id=&quot;具体步骤&quot;&gt;&lt;a href=&quot;#具体步骤&quot; class=&quot;headerlink&quot; title=&quot;具体步骤&quot;&gt;&lt;/a&gt;具体步骤&lt;/h1&gt;&lt;p&gt;1） 新建一个站点指向项目A&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514113737124-1200219923.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 2）再次添加一个站点指向项目B&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114000175-1939839843.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 提交之后打开设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114036225-1680296715.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 修改配置文件如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114317948-567330049.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 提交之后，切记一定要重启nginx，然后即打开站点就可以看到内容&lt;/p&gt;
&lt;p&gt;照此可添加多个&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/29/Git%E7%AC%94%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/29/Git%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-29T13:00:00.000Z</published>
    <updated>2020-09-18T04:43:02.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h4 id="在当前目录下初始化一个空的git仓库"><a href="#在当前目录下初始化一个空的git仓库" class="headerlink" title="在当前目录下初始化一个空的git仓库"></a>在当前目录下初始化一个空的git仓库</h4><ul><li><code>git init</code></li></ul><h4 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱"></a>设置全局用户名和邮箱</h4><ul><li><code>git config --global user.name "name"</code></li><li><code>git config --global user.email "xxxxx@email.com"</code></li><li><code>git config user.name</code> 查看git用户名</li><li><code>git config user.email</code> 查看邮箱配置</li></ul><h4 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h4><ul><li><code>git config --list</code></li></ul><h4 id="提交修改到暂存区"><a href="#提交修改到暂存区" class="headerlink" title="提交修改到暂存区"></a>提交修改到暂存区</h4><ul><li><code>git add -A</code> 提交全部修改。（git add -All）</li><li><code>git add -u</code> 只提交修改，不提交新文件。（git add -update)</li><li><code>git add .</code> 不提交删除文件</li><li><code>git add &lt;filename&gt;</code> 提交指定文件</li></ul><h4 id="查看暂存区"><a href="#查看暂存区" class="headerlink" title="查看暂存区"></a>查看暂存区</h4><ul><li><code>git status</code></li></ul><h4 id="修改最新提交的-commit-message"><a href="#修改最新提交的-commit-message" class="headerlink" title="修改最新提交的 commit message"></a>修改最新提交的 commit message</h4><ul><li><code>git commit --amend</code></li></ul><h4 id="修改某个提交的-commit-message"><a href="#修改某个提交的-commit-message" class="headerlink" title="修改某个提交的 commit message"></a>修改某个提交的 commit message</h4><ul><li><code>git commit -i &lt;commit id&gt;</code> commit id 为要修改的目标 commit 的父亲 commit id</li></ul><h4 id="合并连续的commit"><a href="#合并连续的commit" class="headerlink" title="合并连续的commit"></a>合并连续的commit</h4><ul><li><code>git rebase -i &lt;commit id&gt;</code> commit id 为目标commit的父亲commit id</li></ul><h4 id="提交修改到本地仓库"><a href="#提交修改到本地仓库" class="headerlink" title="提交修改到本地仓库"></a>提交修改到本地仓库</h4><ul><li><code>git commit -m 'msg'</code> 提交暂存区到本地仓库</li><li><code>git commit -a -m 'msg'</code> 提交修改到本地仓库（不提交新增文件）</li></ul><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><ul><li><code>git log</code></li></ul><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><ul><li><code>git remote add &lt;name&gt; &lt;url&gt;</code></li></ul><h4 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h4><ul><li><code>git remote show &lt;name&gt;</code></li></ul><h4 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h4><ul><li><code>git remote rm &lt;remote_name&gt;</code></li><li><code>git remote rename &lt;old_name&gt; &lt;new_name&gt;</code></li></ul><h4 id="拉取远程仓库数据到本地"><a href="#拉取远程仓库数据到本地" class="headerlink" title="拉取远程仓库数据到本地"></a>拉取远程仓库数据到本地</h4><ul><li><code>git pull &lt;remote_name&gt; &lt;branch_name&gt;</code></li></ul><h4 id="提交本地仓库到远程仓库"><a href="#提交本地仓库到远程仓库" class="headerlink" title="提交本地仓库到远程仓库"></a>提交本地仓库到远程仓库</h4><ul><li><code>git push &lt;remote_name&gt; &lt;branch_name&gt;</code></li></ul><h4 id="查看-amp-创建-amp-切换分支"><a href="#查看-amp-创建-amp-切换分支" class="headerlink" title="查看&amp;创建&amp;切换分支"></a>查看&amp;创建&amp;切换分支</h4><ul><li><code>git branch</code> 查看已有分支</li><li><code>git branch -v</code> 查看已有分支及各个分支最后一个提交对象的信息</li><li><code>git branch &lt;branch_name&gt;</code> 创建新的空分支</li><li><code>git branch &lt;branch_name&gt; &lt;exist_branch_name&gt;</code> 创建新分支</li><li><code>git checkout -b &lt;branch_name&gt; &lt;exist_branch_name&gt;</code> 创建并切换到新分支</li><li><code>git checkout &lt;branch_name&gt;</code> 切换分支</li></ul><h4 id="删除-amp-合并分支"><a href="#删除-amp-合并分支" class="headerlink" title="删除&amp;合并分支"></a>删除&amp;合并分支</h4><ul><li><code>git branch -D &lt;branch_name&gt;</code> 删除分支</li><li><code>git merge &lt;branch_name&gt;</code> 当前分支合并到指定分支</li></ul><h4 id="暂存区恢复到HEAD"><a href="#暂存区恢复到HEAD" class="headerlink" title="暂存区恢复到HEAD"></a>暂存区恢复到HEAD</h4><ul><li><code>git reset HEAD</code></li><li><code>git reset HEAD &lt;file_name&gt;</code></li></ul><h4 id="工作区恢复到暂存区"><a href="#工作区恢复到暂存区" class="headerlink" title="工作区恢复到暂存区"></a>工作区恢复到暂存区</h4><ul><li><code>git checkout -- &lt;file_name&gt;</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git笔记&quot;&gt;&lt;a href=&quot;#Git笔记&quot; class=&quot;headerlink&quot; title=&quot;Git笔记&quot;&gt;&lt;/a&gt;Git笔记&lt;/h1&gt;&lt;h4 id=&quot;在当前目录下初始化一个空的git仓库&quot;&gt;&lt;a href=&quot;#在当前目录下初始化一个空的git仓库&quot; cla
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="https://melodyjerry.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[转]Maven中静态资源和字节码文件的过滤</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/29/[%E8%BD%AC]Maven%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E6%BB%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/29/[%E8%BD%AC]Maven%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E6%BB%A4/</id>
    <published>2020-08-29T13:00:00.000Z</published>
    <updated>2020-09-18T04:43:03.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文的方法是针对Maven管理的Java Web工程</p></blockquote><a id="more"></a><h2 id="静态资源的过滤"><a href="#静态资源的过滤" class="headerlink" title="静态资源的过滤"></a>静态资源的过滤</h2><p>在maven中，静态资源的过滤使用基本上大家都知道，只需要在<code>&lt;build&gt;&lt;/build&gt;</code>中使用<code>resources</code>标签即可，示例如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>1234567891011</code></pre></div><p>在静态资源的过滤中，基本的元素有三种：</p><ul><li><code>directory</code>：指定资源所在的目录，这个目录的路径是相对于pom.xml文件；</li><li><code>includes</code>：指定要包含哪些文件，其中包括inlcude子节点来指定匹配的模式；</li><li><code>excludes</code>：指定要排除哪些文件，其中包括exclude子节点来指定匹配的模式；</li><li><code>filtering</code>：指定哪些文件需要过滤，这个过滤的目的是为了替换其中的占位符<code>${}</code>，其中的占位符属性在pom.xml文件中的<code>&lt;properties&gt;&lt;/properties&gt;</code>中指定；</li></ul><p>在其中可能遇到的问题如下：</p><ul><li>当includes和excludes冲突的时候，优先采取excludes中的设定，<a href="http://blog.csdn.net/bluishglc/article/details/6640889" target="_blank" rel="noopener">这篇文章</a>中详细的说明了，<a href="http://bylijinnan.iteye.com/blog/2298100" target="_blank" rel="noopener">这篇文章</a>从源码角度进行了分析；</li></ul><h2 id="字节码文件的过滤"><a href="#字节码文件的过滤" class="headerlink" title="字节码文件的过滤"></a>字节码文件的过滤</h2><p>相对于静态资源的过滤，针对字节码文件的过滤则比较生僻，尤其是在配置文件基本上都是<code>xml</code>或者<code>properties</code>的时候，如果你的工程的配置是Java Config风格的，那么就会遇到在不同的环境下加载不同的配置类的问题。不同于静态的配置文件直接使用<code>&lt;resources&gt;</code>标签（其实背后还是通过resource插件完成的），字节码的过滤需要直接使用<code>maven-war-plugin</code> ，实例如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/classes/test/dao/,         WEB-INF/classes/test/service/,         WEB-INF/classes/config/TestConfig.class,         WEB-INF/lib/log4j-*.jar      <span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>123456789101112</code></pre></div><p>从上面可以看到，该插件是通过<code>packagingExcludes</code>元素完成过滤的，这个元素的作用是在工程package之前， 通过一些模式来排除掉一些文件或者文件夹，如果有多个可以通过逗号“,”来分割，上述使用的例子：</p><ul><li>排除特定配置类：<code>WEB-INF/classes/config/TestConfig.class</code></li><li>排除特定文件夹：<code>WEB-INF/classes/test/service/</code></li><li>排除引用的jar包：<code>WEB-INF/lib/log4j-*.jar</code></li></ul><p>上述使用的路径是<strong>相对于war包的根路径的</strong>。</p><p>另外在<code>packagingExcludes</code>中还可以使用Java的正则表达式，通过<code>%regex[...]</code>包裹即可，具体可以看<a href="https://maven.apache.org/plugins/maven-war-plugin/examples/including-excluding-files-from-war.html" target="_blank" rel="noopener">官方文档</a> .</p><hr><p>转载链接：<a href="https://blog.csdn.net/lmy86263/article/details/71189485?locationNum=3&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/lmy86263/article/details/71189485?locationNum=3&amp;fps=1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的方法是针对Maven管理的Java Web工程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="Maven" scheme="https://melodyjerry.github.io/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>[转]curl教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/28/curl%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/28/curl%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-28T04:11:11.000Z</published>
    <updated>2020-09-18T04:43:03.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="curl-的用法指南"><a href="#curl-的用法指南" class="headerlink" title="curl 的用法指南"></a>curl 的用法指南</h1><p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019090501.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自<a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">《curl cookbook》</a>。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的<a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">《curl 初学者教程》</a>。</p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl https://www.example.com</code></pre></div></blockquote><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="A"><a href="#A" class="headerlink" title="-A"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span> https://google.com</code></pre></div></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">''</span> https://google.com</code></pre></div></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'User-Agent: php/1.0'</span> https://google.com</code></pre></div></blockquote><h2 id="b"><a href="#b" class="headerlink" title="-b"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">'foo=bar'</span> https://google.com</code></pre></div></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">'foo1=bar;foo2=bar2'</span> https://google.com</code></pre></div></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="c"><a href="#c" class="headerlink" title="-c"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -c cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="d"><a href="#d" class="headerlink" title="-d"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d<span class="hljs-string">'login=emma＆password=123'</span>-X POST https://google.com/login<span class="hljs-comment"># 或者</span>$ curl -d <span class="hljs-string">'login=emma'</span> -d <span class="hljs-string">'password=123'</span> -X POST  https://google.com/login</code></pre></div></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">'@data.txt'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --data-urlencode <span class="hljs-string">'comment=hello world'</span> https://google.com/login</code></pre></div></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="e"><a href="#e" class="headerlink" title="-e"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><div class="hljs"><pre><code class="hljs bash">curl -e <span class="hljs-string">'https://google.com?q=example'</span> https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><div class="hljs"><pre><code class="hljs bash">curl -H <span class="hljs-string">'Referer: https://google.com?q=example'</span> https://www.example.com</code></pre></div></blockquote><h2 id="F"><a href="#F" class="headerlink" title="-F"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png;type=image/png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png;filename=me.png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="G"><a href="#G" class="headerlink" title="-G"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -G -d <span class="hljs-string">'q=kitties'</span> -d <span class="hljs-string">'count=20'</span> https://google.com/search</code></pre></div></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -G --data-urlencode <span class="hljs-string">'comment=hello world'</span> https://www.example.com</code></pre></div></blockquote><h2 id="H"><a href="#H" class="headerlink" title="-H"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'Accept-Language: en-US'</span> https://google.com</code></pre></div></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'Accept-Language: en-US'</span> -H <span class="hljs-string">'Secret-Message: xyzzy'</span> https://google.com</code></pre></div></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">'{"login": "emma", "pass": "123"}'</span> -H <span class="hljs-string">'Content-Type: application/json'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="i"><a href="#i" class="headerlink" title="-i"></a><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -i https://www.example.com</code></pre></div></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="I"><a href="#I" class="headerlink" title="-I"></a><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -I https://www.example.com</code></pre></div></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --head https://www.example.com</code></pre></div></blockquote><h2 id="k"><a href="#k" class="headerlink" title="-k"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -k https://www.example.com</code></pre></div></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="L"><a href="#L" class="headerlink" title="-L"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -L -d <span class="hljs-string">'tweet=hi'</span> https://api.twitter.com/tweet</code></pre></div></blockquote><h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a><strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --<span class="hljs-built_in">limit</span>-rate 200k https://google.com</code></pre></div></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o"><a href="#o" class="headerlink" title="-o"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -o example.html https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="O"><a href="#O" class="headerlink" title="-O"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -O https://www.example.com/foo/bar.html</code></pre></div></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="s"><a href="#s" class="headerlink" title="-s"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s https://www.example.com</code></pre></div></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><h2 id="S"><a href="#S" class="headerlink" title="-S"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2 id="u"><a href="#u" class="headerlink" title="-u"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">'bob:12345'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl https://bob:12345@google.com/login</code></pre></div></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">'bob'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v"><a href="#v" class="headerlink" title="-v"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -v https://www.example.com</code></pre></div></blockquote><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --trace - https://www.example.com</code></pre></div></blockquote><h2 id="x"><a href="#x" class="headerlink" title="-x"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="X"><a href="#X" class="headerlink" title="-X"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -X POST https://www.example.com</code></pre></div></blockquote><p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">Curl Cookbook</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;curl-的用法指南&quot;&gt;&lt;a href=&quot;#curl-的用法指南&quot; class=&quot;headerlink&quot; title=&quot;curl 的用法指南&quot;&gt;&lt;/a&gt;curl 的用法指南&lt;/h1&gt;&lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java中编译器自动进行的强制类型转换</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/Java%E4%B8%AD%E7%BC%96%E8%AF%91%E5%99%A8%E8%87%AA%E5%8A%A8%E8%BF%9B%E8%A1%8C%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/Java%E4%B8%AD%E7%BC%96%E8%AF%91%E5%99%A8%E8%87%AA%E5%8A%A8%E8%BF%9B%E8%A1%8C%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-08-27T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:02.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h2><p>一般规律：<strong>小类型向大类型可以自动类型转换，而大类型向小类型转换，需要手动的强制类型转换。</strong></p><p><strong>注意：<br>1.类型的大小不是按字节大小区分的</strong>，而是按照它的范围来定的，比如</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">long</span> long1 = <span class="hljs-number">300F</span>;<span class="hljs-comment">//报错，编译无法通过</span><span class="hljs-keyword">float</span> float1 = <span class="hljs-number">300L</span>;<span class="hljs-comment">//编译可以通过，并且可以正常运行</span></code></pre></div><p>long占八个字节，float占四个字节，但实际上float表示的范围要比long更大，（这主要是底层采用存储方式不同造成的）所以long类型的常量可以赋值给float类型的变量，而反过来却不行。<br><strong>2.这个规则也可以用在引用数据类型上</strong>，如果是引用类型，类型的大小则由他们的继承或实现关系来决定。</p><h2 id="关于自动java中编译器做的自动强制类型转换"><a href="#关于自动java中编译器做的自动强制类型转换" class="headerlink" title="关于自动java中编译器做的自动强制类型转换"></a>关于自动java中编译器做的自动强制类型转换</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> byte1 = <span class="hljs-number">1</span>;<span class="hljs-keyword">short</span> short1 = <span class="hljs-number">2</span>;<span class="hljs-keyword">char</span> char1 = <span class="hljs-number">3</span>;</code></pre></div><p>类似上面的代码，相信大家都写过，实际上，也能编译通过，并且正常运行。但是，如果作为初学者，不应该有疑惑吗？<strong>java中的整型常量是int类型的</strong>，将一个int类型的常量，赋值给byte、short或char类型的变量，却不会报错？？不是小类型才可以进行自动类型转换转为大类型的吗？大类型的转小类型需要进行强制类型转换，并且可能会损失精度的。这里是为什么呢？</p><p>其实是java中有一种机制：<strong>只要一个int类型的常量，在byte、short或char类型的范围之类的，就可以直接赋值给byte、short或char的变量</strong>，检查工作是java的编译器自动进行的。</p><p><strong>注意：</strong><br><strong>1.只能是常量，不能是变量或变量参与运算的表达式</strong>。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> byte1 = <span class="hljs-number">1</span>;<span class="hljs-keyword">short</span> short1 = <span class="hljs-number">2</span>;<span class="hljs-keyword">char</span> char1 = <span class="hljs-number">3</span>;<span class="hljs-keyword">int</span> int1 = <span class="hljs-number">3</span>；<span class="hljs-keyword">short</span> short2 = byte1 + <span class="hljs-number">1</span>;<span class="hljs-comment">//报错，编译无法通过</span><span class="hljs-keyword">short</span> short3 = int1;<span class="hljs-comment">//报错，编译无法通过</span><span class="hljs-keyword">short</span> short4 = <span class="hljs-number">3</span>;<span class="hljs-comment">//编译通过，并且可以正常运行</span></code></pre></div><p>因为java编译器只会自动检测字面常量是否超出了类型的范围，而不会对变量的值或有变量参与的运算结果进行检测。<br>“short short2 = byte1 + 1;”在做运算的时候，会自动上升为int类型，然后编译器就会检测到结果是一个int类型的值，而前面的变量是一个short类型的。不是小类型转大类型，所以直接编译报错。<br>“short short3 = int1;” 直接通过变量的类型就有问题，而不会通过上下文来判断值是否超出了范围。</p><p><strong>2.对于纯常量的表达式，也是可以的</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">short</span> short4 = <span class="hljs-number">1</span> + <span class="hljs-number">2</span>;<span class="hljs-comment">//编译通过，并且可以正常运行</span></code></pre></div><p>因为简单的常量表达式，java的编译器可以直接就运算出结果，然后再进一步检测是否超出了范围。</p><p><strong>3.这个机制只是针对int转byte、short或char</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">float</span> float1 = <span class="hljs-number">3.14</span>;<span class="hljs-comment">//报错，编译无法通过</span></code></pre></div><p>对于其它的基本数据类型或引用数据类型，是没有这个机制的，只能使用文章开头说的一般规律。<br>其它一些简单的测试，比如超出范围就会编译报错.</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于类型转换&quot;&gt;&lt;a href=&quot;#关于类型转换&quot; class=&quot;headerlink&quot; title=&quot;关于类型转换&quot;&gt;&lt;/a&gt;关于类型转换&lt;/h2&gt;&lt;p&gt;一般规律：&lt;strong&gt;小类型向大类型可以自动类型转换，而大类型向小类型转换，需要手动的强制类型转换。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;br&gt;1.类型的大小不是按字节大小区分的&lt;/strong&gt;，而是按照它的范围来定的，比如&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; long1 = &lt;span class=&quot;hljs-number&quot;&gt;300F&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt; float1 = &lt;span class=&quot;hljs-number&quot;&gt;300L&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//编译可以通过，并且可以正常运行&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;long占八个字节，float占四个字节，但实际上float表示的范围要比long更大，（这主要是底层采用存储方式不同造成的）所以long类型的常量可以赋值给float类型的变量，而反过来却不行。&lt;br&gt;&lt;strong&gt;2.这个规则也可以用在引用数据类型上&lt;/strong&gt;，如果是引用类型，类型的大小则由他们的继承或实现关系来决定。&lt;/p&gt;
&lt;h2 id=&quot;关于自动java中编译器做的自动强制类型转换&quot;&gt;&lt;a href=&quot;#关于自动java中编译器做的自动强制类型转换&quot; class=&quot;headerlink&quot; title=&quot;关于自动java中编译器做的自动强制类型转换&quot;&gt;&lt;/a&gt;关于自动java中编译器做的自动强制类型转换&lt;/h2&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt; byte1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short1 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt; char1 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;类似上面的代码，相信大家都写过，实际上，也能编译通过，并且正常运行。但是，如果作为初学者，不应该有疑惑吗？&lt;strong&gt;java中的整型常量是int类型的&lt;/strong&gt;，将一个int类型的常量，赋值给byte、short或char类型的变量，却不会报错？？不是小类型才可以进行自动类型转换转为大类型的吗？大类型的转小类型需要进行强制类型转换，并且可能会损失精度的。这里是为什么呢？&lt;/p&gt;
&lt;p&gt;其实是java中有一种机制：&lt;strong&gt;只要一个int类型的常量，在byte、short或char类型的范围之类的，就可以直接赋值给byte、short或char的变量&lt;/strong&gt;，检查工作是java的编译器自动进行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;1.只能是常量，不能是变量或变量参与运算的表达式&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt; byte1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short1 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt; char1 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; int1 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;；

&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short2 = byte1 + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short3 = int1;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short4 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//编译通过，并且可以正常运行&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为java编译器只会自动检测字面常量是否超出了类型的范围，而不会对变量的值或有变量参与的运算结果进行检测。&lt;br&gt;“short short2 = byte1 + 1;”在做运算的时候，会自动上升为int类型，然后编译器就会检测到结果是一个int类型的值，而前面的变量是一个short类型的。不是小类型转大类型，所以直接编译报错。&lt;br&gt;“short short3 = int1;” 直接通过变量的类型就有问题，而不会通过上下文来判断值是否超出了范围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.对于纯常量的表达式，也是可以的&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short4 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//编译通过，并且可以正常运行&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为简单的常量表达式，java的编译器可以直接就运算出结果，然后再进一步检测是否超出了范围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.这个机制只是针对int转byte、short或char&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt; float1 = &lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对于其它的基本数据类型或引用数据类型，是没有这个机制的，只能使用文章开头说的一般规律。&lt;br&gt;其它一些简单的测试，比如超出范围就会编译报错.&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维常用的150条命令</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E7%9A%84150%E6%9D%A1%E5%91%BD%E4%BB%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E7%9A%84150%E6%9D%A1%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-27T06:00:00.000Z</published>
    <updated>2020-09-18T04:43:02.970Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>线上查询及帮助命令(2个)</td><td></td></tr><tr><td>man</td><td>查看命令帮助，命令的词典，更复杂的还有info，但不常用。</td></tr><tr><td>help</td><td>查看Linux内置命令的帮助，比如cd命令。</td></tr><tr><td>文件和目录操作命令(18个)</td><td></td></tr><tr><td>ls</td><td>全拼list，功能是列出目录的内容及其内容属性信息。</td></tr><tr><td>cd</td><td>全拼change directory，功能是从当前工作目录切换到指定的工作目录。</td></tr><tr><td>cp</td><td>全拼copy，其功能为复制文件或目录。</td></tr><tr><td>find</td><td>查找的意思，用于查找目录及目录下的文件。</td></tr><tr><td>mkdir</td><td>全拼make directories，其功能是创建目录。</td></tr><tr><td>mv</td><td>全拼move，其功能是移动或重命名文件。</td></tr><tr><td>pwd</td><td>全拼print working directory，其功能是显示当前工作目录的绝对路径。</td></tr><tr><td>rename</td><td>用于重命名文件。</td></tr><tr><td>rm</td><td>全拼remove，其功能是删除一个或多个文件或目录。</td></tr><tr><td>rmdir</td><td>全拼remove empty directories，功能是删除空目录。</td></tr><tr><td>touch</td><td>创建新的空文件，改变已有文件的时间戳属性。</td></tr><tr><td>tree</td><td>功能是以树形结构显示目录下的内容。</td></tr><tr><td>basename</td><td>显示文件名或目录名。</td></tr><tr><td>dirname</td><td>显示文件或目录路径。</td></tr><tr><td>chattr</td><td>改变文件的扩展属性。</td></tr><tr><td>lsattr</td><td>查看文件扩展属性。</td></tr><tr><td>file</td><td>显示文件的类型。</td></tr><tr><td>md5sum</td><td>计算和校验文件的MD5值。</td></tr><tr><td>查看文件及内容处理命令（21个）</td><td></td></tr><tr><td>cat</td><td>全拼concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。</td></tr><tr><td>tac</td><td>tac是cat的反向拼写，因此命令的功能为反向显示文件内容。</td></tr><tr><td>more</td><td>分页显示文件内容。</td></tr><tr><td>less</td><td>分页显示文件内容，more命令的相反用法。</td></tr><tr><td>head</td><td>显示文件内容的头部。</td></tr><tr><td>tail</td><td>显示文件内容的尾部。</td></tr><tr><td>cut</td><td>将文件的每一行按指定分隔符分割并输出。</td></tr><tr><td>split</td><td>分割文件为不同的小片段。</td></tr><tr><td>paste</td><td>按行合并文件内容。</td></tr><tr><td>sort</td><td>对文件的文本内容排序。</td></tr><tr><td>uniq</td><td>去除重复行。oldboy</td></tr><tr><td>wc</td><td>统计文件的行数、单词数或字节数。</td></tr><tr><td>iconv</td><td>转换文件的编码格式。</td></tr><tr><td>dos2unix</td><td>将DOS格式文件转换成UNIX格式。</td></tr><tr><td>diff</td><td>全拼difference，比较文件的差异，常用于文本文件。</td></tr><tr><td>vimdiff</td><td>命令行可视化文件比较工具，常用于文本文件。</td></tr><tr><td>rev</td><td>反向输出文件内容。</td></tr><tr><td>grep/egrep</td><td>过滤字符串，三剑客老三。</td></tr><tr><td>join</td><td>按两个文件的相同字段合并。</td></tr><tr><td>tr</td><td>替换或删除字符。</td></tr><tr><td>vi/vim</td><td>命令行文本编辑器。</td></tr><tr><td>文件压缩及解压缩命令（4个）</td><td></td></tr><tr><td>tar</td><td>打包压缩。oldboy</td></tr><tr><td>unzip</td><td>解压文件。</td></tr><tr><td>gzip</td><td>gzip压缩工具。</td></tr><tr><td>zip</td><td>压缩工具。</td></tr><tr><td>信息显示命令（11个）</td><td></td></tr><tr><td>uname</td><td>显示操作系统相关信息的命令。</td></tr><tr><td>hostname</td><td>显示或者设置当前系统的主机名。</td></tr><tr><td>dmesg</td><td>显示开机信息，用于诊断系统故障。</td></tr><tr><td>uptime</td><td>显示系统运行时间及负载。</td></tr><tr><td>stat</td><td>显示文件或文件系统的状态。</td></tr><tr><td>du</td><td>计算磁盘空间使用情况。</td></tr><tr><td>df</td><td>报告文件系统磁盘空间的使用情况。</td></tr><tr><td>top</td><td>实时显示系统资源使用情况。</td></tr><tr><td>free</td><td>查看系统内存。</td></tr><tr><td>date</td><td>显示与设置系统时间。</td></tr><tr><td>cal</td><td>查看日历等时间信息。</td></tr><tr><td>搜索文件命令（4个）</td><td></td></tr><tr><td>which</td><td>查找二进制命令，按环境变量PATH路径查找。</td></tr><tr><td>find</td><td>从磁盘遍历查找文件或目录。</td></tr><tr><td>whereis</td><td>查找二进制命令，按环境变量PATH路径查找。</td></tr><tr><td>locate</td><td>从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用updatedb更新库。</td></tr><tr><td>用户管理命令（10个）</td><td></td></tr><tr><td>useradd</td><td>添加用户。</td></tr><tr><td>usermod</td><td>修改系统已经存在的用户属性。</td></tr><tr><td>userdel</td><td>删除用户。</td></tr><tr><td>groupadd</td><td>添加用户组。</td></tr><tr><td>passwd</td><td>修改用户密码。</td></tr><tr><td>chage</td><td>修改用户密码有效期限。</td></tr><tr><td>id</td><td>查看用户的uid,gid及归属的用户组。</td></tr><tr><td>su</td><td>切换用户身份。</td></tr><tr><td>visudo</td><td>编辑/etc/sudoers文件的专属命令。</td></tr><tr><td>sudo</td><td>以另外一个用户身份（默认root用户）执行事先在sudoers文件允许的命令。</td></tr><tr><td>基础网络操作命令（11个）</td><td></td></tr><tr><td>telnet</td><td>使用TELNET协议远程登录。</td></tr><tr><td>ssh</td><td>使用SSH加密协议远程登录。</td></tr><tr><td>scp</td><td>全拼secure copy，用于不同主机之间复制文件。</td></tr><tr><td>wget</td><td>命令行下载文件。</td></tr><tr><td>ping</td><td>测试主机之间网络的连通性。</td></tr><tr><td>route</td><td>显示和设置linux系统的路由表。</td></tr><tr><td>ifconfig</td><td>查看、配置、启用或禁用网络接口的命令。</td></tr><tr><td>ifup</td><td>启动网卡。</td></tr><tr><td>ifdown</td><td>关闭网卡。</td></tr><tr><td>netstat</td><td>查看网络状态。</td></tr><tr><td>ss</td><td>查看网络状态。</td></tr><tr><td>深入网络操作命令（9个）</td><td></td></tr><tr><td>nmap</td><td>网络扫描命令。</td></tr><tr><td>lsof</td><td>全名list open files，也就是列举系统中已经被打开的文件。</td></tr><tr><td>mail</td><td>发送和接收邮件。</td></tr><tr><td>mutt</td><td>邮件管理命令。</td></tr><tr><td>nslookup</td><td>交互式查询互联网DNS服务器的命令。</td></tr><tr><td>dig</td><td>查找DNS解析过程。</td></tr><tr><td>host</td><td>查询DNS的命令。</td></tr><tr><td>traceroute</td><td>追踪数据传输路由状况。</td></tr><tr><td>tcpdump</td><td>命令行的抓包工具。</td></tr><tr><td>有关磁盘与文件系统的命令（16个）</td><td></td></tr><tr><td>mount</td><td>挂载文件系统。</td></tr><tr><td>umount</td><td>卸载文件系统。</td></tr><tr><td>fsck</td><td>检查并修复Linux文件系统。</td></tr><tr><td>dd</td><td>转换或复制文件。</td></tr><tr><td>dumpe2fs</td><td>导出ext2/ext3/ext4文件系统信息。</td></tr><tr><td>dump</td><td>ext2/3/4文件系统备份工具。</td></tr><tr><td>fdisk</td><td>磁盘分区命令，适用于2TB以下磁盘分区。</td></tr><tr><td>parted</td><td>磁盘分区命令，没有磁盘大小限制，常用于2TB以下磁盘分区。</td></tr><tr><td>mkfs</td><td>格式化创建Linux文件系统。</td></tr><tr><td>partprobe</td><td>更新内核的硬盘分区表信息。</td></tr><tr><td>e2fsck</td><td>检查ext2/ext3/ext4类型文件系统。</td></tr><tr><td>mkswap</td><td>创建Linux交换分区。</td></tr><tr><td>swapon</td><td>启用交换分区。</td></tr><tr><td>swapoff</td><td>关闭交换分区。</td></tr><tr><td>sync</td><td>将内存缓冲区内的数据写入磁盘。</td></tr><tr><td>resize2fs</td><td>调整ext2/ext3/ext4文件系统大小。</td></tr><tr><td>系统权限及用户授权相关命令（4个）</td><td></td></tr><tr><td>chmod</td><td>改变文件或目录权限。</td></tr><tr><td>chown</td><td>改变文件或目录的属主和属组。</td></tr><tr><td>chgrp</td><td>更改文件用户组。</td></tr><tr><td>umask</td><td>显示或设置权限掩码。</td></tr><tr><td>查看系统用户登陆信息的命令（7个）</td><td></td></tr><tr><td>whoami</td><td>显示当前有效的用户名称，相当于执行id -un命令。</td></tr><tr><td>who</td><td>显示目前登录系统的用户信息。</td></tr><tr><td>w</td><td>显示已经登陆系统的用户列表，并显示用户正在执行的指令。</td></tr><tr><td>last</td><td>显示登入系统的用户。</td></tr><tr><td>lastlog</td><td>显示系统中所有用户最近一次登录信息。</td></tr><tr><td>users</td><td>显示当前登录系统的所有用户的用户列表。</td></tr><tr><td>finger</td><td>查找并显示用户信息。</td></tr><tr><td>内置命令及其它（19个）</td><td></td></tr><tr><td>echo</td><td>打印变量，或直接输出指定的字符串</td></tr><tr><td>printf</td><td>将结果格式化输出到标准输出。</td></tr><tr><td>rpm</td><td>管理rpm包的命令。</td></tr><tr><td>yum</td><td>自动化简单化地管理rpm包的命令。</td></tr><tr><td>watch</td><td>周期性的执行给定的命令，并将命令的输出以全屏方式显示。</td></tr><tr><td>alias</td><td>设置系统别名。</td></tr><tr><td>unalias</td><td>取消系统别名。</td></tr><tr><td>date</td><td>查看或设置系统时间。</td></tr><tr><td>clear</td><td>清除屏幕，简称清屏。</td></tr><tr><td>history</td><td>查看命令执行的历史纪录。</td></tr><tr><td>eject</td><td>弹出光驱。</td></tr><tr><td>time</td><td>计算命令执行时间。</td></tr><tr><td>nc</td><td>功能强大的网络工具。</td></tr><tr><td>xargs</td><td>将标准输入转换成命令行参数。</td></tr><tr><td>exec</td><td>调用并执行指令的命令。</td></tr><tr><td>export</td><td>设置或者显示环境变量。</td></tr><tr><td>unset</td><td>删除变量或函数。</td></tr><tr><td>type</td><td>用于判断另外一个命令是否是内置命令。</td></tr><tr><td>bc</td><td>命令行科学计算器</td></tr><tr><td>系统管理与性能监视命令(9个)</td><td></td></tr><tr><td>chkconfig</td><td>管理Linux系统开机启动项。</td></tr><tr><td>vmstat</td><td>虚拟内存统计。</td></tr><tr><td>mpstat</td><td>显示各个可用CPU的状态统计。</td></tr><tr><td>iostat</td><td>统计系统IO。</td></tr><tr><td>sar</td><td>全面地获取系统的CPU、运行队列、磁盘 I/O、分页（交换区）、内存、 CPU中断和网络等性能数据。</td></tr><tr><td>ipcs</td><td>用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</td></tr><tr><td>ipcrm</td><td>用来删除一个或更多的消息队列、信号量集或者共享内存标识。</td></tr><tr><td>strace</td><td>用于诊断、调试Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</td></tr><tr><td>ltrace</td><td>命令会跟踪进程的库函数调用,它会显现出哪个库函数被调用。</td></tr><tr><td>关机/重启/注销和查看系统信息的命令（6个）</td><td></td></tr><tr><td>shutdown</td><td>关机。</td></tr><tr><td>halt</td><td>关机。</td></tr><tr><td>poweroff</td><td>关闭电源。</td></tr><tr><td>logout</td><td>退出当前登录的Shell。</td></tr><tr><td>exit</td><td>退出当前登录的Shell。</td></tr><tr><td>Ctrl+d</td><td>退出当前登录的Shell的快捷键。</td></tr><tr><td>进程管理相关命令（15个）</td><td></td></tr><tr><td>bg</td><td>将一个在后台暂停的命令，变成继续执行 （在后台执行）。</td></tr><tr><td>fg</td><td>将后台中的命令调至前台继续运行。</td></tr><tr><td>jobs</td><td>查看当前有多少在后台运行的命令。</td></tr><tr><td>kill</td><td>终止进程。</td></tr><tr><td>killall</td><td>通过进程名终止进程。</td></tr><tr><td>pkill</td><td>通过进程名终止进程。</td></tr><tr><td>crontab</td><td>定时任务命令。</td></tr><tr><td>ps</td><td>显示进程的快照。</td></tr><tr><td>pstree</td><td>树形显示进程。</td></tr><tr><td>nice/renice</td><td>调整程序运行的优先级。</td></tr><tr><td>nohup</td><td>忽略挂起信号运行指定的命令。</td></tr><tr><td>pgrep</td><td>查找匹配条件的进程。</td></tr><tr><td>runlevel</td><td>查看系统当前运行级别。</td></tr><tr><td>init</td><td>切换运行级别。</td></tr><tr><td>service</td><td>启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;功能说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;线上查询及帮助命令(2个)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;man&lt;/td&gt;
&lt;td&gt;查看命令帮
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】JavaWeb-文件上传</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91JavaWeb-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91JavaWeb-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-08-27T05:52:05.548Z</published>
    <updated>2020-09-18T04:43:03.045Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，以免以下几个包导错</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.ProgressListener;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</code></pre></div><p><strong>源码：</strong></p><p>FileSerlvet类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chen;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.ProgressListener;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Servlet implementation class FileSerlvet</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSerlvet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span><span class="hljs-comment"> *      response)</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><span class="hljs-function"><span class="hljs-keyword">throws</span> ServletException, IOException </span>{<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-comment">// response.getWriter().append("Served at: ").append(request.getContextPath());</span><span class="hljs-comment">// 判断上传的文件普通表单还是带文件的表单</span><span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) {<span class="hljs-keyword">return</span>;<span class="hljs-comment">//终止方法运行,说明这是一个普通的表单,直接返回</span>}    <span class="hljs-comment">//创建上传文件的保存路径,建议在WEB-INF路径下,安全,用户无法直接访间上传的文件;</span>    String uploadPath =<span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/upload"</span>);    File uploadFile = <span class="hljs-keyword">new</span> File(uploadPath);    <span class="hljs-keyword">if</span> (!uploadFile.exists()){    uploadFile.mkdir(); <span class="hljs-comment">//创建这个月录</span>    }<span class="hljs-comment">// 创建上传文件的保存路径，建议在WEB-INF路径下，安全，用户无法直接访问上传的文件</span>String tmpPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/tmp"</span>);File file = <span class="hljs-keyword">new</span> File(tmpPath);<span class="hljs-keyword">if</span> (!file.exists()) {file.mkdir();<span class="hljs-comment">//创建临时目录</span>}<span class="hljs-comment">// 处理上传的文件,一般都需要通过流来获取,我们可以使用 request, getInputstream(),原生态的文件上传流获取,十分麻烦</span><span class="hljs-comment">// 但是我们都建议使用 Apache的文件上传组件来实现, common-fileupload,它需要旅 commons-io组件;</span><span class="hljs-keyword">try</span> {<span class="hljs-comment">// 创建DiskFileItemFactory对象，处理文件路径或者大小限制</span>DiskFileItemFactory factory = getDiskFileItemFactory(file);<span class="hljs-comment">/*</span><span class="hljs-comment"> * //通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件 factory.setSizeThreshold(1024 *</span><span class="hljs-comment"> * 1024); //缓存区大小为1M factory.setRepository (file);//临时目录的保存目录,需要一个File</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 2、获取ServletFileUpload</span>ServletFileUpload upload = getServletFileUpload(factory);<span class="hljs-comment">// 3、处理上传文件</span><span class="hljs-comment">// 把前端请求解析，封装成FileItem对象，需要从ServletFileUpload对象中获取</span>String msg = uploadParseRequest(upload, request, uploadPath);<span class="hljs-comment">// Servlet请求转发消息</span>System.out.println(msg);<span class="hljs-keyword">if</span>(msg == <span class="hljs-string">"文件上传成功!"</span>) {<span class="hljs-comment">// Servlet请求转发消息</span>request.setAttribute(<span class="hljs-string">"msg"</span>,msg);request.getRequestDispatcher(<span class="hljs-string">"info.jsp"</span>).forward(request, response);}<span class="hljs-keyword">else</span> {msg =<span class="hljs-string">"请上传文件"</span>;request.setAttribute(<span class="hljs-string">"msg"</span>,msg);request.getRequestDispatcher(<span class="hljs-string">"info.jsp"</span>).forward(request, response);}} <span class="hljs-keyword">catch</span> (FileUploadException e) {<span class="hljs-comment">// TODO 自动生成的 catch 块</span>e.printStackTrace();}}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiskFileItemFactory <span class="hljs-title">getDiskFileItemFactory</span><span class="hljs-params">(File file)</span> </span>{DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<span class="hljs-comment">// 通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件中;</span>factory.setSizeThreshold(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<span class="hljs-comment">// 缓冲区大小为1M</span>factory.setRepository(file);<span class="hljs-comment">// 临时目录的保存目录,需要一个file</span><span class="hljs-keyword">return</span> factory;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServletFileUpload <span class="hljs-title">getServletFileUpload</span><span class="hljs-params">(DiskFileItemFactory factory)</span> </span>{ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload(factory);<span class="hljs-comment">// 监听长传进度</span>upload.setProgressListener(<span class="hljs-keyword">new</span> ProgressListener() {<span class="hljs-comment">// pBYtesRead:已读取到的文件大小</span><span class="hljs-comment">// pContextLength:文件大小</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">long</span> pBytesRead, <span class="hljs-keyword">long</span> pContentLength, <span class="hljs-keyword">int</span> pItems)</span> </span>{System.out.println(<span class="hljs-string">"总大小："</span> + pContentLength + <span class="hljs-string">"已上传："</span> + pBytesRead);}});<span class="hljs-comment">// 处理乱码问题</span>upload.setHeaderEncoding(<span class="hljs-string">"UTF-8"</span>);<span class="hljs-comment">// 设置单个文件的最大值</span>upload.setFileSizeMax(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>);<span class="hljs-comment">// 设置总共能够上传文件的大小</span><span class="hljs-comment">// 1024 = 1kb * 1024 = 1M * 10 = 10м</span><span class="hljs-keyword">return</span> upload;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">uploadParseRequest</span><span class="hljs-params">(ServletFileUpload upload, HttpServletRequest request, String uploadPath)</span></span><span class="hljs-function"><span class="hljs-keyword">throws</span> FileUploadException, IOException </span>{String msg = <span class="hljs-string">""</span>;<span class="hljs-comment">// 把前端请求解析，封装成FileItem对象</span>List&lt;FileItem&gt; fileItems = upload.parseRequest(request);<span class="hljs-keyword">for</span> (FileItem fileItem : fileItems) {<span class="hljs-keyword">if</span> (fileItem.isFormField()) {<span class="hljs-comment">// 判断上传的文件是普通的表单还是带文件的表单</span><span class="hljs-comment">// getFieldName指的是前端表单控件的name;</span>String name = fileItem.getFieldName();String value = fileItem.getString(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">// 处理乱码</span>System.out.println(name + <span class="hljs-string">": "</span> + value);} <span class="hljs-keyword">else</span> {<span class="hljs-comment">// 判断它是上传的文件</span><span class="hljs-comment">// ============处理文件==============</span><span class="hljs-comment">// 拿到文件名</span>String uploadFileName = fileItem.getName();System.out.println(<span class="hljs-string">"上传的文件名: "</span> + uploadFileName);<span class="hljs-keyword">if</span> (uploadFileName.trim().equals(<span class="hljs-string">""</span>) || uploadFileName == <span class="hljs-keyword">null</span>) {<span class="hljs-keyword">continue</span>;}<span class="hljs-comment">// 获得上传的文件名/images/girl/paojie.png</span>String fileName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">"/"</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获得文件的后缀名</span>String fileExtName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">"."</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">/*</span><span class="hljs-comment"> * 如果文件后缀名fileExtName不是我们所需要的 就直按return.不处理,告诉用户文件类型不对。</span><span class="hljs-comment"> */</span>System.out.println(<span class="hljs-string">"文件信息[件名: "</span> + fileName + <span class="hljs-string">" ---文件类型"</span> + fileExtName + <span class="hljs-string">"]"</span>);<span class="hljs-comment">// 可以使用UID（唯一识别的通用码),保证文件名唯</span><span class="hljs-comment">// 0UID. randomUUID(),随机生一个唯一识别的通用码;</span>String uuidPath = UUID.randomUUID().toString();<span class="hljs-comment">// ================处理文件完毕==============</span><span class="hljs-comment">// 存到哪? uploadPath</span><span class="hljs-comment">// 文件真实存在的路径realPath</span>String realPath = uploadPath + <span class="hljs-string">"/"</span> + uuidPath;<span class="hljs-comment">// 给每个文件创建一个对应的文件夹</span>File realPathFile = <span class="hljs-keyword">new</span> File(realPath);<span class="hljs-keyword">if</span> (!realPathFile.exists()) {realPathFile.mkdir();}<span class="hljs-comment">// ==============存放地址完毕==============</span><span class="hljs-comment">// 获得文件上传的流</span>InputStream inputStream = fileItem.getInputStream();<span class="hljs-comment">// 创建一个文件输出流</span><span class="hljs-comment">// realPath =真实的文件夹;</span><span class="hljs-comment">// 差了一个文件;加上翰出文件的名产"/"+uuidFileName</span>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(realPath + <span class="hljs-string">"/"</span> + fileName);<span class="hljs-comment">// 创建一个缓冲区</span><span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<span class="hljs-comment">// 判断是否读取完毕</span><span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<span class="hljs-comment">// 如果大于0说明还存在数据;</span><span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) {fos.write(buffer, <span class="hljs-number">0</span>, len);}<span class="hljs-comment">// 关闭流</span>fos.close();inputStream.close();msg = <span class="hljs-string">"文件上传成功!"</span>;fileItem.delete(); <span class="hljs-comment">// 上传成功,清除临时文件</span><span class="hljs-comment">//=============文件传输完成=============</span>}}<span class="hljs-keyword">return</span> msg;}}</code></pre></div><p>注册xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.chen.FileSerlvet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/upload.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></code></pre></div><p>导入依赖的jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>index.jsp</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%--</span></span><span class="hljs-tag"><span class="hljs-attr">GET</span>：上传文件大小有限制</span><span class="hljs-tag"><span class="hljs-attr">POST</span>：上传文件大小没有限制</span><span class="hljs-tag"> ${<span class="hljs-attr">pageContext.request.contextPath</span>}</span><span class="hljs-tag"> <span class="hljs-attr">--</span>%&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"upload.do"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>上传用户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>info.jsp</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span>%&gt;</span><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=request.getAttribute("msg")%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下，以免以下几个包导错&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.fileupload.
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】Spring5笔记存档</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91Spring5%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91Spring5%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/</id>
    <published>2020-08-27T05:52:05.530Z</published>
    <updated>2020-09-18T04:43:03.300Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV1WE411d7Dv" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1WE411d7Dv</a></p><hr><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDEwMjUxMzkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br>spring官网： <a href="https://spring.io/projects/spring-framework#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-framework#overview</a></p><p>官方下载： <a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><p>GitHub： <a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><p>Spring Web MVC： <a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.7.RELEASE" target="_blank" rel="noopener">spring-webmvc最新版</a></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li>Spring是一个开源的免费框架（容器）！</li><li>Spring是一个轻量级的非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持</li></ul><p>开源免费容器，轻量级非侵入式，控制反转，面向切面，支持事务，支持框架整合</p><p>Spring是一个轻量级的控制反转(IOC)和面向切面(AOP)编程的框架</p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvU3ByaW5nNyVFNSVBNCVBNyVFNiVBOCVBMSVFNSU5RCU5Ny5wbmc?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1-4、扩展"><a href="#1-4、扩展" class="headerlink" title="1.4、扩展"></a>1.4、扩展</h3><p>现代化的java开发 -&gt; 基于Spring的开发</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDEwMzA4MjAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDEwMzE0Mjk1MTQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801031429514"></p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><p>传统的调用</p><ol><li><p>UserDao</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>{<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div></li><li><p>UserDaoImp</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"默认获取用户数据"</span>);}}</code></pre></div></li><li><p>UserSevice</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div></li><li><p>UserServiceImp</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<span class="hljs-keyword">import</span> dao.UserDao;<span class="hljs-keyword">import</span> dao.UserDaoImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>{UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{userDao.getUser();}}</code></pre></div></li></ol><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle0;<span class="hljs-keyword">import</span> Service.UserService;<span class="hljs-keyword">import</span> Service.UserServiceImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest0</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">// 用户实际调用的是业务层，dao层他们不需要接触</span>UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();userService.getUser();}}</code></pre></div><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjI3NDI1ODEucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801122742581"><br>改良：我们使用一个Set接口实现。已经发生了革命性的变化！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//在Service层的实现类(UserServiceImpl)增加一个Set()方法</span><span class="hljs-comment">//利用set动态实现值的注入！</span><span class="hljs-keyword">private</span> UserDao userDao;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>{    <span class="hljs-keyword">this</span>.userDao = userDao;}</code></pre></div><p>set() 方法实际上是动态改变了 UserDao userDao 的 初始化部分（<strong>new UserDaoImpl()</strong>）</p><p>测试中加上</p><div class="hljs"><pre><code class="hljs java">((UserServiceImpl)userService).setUserDao(<span class="hljs-keyword">new</span> UserDaoImpl());</code></pre></div><ul><li>之前，程序是主动创建对象！<strong>控制权在程序猿手上</strong>！</li><li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！（<strong>主动权在客户手上</strong>）</li></ul><p>本质上解决了问题，程序员不用再去管理对象的创建</p><p>系统的耦合性大大降低，可以更专注在业务的实现上</p><p>这是IOC（控制反转）的原型，反转(理解)：主动权交给了用户</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjI4MDU3NjkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801122805769"></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjM1MTg5NzQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123518974"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDExMjMyMzUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjMzNDgyMDcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123348207"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjM0NTA4OTcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123450897"></p><h2 id="3、HolleSpring"><a href="#3、HolleSpring" class="headerlink" title="3、HolleSpring"></a>3、HolleSpring</h2><p>在父模块中导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>pojo的Hello.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>{<span class="hljs-keyword">private</span> String str;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> str;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>{<span class="hljs-keyword">this</span>.str = str;}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"Holle [str="</span> + str + <span class="hljs-string">"]"</span>;}}</code></pre></div><p>在resource里面的xml配置</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--在Spring中创建对象，在Spring这些都称为bean</span><span class="hljs-comment">    类型 变量名 = new 类型();</span><span class="hljs-comment">    Holle holle = new Holle();</span><span class="hljs-comment">    </span><span class="hljs-comment">    bean = 对象(holle)</span><span class="hljs-comment">    id = 变量名(holle)</span><span class="hljs-comment">    class = new的对象(new Holle();)</span><span class="hljs-comment">    property 相当于给对象中的属性设值,让str="Spring"</span><span class="hljs-comment">    --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Hello"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"str"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Spring"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类MyTest</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle1;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> pojo.Hello;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//获取Spring的上下文对象</span>ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<span class="hljs-comment">//我们的对象下能在都在spring·中管理了，我们要使用，直接取出来就可以了</span>Hello holle = (Hello) context.getBean(<span class="hljs-string">"hello"</span>);System.out.println(holle.toString());}}</code></pre></div><p>核心用set注入，所以必须要有下面的se()方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//Hello类</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>{<span class="hljs-keyword">this</span>.str = str;}</code></pre></div><p><strong>思考：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExNjUxNTYyNTkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801165156259"><br>IOC：对象由Spring 来创建，管理，装配！</p><p><strong>弹幕评论里面的理解：</strong></p><p>原来这套程序是：你写好菜单买好菜，客人来了自己把菜炒好招待，就相当于你请人吃饭<br>现在这套程序是：你告诉楼下餐厅，你要哪些菜，客人来的时候，餐厅把做好的你需要的菜送上来<br>IoC：炒菜这件事，不再由你自己来做，而是委托给了第三方__餐厅来做</p><p>此时的区别就是，如果我还需要做其他的菜，我不需要自己搞菜谱买材料再做好，而是告诉餐厅，我要什么菜，什么时候要，你做好送来</p><p>.</p><p>在前面第一个module试试引入Spring</p><div class="hljs"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;&lt;beans xmlns=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>       xmlns:xsi=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi:schemaLocation=<span class="hljs-string">"http://www.springframework.org/schema/beans</span><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;    &lt;bean id="userDaomSql" class="dao.UserDaoMysqlImpl"&gt;&lt;/bean&gt;    &lt;bean id=<span class="hljs-string">"userServiceImpl"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"service.UserServiceImp"</span>&gt;        &lt;!--ref引用spring中已经创建很好的对象--&gt;        &lt;!--value是一个具体的值,基本数据类型--&gt;        &lt;property name=<span class="hljs-string">"userDao"</span> ref=<span class="hljs-string">"userDaomSql"</span>/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre></div><p>第一个module改良后测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle0;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> service.UserServiceImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest0</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(<span class="hljs-string">"userServiceImpl"</span>);userServiceImpl.getUser();}}</code></pre></div><p><strong>总结：</strong></p><p>所有的类都要装配的beans.xml 里面；</p><p>所有的bean 都要通过容器去取；</p><p>容器里面取得的bean，拿出来就是一个对象，用对象调用方法即可；</p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><ol><li>使用无参构造创建对象，默认。</li><li>使用有参构造（如下）</li></ol><p>下标赋值</p><p>index指的是有参构造中参数的下标，下标从0开始;</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>类型赋值（不建议使用）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"kuang"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>直接通过参数名（掌握）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"kuang"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 比如参数名是name，则有name="具体值" --&gt;</span></code></pre></div><p>注册bean之后就对象的初始化了（<strong>类似 new 类名()</strong>）</p><p>弹幕评论：</p><p>name方式还需要无参构造和set方法,index和type只需要有参构造</p><p>就算是new 两个对象，也是只有一个实例（<strong>单例模式：全局唯一</strong>）</p><div class="hljs"><pre><code class="hljs java">User user = (User) context.getBean(<span class="hljs-string">"user"</span>);User user2 = (User) context.getBean(<span class="hljs-string">"user"</span>);system.out.println(user == user2)<span class="hljs-comment">//结果为true</span></code></pre></div><p>总结：在配置文件加载的时候，容器(&lt; bean&gt;)中管理的对象就已经初始化了</p><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"userLove"</span>/&gt;</span><span class="hljs-comment">&lt;!-- 使用时</span><span class="hljs-comment">User user2 = (User) context.getBean("userLove");</span><span class="hljs-comment">--&gt;</span></code></pre></div><h3 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--id：bean的唯一标识符，也就是相当于我们学的对象名</span><span class="hljs-comment">class：bean对象所对应的会限定名：包名+类型</span><span class="hljs-comment">name：也是别名，而且name可以同时取多个别名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"u1 u2,u3;u4"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 使用时</span><span class="hljs-comment">User user2 = (User) context.getBean("u1");</span><span class="hljs-comment">--&gt;</span></code></pre></div><h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>import一般用于团队开发使用，它可以将多个配置文件，导入合并为一个</p><p>假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要注册在不同的bean中，我们可以利<br>用import将所有人的beans.xml合并为一个总的！</p><ul><li><p>张三(beans.xm1)</p></li><li><p>李四(beans2.xm1)</p></li><li><p>王五(beans3.xm1)</p></li><li><p>applicationContext.xml</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans.xm1"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans2.xml"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans3.xm1"</span>/&gt;</span></code></pre></div></li></ul><p><strong>使用的时候，直接使用总的配置就可以了</strong></p><p>弹幕评论：</p><p>按照在总的xml中的导入顺序来进行创建，后导入的会重写先导入的，最终实例化的对象会是后导入xml中的那个</p><h2 id="6、依赖注入（DI）"><a href="#6、依赖注入（DI）" class="headerlink" title="6、依赖注入（DI）"></a>6、依赖注入（DI）</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><p>第4点有提到</p><h3 id="6-2、set方式注入【重点】"><a href="#6-2、set方式注入【重点】" class="headerlink" title="6.2、set方式注入【重点】"></a>6.2、set方式注入【重点】</h3><p>依赖注入：set注入！</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul><p>【环境搭建】</p><ol><li><p>复杂类型</p><p> Address类</p></li><li><p>真实测试对象</p><p> Student类</p></li><li><p>beans.xml</p></li><li><p>测试</p><p> MyTest3</p></li></ol><p>Student类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-meta">@Get</span><span class="hljs-meta">@Set</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<span class="hljs-comment">//别忘了写get和set方法（用lombok注解也行）</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Address address;    <span class="hljs-keyword">private</span> String[] books;    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; card;    <span class="hljs-keyword">private</span> Set&lt;String&gt; game;    <span class="hljs-keyword">private</span> Properties infor;    <span class="hljs-keyword">private</span> String wife;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Student{"</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", address="</span> + address.toString() +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", books="</span> + Arrays.toString(books) +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", hobbies="</span> + hobbies +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", card="</span> + card +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", game="</span> + game +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", infor="</span> + infor +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", wife='"</span> + wife + <span class="hljs-string">'\''</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>Address类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>{    <span class="hljs-keyword">private</span> String address;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> address;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>{        <span class="hljs-keyword">this</span>.address = address;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Address{"</span> +                <span class="hljs-string">"address='"</span> + address + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>beans.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Address"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"address你好"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Student"</span>&gt;</span><span class="hljs-comment">&lt;!--第一种，普通值注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"name你好"</span> /&gt;</span><span class="hljs-comment">&lt;!--第二种，ref注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"address"</span> /&gt;</span><span class="hljs-comment">&lt;!--数组注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"books"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--list列表注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobbies"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--map键值对注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"card"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--set(可去重)注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"game"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>wangzhe<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lol<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>galname<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--空指针null注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"wife"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--properties常量注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"infor"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"id"</span>&gt;</span>20200802<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"name"</span>&gt;</span>cbh<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>MyTest3</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> pojo.Student;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest3</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);Student stu = (Student) context.getBean(<span class="hljs-string">"student"</span>);System.out.println(stu.toString());}}</code></pre></div><h3 id="6-3、拓展注入"><a href="#6-3、拓展注入" class="headerlink" title="6.3、拓展注入"></a>6.3、拓展注入</h3><p>官方文档位置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDI3MTcyMTYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802142717216"></p><p>pojo增加User类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{        }<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">super</span>();<span class="hljs-keyword">this</span>.name = name;<span class="hljs-keyword">this</span>.id = id;}<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> name;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<span class="hljs-keyword">this</span>.name = name;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> id;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">this</span>.id = id;}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"User [name="</span> + name + <span class="hljs-string">", id="</span> + id + <span class="hljs-string">"]"</span>;}}</code></pre></div><p>注意： beans 里面加上这下面两行</p><p>使用p和c命名空间需要导入xml约束</p><p>xmlns:p=“<a href="http://www.springframework.org/schema/p”" target="_blank" rel="noopener">http://www.springframework.org/schema/p”</a><br>xmlns:c=“<a href="http://www.springframework.org/schema/c”" target="_blank" rel="noopener">http://www.springframework.org/schema/c”</a></p><div class="hljs"><pre><code class="hljs xml">?xml version="1.0" encoding="UTF-8"?&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--p命名空间注入/set注入，可以直接注入属性的值-》property--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">p:id</span>=<span class="hljs-string">"20"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--c命名空间，通过构造器注入，需要写入有参和无参构造方法-》construct-args--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cbh"</span> <span class="hljs-attr">c:id</span>=<span class="hljs-string">"22"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java">ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);User user = context.getBean(<span class="hljs-string">"user"</span>,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//确定class对象，就不用再强转了</span>System.out.println(user.toString());</code></pre></div><h3 id="6-4、Bean作用域"><a href="#6-4、Bean作用域" class="headerlink" title="6.4、Bean作用域"></a>6.4、Bean作用域</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM0MDExNjUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143401165"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDMzNDI1ODYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143342586"></p><ol><li><p>单例模式（默认）</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"singleton"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM4MDIwMDUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143802005"><br>弹幕评论：单例模式是把对象放在pool中，需要再取出来，使用的都是同一个对象实例</p><ol><li><p>原型模式: 每次从容器中get的时候，都产生一个新对象！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM4MjYyMjcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143826227"></p><ol><li>其余的request、session、application这些只能在web开放中使用！</li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找，并自动给bean装配属性</li></ul><p>在Spring中有三种装配的方式</p><ol><li><p>在xml中显示配置</p></li><li><p>在java中显示配置</p></li><li><p>隐式的自动装配bean 【重要】</p></li><li><p>环境搭建：一个人有两个宠物</p></li><li><p>byType自动装配：byType会自动查找，和自己对象set方法参数的类型相同的bean</p><p> 保证所有的class唯一(类为全局唯一)</p></li><li><p>byName自动装配：byName会自动查找，和自己对象set对应的值对应的id</p><p> 保证所有id唯一，并且和set注入的值一致</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 找不到id和多个相同class --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span>找不到 id=cat，且有两个Cat</code></pre></div></li></ol><h3 id="7-1测试：自动装配"><a href="#7-1测试：自动装配" class="headerlink" title="7.1测试：自动装配"></a>7.1测试：自动装配</h3><p>pojo的Cat类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shut</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"miao"</span>);    }}</code></pre></div><p>pojo的Dog类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shut</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"wow"</span>);    }}</code></pre></div><p>pojo的People类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{        <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> cat;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCat</span><span class="hljs-params">(Cat cat)</span> </span>{        <span class="hljs-keyword">this</span>.cat = cat;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> dog;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDog</span><span class="hljs-params">(Dog dog)</span> </span>{        <span class="hljs-keyword">this</span>.dog = dog;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +                <span class="hljs-string">"cat="</span> + cat +                <span class="hljs-string">", dog="</span> + dog +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>xml配置 -&gt; byType 自动装配</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Dog"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--byType会在容器自动查找，和自己对象属性相同的bean</span><span class="hljs-comment">例如，Dog dog; 那么就会查找pojo的Dog类，再进行自动装配</span><span class="hljs-comment">--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.People"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cbh"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>xml配置 -&gt; byName 自动装配</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Dog"</span>/&gt;</span><span class="hljs-comment">&lt;!--byname会在容器自动查找，和自己对象set方法的set后面的值对应的id</span><span class="hljs-comment">  例如:setDog()，取set后面的字符作为id，则要id = dog 才可以进行自动装配</span><span class="hljs-comment">  </span><span class="hljs-comment"> --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.People"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cbh"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>弹幕评论：byName只能取到小写，大写取不到</p><h3 id="7-2、使用注解实现自动装配"><a href="#7-2、使用注解实现自动装配" class="headerlink" title="7.2、使用注解实现自动装配"></a>7.2、使用注解实现自动装配</h3><p>jdk1.5支持的注解，spring2.5支持的注解</p><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.（翻译：基于注释的配置的引入提出了一个问题，即这种方法是否比XML“更好”）</p><ol><li>导入context约束</li></ol><p><strong>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context"</a></strong></p><ol><li>配置注解的支持：&lt; context:annotation-config/&gt;</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h4 id="7-2-1、-Autowired"><a href="#7-2-1、-Autowired" class="headerlink" title="7.2.1、@Autowired"></a>7.2.1、@Autowired</h4><p><strong>默认是byType方式，如果匹配不上，就会byName</strong></p><p>在属性上个使用，也可以在set上使用</p><p>我们可以不用编写set方法了，前提是自动装配的属性在Spring容器里，且要符合ByName 自动装配</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><blockquote><p>@Nullable 字段标记了这个注解，说明该字段可以为空</p><p>public name(@Nullable String name){</p><p>}</p></blockquote><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//源码</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Autowired { <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>; }</code></pre></div><p>如果定义了Autowire的require属性为false，说明这个对象可以为null，否则不允许为空（false表示找不到装配，不抛出异常）</p><h4 id="7-2-2、-Autowired-Qualifier"><a href="#7-2-2、-Autowired-Qualifier" class="headerlink" title="7.2.2、@Autowired+@Qualifier"></a>7.2.2、@Autowired+@Qualifier</h4><p><strong>@Autowired不能唯一装配时，需要@Autowired+@Qualifier</strong></p><p>如果@Autowired自动装配环境比较复杂。自动装配无法通过一个注解完成的时候，可以使用@Qualifier(value = “dog”)去配合使用，指定一个唯一的id对象</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier</span>(value = <span class="hljs-string">"dog"</span>)    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><p>弹幕评论：</p><p>如果xml文件中同一个对象被多个bean使用，Autowired无法按类型找到，可以用@Qualifier指定id查找</p><h4 id="7-2-3、-Resource"><a href="#7-2-3、-Resource" class="headerlink" title="7.2.3、@Resource"></a>7.2.3、@Resource</h4><p><strong>默认是byName方式，如果匹配不上，就会byType</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    Resource(name=<span class="hljs-string">"cat"</span>)    <span class="hljs-keyword">private</span> Cat cat;    Resource(name=<span class="hljs-string">"dog"</span>)    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><p>弹幕评论：</p><p>Autowired是byType，@Autowired+@Qualifier = byType || byName</p><p>Autowired是先byteType,如果唯一則注入，否则byName查找。resource是先byname,不符合再继续byType</p><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>@Resource和@Autowired的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】</li><li>@Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li><li>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byname的方式实现</li></ul><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在spring4之后，使用注解开发，必须要保证aop包的导入<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIyMDE5MjQ0OTAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802201924490"><br>使用注解需要导入contex的约束</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="8-1、bean"><a href="#8-1、bean" class="headerlink" title="8.1、bean"></a>8.1、bean</h3><p>弹幕评论：<br>有了&lt; context:component-scan&gt;，另一个&lt; context:annotation-config/&gt;标签可以移除掉，因为已经被包含进去了。</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定要扫描的包，这个包下面的注解才会生效</span><span class="hljs-comment">别只扫一个com.kuang.pojo包--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>1234//@Component 组件//等价于<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">classs</span>"<span class="hljs-attr">pojo.User</span>"/&gt;</span> @Componentpublic class User {       public String name ="秦疆";}</code></pre></div><h3 id="8-2、属性如何注入-value"><a href="#8-2、属性如何注入-value" class="headerlink" title="8.2、属性如何注入@value"></a>8.2、属性如何注入@value</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{     <span class="hljs-comment">//相当于&lt;property name="name" value="kuangshen"/&gt; </span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)     <span class="hljs-keyword">public</span> String name;         <span class="hljs-comment">//也可以放在set方法上面</span>    <span class="hljs-comment">//@value("kuangshen")</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{         <span class="hljs-keyword">this</span>.name = name;     }}</code></pre></div><h3 id="8-3、衍生的注解"><a href="#8-3、衍生的注解" class="headerlink" title="8.3、衍生的注解"></a>8.3、衍生的注解</h3><p>@Component有几个衍生注解，会按照web开发中，mvc架构中分层。</p><ul><li>dao （@Repository）</li><li>service（@Service）</li><li>controller（@Controller）</li></ul><p><strong>这四个注解的功能是一样的，都是代表将某个类注册到容器中</strong></p><h3 id="8-4、自动装配置"><a href="#8-4、自动装配置" class="headerlink" title="8.4、自动装配置"></a>8.4、自动装配置</h3><p>@Autowired：默认是byType方式，如果匹配不上，就会byName</p><p>@Nullable：字段标记了这个注解，说明该字段可以为空</p><p>@Resource：默认是byName方式，如果匹配不上，就会byType</p><h3 id="8-5、作用域-scope"><a href="#8-5、作用域-scope" class="headerlink" title="8.5、作用域@scope"></a>8.5、作用域@scope</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//原型模式prototype，单例模式singleton</span><span class="hljs-comment">//scope("prototype")相当于&lt;bean scope="prototype"&gt;&lt;/bean&gt;</span><span class="hljs-meta">@Component</span> <span class="hljs-meta">@scope</span>(<span class="hljs-string">"prototype"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{         <span class="hljs-comment">//相当于&lt;property name="name" value="kuangshen"/&gt; </span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)     <span class="hljs-keyword">public</span> String name;         <span class="hljs-comment">//也可以放在set方法上面</span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{         <span class="hljs-keyword">this</span>.name = name;     }}</code></pre></div><h3 id="8-6、小结"><a href="#8-6、小结" class="headerlink" title="8.6、小结"></a>8.6、小结</h3><p><strong>xml与注解：</strong></p><ul><li>xml更加万能，维护简单，适用于任何场合</li><li>注解，不是自己的类使用不了，维护复杂</li></ul><p><strong>最佳实践：</strong></p><ul><li>xml用来管理bean</li><li>注解只用来完成属性的注入</li><li>要开启注解支持</li></ul><h2 id="9、使用Java的方式配置Spring"><a href="#9、使用Java的方式配置Spring" class="headerlink" title="9、使用Java的方式配置Spring"></a>9、使用Java的方式配置Spring</h2><p>不使用Spring的xml配置，完全交给java来做！</p><p>Spring的一个子项目，在spring4之后，，，它成为了核心功能</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIyMTU3NTI4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802215752868"><br><strong>实体类：pojo的User.java</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这里这个注解的意思,就是说明这个类被Spring接管了,注册到了容器中 </span><span class="hljs-meta">@component</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{     <span class="hljs-keyword">private</span> String name;        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{     <span class="hljs-keyword">return</span> name;     }     <span class="hljs-comment">//属性注入值</span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"QINJIANG')  </span><span class="hljs-string">    public void setName(String name) { </span><span class="hljs-string">    this.name = name; </span><span class="hljs-string">    } </span><span class="hljs-string">    @Override </span><span class="hljs-string">    public String toString() { </span><span class="hljs-string">        return "</span>user{<span class="hljs-string">" + </span><span class="hljs-string">        "</span>name=<span class="hljs-string">'" + name + '</span>\<span class="hljs-string">''</span>+         <span class="hljs-string">'}'</span>;     } }</code></pre></div><p>弹幕评论：要么使用@Bean，要么使用@Component和ComponentScan，两种效果一样</p><p><strong>配置文件：config中的kuang.java</strong></p><p>@Import(KuangConfig2.class)，用@import来包含KuangConfig2.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这个也会Spring容器托管,注册到容器中,因为他本米就是一个@Component </span><span class="hljs-comment">// @Configuration表这是一个配置类,就像我们之前看的beans.xml，类似于&lt;beans&gt;标签</span><span class="hljs-meta">@Configuration</span> <span class="hljs-meta">@componentScan</span>(<span class="hljs-string">"com.Kuang.pojo"</span>) <span class="hljs-comment">//开启扫描</span><span class="hljs-comment">//@Import(KuangConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KuangConfig</span> </span>{     <span class="hljs-comment">//注册一个bean , 就相当于我们之前写的一个bean 标签 </span>    <span class="hljs-comment">//这个方法的名字,就相当于bean 标签中的 id 属性 -&gt;getUser</span>    <span class="hljs-comment">//这个方法的返同值,就相当于bean 标签中的class 属性 -&gt;User</span>        <span class="hljs-comment">//@Bean </span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//就是返回要注入到bean的对象! </span>    } }</code></pre></div><p>弹幕评论：ComponentScan、@Component(“pojo”) 这两个注解配合使用</p><p><strong>测试类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[ ] args)</span> </span>{     <span class="hljs-comment">//如果完全使用了配置类方式去做,我们就只能通过 Annotationconfig 上下文来获取容器,通过配置类的class对象加载! </span>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.Class); <span class="hljs-comment">//class对象</span>    User getUser =(User)context.getBean( <span class="hljs-string">"getUser"</span>); <span class="hljs-comment">//方法名getUser</span>    System.out.Println(getUser.getName());     } }</code></pre></div><p><strong>会创建两个相同对象问题的说明：</strong></p><p><strong>弹幕总结 - -&gt; @Bean是相当于&lt; bean&gt;标签创建的对象，而我们之前学的@Component是通过spring自动创建的这个被注解声明的对象，所以这里相当于有两个User对象被创建了。一个是bean标签创建的（@Bean），一个是通过扫描然后使用@Component，spring自动创建的User对象，所以这里去掉@Bean这些东西，然后开启扫描。之后在User头上用@Component即可达到spring自动创建User对象了</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这个也会Spring容器托管,注册到容器中,因为他本米就是一个@Component </span><span class="hljs-comment">// @Configuration表这是一个配置类,就像我们之前看的beans.xml，类似于&lt;beans&gt;标签</span><span class="hljs-meta">@Configuration</span> <span class="hljs-meta">@componentScan</span>(<span class="hljs-string">"com.Kuang.pojo"</span>) <span class="hljs-comment">//开启扫描</span><span class="hljs-comment">//@Import(KuangConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KuangConfig</span> </span>{     <span class="hljs-comment">//注册一个bean , 就相当于我们之前写的一个bean 标签 </span>    <span class="hljs-comment">//这个方法的名字,就相当于bean 标签中的 id 属性 -&gt;getUser</span>    <span class="hljs-comment">//这个方法的返同值,就相当于bean 标签中的class 属性 -&gt;User</span>        <span class="hljs-comment">//@Bean </span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//就是返回要注入到bean的对象! </span>    } }</code></pre></div><p>弹幕评论：ComponentScan、@Component(“pojo”) 这两个注解配合使用</p><p><strong>测试类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[ ] args)</span> </span>{     <span class="hljs-comment">//如果完全使用了配置类方式去做,我们就只能通过 Annotationconfig 上下文来获取容器,通过配置类的class对象加载! </span>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.Class); <span class="hljs-comment">//class对象</span>    User getUser =(User)context.getBean( <span class="hljs-string">"getUser"</span>); <span class="hljs-comment">//方法名getUser</span>    System.out.Println(getUser.getName());     } }</code></pre></div><p><strong>会创建两个相同对象问题的说明：</strong></p><p><strong>弹幕总结 - -&gt; @Bean是相当于&lt; bean&gt;标签创建的对象，而我们之前学的@Component是通过spring自动创建的这个被注解声明的对象，所以这里相当于有两个User对象被创建了。一个是bean标签创建的（@Bean），一个是通过扫描然后使用@Component，spring自动创建的User对象，所以这里去掉@Bean这些东西，然后开启扫描。之后在User头上用@Component即可达到spring自动创建User对象了</strong></p><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学代理模式？</p><p>因为这个就是SpringAOP的底层！【SpringAOP 和 SpringMVC】</p><p>分类：</p><ul><li>动态代理</li><li>静态代理</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE0Mjc4NDYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803101427846"></p><h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE2MjE4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803101621868"><br>代码步骤：</p><p>1、接口</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Host</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>2、真实角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HostMaster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Host</span></span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"房东要出租房子"</span>);}}</code></pre></div><p>3、代理角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> </span>{<span class="hljs-keyword">public</span> Host host;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>{}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>{<span class="hljs-keyword">super</span>();<span class="hljs-keyword">this</span>.host = host;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{seeHouse();host.rent();fee();sign();}<span class="hljs-comment">//看房</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"看房子"</span>);}<span class="hljs-comment">//收费</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"收中介费"</span>);}<span class="hljs-comment">//合同</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sign</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"签合同"</span>);}}</code></pre></div><p>4、客户端访问代理角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle4_proxy;<span class="hljs-keyword">import</span> pojo.Host;<span class="hljs-keyword">import</span> pojo.HostMaster;<span class="hljs-keyword">import</span> pojo.Proxy;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//房东要出租房子</span>Host host = <span class="hljs-keyword">new</span> HostMaster();<span class="hljs-comment">//中介帮房东出租房子，但也收取一定费用（增加一些房东不做的操作）</span>Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<span class="hljs-comment">//看不到房东，但通过代理，还是租到了房子</span>proxy.rent();}}</code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDUyMjk0NzgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803105229478"><br>代码翻倍：几十个真实角色就得写几十个代理</p><p>AOP横向开发</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMTE1Mzk2MjEucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803111539621"></p><h3 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h3><p>动态代理和静态角色一样，动态代理底层是反射机制</p><p>动态代理类是动态生成的，不是我们直接写好的！</p><p>动态代理(两大类)：基于接口，基于类</p><ul><li>基于接口：JDK的动态代理【使用ing】</li><li>基于类：cglib</li><li>java字节码实现：javasisit</li></ul><p>了解两个类<br>1、Proxy：代理<br>2、InvocationHandler：调用处理程序<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMTI2MTk4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803112619868"></p><p>实例：</p><p>接口 Host.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Host</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>接口Host实现类 HostMaster.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//接口实现类</span><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HostMaster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Host</span></span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"房东要租房子"</span>);}}</code></pre></div><p>代理角色的处理程序类 ProxyInvocationHandler.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-comment">///用这个类，自动生成代理</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{<span class="hljs-comment">// Foo f =(Foo) Proxy.NewProxyInstance(Foo. Class.GetClassLoader(),</span><span class="hljs-comment">// new Class&lt;?&gt;[] { Foo.Class },</span><span class="hljs-comment">// handler);</span><span class="hljs-comment">// 被代理的接口</span><span class="hljs-keyword">public</span> HostMaster hostMaster ;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHostMaster</span><span class="hljs-params">(HostMaster hostMaster)</span> </span>{<span class="hljs-keyword">this</span>.hostMaster = hostMaster;}<span class="hljs-comment">// 得到生成的代理类 </span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">// newProxyInstance() -&gt; 生成代理对象，就不用再写具体的代理类了</span><span class="hljs-comment">// this.getClass().getClassLoader() -&gt; 找到加载类的位置</span><span class="hljs-comment">// hostMaster.getClass().getInterfaces() -&gt; 代理的具体接口</span><span class="hljs-comment">// this -&gt; 代表了接口InvocationHandler的实现类ProxyInvocationHandler</span><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), hostMaster.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);<span class="hljs-comment">// 处理代理实例并返回结果</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{seeHouse();<span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现的</span>        <span class="hljs-comment">// invoke()执行它真正要执行的方法</span>Object result = method.invoke(hostMaster, args);fee();<span class="hljs-keyword">return</span> result;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"看房子"</span>);}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"收中介费"</span>);}}</code></pre></div><p>用户类 My2.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle4_proxy;<span class="hljs-keyword">import</span> pojo2.Host;<span class="hljs-keyword">import</span> pojo2.Host2;<span class="hljs-keyword">import</span> pojo2.HostMaster;<span class="hljs-keyword">import</span> pojo2.ProxyInvocationHandler;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My2</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//真实角色</span>HostMaster hostMaster = <span class="hljs-keyword">new</span> HostMaster();        <span class="hljs-comment">//代理角色，现在没有；用代理角色的处理程序来实现Host接口的调用</span>ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();                <span class="hljs-comment">//pih -&gt; HostMaster接口类 -&gt; Host接口</span>pih.setHostMaster(hostMaster);        <span class="hljs-comment">//获取newProxyInstance动态生成代理类</span>Host proxy = (Host) pih.getProxy();proxy.rent();}}</code></pre></div><p>弹幕评论：<br>什么时候调用invoke方法的?<br>代理实例调用方法时invoke方法就会被调用，可以debug试试</p><p>改为<strong>万能代理类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">///用这个类，自动生代理</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{    <span class="hljs-comment">// Foo f =(Foo) Proxy.NewProxyInstance(Foo. Class.GetClassLoader(),</span>    <span class="hljs-comment">// new Class&lt;?&gt;[] { Foo.Class },</span>    <span class="hljs-comment">// handler);</span>    <span class="hljs-comment">// 被代理的接口</span>    <span class="hljs-keyword">public</span> Object target;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>{        <span class="hljs-keyword">this</span>.target = target;    }    <span class="hljs-comment">// 得到生成的代理类 -&gt; 固定的代码</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>{        <span class="hljs-comment">// newProxyInstance() -&gt; 生成代理对象，就不用再写具体的代理类了</span>        <span class="hljs-comment">// this.getClass().getClassLoader() -&gt; 找到加载类的位置</span>        <span class="hljs-comment">// hostMaster.getClass().getInterfaces() -&gt; 代理的具体接口</span>        <span class="hljs-comment">// this -&gt; 代表了接口InvocationHandler的实现类ProxyInvocationHandler</span>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),                target.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);    }    <span class="hljs-comment">// 处理代理实例并返回结果</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        <span class="hljs-comment">//前置通知</span>        pre();        <span class="hljs-comment">//打印日志,通过反射的方式</span>        log(method.getName());        <span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现的</span>        <span class="hljs-comment">// invoke()执行它真正要执行的方法</span>        Object result = method.invoke(target, args);        <span class="hljs-comment">//后置通知</span>        post();        <span class="hljs-keyword">return</span> result;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"[前置通知]"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">post</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"[后置通知]"</span>);    }    <span class="hljs-comment">//日志打印</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span> </span>{        System.out.println(<span class="hljs-string">"[Debug]执行了"</span> + msg + <span class="hljs-string">"方法"</span>);    }}</code></pre></div><p>测试类：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//真实角色</span>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();        <span class="hljs-comment">//代理角色,不存在</span>        ProxyInvocationHandler proxyInvocationHandler = <span class="hljs-keyword">new</span> ProxyInvocationHandler();        <span class="hljs-comment">//设置要代理的对象</span>        proxyInvocationHandler.setTarget(userService);        <span class="hljs-comment">//动态生产代理类</span>        UserService proxy = (UserService) proxyInvocationHandler.getProxy();        <span class="hljs-comment">//执行业务操作</span>        proxy.add();    }}</code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzMwMzU0ODQlMjAtJTIwJUU1JThBJUE4JUU2JTgwJTgxJUU0JUJCJUEzJUU3JTkwJTg2LnBuZw?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803133035484"></p><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzQ1MDIxNjklMjAtJTIwQU9QLnBuZw?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803134502169"></p><p><img src="https://s1.ax1x.com/2020/08/28/dIUZkV.png" srcset="/blog/img/loading.gif" alt="dIUZkV.png"></p><h3 id="11-2、AOP在Spring中的使用"><a href="#11-2、AOP在Spring中的使用" class="headerlink" title="11.2、AOP在Spring中的使用"></a>11.2、AOP在Spring中的使用</h3><p>提供声明式事务，允许用户自定义切面</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等…</li><li>切面(Aspect)：横切关注点 被模块化的特殊对象。即，它是一个类。（Log类）</li><li>通知(Advice)：切面必须要完成的工作。即，它是类中的一个方法。（Log类中的方法）</li><li>目标(Target)：被通知对象。（生成的代理类)</li><li>代理(Proxy)：向目标对象应用通知之后创建的对象。（生成的代理类）</li><li>切入点(PointCut)：切面通知执行的”地点”的定义。（最后两点：在哪个地方执行，比如：method.invoke()）</li><li>连接点(JointPoint)：与切入点匹配的执行点。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxNTQwNDM5MDkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803154043909"><br>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzU5Mzc0MzUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803135937435"><br><strong>即AOP在不改变原有代码的情况下，去增加新的功能。</strong>（代理）</p><h3 id="11-3、使用Spring实现AOP"><a href="#11-3、使用Spring实现AOP" class="headerlink" title="11.3、使用Spring实现AOP"></a>11.3、使用Spring实现AOP</h3><p>【重点】</p><ul><li>使用AOP织入，需要导入一个依赖包！</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h4 id="11-3-1、方法一：使用原生spring接口"><a href="#11-3-1、方法一：使用原生spring接口" class="headerlink" title="11.3.1、方法一：使用原生spring接口"></a>11.3.1、方法一：使用原生spring接口</h4><p>springAPI接口实现</p><p>需要先导入aop约束</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.Log"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.AfterLog"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--方式一，使用原生Spring API接口--&gt;</span>    <span class="hljs-comment">&lt;!--配置aop,还需要导入aop约束--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--切入点：expression:表达式，execution（要执行的位置）--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--UserServiceImpl.*(..) -》 UserServiceImpl类下的所以方法(参数)--&gt;</span>        <span class="hljs-comment">&lt;!--执行环绕增加--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 环绕,在id="pointcut"的前后切入 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p><code>execution(返回类型，类名，方法名(参数))</code> -&gt; <code>execution(* com.service.*,*(…))</code></p><p>UserService.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>UserService 的实现类 UserServiceImp.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"add增"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"delete删"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"update改"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"query查"</span>);    }}</code></pre></div><p>前置Log.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>{    <span class="hljs-comment">//method：要执行的目标对象的方法</span>    <span class="hljs-comment">//args：参数</span>    <span class="hljs-comment">//target：目标对象</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        System.out.println(target.getClass().getName()+<span class="hljs-string">"的"</span>+method.getName()+<span class="hljs-string">"被执行了"</span>);    }}</code></pre></div><p>后置AfterLog.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> org.springframework.aop.AfterReturningAdvice;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>{    <span class="hljs-comment">//returnVaule: 返回值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>{    System.out.println(<span class="hljs-string">"执行了"</span>+method.getName()+<span class="hljs-string">"方法，返回值是"</span>+returnValue);    }}</code></pre></div><p>测试类MyTest5</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> service.UserService;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><h4 id="11-3-2、方法二：自定义类实现AOP"><a href="#11-3-2、方法二：自定义类实现AOP" class="headerlink" title="11.3.2、方法二：自定义类实现AOP"></a>11.3.2、方法二：自定义类实现AOP</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>   <span class="hljs-comment">&lt;!--注册bean--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.Log"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.AfterLog"</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 方式二，自定义 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"diy.DiyPointcut"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>       <span class="hljs-comment">&lt;!--自定义切面--&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"diy"</span>&gt;</span>           <span class="hljs-comment">&lt;!--切入点--&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"point"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>/&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> diy;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcut</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"插入到前面"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"插入到后面"</span>);    }}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><h4 id="11-3-3、方法三：使用注解实现"><a href="#11-3-3、方法三：使用注解实现" class="headerlink" title="11.3.3、方法三：使用注解实现"></a>11.3.3、方法三：使用注解实现</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 注册 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--方式三，使用注解实现--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diyAnnotation"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"diy.DiyAnnotation"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 开启自动代理 </span><span class="hljs-comment">实现方式：默认JDK (proxy-targer-class="fasle")</span><span class="hljs-comment">     cglib (proxy-targer-class="true")--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>DiyAnnotation.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> diy;<span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//标注这个类是一个切面</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyAnnotation</span> </span>{    <span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"=====方法执行前====="</span>);    }    <span class="hljs-meta">@After</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"=====方法执行后====="</span>);    }    <span class="hljs-comment">//在环绕增强中，我们可以给地暖管一个参数，代表我们要获取切入的点</span>    <span class="hljs-meta">@Around</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        System.out.println(<span class="hljs-string">"环绕前"</span>);        Object proceed = joinPoint.proceed();        System.out.println(<span class="hljs-string">"环绕后"</span>);    }}</code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><p>输出结果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxNzU2NDIwNjQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803175642064"></p><h2 id="12、整合mybatis"><a href="#12、整合mybatis" class="headerlink" title="12、整合mybatis"></a>12、整合mybatis</h2><blockquote><p>【提醒】：</p><p>本节知识密度大，时间长，需要多看几遍视频，加深理解</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=23" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1WE411d7Dv?p=23</a></p></blockquote><p><strong>步骤：</strong></p><ol><li>导入相关jar</li></ol><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li>mybatis-spring【new】</li></ul><ol start="2"><li>编写配置文件</li><li>测试</li></ol><p>mybatis-spring官网：<a href="https://mybatis.org/spring/zh/" target="_blank" rel="noopener">https://mybatis.org/spring/zh/</a></p><h3 id="12-0、回忆Mybatis"><a href="#12-0、回忆Mybatis" class="headerlink" title="12.0、回忆Mybatis"></a>12.0、回忆Mybatis</h3><p><strong>mybatis的配置流程：</strong></p><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写Mapper.xmi</li><li>测试</li></ol><p><strong>实例：</strong></p><ol><li>导入相关jar，pom.xml：</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.melodyhub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-10-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-comment">&lt;!--&lt;version&gt;5.1.47&lt;/version&gt;--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Spring操作数据库的话，需要一个spring-jdbc--&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span>    <span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;false&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;true&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><ol start="2"><li>编写实体类，User.java：</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;}</code></pre></div><ol start="3"><li>编写核心配置文件，resources/mybatis-config.xml：</li></ol><div class="hljs"><pre><code class="hljs xml-dtd">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;!--configuration 核心配置文件--&gt;&lt;configuration&gt;    &lt;!--开启日志--&gt;    &lt;!--&lt;settings&gt;        &lt;setting name="logImpl" value="STDOUT_LOGGING" /&gt;    &lt;/settings&gt;--&gt;    &lt;!--可以给实体类起别名 --&gt;    &lt;typeAliases&gt;        &lt;package name="com.melodyhub.pojo"/&gt;    &lt;/typeAliases&gt;        &lt;!--environments 可配置多个环境--&gt;    &lt;environments default="development"&gt;        &lt;!--多个环境，不同id--&gt;        &lt;environment id="development"&gt;            &lt;!--事务管理--&gt;            &lt;transactionManager type="JDBC"/&gt;            &lt;dataSource type="POOLED"&gt;                &lt;!--&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;--&gt;                &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;                &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;autoReconnect=true"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="root"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;    &lt;mappers&gt;        &lt;mapper class="com.melodyhub.mapper.UserMapper"/&gt;        &lt;!--&lt;mapper resource="com/melodyhub/mapper/UserMapper.xml"/&gt;--&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre></div><ol start="4"><li>编写接口，UserMapper.xml：</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><ol start="5"><li>编写接口配置文件，UserMapper.xml：</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapper"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"user"</span>&gt;</span>        select * from mybatis.user;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><ol start="6"><li>测试，test/java/MyTest.java：</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.melodyhub.mapper.UserMapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{        String resource = <span class="hljs-string">"mybatis-config.xml"</span>;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        SqlSession sqlSession = sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        List&lt;User&gt; userList = mapper.selectUser();        <span class="hljs-keyword">for</span> (User user : userList) {            System.out.println(user);        }    }}</code></pre></div><ol start="7"><li>结果：</li></ol><div class="hljs"><pre><code class="hljs java">User(id=<span class="hljs-number">1</span>, name=狂神, pwd=<span class="hljs-number">123456</span>)User(id=<span class="hljs-number">2</span>, name=张三, pwd=abcdef)User(id=<span class="hljs-number">3</span>, name=李四, pwd=<span class="hljs-number">987654</span>)Process finished with exit code <span class="hljs-number">0</span></code></pre></div><h3 id="12-1、mybatis-spring-方式一"><a href="#12-1、mybatis-spring-方式一" class="headerlink" title="12.1、mybatis-spring-方式一"></a>12.1、mybatis-spring-方式一</h3><ol><li>编写数据源配置</li><li><code>sqISessionFactory</code></li><li><code>sqISessionTemplate</code>（相当于<code>sqISession</code>）</li><li>需要给接口加实现类【new】</li><li>将自己写的实现类，注入到Spring中</li><li>测试！</li></ol><p><strong>数据源：</strong></p><ul><li><p><code>DataSource</code>：使用Spring的数帮源替换Mybatis的配置</p></li><li><p>这使用Spring提供的JDBC：<code>org.springframework.jdbc.datasource</code></p></li></ul><ul><li>其他数据源：<code>c3p0</code>、<code>dbcp</code>、<code>druid</code></li></ul><p><strong>【核心对象】：</strong></p><ul><li><code>sqISessionFactory</code></li></ul><blockquote><p>在基础的 MyBatis 用法中，是通过 <code>SqlSessionFactoryBuilder</code> 来创建 <code>SqlSessionFactory</code> 的。 而在 MyBatis-Spring 中，则使用 <code>SqlSessionFactoryBean</code> 来创建。</p><p>文档：<a href="http://mybatis.org/spring/zh/factorybean.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/factorybean.html</a></p></blockquote><ul><li><code>sqISessionTemplate</code></li></ul><blockquote><p><code>SqlSessionTemplate</code> 是 MyBatis-Spring 的核心。作为 <code>SqlSession</code> 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 <code>SqlSession</code>。<code>SqlSessionTemplate</code> 是线程安全的，可以被多个 DAO 或映射器所共享使用。</p><p>当调用 SQL 方法时（包括由 <code>getMapper()</code> 方法返回的映射器中的方法），<code>SqlSessionTemplate</code> 将会保证使用的 <code>SqlSession</code> 与当前 Spring 的事务相关。此外，它管理 session 的生命周期，包含必要的关闭、提交或回滚操作。另外，它也负责将 MyBatis 的异常翻译成 Spring 中的 <code>DataAccessExceptions</code>。</p><p>由于模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该<strong>总是</strong>用 <code>SqlSessionTemplate</code> 来替换 MyBatis 默认的 <code>DefaultSqlSession</code> 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 <code>SqlSessionFactory</code> 作为构造方法的参数来创建 <code>SqlSessionTemplate</code> 对象。</p><p>文档：<a href="http://mybatis.org/spring/zh/sqlsession.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/sqlsession.html</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/09/06/wZTWmn.png" srcset="/blog/img/loading.gif" alt="wZTWmn.png"></p><p>先导入jar包，</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.melodyhub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-10-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-comment">&lt;!--&lt;version&gt;5.1.47&lt;/version&gt;--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Spring操作数据库的话，需要一个spring-jdbc--&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span>    <span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;false&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;true&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><blockquote><p>关于解决<strong>“Maven解决静态资源过滤问题”</strong>详见：<a href="https://www.cnblogs.com/melodyjerry/p/13586750.html" target="_blank" rel="noopener">Maven中静态资源和字节码文件的过滤</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/08/30/dqq7D0.png" srcset="/blog/img/loading.gif" alt="dqq7D0.png"><br><strong>编写顺序：</strong></p><p><em>User -&gt; UserMapper -&gt; UserMapper.xml -&gt; spring-dao.xml -&gt; UserServiceImpl -&gt; applicationContext.xml -&gt; MyTest6</em></p><p><strong>代码步骤：</strong></p><p>pojo实体类 User：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;}</code></pre></div><p>mapper目录下的 UserMapper、UserMapperImpl、UserMapper.xml</p><p>接口UserMapper：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>UserMapperImpl：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-comment">//我们的所有操作，在原来都使用sqlSession来执行，现在都使用SqlSessionTemplate；</span>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSession</span><span class="hljs-params">(SqlSessionTemplate sqlSession)</span> </span>{        <span class="hljs-keyword">this</span>.sqlSession = sqlSession;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>{        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> userMapper.selectUser();    }}</code></pre></div><p>UserMapper.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapper"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"user"</span>&gt;</span>        select * from mybatis.user;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>resource目录下的 mybatis-config.xml、spring-dao.xml、applicationContext.xml</p><p>mybatis-config.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-comment">&lt;!--configuration 核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--开启日志--&gt;</span>    <span class="hljs-comment">&lt;!--&lt;settings&gt;</span><span class="hljs-comment">        &lt;setting name="logImpl" value="STDOUT_LOGGING" /&gt;</span><span class="hljs-comment">    &lt;/settings&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--可以给实体类起别名 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.melodyhub.pojo"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span>        <span class="hljs-comment">&lt;!--environments 可配置多个环境--&gt;</span>    <span class="hljs-comment">&lt;!--配置了Spring-Dao.xml后，这块可以直接注释掉了：dataSource</span><span class="hljs-comment">    &lt;environments default="development"&gt;</span><span class="hljs-comment">        &amp;lt;!&amp;ndash;多个环境，不同id&amp;ndash;&amp;gt;</span><span class="hljs-comment">        &lt;environment id="development"&gt;</span><span class="hljs-comment">            &amp;lt;!&amp;ndash;事务管理&amp;ndash;&amp;gt;</span><span class="hljs-comment">            &lt;transactionManager type="JDBC"/&gt;</span><span class="hljs-comment">            &lt;dataSource type="POOLED"&gt;</span><span class="hljs-comment">                &amp;lt;!&amp;ndash;&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;&amp;ndash;&amp;gt;</span><span class="hljs-comment">                &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;</span><span class="hljs-comment">                &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;autoReconnect=true"/&gt;</span><span class="hljs-comment">                &lt;property name="username" value="root"/&gt;</span><span class="hljs-comment">                &lt;property name="password" value="root"/&gt;</span><span class="hljs-comment">            &lt;/dataSource&gt;</span><span class="hljs-comment">        &lt;/environment&gt;</span><span class="hljs-comment">    &lt;/environments&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;</span>    <span class="hljs-comment">&lt;!-- 配置了Spring-Dao.xml后，这块可以直接注释掉了：绑定Mybatis配置文件</span><span class="hljs-comment">    &lt;mappers&gt;</span><span class="hljs-comment">        &lt;mapper class="com.melodyhub.mapper.UserMapper"/&gt;</span><span class="hljs-comment">        &amp;lt;!&amp;ndash;&lt;mapper resource="com/melodyhub/mapper/UserMapper.xml"/&gt;&amp;ndash;&amp;gt;</span><span class="hljs-comment">    &lt;/mappers&gt;--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>spring-dao.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DataSource:使用Spring的数帮源替换Mybatis的配置 其他数据源：c3p0、dbcp、druid</span><span class="hljs-comment">        这使用Spring提供的JDBC: org.springframework.jdbc.datasource --&gt;</span>    <span class="hljs-comment">&lt;!--dataSource --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag">                  <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;autoReconnect=true"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 Mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:com/melodyhub/mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- sqlSessionTemplate 就是之前使用的：sqlsession --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 只能使用构造器注入sqlSessionFactory 原因：它没有set方法--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--导入其他配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--&lt;import resource="spring-mvc.xml"/&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--mybatis-spring 方式1--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapperImpl"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSession"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.melodyhub.mapper.UserMapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>{        ClassPathXmlApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        UserMapper userMapper = context.getBean(<span class="hljs-string">"userMapper"</span>, UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">for</span> (User user : userMapper.selectUser()) {            System.out.println(user);        }    }}</code></pre></div><h3 id="12-2、mybatis-spring-方式二"><a href="#12-2、mybatis-spring-方式二" class="headerlink" title="12.2、mybatis-spring-方式二"></a>12.2、mybatis-spring-方式二</h3><ul><li><code>SqlSessionDaoSupport</code></li></ul><blockquote><p><code>SqlSessionDaoSupport</code> 是一个抽象的支持类，用来为你提供 <code>SqlSession</code>。调用 <code>getSqlSession()</code> 方法你会得到一个 <code>SqlSessionTemplate</code>，之后可以用于执行 SQL 方法，就像下面这样:</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>{  <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">(String userId)</span> </span>{    <span class="hljs-keyword">return</span> getSqlSession().selectOne(<span class="hljs-string">"org.mybatis.spring.sample.mapper.UserMapper.getUser"</span>, userId);  }}</code></pre></div><p>在这个类里面，通常更倾向于使用 <code>MapperFactoryBean</code>，因为它不需要额外的代码。但是，如果你需要在 DAO 中做其它非 MyBatis 的工作或需要一个非抽象的实现类，那么这个类就很有用了。</p><p><code>SqlSessionDaoSupport</code> 需要通过属性设置一个 <code>sqlSessionFactory</code> 或 <code>SqlSessionTemplate</code>。如果两个属性都被设置了，那么 <code>SqlSessionFactory</code> 将被忽略。</p><p>假设类 <code>UserMapperImpl</code> 是 <code>SqlSessionDaoSupport</code> 的子类，可以编写如下的 Spring 配置来执行设置：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.sample.dao.UserDaoImpl"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>文档：<a href="http://mybatis.org/spring/zh/sqlsession.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/sqlsession.html</a></p></blockquote><p>UserServiceImpl2.java：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>{        <span class="hljs-comment">/*</span><span class="hljs-comment">        SqlSession sqlSession = getSqlSession();</span><span class="hljs-comment">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><span class="hljs-comment">        return userMapper.selectUser();</span><span class="hljs-comment">        */</span>        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">selectUser</span>()</span>;    }}</code></pre></div><p>spring-dao.xml：<code>SqlSessionTemplate</code>可以不写了</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DataSource:使用Spring的数帮源替换Mybatis的配置 其他数据源：c3p0、dbcp、druid</span><span class="hljs-comment">        这使用Spring提供的JDBC: org.springframework.jdbc.datasource --&gt;</span>    <span class="hljs-comment">&lt;!--dataSource --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag">                  <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;autoReconnect=true"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 Mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:com/melodyhub/mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 方法二：SqlSessionTemplate 可以不写了--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--导入其他配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--&lt;import resource="spring-mvc.xml"/&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--mybatis-spring 方式-2--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapperImpl2"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest6</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper2"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><h2 id="13-声明式事务"><a href="#13-声明式事务" class="headerlink" title="13. 声明式事务"></a>13. 声明式事务</h2><ul><li>把一组业务当成一个业务来做；要么都成功，要么都失败！</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题</li><li>确保完整性和一致性</li></ul><p>事务的ACID原则：<br>1、原子性<br>2、隔离性<br>3、一致性<br>4、持久性</p><p>ACID参考文章：<a href="https://www.cnblogs.com/melodyjerry/p/13621129.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13621129.html</a></p><p>Spring中的事务管理</p><ul><li>声明式事务：AOP</li><li>编程式事务：需要再代码中，进行事务管理</li></ul><p><strong>声明式事务</strong></p><p>先导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span><span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p><strong>代码步骤：</strong></p><p>pojo实体类 User</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> String pwd;}</code></pre></div><p>mapper目录下的 UserMapper、UserMapperImpl、UserMapper.xml</p><p>接口UserMapper</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>; }</code></pre></div><p>UserMapperImpl</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>,<span class="hljs-string">"你好"</span>,<span class="hljs-string">"ok"</span>);    insertUser(user);    delUser(<span class="hljs-number">5</span>);        SqlSession sqlSession = getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> mapper.getUser();        <span class="hljs-comment">//或者return  getSqlSession().getMapper(UserMapper.class).getUser();</span>    }    <span class="hljs-comment">//插入</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span> </span>{<span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">insertUser</span>(<span class="hljs-title">user</span>)</span>;}<span class="hljs-comment">//删除</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">delUser</span>(<span class="hljs-title">id</span>)</span>;}}</code></pre></div><p>UserMapper.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>        <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"mapper.UserMapper"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>select * from mybatis.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insertUser"</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"pojo.User"</span> &gt;</span>insert into  mybatis.mybatis (id,name,pwd) values (#{id},#{name},#{pwd})<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"delUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"_int"</span>&gt;</span>deleteAAAAA from mybatis.mybatis where id = #{id}<span class="hljs-comment">&lt;!-- deleteAAAAA是故意写错的 --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>resource目录下的 mybatis-config.xml、spring-dao.xml、applicationContext.xml</p><p>mybatis-config.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-comment">&lt;!-- configuration --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--开启日志--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pojo"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>spring-dao.xml（已导入约束）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--data source --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"datasource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--声明式事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合aop实现事务织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的通知类--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span>        <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>        <span class="hljs-comment">&lt;!--新东西：配置事务的传播特性 propagation--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"add"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"delete"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"update"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span>            <span class="hljs-comment">&lt;!-- *号包含上面4个方法：</span><span class="hljs-comment">            &lt;tx:method name="*" propagation="REQUIRED"/&gt; --&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置事务切入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txpointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* mapper.*.*(..))"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"txpointcut"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mapper.UserMapperImpl"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> mapper.UserMapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest7</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><p><strong>思考：</strong><br>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况下；</li><li>如果不在spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目的开发中非常重要，涉及到数据的一致性和完整性问题！</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1WE411d7Dv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1WE411d7Dv&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】SpringMVC笔记存档</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91SpringMVC%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91SpringMVC%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/</id>
    <published>2020-08-27T05:52:05.512Z</published>
    <updated>2020-09-18T04:43:03.304Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV1aE41167Tu" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aE41167Tu</a></p><a id="more"></a><hr><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>ssm: mybatis + Spring + SpringMVC MVC三层架构</p><p>JavaSE:认真学习, 老师带，入门快<br>JavaWeb:认真学习,老师带,入门快<br>SSM框架:研究官方文档，锻炼自学能力，锻炼笔记能力，锻炼项目能力</p><p>SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p><p>SSM = JavaWeb做项目;</p><p>Spring: IOC和APO</p><p>SpringMVC: SpringMVC的执行流程!</p><p>SpringMVC : SSM框架整合!</p><p>Spring</p><p>MVC:模型(dao, service) 视图 (jsp)控制器 (Servlet)<br>dao<br>service<br>servlet :转发，重定向<br>jsp/html</p><p>前端数据传输实体类</p><p>实体类:用户名，密码，生日，爱好，… 20个</p><p>前端:用户名密码</p><p>pojo: User<br>vo: UserVo<br>dto:</p><p><strong>JSP:本质就是一个Servlet</strong></p><p>假设:你的项目的架构，是设计好的，还是演进的?</p><ul><li>Alibaba PHP</li><li>随着用户大， Java</li><li>王坚去 IOE MySQL</li><li>MySQL : MySQL–&gt; AliSQL. AliRedis</li><li>Allinone –微服务</li></ul><p>MVC :</p><p>MWM: M V VM ViewModel :双向绑定</p><h2 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h2><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331221325100-1165356814.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1-1、Model1时代"><a href="#1-1、Model1时代" class="headerlink" title="1.1、Model1时代"></a>1.1、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331221347503-978638377.png" srcset="/blog/img/loading.gif" alt="img"></p><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h3 id="1-2、Model2时代"><a href="#1-2、Model2时代" class="headerlink" title="1.2、Model2时代"></a>1.2、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331221406483-639584230.png" srcset="/blog/img/loading.gif" alt="img"></p><p>用户发请求</p><ol><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-3、回顾Servlet"><a href="#1-3、回顾Servlet" class="headerlink" title="1.3、回顾Servlet"></a>1.3、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！ pom依赖！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div></li><li><p>编写一个Servlet类，用来处理用户的请求</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<span class="hljs-comment">//实现Servlet接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{        <span class="hljs-comment">//取得参数</span>        String method = req.getParameter(<span class="hljs-string">"method"</span>);        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">"add"</span>)){            req.getSession().setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"执行了add方法"</span>);        }        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">"delete"</span>)){            req.getSession().setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"执行了delete方法"</span>);        }        <span class="hljs-comment">//业务逻辑</span>        <span class="hljs-comment">//视图跳转</span>        req.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/hello.jsp"</span>).forward(req,resp);    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{        doGet(req,resp);    }}</code></pre></div></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>在web.xml中注册Servlet</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/user<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li><li><p>配置Tomcat，并启动测试</p><ul><li>localhost:8080/user?method=add</li><li>localhost:8080/user?method=delete</li></ul></li><li><p>访问结果</p><p> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331212910583-2051430940.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222018441-1850931217.png" srcset="/blog/img/loading.gif" alt="img"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p>Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p><h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>Spring的web框架围绕DispatcherServlet设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222037711-828417064.png" srcset="/blog/img/loading.gif" alt="img"></p><p>SpringMVC的原理如下图所示：</p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222109176-906298972.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h3><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222126131-219513987.png" srcset="/blog/img/loading.gif" alt="img"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul><li>我们假设请求的url为 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/SpringMVC/hello</li><li><strong>如上url拆分成三部分：</strong></li><li><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080服务器域名</li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li><li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li></ul></li><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li><li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li><li>Handler让具体的Controller执行。</li><li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li><li>最终视图呈现给用户。</li></ol><p>在这里先听一遍原理，不理解没有关系，我们马上来写一个对应的代码实现大家就明白了，如果不明白，那就写10遍，没有笨人，只有懒人！</p><h2 id="3、HelloSpringMVC-配置版"><a href="#3、HelloSpringMVC-配置版" class="headerlink" title="3、HelloSpringMVC(配置版)"></a>3、HelloSpringMVC(配置版)</h2><ol><li><p>新建一个Moudle ， 添加web的支持！</p></li><li><p>确定导入了SpringMVC 的依赖！</p></li><li><p>配置web.xml ， 注册DispatcherServlet</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>    <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li><li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml说明，这里的名称要求是按照官方来的</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div></li><li><p>添加 处理映射器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></code></pre></div></li><li><p>添加 处理器适配器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></code></pre></div></li><li><p>添加 视图解析器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"InternalResourceViewResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!--前缀--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--后缀--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li><li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-comment">//注意：这里我们先导入Controller接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//ModelAndView 模型和视图</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span>        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"HelloSpringMVC1!，我是成博"</span>);        <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span>        mv.setViewName(<span class="hljs-string">"hello"</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> mv;    }    }</code></pre></div></li><li><p>将自己的类交给SpringIOC容器，注册bean</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"/hello"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.controller.HelloController"</span>/&gt;</span></code></pre></div></li><li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>配置Tomcat 启动测试！</p></li></ol><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331222531691-1302265141.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li><p>查看控制台输出，看一下是不是缺少了什么jar包。</p></li><li><p>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！（与classes同级目录）</p><p> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331212956858-1274463802.png" srcset="/blog/img/loading.gif" alt="img"></p></li><li><p>重启Tomcat 即可解决！</p></li></ol><p>小结：看这个估计大部分同学都能理解其中的原理了，但是我们实际开发才不会这么写，不然就疯了，还学这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓，到底有多么简单，看这个图就知道了。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331223102129-1564021137.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="4、使用注解开发SpringMVC（注解版）"><a href="#4、使用注解开发SpringMVC（注解版）" class="headerlink" title="4、使用注解开发SpringMVC（注解版）"></a>4、使用注解开发SpringMVC（注解版）</h2><p><strong>第一步:新建一个Moudle , 添加web支持！</strong>建立包结构 com.kuang.controller</p><p><strong>第二步:由于Maven可能存在资源过滤的问题，我们将配置完善</strong></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p><strong>第三步:在pom.xml文件引入相关的依赖</strong>：<br>主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p><strong>第四步:配置web.xml</strong></p><p>注意点：</p><ul><li><p>注意web.xml版本问题，要最新版！</p></li><li><p>注册DispatcherServlet</p></li><li><p>关联SpringMVC的配置文件</p></li><li><p>启动级别为1</p></li><li><p>映射路径为 / 【不要用/*，会404】</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div>  <div class="hljs"><pre><code class="hljs java">/ 和 <span class="hljs-comment">/* 的区别：</span><span class="hljs-comment">&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；</span><span class="hljs-comment">即：.jsp 不会进入spring的 DispatcherServlet类 。</span><span class="hljs-comment">&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，</span><span class="hljs-comment">会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</span></code></pre></div></li></ul><p><strong>第五步:添加Spring MVC配置文件</strong></p><ul><li>让IOC的注解生效</li><li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li><li>MVC的注解驱动</li><li>配置视图解析器</li></ul><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    支持mvc注解驱动</span><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><span class="hljs-comment">        要想使@RequestMapping注解生效</span><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><span class="hljs-comment">     --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><p><strong>第六步:创建Controller</strong></p><p>编写一个Java控制类： com.kuang.controller.HelloController , 注意编码规范</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/HelloController"</span>)<span class="hljs-comment">//多添加一级访问</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>{    <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-comment">//请求路径</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span> </span>{        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello,SpringMVC，我是成博"</span>);        <span class="hljs-comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    }}</code></pre></div><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul><p><strong>第七步:创建视图层</strong></p><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p>可以通过EL表示取出Model中存放的值，或者对象；</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;SpringMVC&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div><p><strong>第八步:配置Tomcat运行</strong></p><p>配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213100620-1365283722.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>OK，运行成功！</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h2 id="5、Controller-及-RestFul风格"><a href="#5、Controller-及-RestFul风格" class="headerlink" title="5、Controller 及 RestFul风格"></a>5、Controller 及 RestFul风格</h2><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><p>我们来看看有哪些方式可以实现：</p><h3 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-comment">//处理请求且返回一个模型与视图对象</span>    <span class="hljs-function">ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> Exception</span>;}</code></pre></div><p><strong>测试</strong></p><ol><li><p>新建一个Moudle，springmvc-04-controller 。 将刚才的03 拷贝一份, 我们进行操作！</p><ul><li>删掉HelloController</li><li>mvc的配置文件只留下 视图解析器！</li></ul></li><li><p>编写一个Controller类，ControllerTest1</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器</span><span class="hljs-comment">//注意点：不要导错包，实现Controller接口，重写方法；</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"Test1Controller"</span>);        mv.setViewName(<span class="hljs-string">"test"</span>);        <span class="hljs-keyword">return</span> mv;    }}</code></pre></div></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"/t1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.controller.ControllerTest1"</span>/&gt;</span></code></pre></div></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Kuangshen&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p></li></ol><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213134363-472773058.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>说明：</strong></p><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span></code></pre></div></li><li><p>增加一个ControllerTest2类，使用注解实现；</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><span class="hljs-comment">//代表这个类会被Spring按管</span><span class="hljs-comment">//被这个注解的类，中的所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析;</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span></span>{    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>{        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"ControllerTest2"</span>);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }}</code></pre></div></li><li><p>运行tomcat测试</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213150942-1828421815.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p>注解方式是平时使用的最多的方式！除了这两种之外还有其他的方式，大家想要自己研究的话，可以参考我的博客：<a href="https://www.cnblogs.com/hellokuangshen/p/11270742.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellokuangshen/p/11270742.html</a></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/h1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }}</code></pre></div><p>  访问路径：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080 / 项目名 / h1</p></li><li><p>同时注解类与方法</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/h1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }}</code></pre></div><p>  访问路径：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080 / 项目名/ admin /h1 , 需要先指定类的路径再指定方法的路径；</p></li></ul><h2 id="6、RestFul-风格-简洁，高效，安全"><a href="#6、RestFul-风格-简洁，高效，安全" class="headerlink" title="6、RestFul 风格(简洁，高效，安全)"></a>6、RestFul 风格(简洁，高效，安全)</h2><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><ul><li>资源：互联网所有的事物都可以被抽象为资源</li><li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li><li>分别对应 添加、 删除、修改、查询。</li></ul><p><strong>传统方式操作资源</strong> ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><ul><li><a href="http://127.0.0.1/item/queryItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</li><li><a href="http://127.0.0.1/item/saveItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/saveItem.action</a> 新增,POST</li><li><a href="http://127.0.0.1/item/updateItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/updateItem.action</a> 更新,POST</li><li><a href="http://127.0.0.1/item/deleteItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</li></ul><p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><ul><li><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 查询,GET</li><li><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 新增,POST</li><li><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 更新,PUT</li><li><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 删除,DELETE</li></ul><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>{}</code></pre></div></li><li><p>在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>{    <span class="hljs-comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span>    <span class="hljs-comment">//RestFul :  http://localhost : 8080/add/1/2</span>        <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/commit/{p1}/{p2}"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> p1, @PathVariable <span class="hljs-keyword">int</span> p2, Model model)</span></span>{                <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果："</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;            }    }</code></pre></div></li><li><p>我们来测试请求查看下<br> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213217087-619232504.png" srcset="/blog/img/loading.gif" alt="img"></p></li><li><p>思考：使用路径变量的好处？</p><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214609681-1237588624.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/commit/{p1}/{p2}"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> p1, @PathVariable String p2, Model model)</span></span>{    String result = p1+p2;    <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果："</span>+result);    <span class="hljs-comment">//返回视图位置</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div><p> <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214657561-1298821776.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/hello"</span>,method = {RequestMethod.POST})<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>{    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello!"</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：<br>  <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214714976-802588010.png" srcset="/blog/img/loading.gif" alt="img"></p></li><li><p>如果将POST修改为GET则正常了；</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是Get请求</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/hello"</span>,method = {RequestMethod.GET})<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>{    model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"hello!"</span>);    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div><p>  <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214737681-664600385.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ul><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个： 组合注解</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><span class="hljs-meta">@PostMapping</span><span class="hljs-meta">@PutMapping</span><span class="hljs-meta">@DeleteMapping</span><span class="hljs-meta">@PatchMapping</span></code></pre></div><p>@GetMapping 是一个组合注解</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>{    <span class="hljs-comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span>    <span class="hljs-comment">//RestFul :  http://localhost : 8080/add/1/2</span>    <span class="hljs-comment">//映射访问路径</span>    <span class="hljs-comment">//@RequestMapping(value = "/commit/{p1}/{p2}",method = RequestMethod.GET)</span>    <span class="hljs-comment">//@GetMapping("/commit/{p1}/{p2}")</span>    <span class="hljs-meta">@GetMapping</span>(path = <span class="hljs-string">"/commit/{p1}/{p2}"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> p1, @PathVariable <span class="hljs-keyword">int</span> p2, Model model)</span></span>{                <span class="hljs-keyword">int</span> result = p1+p2;        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span>        model.addAttribute(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"结果："</span>+result);        <span class="hljs-comment">//返回视图位置</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;      }    }</code></pre></div><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213251638-969968192.png" srcset="/blog/img/loading.gif" alt="img"></p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><p>平时使用的会比较多！</p><h3 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h3><p>场景一：<em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p><p>场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p><p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200401214504256-745544113.png" srcset="/blog/img/loading.gif" alt="img"></p><p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p><h2 id="7、SpringMVC：结果跳转三种方式-转发、重定向"><a href="#7、SpringMVC：结果跳转三种方式-转发、重定向" class="headerlink" title="7、SpringMVC：结果跳转三种方式(转发、重定向)"></a>7、SpringMVC：结果跳转三种方式(转发、重定向)</h2><h3 id="7-1、ModelAndView"><a href="#7-1、ModelAndView" class="headerlink" title="7.1、ModelAndView"></a>7.1、ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>对应的controller类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"ControllerTest1"</span>);        mv.setViewName(<span class="hljs-string">"test"</span>);        <span class="hljs-keyword">return</span> mv;    }}</code></pre></div><h3 id="7-2、ServletAPI"><a href="#7-2、ServletAPI" class="headerlink" title="7.2、ServletAPI"></a>7.2、ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p><ol><li>通过HttpServletResponse进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletResponse实现转发</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultGo</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/result/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>{        rsp.getWriter().println(<span class="hljs-string">"Hello,Spring BY servlet API"</span>);    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/result/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>{        rsp.sendRedirect(<span class="hljs-string">"/index.jsp"</span>);    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/result/t3"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//转发</span>        req.setAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"/result/t3"</span>);        req.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/test.jsp"</span>).forward(req,rsp);    }}</code></pre></div><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213355173-975224060.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="7-3、SpringMVC"><a href="#7-3、SpringMVC" class="headerlink" title="7.3、SpringMVC"></a>7.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//转发</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"/index.jsp"</span>;    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//转发二</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"forward:/index.jsp"</span>;    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm/t3"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//重定向</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;    }}</code></pre></div><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC2</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm2/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//转发</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;    }    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/rsm2/t2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>{        <span class="hljs-comment">//重定向</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;        <span class="hljs-comment">//return "redirect:hello.do"; //hello.do为另一个请求/</span>    }}</code></pre></div><h2 id="8、数据处理（接收请求参数及数据回显）"><a href="#8、数据处理（接收请求参数及数据回显）" class="headerlink" title="8、数据处理（接收请求参数及数据回显）"></a>8、数据处理（接收请求参数及数据回显）</h2><h3 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/hello?name=kuangshen</p><p>处理方法 :</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span></span>{    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p>后台输出 : kuangshen</p><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/hello?username=kuangshen</p><p>处理方法 :</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam("username") : username提交的域的名称 .</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String name)</span>{    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p>后台输出 :</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213420413-895694643.png" srcset="/blog/img/loading.gif" alt="img"></p><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><ol><li><p>实体类</p> <div class="hljs"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-comment">//构造</span>    <span class="hljs-comment">//get/set</span>    <span class="hljs-comment">//tostring()</span>}</code></pre></div></li><li><p>提交数据 : <a href="http://localhost:8080/user?name=kuangshen&amp;id=1&amp;age=15" target="_blank" rel="noopener">http://localhost:8080/user?name=kuangshen&amp;id=1&amp;age=15</a></p></li><li><p>处理方法 :</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">(User user)</span></span>{    System.out.println(user);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p> 后台输出 : User { id=1, name=’kuangshen’, age=15 }</p></li></ol><p><strong>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</strong></p><h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p><p>我们前面一直都是如此 . 就不过多解释</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">//返回一个模型视图对象</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"ControllerTest1"</span>);        mv.setViewName(<span class="hljs-string">"test"</span>);        <span class="hljs-keyword">return</span> mv;    }}</code></pre></div><p><strong>第二种 : 通过ModelMap</strong></p><p>ModelMap</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String name, ModelMap model)</span>{    <span class="hljs-comment">//封装要显示到视图中的数据</span>    <span class="hljs-comment">//相当于req.setAttribute("name",name);</span>    model.addAttribute(<span class="hljs-string">"name"</span>,name);    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;}</code></pre></div><p><strong>第三种 : 通过Model</strong></p><p>Model</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/ct2/hello"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"username"</span>)</span> String name, Model model)</span>{    <span class="hljs-comment">//封装要显示到视图中的数据</span>    <span class="hljs-comment">//相当于req.setAttribute("name",name);</span>    model.addAttribute(<span class="hljs-string">"msg"</span>,name);    System.out.println(name);    <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>;}</code></pre></div><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>就对于新手而言简单来说使用区别就是：</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-attr">Model</span> <span class="hljs-string">只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><span class="hljs-attr">ModelMap</span> <span class="hljs-string">继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><span class="hljs-attr">ModelAndView</span> <span class="hljs-string">可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span></code></pre></div><p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p><h2 id="9、数据处理（乱码问题）"><a href="#9、数据处理（乱码问题）" class="headerlink" title="9、数据处理（乱码问题）"></a>9、数据处理（乱码问题）</h2><p>测试步骤：</p><ol><li><p>我们可以在首页编写一个提交的表单</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/e/t"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div></li><li><p>后台编写对应的处理类</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Encoding</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/e/t"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model,String name)</span></span>{        model.addAttribute(<span class="hljs-string">"msg"</span>,name); <span class="hljs-comment">//获取表单提交的值</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"test"</span>; <span class="hljs-comment">//跳转到test页面显示输入的值</span>    }}</code></pre></div></li><li><p>输入中文测试，发现乱码<br> <img src="https://img2020.cnblogs.com/blog/1905053/202004/1905053-20200402193540997-1854631524.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2.配置SpringMVC的乱码过滤--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span></code></pre></div><p>有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><ol><li><p>修改tomcat配置文件 ： 设置编码！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">"utf-8"</span> <span class="hljs-attr">port</span>=<span class="hljs-string">"8080"</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">"HTTP/1.1"</span></span><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">"20000"</span></span><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">"8443"</span> /&gt;</span></code></pre></div></li><li><p>自定义过滤器</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.filter;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 解决get和post请求 全部乱码的过滤器</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>{    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>{    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{        <span class="hljs-comment">//处理response的字符编码</span>        HttpServletResponse myResponse=(HttpServletResponse) response;        myResponse.setContentType(<span class="hljs-string">"text/html;charset=UTF-8"</span>);        <span class="hljs-comment">// 转型为与协议相关对象</span>        HttpServletRequest httpServletRequest = (HttpServletRequest) request;        <span class="hljs-comment">// 对request包装增强</span>        HttpServletRequest myrequest = <span class="hljs-keyword">new</span> MyRequest(httpServletRequest);        chain.doFilter(myrequest, response);    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>{    }}<span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>{    <span class="hljs-keyword">private</span> HttpServletRequest request;    <span class="hljs-comment">//是否编码的标记</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasEncode;    <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>{        <span class="hljs-keyword">super</span>(request);<span class="hljs-comment">// super必须写</span>        <span class="hljs-keyword">this</span>.request = request;    }    <span class="hljs-comment">// 对需要增强方法 进行覆盖</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getParameterMap</span><span class="hljs-params">()</span> </span>{        <span class="hljs-comment">// 先获得请求方式</span>        String method = request.getMethod();        <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">"post"</span>)) {            <span class="hljs-comment">// post请求</span>            <span class="hljs-keyword">try</span> {                <span class="hljs-comment">// 处理post乱码</span>                request.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);                <span class="hljs-keyword">return</span> request.getParameterMap();            } <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) {                e.printStackTrace();            }        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">"get"</span>)) {            <span class="hljs-comment">// get请求</span>            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();            <span class="hljs-keyword">if</span> (!hasEncode) { <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span>                <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) {                    String[] values = parameterMap.get(parameterName);                    <span class="hljs-keyword">if</span> (values != <span class="hljs-keyword">null</span>) {                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) {                            <span class="hljs-keyword">try</span> {                                <span class="hljs-comment">// 处理get乱码</span>                                values[i] = <span class="hljs-keyword">new</span> String(values[i]                                        .getBytes(<span class="hljs-string">"ISO-8859-1"</span>), <span class="hljs-string">"utf-8"</span>);                            } <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) {                                e.printStackTrace();                            }                        }                    }                }                hasEncode = <span class="hljs-keyword">true</span>;            }            <span class="hljs-keyword">return</span> parameterMap;        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParameterMap();    }    <span class="hljs-comment">//取一个值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(String name)</span> </span>{        Map&lt;String, String[]&gt; parameterMap = getParameterMap();        String[] values = parameterMap.get(name);        <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span>) {            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        }        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span>    }    <span class="hljs-comment">//取所有值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String[] getParameterValues(String name) {        Map&lt;String, String[]&gt; parameterMap = getParameterMap();        String[] values = parameterMap.get(name);        <span class="hljs-keyword">return</span> values;    }}</code></pre></div></li></ol><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h2 id="10、JSON讲解"><a href="#10、JSON讲解" class="headerlink" title="10、JSON讲解"></a>10、JSON讲解</h2><h3 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><div class="hljs"><pre><code class="hljs json">{<span class="hljs-attr">"name"</span>: <span class="hljs-string">"QinJiang"</span>}{<span class="hljs-attr">"age"</span>: <span class="hljs-string">"3"</span>}{<span class="hljs-attr">"sex"</span>: <span class="hljs-string">"男"</span>}</code></pre></div><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><ul><li><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p>  <div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = {<span class="hljs-attr">a</span>: <span class="hljs-string">'Hello'</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">'World'</span>}; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><span class="hljs-keyword">var</span> json = <span class="hljs-string">'{"a": "Hello", "b": "World"}'</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span></code></pre></div></li></ul><p><strong>JSON 和 JavaScript 对象互转</strong></p><ul><li><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>  <div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">'{"a": "Hello", "b": "World"}'</span>); <span class="hljs-comment">//结果是 {a: 'Hello', b: 'World'}</span></code></pre></div></li><li><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>  <div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify({<span class="hljs-attr">a</span>: <span class="hljs-string">'Hello'</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">'World'</span>});<span class="hljs-comment">//结果是 '{"a": "Hello", "b": "World"}'</span></code></pre></div></li></ul><p><strong>代码测试</strong></p><ol><li><p>新建一个module ，springmvc-05-json ， 添加web的支持</p></li><li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON_秦疆<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="actionscript"><span class="hljs-comment">//编写一个js的对象</span></span><span class="actionscript"><span class="hljs-keyword">var</span> user = {</span><span class="actionscript"> name:<span class="hljs-string">"成博"</span>,</span> age:3,<span class="actionscript"> sex:<span class="hljs-string">"男"</span></span>};<span class="actionscript"><span class="hljs-comment">//将js对象转换成json字符串</span></span><span class="javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(user);</span><span class="javascript"><span class="hljs-built_in">console</span>.log(str);</span><span class="actionscript"><span class="hljs-comment">//将json字符串转换为js对象</span></span><span class="javascript"><span class="hljs-keyword">var</span> user2 = <span class="hljs-built_in">JSON</span>.parse(str);</span><span class="javascript"><span class="hljs-built_in">console</span>.log(user2.age,user2.name,user2.sex);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>在IDEA中使用浏览器打开，查看控制台输出！</p><p> <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213612113-1624858159.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ol><h3 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h3><h3 id="1-jackson"><a href="#1-jackson" class="headerlink" title="1.jackson"></a>1.jackson</h3><ul><li><p>Jackson应该是目前比较好的json解析工具了</p></li><li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p></li><li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div></li><li><p>配置SpringMVC需要的配置<br>  <strong>web.xml</strong></p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li></ul><p><strong>springmvc-servlet.xml</strong></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><ul><li><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-comment">//需要导入lombok</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> String sex;    }</code></pre></div></li><li><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p></li></ul><p>编写一个Controller；</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json1"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//创建一个对象</span>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str = mapper.writeValueAsString(user);        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>        <span class="hljs-keyword">return</span> str;    }}</code></pre></div><ul><li>配置Tomcat ， 启动测试一下！</li></ul><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/json1</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213642133-500236017.png" srcset="/blog/img/loading.gif" alt="img"></p><ul><li><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p></li><li><p>通过@RequestMaping的produces属性来实现，修改下代码</p>  <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/json1"</span>,produces = <span class="hljs-string">"application/json;charset=utf-8"</span>)</code></pre></div></li><li><p>再次测试， <a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/json1 ， 乱码问题OK！</p><p>  <img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213702188-1592450222.png" srcset="/blog/img/loading.gif" alt="img"></p></li></ul><p>【注意：使用json记得处理乱码问题】</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><div class="hljs"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--JSON乱码问题配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">"true"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"objectMapper"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"failOnEmptyBeans"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span></code></pre></div><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-comment">//produces:指定响应体返回类型和编码</span>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/json1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//创建一个对象</span>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str = mapper.writeValueAsString(user);        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span>        <span class="hljs-keyword">return</span> str;    }}</code></pre></div><p>启动tomcat测试，结果都正常输出！</p><h3 id="测试集合输出"><a href="#测试集合输出" class="headerlink" title="测试集合输出"></a>测试集合输出</h3><p>增加一个新的方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json2"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//创建一个对象</span>    User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆4号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();    list.add(user1);    list.add(user2);    list.add(user3);    list.add(user4);    <span class="hljs-comment">//将我们的对象解析成为json格式</span>    String str = mapper.writeValueAsString(list);    <span class="hljs-keyword">return</span> str;}</code></pre></div><p>运行结果 : 十分完美，没有任何问题！</p><h3 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h3><p>增加一个新的方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json3"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//创建时间一个对象，java.util.Date</span>    Date date = <span class="hljs-keyword">new</span> Date();    <span class="hljs-comment">//将我们的对象解析成为json格式</span>    String str = mapper.writeValueAsString(date);    <span class="hljs-keyword">return</span> str;}</code></pre></div><p>运行结果 :</p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json4"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();    <span class="hljs-comment">//不使用时间戳的方式</span>    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">//自定义日期格式对象</span>    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);    <span class="hljs-comment">//指定日期格式</span>    mapper.setDateFormat(sdf);    Date date = <span class="hljs-keyword">new</span> Date();    String str = mapper.writeValueAsString(date);    <span class="hljs-keyword">return</span> str;}</code></pre></div><p>运行结果 : 成功的输出了时间！</p><p><strong><em>时间戳格式化，老手艺不能丢</em></strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json6"</span>)  <span class="hljs-meta">@ResponseBody</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{      ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();      Date date = <span class="hljs-keyword">new</span> Date();      <span class="hljs-comment">//自定义日期的格式</span>      SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);      <span class="hljs-comment">// objectMapper,时间解析后的默认格式为: Timestamp, 时间裁</span>      <span class="hljs-keyword">return</span> mapper.writeValueAsString(sdf.format(date));  }</code></pre></div><h3 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h3><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.utils;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>{        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>{        <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object,String dateFormat)</span> </span>{        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();        <span class="hljs-comment">//不使用时间差的方式</span>        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);        <span class="hljs-comment">//自定义日期格式对象</span>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);        <span class="hljs-comment">//指定日期格式</span>        mapper.setDateFormat(sdf);        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);        } <span class="hljs-keyword">catch</span> (JsonProcessingException e) {            e.printStackTrace();        }        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }}</code></pre></div><p>我们使用工具类，代码就更加简洁了！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json5"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{    Date date = <span class="hljs-keyword">new</span> Date();    String json = JsonUtils.getJson(date);    <span class="hljs-keyword">return</span> json;}</code></pre></div><p>大工告成！完美！</p><h3 id="2-FastJson"><a href="#2-FastJson" class="headerlink" title="2.FastJson"></a>2.FastJson</h3><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>fastjson 三个主要的类：</p><ul><li>【JSONObject 代表 json 对象 】<ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li>【JSONArray 代表 json 对象数组】<ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li>【JSON 代表 JSONObject和JSONArray的转化】<ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">import</span> com.kuang.pojo.User;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonDemo</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//创建一个对象</span>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆4号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();        list.add(user1);        list.add(user2);        list.add(user3);        list.add(user4);        System.out.println(<span class="hljs-string">"*******Java对象 转 JSON字符串*******"</span>);        String str1 = JSON.toJSONString(list);        System.out.println(<span class="hljs-string">"JSON.toJSONString(list)==&gt;"</span>+str1);        String str2 = JSON.toJSONString(user1);        System.out.println(<span class="hljs-string">"JSON.toJSONString(user1)==&gt;"</span>+str2);        System.out.println(<span class="hljs-string">"\n****** JSON字符串 转 Java对象*******"</span>);        User jp_user1=JSON.parseObject(str2,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        System.out.println(<span class="hljs-string">"JSON.parseObject(str2,User.class)==&gt;"</span>+jp_user1);        System.out.println(<span class="hljs-string">"\n****** Java对象 转 JSON对象 ******"</span>);        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);        System.out.println(<span class="hljs-string">"(JSONObject) JSON.toJSON(user2)==&gt;"</span>+jsonObject1.getString(<span class="hljs-string">"name"</span>));        System.out.println(<span class="hljs-string">"\n****** JSON对象 转 Java对象 ******"</span>);        User to_java_user = JSON.toJavaObject(jsonObject1, User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        System.out.println(<span class="hljs-string">"JSON.toJavaObject(jsonObject1, User.class)==&gt;"</span>+to_java_user);    }}</code></pre></div><p>例题：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/json8"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>{        <span class="hljs-comment">//创建一个对象</span>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆4号"</span>, <span class="hljs-number">3</span>, <span class="hljs-string">"男"</span>);        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();        list.add(user1);        list.add(user2);        list.add(user3);        list.add(user4);        <span class="hljs-comment">//将我们的对象解析成为json格式</span>        String str1 = JSON.toJSONString(list);        <span class="hljs-keyword">return</span> str1;    }</code></pre></div><p>测试：</p><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080/json8</p><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213729633-854108693.png" srcset="/blog/img/loading.gif" alt="img"></p><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p><h2 id="11、Ajax技术"><a href="#11、Ajax技术" class="headerlink" title="11、Ajax技术"></a>11、Ajax技术</h2><h3 id="11-1、AJAX初体验"><a href="#11-1、AJAX初体验" class="headerlink" title="11.1、AJAX初体验"></a>11.1、AJAX初体验</h3><p>异步可理解为局部刷新，同步指需要按部就班地完成一整套流程</p><ul><li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li><li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li><li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li><li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</li><li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li><li>就和国内百度的搜索框一样：<br>  <img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3986165583.png" srcset="/blog/img/loading.gif" alt="1570200763067.png"></li><li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li><li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li><li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li></ul><h3 id="伪造Ajax"><a href="#伪造Ajax" class="headerlink" title="伪造Ajax"></a>伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。 iframe标签</p><ol><li><p>新建一个module ： sspringmvc-06-ajax ， 导入web支持！</p></li><li><p>编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>kuangshen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><span class="javascript"> <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><span class="javascript"> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'currentTime'</span>).innerText = myDate.getTime();</span>};<span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LoadPage</span><span class="hljs-params">()</span></span>{</span><span class="javascript"> <span class="hljs-keyword">var</span> targetUrl =  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'url'</span>).value;</span><span class="javascript"> <span class="hljs-built_in">console</span>.log(targetUrl);</span><span class="javascript"> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"iframePosition"</span>).src = targetUrl;</span>}<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入要加载的地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"currentTime"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"https://www.baidu.com/"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"LoadPage()"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载页面位置：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"iframePosition"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100%;height: 500px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>使用IDEA开浏览器测试一下！</p></li></ol><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><ul><li>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</li><li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li><li>jQuery 提供多个与 AJAX 有关的方法。</li><li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li><li>jQuery 不是生产者，而是大自然搬运工。</li><li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li></ul><div class="hljs"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jQuery.ajax(...)</span><span class="hljs-keyword"> </span>      部分参数：              url：请求地址             type：请求方式，GET、POST（<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span>之后用method）          headers：请求头             data：要发送的数据      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">"application/x-www-form-urlencoded; charset=UTF-8"</span>)            async：是否异步          timeout：设置请求超时时间（毫秒）       <span class="hljs-keyword">beforeSend：发送请求前执行的函数(全局)</span><span class="hljs-keyword"> </span>        complete：完成之后执行的回调函数(全局)          success：成功之后执行的回调函数(全局)            error：失败之后执行的回调函数(全局)          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型         dataType：将服务器端返回的数据转换成指定类型            <span class="hljs-string">"xml"</span>: 将服务器端返回的内容转换成xml格式           <span class="hljs-string">"text"</span>: 将服务器端返回的内容转换成普通文本格式           <span class="hljs-string">"html"</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含<span class="hljs-keyword">JavaScript标签，则会尝试去执行。</span><span class="hljs-keyword"> </span>        <span class="hljs-string">"script"</span>: 尝试将返回值当作<span class="hljs-keyword">JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><span class="hljs-keyword"> </span>          <span class="hljs-string">"json"</span>: 将服务器端返回的内容转换成相应的<span class="hljs-keyword">JavaScript对象</span><span class="hljs-keyword"> </span>         <span class="hljs-string">"jsonp"</span>: <span class="hljs-keyword">JSONP </span>格式使用 <span class="hljs-keyword">JSONP </span>形式调用函数时，如 <span class="hljs-string">"myurl?callback=?"</span> <span class="hljs-keyword">jQuery </span>将自动替换 ? 为正确的函数名，以执行回调函数</code></pre></div><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><ol><li><p>配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div></li><li><p>编写一个AjaxController</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/a1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>{        <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.equals(name)){            response.getWriter().print(<span class="hljs-string">"true"</span>);        }<span class="hljs-keyword">else</span>{            response.getWriter().print(<span class="hljs-string">"false"</span>);        }    }}</code></pre></div></li><li><p>导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div></li><li><p>编写index.jsp测试</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;    &lt;%--&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;--%&gt;    &lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        <span class="hljs-function">function <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>{            $.post({                url:<span class="hljs-string">"${pageContext.request.contextPath}/a1"</span>,                data:{<span class="hljs-string">'name'</span>:$(<span class="hljs-string">"#txtName"</span>).val()},                success:function (data,status) {                    alert(data);                    alert(status);                }            });        }    &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;%--onblur：失去焦点触发事件--%&gt;  用户名:&lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"txtName"</span> onblur=<span class="hljs-string">"a1()"</span>/&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>启动tomcat测试！ 打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p></li></ol><hr><h3 id="11-2、AJAX异步加载数据"><a href="#11-2、AJAX异步加载数据" class="headerlink" title="11.2、AJAX异步加载数据"></a>11.2、AJAX异步加载数据</h3><h3 id="Springmvc实现"><a href="#Springmvc实现" class="headerlink" title="Springmvc实现"></a>Springmvc实现</h3><p>实体类user</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> String sex;}</code></pre></div><p>我们来获取一个集合对象，展示到前端页面</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/a2"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">ajax2</span><span class="hljs-params">()</span></span>{    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆1号"</span>,<span class="hljs-number">3</span>,<span class="hljs-string">"男"</span>));    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆2号"</span>,<span class="hljs-number">3</span>,<span class="hljs-string">"男"</span>));    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">"秦疆3号"</span>,<span class="hljs-number">3</span>,<span class="hljs-string">"男"</span>));    <span class="hljs-keyword">return</span> list; <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span>}</code></pre></div><p>前端页面</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=<span class="hljs-string">"button"</span> id=<span class="hljs-string">"btn"</span> value=<span class="hljs-string">"获取数据"</span>/&gt;&lt;table width=<span class="hljs-string">"80%"</span> align=<span class="hljs-string">"center"</span>&gt;    &lt;tr&gt;        &lt;td&gt;姓名&lt;/td&gt;        &lt;td&gt;年龄&lt;/td&gt;        &lt;td&gt;性别&lt;/td&gt;    &lt;/tr&gt;    &lt;tbody id=<span class="hljs-string">"content"</span>&gt;    &lt;/tbody&gt;&lt;/table&gt;&lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;&lt;script&gt;    $(function () {        $(<span class="hljs-string">"#btn"</span>).click(function () {            $.post(<span class="hljs-string">"${pageContext.request.contextPath}/a2"</span>,function (data) {                console.log(data)                <span class="hljs-keyword">var</span> html=<span class="hljs-string">""</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) {                    html+= <span class="hljs-string">"&lt;tr&gt;"</span> +                        <span class="hljs-string">"&lt;td&gt;"</span> + data[i].name + <span class="hljs-string">"&lt;/td&gt;"</span> +                        <span class="hljs-string">"&lt;td&gt;"</span> + data[i].age + <span class="hljs-string">"&lt;/td&gt;"</span> +                        <span class="hljs-string">"&lt;td&gt;"</span> + data[i].sex + <span class="hljs-string">"&lt;/td&gt;"</span> +                        <span class="hljs-string">"&lt;/tr&gt;"</span>                }                $(<span class="hljs-string">"#content"</span>).html(html);            });        })    })&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><h3 id="11-3、AJAX验证用户名体验"><a href="#11-3、AJAX验证用户名体验" class="headerlink" title="11.3、AJAX验证用户名体验"></a>11.3、AJAX验证用户名体验</h3><h3 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h3><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/a3"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name,String pwd)</span></span>{    String msg = <span class="hljs-string">""</span>;    <span class="hljs-comment">//模拟数据库中存在数据</span>    <span class="hljs-keyword">if</span> (name!=<span class="hljs-keyword">null</span>){        <span class="hljs-keyword">if</span> (<span class="hljs-string">"admin"</span>.equals(name)){            msg = <span class="hljs-string">"OK"</span>;        }<span class="hljs-keyword">else</span> {            msg = <span class="hljs-string">"用户名输入错误"</span>;        }    }    <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-keyword">null</span>){        <span class="hljs-keyword">if</span> (<span class="hljs-string">"123456"</span>.equals(pwd)){            msg = <span class="hljs-string">"OK"</span>;        }<span class="hljs-keyword">else</span> {            msg = <span class="hljs-string">"密码输入有误"</span>;        }    }    <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span>}</code></pre></div><p>前端页面 login.jsp</p><div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;ajax&lt;/title&gt;    &lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        <span class="hljs-function">function <span class="hljs-title">a1</span><span class="hljs-params">()</span></span>{            $.post({                url:<span class="hljs-string">"${pageContext.request.contextPath}/a3"</span>,                data:{<span class="hljs-string">'name'</span>:$(<span class="hljs-string">"#name"</span>).val()},                success:function (data) {                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">'OK'</span>){                        $(<span class="hljs-string">"#userInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"green"</span>);                    }<span class="hljs-keyword">else</span> {                        $(<span class="hljs-string">"#userInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"red"</span>);                    }                    $(<span class="hljs-string">"#userInfo"</span>).html(data);                }            });        }        <span class="hljs-function">function <span class="hljs-title">a2</span><span class="hljs-params">()</span></span>{            $.post({                url:<span class="hljs-string">"${pageContext.request.contextPath}/a3"</span>,                data:{<span class="hljs-string">'pwd'</span>:$(<span class="hljs-string">"#pwd"</span>).val()},                success:function (data) {                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">'OK'</span>){                        $(<span class="hljs-string">"#pwdInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"green"</span>);                    }<span class="hljs-keyword">else</span> {                        $(<span class="hljs-string">"#pwdInfo"</span>).css(<span class="hljs-string">"color"</span>,<span class="hljs-string">"red"</span>);                    }                    $(<span class="hljs-string">"#pwdInfo"</span>).html(data);                }            });        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;    用户名:&lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"name"</span> onblur=<span class="hljs-string">"a1()"</span>/&gt;    &lt;span id="userInfo"&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;    密码:&lt;input type=<span class="hljs-string">"text"</span> id=<span class="hljs-string">"pwd"</span> onblur=<span class="hljs-string">"a2()"</span>/&gt;    &lt;span id="pwdInfo"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="https://blog.kuangstudy.com/usr/uploads/2019/10/3300712039.png" srcset="/blog/img/loading.gif" alt="1570203565381.png"></p><h3 id="11-4、补充，自己看看"><a href="#11-4、补充，自己看看" class="headerlink" title="11.4、补充，自己看看"></a>11.4、补充，自己看看</h3><h3 id="获取baidu接口Demo"><a href="#获取baidu接口Demo" class="headerlink" title="获取baidu接口Demo"></a>获取baidu接口Demo</h3><div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE HTML&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=utf-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSONP百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">        <span class="hljs-selector-id">#q</span>{</span>            width: 500px;            height: 30px;<span class="css">            <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ddd</span>;</span>            line-height: 30px;            display: block;            margin: 0 auto;            padding: 0 10px;            font-size: 14px;        }<span class="css">        <span class="hljs-selector-id">#ul</span>{</span>            width: 520px;            list-style: none;            margin: 0 auto;            padding: 0;<span class="css">            <span class="hljs-selector-tag">border</span><span class="hljs-selector-pseudo">:1px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-id">#ddd</span>;</span>            margin-top: -1px;            display: none;        }<span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span>{</span>            line-height: 30px;            padding: 0 10px;        }<span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>{</span><span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#f60</span>;</span><span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>        }    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-comment">// 2.步骤二</span></span><span class="actionscript">        <span class="hljs-comment">// 定义demo函数 (分析接口、数据)</span></span><span class="actionscript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span><span class="hljs-params">(data)</span></span>{</span><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'ul'</span>);</span><span class="actionscript">            <span class="hljs-keyword">var</span> html = <span class="hljs-string">''</span>;</span><span class="actionscript">            <span class="hljs-comment">// 如果搜索数据存在 把内容添加进去</span></span>            if (data.s.length) {<span class="actionscript">                <span class="hljs-comment">// 隐藏掉的ul显示出来</span></span><span class="actionscript">                Ul.style.display = <span class="hljs-string">'block'</span>;</span><span class="actionscript">                <span class="hljs-comment">// 搜索到的数据循环追加到li里</span></span><span class="actionscript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.s.length;i++){</span><span class="actionscript">                    html += <span class="hljs-string">'&lt;li&gt;'</span>+data.s[i]+<span class="hljs-string">'&lt;/li&gt;'</span>;</span>                }<span class="actionscript">                <span class="hljs-comment">// 循环的li写入ul</span></span>                Ul.innerHTML = html;            }        }<span class="actionscript">        <span class="hljs-comment">// 1.步骤一</span></span><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><span class="actionscript">            <span class="hljs-comment">// 获取输入框和ul</span></span><span class="javascript">            <span class="hljs-keyword">var</span> Q = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'q'</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'ul'</span>);</span><span class="actionscript">            <span class="hljs-comment">// 事件鼠标抬起时候</span></span><span class="actionscript">            Q.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{</span><span class="actionscript">                <span class="hljs-comment">// 如果输入框不等于空</span></span><span class="actionscript">                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value != <span class="hljs-string">''</span>) {</span><span class="actionscript">                    <span class="hljs-comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><span class="actionscript">                    <span class="hljs-comment">// 创建标签</span></span><span class="javascript">                    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>);</span><span class="actionscript">                    <span class="hljs-comment">//给定要跨域的地址 赋值给src</span></span><span class="actionscript">                    <span class="hljs-comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><span class="actionscript">                    script.src = <span class="hljs-string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span>+<span class="hljs-keyword">this</span>.value+<span class="hljs-string">'&amp;cb=demo'</span>;</span><span class="actionscript">                    <span class="hljs-comment">// 将组合好的带src的script标签追加到body里</span></span><span class="javascript">                    <span class="hljs-built_in">document</span>.body.appendChild(script);</span>                }            }        }    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"q"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><h2 id="12、拦截器"><a href="#12、拦截器" class="headerlink" title="12、拦截器"></a>12、拦截器</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong></p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h3 id="12-1、自定义拦截器"><a href="#12-1、自定义拦截器" class="headerlink" title="12.1、自定义拦截器"></a>12.1、自定义拦截器</h3><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><ol><li><p>新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持</p></li><li><p>配置web.xml 和 springmvc-servlet.xml 文件</p></li><li><p>编写一个拦截器</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>{    <span class="hljs-comment">//在请求处理的方法之前执行</span>    <span class="hljs-comment">//如果返回true执行下一个拦截器</span>    <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>{        System.out.println(<span class="hljs-string">"------------处理前------------"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    }    <span class="hljs-comment">//在请求处理方法执行之后执行</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>{        System.out.println(<span class="hljs-string">"------------处理后------------"</span>);    }    <span class="hljs-comment">//在dispatcherServlet处理后执行,做清理工作.</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>{        System.out.println(<span class="hljs-string">"------------清理------------"</span>);    }}</code></pre></div></li><li><p>在springmvc的配置文件中配置拦截器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span>        <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span>        <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.interceptor.MyInterceptor"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre></div></li><li><p>编写一个Controller，接收请求</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-comment">//测试拦截器的控制器</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorController</span> </span>{    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/interceptor"</span>)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testFunction</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"控制器中的方法执行了"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    }}</code></pre></div></li><li><p>前端 index.jsp</p> <div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"${pageContext.request.contextPath}/interceptor"</span>&gt;</span>拦截器测试<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div></li><li><p>启动tomcat 测试一下！<br> <img src="https://blog.kuangstudy.com/usr/uploads/2019/10/2785405154.png" srcset="/blog/img/loading.gif" alt="1570205071233.png"></p></li></ol><h3 id="12-2、验证用户是否登录-认证用户"><a href="#12-2、验证用户是否登录-认证用户" class="headerlink" title="12.2、验证用户是否登录 (认证用户)"></a>12.2、验证用户是否登录 (认证用户)</h3><p><strong>实现思路</strong></p><ol><li>有一个登陆页面，需要写一个controller访问页面。</li><li>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></li><li>拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</li></ol><p><strong>代码编写</strong></p><ol><li><p>编写一个登陆页面 login.jsp</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;h1&gt;登录页面&lt;/h1&gt;&lt;hr&gt;&lt;body&gt;&lt;form action=<span class="hljs-string">"${pageContext.request.contextPath}/user/login"</span>&gt;    用户名：&lt;input type=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"username"</span>&gt; &lt;br&gt;    密码： &lt;input type=<span class="hljs-string">"password"</span> name=<span class="hljs-string">"pwd"</span>&gt; &lt;br&gt;    &lt;input type=<span class="hljs-string">"submit"</span> value=<span class="hljs-string">"提交"</span>&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>编写一个Controller处理请求</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/user"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>{    <span class="hljs-comment">//跳转到登陆页面</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/jumplogin"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;    }    <span class="hljs-comment">//跳转到成功页面</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/jumpSuccess"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpSuccess</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;    }    <span class="hljs-comment">//登陆提交</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/login"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpSession session, String username, String pwd)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">// 向session记录用户身份信息</span>        System.out.println(<span class="hljs-string">"接收前端==="</span>+username);        session.setAttribute(<span class="hljs-string">"user"</span>, username);        <span class="hljs-keyword">return</span> <span class="hljs-string">"success"</span>;    }    <span class="hljs-comment">//退出登陆</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"logout"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>{        <span class="hljs-comment">// session 过期</span>        session.invalidate();        <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;    }}</code></pre></div></li><li><p>编写一个登陆成功的页面 success.jsp</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;登录成功页面&lt;/h1&gt;&lt;hr&gt;${user}&lt;a href="${pageContext.request.contextPath}/user/logout"&gt;注销&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p> <div class="hljs"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">"text/html;charset=UTF-8"</span> language=<span class="hljs-string">"java"</span> %&gt;&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;h1&gt;首页&lt;/h1&gt;  &lt;hr&gt;  &lt;%--登录--%&gt;  &lt;a href="${pageContext.request.contextPath}/user/jumplogin"&gt;登录&lt;/a&gt;  &lt;a href="${pageContext.request.contextPath}/user/jumpSuccess"&gt;成功页面&lt;/a&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre></div></li><li><p>编写用户登录拦截器</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{        <span class="hljs-comment">// 如果是登陆页面则放行</span>        System.out.println(<span class="hljs-string">"uri: "</span> + request.getRequestURI());        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">"login"</span>)) {            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        }        HttpSession session = request.getSession();        <span class="hljs-comment">// 如果用户已登陆也放行</span>        <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">"user"</span>) != <span class="hljs-keyword">null</span>) {            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        }        <span class="hljs-comment">// 用户没有登陆跳转到登陆页面</span>        request.getRequestDispatcher(<span class="hljs-string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>{    }        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>{    }}</code></pre></div></li><li><p>在Springmvc的配置文件中注册拦截器</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">"/**"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loginInterceptor"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.kuang.interceptor.LoginInterceptor"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre></div></li><li><p>再次重启Tomcat测试！</p></li></ol><p><strong>OK，测试登录拦截功能无误.</strong></p><h2 id="13、SpringMVC：文件上传和下载"><a href="#13、SpringMVC：文件上传和下载" class="headerlink" title="13、SpringMVC：文件上传和下载"></a>13、SpringMVC：文件上传和下载</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h3 id="13-1、文件上传"><a href="#13-1、文件上传" class="headerlink" title="13.1、文件上传"></a>13.1、文件上传</h3><p>一、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--servlet-api导入高版本的--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>二、配置bean：multipartResolver<br>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"multipartResolver"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultEncoding"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxUploadSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10485760"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxInMemorySize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"40960"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p>我们去实际测试一下</p><p>三、编写前端页面</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/upload"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"upload"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></div><p>四、<strong>Controller</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>{    <span class="hljs-comment">//@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span>    <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/upload"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file , HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException </span>{        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span>        String uploadFileName = file.getOriginalFilename();        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">""</span>.equals(uploadFileName)){            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;        }        System.out.println(<span class="hljs-string">"上传文件名 : "</span>+uploadFileName);        <span class="hljs-comment">//上传路径保存设置</span>        String path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);        <span class="hljs-comment">//如果路径不存在，创建一个</span>        File realPath = <span class="hljs-keyword">new</span> File(path);        <span class="hljs-keyword">if</span> (!realPath.exists()){            realPath.mkdir();        }        System.out.println(<span class="hljs-string">"上传文件保存地址："</span>+realPath);        InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span>        <span class="hljs-comment">//读取写出</span>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>){            os.write(buffer,<span class="hljs-number">0</span>,len);            os.flush();        }        os.close();        is.close();        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;    }}</code></pre></div><p>五、测试上传文件，OK！</p><h3 id="采用file-Transto-来保存上传的文件"><a href="#采用file-Transto-来保存上传的文件" class="headerlink" title="采用file.Transto 来保存上传的文件"></a>采用file.Transto 来保存上传的文件</h3><ol><li><p>编写Controller</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 采用file.Transto 来保存上传的文件</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/upload2"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"file"</span>)</span> CommonsMultipartFile file, HttpServletRequest request) <span class="hljs-keyword">throws</span> IOException </span>{    <span class="hljs-comment">//上传路径保存设置</span>    String path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);    File realPath = <span class="hljs-keyword">new</span> File(path);    <span class="hljs-keyword">if</span> (!realPath.exists()){        realPath.mkdir();    }    <span class="hljs-comment">//上传文件地址</span>    System.out.println(<span class="hljs-string">"上传文件保存地址："</span>+realPath);    <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span>    file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">"/"</span>+ file.getOriginalFilename()));    <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/index.jsp"</span>;}</code></pre></div></li><li><p>前端表单提交地址修改</p></li><li><p>访问提交测试，OK！</p></li></ol><h3 id="13-2、文件下载"><a href="#13-2、文件下载" class="headerlink" title="13.2、文件下载"></a>13.2、文件下载</h3><p>文件下载步骤：</p><ol><li>设置 response 响应头</li><li>读取文件 – InputStream</li><li>写出文件 – OutputStream</li><li>执行操作</li><li>关闭流 （先开后关）</li></ol><p>代码实现：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/download"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>{    <span class="hljs-comment">//要下载的图片地址</span>    String  path = request.getServletContext().getRealPath(<span class="hljs-string">"/upload"</span>);    String  fileName = <span class="hljs-string">"基础语法.jpg"</span>;    <span class="hljs-comment">//1、设置response 响应头</span>    response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span>    response.setCharacterEncoding(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">//字符编码</span>    response.setContentType(<span class="hljs-string">"multipart/form-data"</span>); <span class="hljs-comment">//二进制传输数据</span>    <span class="hljs-comment">//设置响应头</span>    response.setHeader(<span class="hljs-string">"Content-Disposition"</span>,            <span class="hljs-string">"attachment;fileName="</span>+URLEncoder.encode(fileName, <span class="hljs-string">"UTF-8"</span>));    File file = <span class="hljs-keyword">new</span> File(path,fileName);    <span class="hljs-comment">//2、 读取文件--输入流</span>    InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);    <span class="hljs-comment">//3、 写出文件--输出流</span>    OutputStream out = response.getOutputStream();    <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;    <span class="hljs-comment">//4、执行 写出操作</span>    <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>){        out.write(buff, <span class="hljs-number">0</span>, index);        out.flush();    }    out.close();    input.close();    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;}</code></pre></div><p>前端</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/download"</span>&gt;</span>点击下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p><h2 id="100、通用"><a href="#100、通用" class="headerlink" title="100、通用"></a>100、通用</h2><h3 id="1-web-xml"><a href="#1-web-xml" class="headerlink" title="1.web.xml"></a>1.web.xml</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>            org.springframework.web.filter.CharacterEncodingFilter        <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span>    <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div><h3 id="2-springmvc-servlet-xml"><a href="#2-springmvc-servlet-xml" class="headerlink" title="2.springmvc-servlet.xml"></a>2.springmvc-servlet.xml</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang.controller"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span>    <span class="hljs-comment">&lt;!--JSON乱码问题配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">"true"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"objectMapper"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"failOnEmptyBeans"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"false"</span>/&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span> /&gt;</span>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="3、使用到的注解"><a href="#3、使用到的注解" class="headerlink" title="3、使用到的注解"></a>3、使用到的注解</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>注解类型用于声明Spring类的实例是一个控制器<span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/HelloController"</span>)<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1 组合注解  <span class="hljs-meta">@GetMapping</span>          <span class="hljs-meta">@PostMapping</span>          <span class="hljs-meta">@PutMapping</span>          <span class="hljs-meta">@DeleteMapping</span>          <span class="hljs-meta">@PatchMapping</span><span class="hljs-meta">@RequestParam</span>(<span class="hljs-string">"username"</span>) String name <span class="hljs-meta">@ResponseBody</span>    组合注解   <span class="hljs-meta">@RestController</span></code></pre></div><h3 id="4、使用到的jar包"><a href="#4、使用到的jar包" class="headerlink" title="4、使用到的jar包"></a>4、使用到的jar包</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-comment">&lt;!-- fastjson --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><p><img src="https://img2020.cnblogs.com/blog/1905053/202003/1905053-20200331213841543-745577399.png" srcset="/blog/img/loading.gif" alt="img"></p><h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><p><img src="https://images2018.cnblogs.com/blog/1370903/201808/1370903-20180827201021158-682489195.png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1、一个请求匹配前端控制器-DispatcherServlet-的请求映射路径-在-web-xml中指定-WEB-容器将该请求转交给-DispatcherServlet-处理"><a href="#1、一个请求匹配前端控制器-DispatcherServlet-的请求映射路径-在-web-xml中指定-WEB-容器将该请求转交给-DispatcherServlet-处理" class="headerlink" title="1、一个请求匹配前端控制器 DispatcherServlet 的请求映射路径(在 web.xml中指定), WEB 容器将该请求转交给 DispatcherServlet 处理"></a>1、一个请求匹配前端控制器 DispatcherServlet 的请求映射路径(在 web.xml中指定), WEB 容器将该请求转交给 DispatcherServlet 处理</h3><h3 id="2、DispatcherServlet-接收到请求后-将根据-请求信息-交给-处理器映射器-（HandlerMapping）"><a href="#2、DispatcherServlet-接收到请求后-将根据-请求信息-交给-处理器映射器-（HandlerMapping）" class="headerlink" title="2、DispatcherServlet 接收到请求后, 将根据 请求信息 交给 处理器映射器 （HandlerMapping）"></a>2、DispatcherServlet 接收到请求后, 将根据 请求信息 交给 处理器映射器 （HandlerMapping）</h3><h3 id="3、HandlerMapping-根据用户的url请求-查找匹配该url的-Handler，并返回一个执行链"><a href="#3、HandlerMapping-根据用户的url请求-查找匹配该url的-Handler，并返回一个执行链" class="headerlink" title="3、HandlerMapping 根据用户的url请求 查找匹配该url的 Handler，并返回一个执行链"></a>3、HandlerMapping 根据用户的url请求 查找匹配该url的 Handler，并返回一个执行链</h3><h3 id="4、DispatcherServlet-再请求-处理器适配器-HandlerAdapter-调用相应的-Handler-进行处理并返回-ModelAndView-给-DispatcherServlet"><a href="#4、DispatcherServlet-再请求-处理器适配器-HandlerAdapter-调用相应的-Handler-进行处理并返回-ModelAndView-给-DispatcherServlet" class="headerlink" title="4、DispatcherServlet 再请求 处理器适配器(HandlerAdapter) 调用相应的 Handler 进行处理并返回 ModelAndView 给 DispatcherServlet"></a>4、DispatcherServlet 再请求 处理器适配器(HandlerAdapter) 调用相应的 Handler 进行处理并返回 ModelAndView 给 DispatcherServlet</h3><h3 id="5、DispatcherServlet-将-ModelAndView-请求-ViewReslover（视图解析器）解析，返回具体-View"><a href="#5、DispatcherServlet-将-ModelAndView-请求-ViewReslover（视图解析器）解析，返回具体-View" class="headerlink" title="5、DispatcherServlet 将 ModelAndView 请求 ViewReslover（视图解析器）解析，返回具体 View"></a>5、DispatcherServlet 将 ModelAndView 请求 ViewReslover（视图解析器）解析，返回具体 View</h3><h3 id="6、DispatcherServlet-对-View-进行渲染视图（即将模型数据填充至视图中）"><a href="#6、DispatcherServlet-对-View-进行渲染视图（即将模型数据填充至视图中）" class="headerlink" title="6、DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）"></a>6、DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）</h3><h3 id="7、DispatcherServlet-将页面响应给用户"><a href="#7、DispatcherServlet-将页面响应给用户" class="headerlink" title="7、DispatcherServlet 将页面响应给用户"></a>7、DispatcherServlet 将页面响应给用户</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1aE41167Tu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1aE41167Tu&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>WrodPress建站教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/WrodPress%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/WrodPress%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-27T03:11:11.000Z</published>
    <updated>2020-09-18T04:43:03.004Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章适用于第一次建站的小白，帮助你从零搭建起一个属于自己的网站，既然是从零，那么我就会带着你从购买域名等到一直搭建成功，接下来请往下看吧。</p><h2 id="建站准备"><a href="#建站准备" class="headerlink" title="建站准备"></a>建站准备</h2><p>建网站本身是没有什么难度的，毕竟现在搭建一个网站的成本也很低，只是配套需要的东西有些繁琐，我们先把要用到的准备好。</p><ul><li>域名</li><li>服务器</li><li>WrodPress安装包</li></ul><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>域名这里推荐使用<a href="https://wanwang.aliyun.com/?spm=5176.12825654.eofdhaal5.9.e9392c4ajD7d25&amp;aly_as=sVYsCHit" target="_blank" rel="noopener">阿里云</a>的域名，博主的这个域名就是在阿里云注册的，现在最便宜的top域名首年才9元。博主本来想注册<code>zou.wang</code>这个域名的，一年四万多吓得我立马关掉了浏览器。</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%9F%9F%E5%90%8D.png" srcset="/blog/img/loading.gif" alt="域名价格表.png"></p><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>服务器的选择就很多了，如果不想备案的话还是要买海外的服务器（比如香港的）博主买的是<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云服务器</a>，不要以为博主花了很多钱，我正好处在25岁以下，买的是<a href="https://cloud.tencent.com/act/campus?fromSource=gwzcw.2432500.2432500.2432500&amp;utm_medium=cpc&amp;utm_id=gwzcw.2432500.2432500.2432500" target="_blank" rel="noopener">腾讯云学生服务器</a>，一个月才十元，并且可以以这个价格续费三次，配置我觉得还可以，作为初始建站是够用了，当然这是属于国内的服务器是要备案的并且服务器购买三个月才可以备案，博主当时就被这里坑掉了。这里一定要记住一次性购买三个月服务器才可以备案。<img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8.png" srcset="/blog/img/loading.gif" alt="WordPress建站最全教程"></p><p>这里系统选择<code>CentOS 7.4 64位</code>为什么必须选择<a href="https://baike.baidu.com/item/linux/27050?fr=aladdin" target="_blank" rel="noopener">Linux</a>呢，因为后面用的就是<a href="https://baike.baidu.com/item/linux/27050?fr=aladdin" target="_blank" rel="noopener">Linux</a>，记得保存好账户密码。</p><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><p>安装<a href="https://www.bt.cn/?invite_code=MV9oc2Jib3U=" target="_blank" rel="noopener">宝塔面板</a>之前，确保你的系统是纯净的（刚买的肯定是纯净的吧），如果之前使用其他的一键安装，建议重装系统为Centos7系统 。首先我们要进入刚买的服务器</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A6%82%E5%86%B5.png" srcset="/blog/img/loading.gif" alt="d3a6043d61f5c2c81194e974a097de55.png"></p><p>点击登陆，选择标准登陆方式，输入之前保存的密码，成功登陆之后在命令行输入以下命令安装宝塔面板</p><div class="hljs"><pre><code class="hljs LNUIX">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</code></pre></div><p>中途一直yes就行，等待几分钟安装完毕。</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%AE%9D%E5%A1%94%E4%BF%A1%E6%81%AF.png" srcset="/blog/img/loading.gif" alt="98a72b549ab4344fbe748bc29572c572.png"></p><p>等待安装完成之后，命令行会显示面板的登录地址、账号以及密码，一定将这些信息保存下来，后期的管理都需要使用该信息登录面板</p><h2 id="安装网络环境"><a href="#安装网络环境" class="headerlink" title="安装网络环境"></a>安装网络环境</h2><p>宝塔面板安装完成后，我们就可以登录后台面板了，使用刚刚记录的后台地址登录，登陆进去之后最好在面板设置里修改一下访问端口和密码什么的。</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%AE%9D%E5%A1%94%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" srcset="/blog/img/loading.gif" alt="fdb76a4f995f40bf0237b22f6187f4dc.png"></p><p>进入到宝塔后台面板我们就可以看到一键安装网络环境的界面，一般我们会选择左侧的LNMP架构，编译安装</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/LNMP.jpg" srcset="/blog/img/loading.gif" alt="LNMP.md.jpg"></p><p>然后就是等待安装完成就可以了，一般会持续半小时到1个小时，根据你服务器的性能决定 。</p><h2 id="服务器新建站点"><a href="#服务器新建站点" class="headerlink" title="服务器新建站点"></a>服务器新建站点</h2><p>现在所有的环境已经搭建好了，我们就可以开始建网站了，宝塔面板新建一个网站，点击下图中绿色的按钮新建一个站点。</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E6%B7%BB%E5%8A%A0%E7%AB%99%E7%82%B9.jpg" srcset="/blog/img/loading.gif" alt="ae6af2e95da6cd18f6f7bb3495846a6d.jpg"></p><p>这里需要输入我们的域名，把不带www的和带www的都填上，比如zouwang.vip和<a href="http://www.zouwang.vip" target="_blank" rel="noopener">www.zouwang.vip</a>, 该步骤就是<strong>绑定域名</strong>，FTP可以不用创建后面也用不上，数据库是一定要创建的，把这些信息都记录下来之后要用到</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99.png" srcset="/blog/img/loading.gif" alt="cf2b2d4e64575ed25b4b806ee5cb82d2.png"></p><p>所有设置完毕之后我们点击提交，网站即创建完毕 。</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>这个其实很简单，就是添加域名解析的ip地址，使域名可以解析到服务器，不同的域名商操作方法不一样，这里我演示下阿里云的域名解析。</p><p>我们先在域名控制台里找到域名列表，点击解析，然后添加解析。</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%87%86%E5%A4%87%E8%A7%A3%E6%9E%90.png" srcset="/blog/img/loading.gif" alt="4d55b52f45ac4920044b3fd468f7b244.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E8%A7%A3%E6%9E%90%E8%AE%BE%E7%BD%AE.png" srcset="/blog/img/loading.gif" alt="68f288ebb71f9cc8685f5e527d51f2a1.png"></p><p>先来讲一下添加域名解析记录的每个词都是什么意思</p><h3 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h3><p>要指向空间商提供的 IP 地址，选择「类型 A」，要指向一个域名，选择「类型 CNAME」</p><ul><li>A记录：地址记录，用来指定域名的IPv4地址（如：8.8.8.8），如果需要将域名指向一个IP地址，就需要添加A记录。</li><li>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录，例如添加<a href="https://baike.baidu.com/item/CDN/420951?fr=aladdin" target="_blank" rel="noopener">cdn</a></li><li>NS：域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。</li><li>AAA：用来指定主机名（或域名）对应的IPv6地址（例如：ff06:0:0:0:0:0:0:c3）记录。</li><li>MX：如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。</li></ul><h3 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h3><p>主机记录就是域名前缀，常见用法有：</p><ul><li>www：解析后的域名为 <a href="http://www.zouwang.vip" target="_blank" rel="noopener">www.zouwang.vip</a></li><li>@：直接解析主域名 zouwang.vip</li><li>*：泛解析，匹配其他所有域名 *.zouwang.vip</li></ul><h3 id="解析线路"><a href="#解析线路" class="headerlink" title="解析线路"></a>解析线路</h3><p>让指定线路的用户访问这个IP，常见用法有：</p><ul><li>默认：必须添加，否则只有单独指定的线路才能访问您的网站。如果双线解析，建议「默认」线路填写「电信IP」</li><li>联通：单独为「联通用户」指定服务器 IP，其他用户依然访问「默认」</li><li>搜索引擎：指定一个服务器 IP 让抓取</li></ul><h3 id="记录值"><a href="#记录值" class="headerlink" title="记录值"></a>记录值</h3><p>最常见的是将空间商提供的「IP地址」填写在这里，比如我填写的就是腾讯云服务器的ip</p><p>各类型的记录值一般是这样的：</p><ul><li>A记录：填写你服务器 IP，如果你不知道，请咨询你的空间商</li><li>CNAME记录：填写空间商给你提供的域名，例如：2.com</li><li>MX记录：填写你邮件服务器的IP地址或企业邮局给你提供的域名，如果你不知道，请咨询你的邮件服务提供商</li><li>AAAA：不常用。解析到 IPv6 的地址。</li><li>NS记录：不常用。系统默认添加的两个NS记录请不要修改。NS向下授权，填写dns域名，例如：ns3.dnsv3.com</li></ul><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><p>即 Time To Live，缓存的生存时间。指地方dns缓存您域名记录信息的时间，缓存失效后会再次到DNSPod获取记录值。 我们默认的 600 秒是最常用的，不用修改</p><ul><li><strong>600（10分钟）：建议正常情况下使用 600。</strong></li><li>60（1分钟）：如果你经常修改IP，修改记录一分钟即可生效。长期使用 60，解析速度会略受影响。</li><li>3600（1小时）：如果你IP极少变动（一年几次），建议选择 3600，解析速度快。如果要修改IP，提前一天改为 60，即可快速生效。</li></ul><p>该理解的应该都理解差不多了吧，接下来我们开始解析域名，这里我们需要解析两个域名。</p><ul><li>一个是 www 记录，这里设置www通用的，比如 <a href="http://www.zouwang.vip" target="_blank" rel="noopener">www.zouwang.vip</a></li><li>还有就是 @ 记录，这个是设置根域名，比如说我的就是 zouwang.vip，虽然说有时候用不到，最好还是设置一下，毕竟还是有很多人直接输入域名不输入www的，听说不带www的百度收录会更快也不知道是真假。</li></ul><p>设置好解析之后等待十分钟，然后访问网页看到一个创建成功的页面，就证明解析已经好了，可以进行下一步 。</p><h2 id="下载WordPress安装包"><a href="#下载WordPress安装包" class="headerlink" title="下载WordPress安装包"></a>下载WordPress安装包</h2><p>服务器和域名都已经购买完毕，那么网站采用什么搭建呢，当然是非常流行的<a href="https://baike.baidu.com/item/WordPress/450615?fr=aladdin" target="_blank" rel="noopener">WordPress</a>。作为知名的博客平台，采用php语言开发，当然你不懂php也没关系，我也不懂。我们需要到<a href="https://cn.wordpress.org/download/" target="_blank" rel="noopener">WordPress中国站</a>去下载安装包。</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E4%B8%8B%E8%BD%BDwordpress.png" srcset="/blog/img/loading.gif" alt="wordpress3cf2cbf365652db8.png"></p><p>下载完成之后不用解压，留着安装包就好。接下来我们需要把下载好的安装包上传到服务器上，因为我们有宝塔面板所以上传很方便，不需要第三方工具。我们在宝塔面板找到文件管理的界面，然后找到网站对应的目录，宝塔面板的目录一般是固定的，比如我刚刚新建的网站目录就是 /www/wwwroot/zouwang.vip/ ，一般宝塔面板安装时你没有修改的话就是在这个 /www/wwwroot 目录下的。</p><p>点击上传，选择刚才下载好的安装包，</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%87%86%E5%A4%87%E4%B8%8A%E4%BC%A0wordpress_zip.png" srcset="/blog/img/loading.gif" alt="wordpress_zip.png"></p><p>上传成功之后可以在wordpress.zip的看到右下角有一个箭头，鼠标指向就能看见，这里选择解压，直接确认即可，解压完成之后可以把zip的压缩包删除了</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E8%A7%A3%E5%8E%8Bwordprss_zip.png" srcset="/blog/img/loading.gif" alt="wordprss_zip.png"></p><h2 id="安装WordPress网站"><a href="#安装WordPress网站" class="headerlink" title="安装WordPress网站"></a>安装WordPress网站</h2><p>在域名解析和网站程序目录结构都没有问题后，我们就可以安装网站了，安装是最简单的</p><p>直接访问自己的域名，会看到wordpress的安装界面，它说的东西我们前期已经准备好，第一步可以直接开始</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/wordpress%E5%AE%89%E8%A3%85%E7%95%8C%E9%9D%A2.png" srcset="/blog/img/loading.gif" alt="wordpress.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93.png" srcset="/blog/img/loading.gif" alt="51aa253adeaa7c1028881315ca29d60f.png"></p><p>这里填写的是服务器数据库信息，包括数据库名、用户名、密码、数据库主机、表前缀，数据库主机和表前缀没有特殊需求的话一般都不需要修改，数据库密码刚刚我们已经记下了，按照要求填写即可(注意不要和服务器的用户名密码搞混)</p><p>如果你之前没有记录数据库信息也没关系，你可以到宝塔面板 – 数据库 查看信息。</p><p>数据库信息填好以后点击提交，下一步就是安装WordPress</p><p><img src="https://cdn.jsdelivr.net/gh/Zou-Wang/cdn-blog@1.0/img/wordpress-build/%E5%AE%89%E8%A3%85wordpress.png" srcset="/blog/img/loading.gif" alt="wordpressba00242cb0990efc.png"></p><p>填写自己的网站信息，用户名和密码最好是找个地方记下来，这个是你登录WordPress需要的账号密码，邮箱一定要填写自己的，找回密码用，而且网站有留言审核之类的问题也会给你发送邮件</p><p><img src="https://view.moezx.cc/images/2018/05/13/image-404.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>网站安装成功，接下来就可以登陆到后台进行各种设置了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里一个基本网站的搭建就已经完成了，相信你也从中学到了很多东西，这篇文章更多是为了防止初次建站的小白走弯路，想当初博主可是踩了很多坑，最后总结一下整个过程：购买域名-&gt;购买服务器-&gt;安装宝塔面板-&gt;安装网络环境-&gt;新建站点-&gt;域名解析-&gt;安装wordpress。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章适用于第一次建站的小白，帮助你从零搭建起一个属于自己的网站，既然是从零，那么我就会带着你从购买域名等到一直搭建成功，接下来请往下看吧。&lt;/p&gt;
&lt;h2 id=&quot;建站准备&quot;&gt;&lt;a href=&quot;#建站准备&quot; class=&quot;headerlink&quot; title=&quot;建站准备&quot;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器后台运行jar包</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/23/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cjar%E5%8C%85/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/23/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cjar%E5%8C%85/</id>
    <published>2020-08-22T17:02:00.000Z</published>
    <updated>2020-09-18T04:43:02.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><p>将运行日志输入到 logs.txt (jar包所在的目录)</p><div class="hljs"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>&gt;logs.txt &amp;</code></pre></div><h1 id="分解介绍"><a href="#分解介绍" class="headerlink" title="分解介绍"></a>分解介绍</h1><ol><li>首先最基本的运行jar包命令是:</li></ol><div class="hljs"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar</span></code></pre></div><p>这个命令会锁定命令窗口，只能看到当前运行的输出信息。而无法发送其他指令。</p><blockquote><p>这种方式当ssh窗口关闭时，程序中止运行,或者是运行时没法切出去执行其他任务</p></blockquote><ol start="2"><li>让jar包后台运行</li></ol><p>用”<code>&amp;</code>“符号结尾表示，让程序在后台运行。<br>这样的话，命令窗口就不会被锁定，而可以发送其他指令，但是当窗口关闭时，后台运行的程序依然会被停止。</p><p><code>nohup</code>命令：<code>nohup</code> 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示“and”的符号）到命令的尾部。</p><p>简单地说就是，<code>nohup</code>命令可以阻止窗口关闭是的挂断信号，使程序继续运行。这样，命令就修改为了</p><div class="hljs"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>&amp;</code></pre></div><ol start="3"><li>设置输出文件</li></ol><p>在这个命令下已经可以实现需要的功能了。最后的 <code>&gt;logs.txt</code> 表示输出文件。可以随意写随意指定路径。如果不写情况下（缺省），就回默认在jar包所在目录，创建<code>nohup.out</code>文件。</p><p>如果项目中已经指定了日志输出，就会重复输出，生成两个文件，把 <code>&gt;logs.txt</code> 删了的话，当前的运行程序不会再生成新的文件。</p><div class="hljs"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>xxx.<span class="hljs-keyword">jar </span>&gt;logs.txt &amp;</code></pre></div><p>命令运行成功后，会返回一个进程号，可以通过 <code>kill -9</code> 命令杀死这个进程来直接关闭。</p><blockquote><p>如果忘了进程号，可以通过</p><div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> xxx.jar</code></pre></div><p>来查看当前运行的jar包程序进程号</p></blockquote><blockquote><p>查询当前活动的进程</p><div class="hljs"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -aux|<span class="hljs-keyword">grep</span> java</code></pre></div></blockquote><blockquote><p>查看linux系统内存大小的详细信息，可以查看总内存，剩余内存、可使用内存等信息</p><div class="hljs"><pre><code class="hljs armasm"><span class="hljs-symbol">cat</span> /<span class="hljs-meta">proc</span>/meminfo</code></pre></div></blockquote><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;上代码&quot;&gt;&lt;a href=&quot;#上代码&quot; class=&quot;headerlink&quot; title=&quot;上代码&quot;&gt;&lt;/a&gt;上代码&lt;/h1&gt;&lt;p&gt;将运行日志输入到 logs.txt (jar包所在的目录)&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;nohup &lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;&amp;gt;logs.txt &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;分解介绍&quot;&gt;&lt;a href=&quot;#分解介绍&quot; class=&quot;headerlink&quot; title=&quot;分解介绍&quot;&gt;&lt;/a&gt;分解介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;首先最基本的运行jar包命令是:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个命令会锁定命令窗口，只能看到当前运行的输出信息。而无法发送其他指令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方式当ssh窗口关闭时，程序中止运行,或者是运行时没法切出去执行其他任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;让jar包后台运行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用”&lt;code&gt;&amp;amp;&lt;/code&gt;“符号结尾表示，让程序在后台运行。&lt;br&gt;这样的话，命令窗口就不会被锁定，而可以发送其他指令，但是当窗口关闭时，后台运行的程序依然会被停止。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt;命令：&lt;code&gt;nohup&lt;/code&gt; 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断信号。要运行后台中的 &lt;code&gt;nohup&lt;/code&gt; 命令，添加 &lt;code&gt;&amp;amp;&lt;/code&gt; （ 表示“and”的符号）到命令的尾部。&lt;/p&gt;
&lt;p&gt;简单地说就是，&lt;code&gt;nohup&lt;/code&gt;命令可以阻止窗口关闭是的挂断信号，使程序继续运行。这样，命令就修改为了&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;nohup &lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;&amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;设置输出文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个命令下已经可以实现需要的功能了。最后的 &lt;code&gt;&amp;gt;logs.txt&lt;/code&gt; 表示输出文件。可以随意写随意指定路径。如果不写情况下（缺省），就回默认在jar包所在目录，创建&lt;code&gt;nohup.out&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;如果项目中已经指定了日志输出，就会重复输出，生成两个文件，把 &lt;code&gt;&amp;gt;logs.txt&lt;/code&gt; 删了的话，当前的运行程序不会再生成新的文件。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs mipsasm&quot;&gt;nohup &lt;span class=&quot;hljs-keyword&quot;&gt;java &lt;/span&gt;-&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;xxx.&lt;span class=&quot;hljs-keyword&quot;&gt;jar &lt;/span&gt;&amp;gt;logs.txt &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;命令运行成功后，会返回一个进程号，可以通过 &lt;code&gt;kill -9&lt;/code&gt; 命令杀死这个进程来直接关闭。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果忘了进程号，可以通过&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ps&lt;/span&gt; -ef|&lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; xxx.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;来查看当前运行的jar包程序进程号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;查询当前活动的进程&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs vim&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ps&lt;/span&gt; -aux|&lt;span class=&quot;hljs-keyword&quot;&gt;grep&lt;/span&gt; java&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;查看linux系统内存大小的详细信息，可以查看总内存，剩余内存、可使用内存等信息&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs armasm&quot;&gt;&lt;span class=&quot;hljs-symbol&quot;&gt;cat&lt;/span&gt; /&lt;span class=&quot;hljs-meta&quot;&gt;proc&lt;/span&gt;/meminfo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SVN中文网 - svn安装、svn部署、svn操作手册</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/SVN%E4%B8%AD%E6%96%87%E7%BD%91%20-%20svn%E5%AE%89%E8%A3%85%E3%80%81svn%E9%83%A8%E7%BD%B2%E3%80%81svn%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/SVN%E4%B8%AD%E6%96%87%E7%BD%91%20-%20svn%E5%AE%89%E8%A3%85%E3%80%81svn%E9%83%A8%E7%BD%B2%E3%80%81svn%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</id>
    <published>2020-08-21T17:30:00.000Z</published>
    <updated>2020-09-18T04:43:02.988Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.svn.org.cn/" target="_blank" rel="noopener">http://www.svn.org.cn/</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.svn.org.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.svn.org.cn/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="SVN" scheme="https://melodyjerry.github.io/blog/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>SVN 安装</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/SVN-%E5%AE%89%E8%A3%85/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/SVN-%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-21T17:02:00.000Z</published>
    <updated>2020-09-18T04:43:02.995Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="在windows下安装-SVN"><a href="#在windows下安装-SVN" class="headerlink" title="在windows下安装 SVN"></a>在windows下安装 SVN</h2><p>1、准备svn的安装文件</p><p>下载地址：<a href="https://sourceforge.net/projects/win32svn/" target="_blank" rel="noopener">https://sourceforge.net/projects/win32svn/</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/svn-windows-install01a.png" srcset="/blog/img/loading.gif" alt="img"></p><p>2、下载完成后，在相应的盘符中会有一个Setup-Subversion-1.8.16.msi的文件，目前最新的版本是1.8.16， 这里就使用这个版本。然后双击安装文件进行安装。我们指定安装在D:\Program Files (x86)\Subversion目录里。</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/svn-windows-install02a.gif" srcset="/blog/img/loading.gif" alt="img"></p><p>3、查看目录结构</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/windows-install03.png" srcset="/blog/img/loading.gif" alt="img"></p><p>把svn安装目录里的bin目录添加到path路径中，在命令行窗口中输入 svnserve –help ,查看安装正常与否。</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/08/windows-install02.png" srcset="/blog/img/loading.gif" alt="img"></p><p>至此，windows下的SVN安装完成</p><hr><h2 id="在CentOS下安装-SVN"><a href="#在CentOS下安装-SVN" class="headerlink" title="在CentOS下安装 SVN"></a>在CentOS下安装 SVN</h2><p>大多数 GNU/Linux 发行版系统自带了Subversion ，所以它很有可能已经安装在你的系统上了。可以使用下面命令检查是否安装了。</p><div class="hljs"><pre><code class="hljs ada">svn <span class="hljs-comment">--version</span></code></pre></div><p>如果 Subversion 客户端没有安装，命令将报告svn命令找不到的错误。</p><div class="hljs"><pre><code class="hljs groovy">[runoob<span class="hljs-meta">@centos</span>6 ~]$ svn --version<span class="hljs-string">bash:</span> <span class="hljs-string">svn:</span> command not found</code></pre></div><p>我们可以使用 yum install subversion 命令进行安装。</p><div class="hljs"><pre><code class="hljs routeros">[runoob@centos6 root]$ su -密码：[root@centos6 ~]# yum install subversion已加载插件：fastestmirror, security设置安装进程Loading<span class="hljs-built_in"> mirror </span>speeds <span class="hljs-keyword">from</span> cached hostfile * base: mirrors.aliyun.com * epel: mirrors.neusoft.edu.cn * extras: mirrors.zju.edu.cn * updates: mirrors.aliyun.com解决依赖关系--&amp;gt; 执行事务检查<span class="hljs-built_in">..</span>.</code></pre></div><p>安装成功之后，执行 svn –version 命令。</p><div class="hljs"><pre><code class="hljs angelscript">[<span class="hljs-symbol">root@</span>centos6 ~]# svn --versionsvn，版本 <span class="hljs-number">1.6</span><span class="hljs-number">.11</span> (r934486)   编译于 Aug <span class="hljs-number">17</span> <span class="hljs-number">2015</span>，<span class="hljs-number">08</span>:<span class="hljs-number">37</span>:<span class="hljs-number">43</span></code></pre></div><p>至此，centos下的SVN安装完成。</p><hr><h2 id="在Ubuntu下安装-SVN"><a href="#在Ubuntu下安装-SVN" class="headerlink" title="在Ubuntu下安装 SVN"></a>在Ubuntu下安装 SVN</h2><p>如果 Subversion 客户端没有安装，命令将报告svn命令找不到的错误。</p><div class="hljs"><pre><code class="hljs livescript">root@runoob:~<span class="hljs-comment"># svn --version</span>The program <span class="hljs-string">'svn'</span> <span class="hljs-keyword">is</span> currently <span class="hljs-keyword">not</span> installed. You can install <span class="hljs-literal">it</span> <span class="hljs-keyword">by</span> typing:apt-get install subversion</code></pre></div><p>我们可以使用 apt-get 命令进行安装</p><div class="hljs"><pre><code class="hljs vim">root@runoo<span class="hljs-variable">b:</span>~# apt-<span class="hljs-built_in">get</span> install subversionReading package lists... DoneBuilding dependency tree       Reading state information... DoneThe following packages were automatically installed <span class="hljs-built_in">and</span> are <span class="hljs-keyword">no</span> longer required:  augeas-lenses hiera libaugeas0 libxslt1.<span class="hljs-number">1</span> <span class="hljs-keyword">ruby</span>-augeas <span class="hljs-keyword">ruby</span>-deep-merge <span class="hljs-keyword">ruby</span>-json <span class="hljs-keyword">ruby</span>-nokogiri <span class="hljs-keyword">ruby</span>-rgen <span class="hljs-keyword">ruby</span>-safe-yaml <span class="hljs-keyword">ruby</span>-selinux <span class="hljs-keyword">ruby</span>-shadowUse <span class="hljs-string">'apt-get autoremove'</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">remove</span> them.The following extra packages will <span class="hljs-keyword">be</span> installed:  libserf-<span class="hljs-number">1</span>-<span class="hljs-number">1</span> libsvn1...</code></pre></div><p>安装成功之后，执行 svn –version 命令。</p><div class="hljs"><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>runoob:~# svn --versionsvn, version <span class="hljs-number">1.8</span><span class="hljs-number">.13</span> (r1667537)   compiled Sep  <span class="hljs-number">8</span> <span class="hljs-number">2015</span>, <span class="hljs-number">14</span>:<span class="hljs-number">59</span>:<span class="hljs-number">01</span> on x86_64-pc-linux-gnu</code></pre></div><p>至此，Ubuntu下的SVN安装完成。</p><hr><p>来源：菜鸟教程（<a href="https://www.runoob.com/svn/svn-install.html）" target="_blank" rel="noopener">https://www.runoob.com/svn/svn-install.html）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;在windows下安装-SVN&quot;&gt;&lt;a href=&quot;#在windows下安装-SVN&quot; class=&quot;headerlink&quot; title=&quot;在windows下安装 SVN&quot;&gt;&lt;/a&gt;在windows下安装 SVN&lt;/h2&gt;&lt;p&gt;1、准备svn的安装文件&lt;
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="SVN" scheme="https://melodyjerry.github.io/blog/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>SVN 简介</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/SVN-%E7%AE%80%E4%BB%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/SVN-%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-21T17:00:00.000Z</published>
    <updated>2020-09-18T04:43:02.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVN-简介"><a href="#SVN-简介" class="headerlink" title="SVN 简介"></a>SVN 简介</h1><hr><p>Subversion(SVN) 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。</p><a id="more"></a><hr><h3 id="SVN-的一些概念"><a href="#SVN-的一些概念" class="headerlink" title="SVN 的一些概念"></a>SVN 的一些概念</h3><ul><li><strong>repository（源代码库）:</strong>源代码统一存放的地方</li><li><strong>Checkout（提取）:</strong>当你手上没有源代码的时候，你需要从repository checkout一份</li><li><strong>Commit（提交）:</strong>当你已经修改了代码，你就需要Commit到repository</li><li><strong>Update (更新):</strong>当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步，你手上的代码就会有最新的变更</li></ul><p>日常开发过程其实就是这样的（假设你已经Checkout并且已经工作了几天）：Update(获得最新的代码) –&gt;作出自己的修改并调试成功 –&gt; Commit(大家就可以看到你的修改了) 。</p><p>如果两个程序员同时修改了同一个文件呢, SVN 可以合并这两个程序员的改动，实际上SVN管理源代码是以行为单位的，就是说两个程序员只要不是修改了同一行程序，SVN都会自动合并两种修改。如果是同一行，SVN 会提示文件 Conflict, 冲突，需要手动确认。</p><h3 id="SVN-的主要功能"><a href="#SVN-的主要功能" class="headerlink" title="SVN 的主要功能"></a>SVN 的主要功能</h3><ul><li><p>（1）目录版本控制</p><p>  CVS 只能跟踪单个文件的历史, 不过 Subversion 实作了一个 “虚拟” 的版本控管文件系统, 能够依时间跟踪整个目录的变动。 目录和文件都能进行版本控制。</p></li><li><p>（2）真实的版本历史</p><p>  自从CVS限制了文件的版本记录，CVS并不支持那些可能发生在文件上，但会影响所在目录内容的操作，如同复制和重命名。除此之外，在CVS里你不能用拥有同样名字但是没有继承老版本历史或者根本没有关系的文件替换一个已经纳入系统的文件。在Subversion中，你可以增加（add）、删除（delete）、复制（copy）和重命名（rename），无论是文件还是目录。所有的新加的文件都从一个新的、干净的版本开始。</p></li><li><p>（3）自动提交</p><p>  一个提交动作，不是全部更新到了档案库中，就是不完全更新。这允许开发人员以逻辑区间建立并提交变动，以防止当部分提交成功时出现的问题。</p></li><li><p>（4）纳入版本控管的元数据</p><p>  每一个文件与目录都附有一組属性关键字并和属性值相关联。你可以创建, 并儲存任何你想要的Key/Value对。 属性是随着时间来作版本控管的,就像文件內容一样。</p></li><li><p>（5）选择不同的网络层</p><p>  Subversion 有抽象的档案库存取概念, 可以让人很容易地实作新的网络机制。 Subversion 可以作为一个扩展模块嵌入到Apache HTTP 服务器中。这个为Subversion提供了非常先进的稳定性和协同工作能力，除此之外还提供了许多重要功能: 举例来说, 有身份认证, 授权, 在线压缩, 以及文件库浏览等等。还有一个轻量级的独立Subversion服务器， 使用的是自定义的通信协议, 可以很容易地通过 ssh 以 tunnel 方式使用。</p></li><li><p>（6）一致的数据处理方式</p><p>  Subversion 使用二进制差异算法来异表示文件的差异, 它对文字(人类可理解的)与二进制文件(人类无法理解的) 两类的文件都一视同仁。 这两类的文件都同样地以压缩形式储存在档案库中, 而且文件差异是以两个方向在网络上传输的。</p></li><li><p>（7）有效的分支(branch)与标签(tag)</p><p>  在分支与标签上的消耗并不必一定要与项目大小成正比。 Subversion 建立分支与标签的方法, 就只是复制该项目, 使用的方法就类似于硬连接（hard-link）。 所以这些操作只会花费很小, 而且是固定的时间。</p></li><li><p>（8）Hackability</p><p>  Subversion没有任何的历史包袱; 它主要是一群共用的 C 程序库, 具有定义完善的API。这使得 Subversion 便于维护, 并且可被其它应用程序与程序语言使用。</p></li></ul><h3 id="优于CVS之处"><a href="#优于CVS之处" class="headerlink" title="优于CVS之处"></a>优于CVS之处</h3><p>1、原子提交。一次提交不管是单个还是多个文件，都是作为一个整体提交的。在这当中发生的意外例如传输中断，不会引起数据库的不完整和数据损坏。</p><p>2、重命名、复制、删除文件等动作都保存在版本历史记录当中。</p><p>3、对于二进制文件，使用了节省空间的保存方法。（简单的理解，就是只保存和上一版本不同之处）</p><p>4、目录也有版本历史。整个目录树可以被移动或者复制，操作很简单，而且能够保留全部版本记录。</p><p>5、分支的开销非常小。</p><p>6、优化过的数据库访问，使得一些操作不必访问数据库就可以做到。这样减少了很多不必要的和数据库主机之间的网络流量。</p><hr><p>来源：菜鸟教程（<a href="https://www.runoob.com/svn/svn-intro.html）" target="_blank" rel="noopener">https://www.runoob.com/svn/svn-intro.html）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SVN-简介&quot;&gt;&lt;a href=&quot;#SVN-简介&quot; class=&quot;headerlink&quot; title=&quot;SVN 简介&quot;&gt;&lt;/a&gt;SVN 简介&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Subversion(SVN) 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="工具" scheme="https://melodyjerry.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="SVN" scheme="https://melodyjerry.github.io/blog/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>两个简单的导航网页</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/22/%E4%B8%A4%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%BC%E8%88%AA%E7%BD%91%E9%A1%B5/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/22/%E4%B8%A4%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%BC%E8%88%AA%E7%BD%91%E9%A1%B5/</id>
    <published>2020-08-21T16:00:00.000Z</published>
    <updated>2020-09-18T04:43:03.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="极简、拟物风格"><a href="#极简、拟物风格" class="headerlink" title="极简、拟物风格"></a>极简、拟物风格</h1><p><img src="https://s1.ax1x.com/2020/08/21/dNjTxJ.png" srcset="/blog/img/loading.gif" alt=""></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>Gitee：<a href="https://gitee.com/melodyjerry/SimpleIndex" target="_blank" rel="noopener">https://gitee.com/melodyjerry/SimpleIndex</a></p><h1 id="简单的、聚合式"><a href="#简单的、聚合式" class="headerlink" title="简单的、聚合式"></a>简单的、聚合式</h1><p><img src="https://s1.ax1x.com/2020/08/22/dakdWn.png" srcset="/blog/img/loading.gif" alt=""></p><h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p>Gitee：<a href="https://gitee.com/melodyjerry/MyIndex" target="_blank" rel="noopener">https://gitee.com/melodyjerry/MyIndex</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;极简、拟物风格&quot;&gt;&lt;a href=&quot;#极简、拟物风格&quot; class=&quot;headerlink&quot; title=&quot;极简、拟物风格&quot;&gt;&lt;/a&gt;极简、拟物风格&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/21/dNjTxJ.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;Gitee：&lt;a href=&quot;https://gitee.com/melodyjerry/SimpleIndex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/melodyjerry/SimpleIndex&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;简单的、聚合式&quot;&gt;&lt;a href=&quot;#简单的、聚合式&quot; class=&quot;headerlink&quot; title=&quot;简单的、聚合式&quot;&gt;&lt;/a&gt;简单的、聚合式&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/08/22/dakdWn.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码-1&quot;&gt;&lt;a href=&quot;#源码-1&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;Gitee：&lt;a href=&quot;https://gitee.com/melodyjerry/MyIndex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gitee.com/melodyjerry/MyIndex&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="CSS" scheme="https://melodyjerry.github.io/blog/tags/CSS/"/>
    
      <category term="HTML" scheme="https://melodyjerry.github.io/blog/tags/HTML/"/>
    
      <category term="JavaScript" scheme="https://melodyjerry.github.io/blog/tags/JavaScript/"/>
    
      <category term="JQuery" scheme="https://melodyjerry.github.io/blog/tags/JQuery/"/>
    
  </entry>
  
</feed>
