<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://melodyjerry.github.io/blog/"/>
  <updated>2020-09-22T14:35:08.707Z</updated>
  <id>https://melodyjerry.github.io/blog/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux下更新Node到最新版本</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/Linux%E4%B8%8B%E6%9B%B4%E6%96%B0Node%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/Linux%E4%B8%8B%E6%9B%B4%E6%96%B0Node%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/</id>
    <published>2020-09-22T14:21:21.000Z</published>
    <updated>2020-09-22T14:35:08.707Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-查看当前node的版本号"><a href="#1-查看当前node的版本号" class="headerlink" title="1. 查看当前node的版本号"></a>1. 查看当前node的版本号</h5><div class="hljs"><pre><code class="hljs bash">node --version</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/22/wXeQwF.png" srcset="/blog/img/loading.gif" alt="wXeQwF.png"></p><h5 id="2-清理npm的cache"><a href="#2-清理npm的cache" class="headerlink" title="2. 清理npm的cache"></a>2. 清理npm的cache</h5><div class="hljs"><pre><code class="hljs bash">npm cache clean -f</code></pre></div><h5 id="3-版本管理工具-名称：-n"><a href="#3-版本管理工具-名称：-n" class="headerlink" title="3. 版本管理工具 名称： n"></a>3. 版本管理工具 名称： n</h5><div class="hljs"><pre><code class="hljs undefined">npm install -g n</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/22/wXe8Y9.png" srcset="/blog/img/loading.gif" alt="wXe8Y9.png"></p><h5 id="4-更新到最新版"><a href="#4-更新到最新版" class="headerlink" title="4. 更新到最新版"></a>4. 更新到最新版</h5><div class="hljs"><pre><code class="hljs undefined">n latest</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/22/wXeqXV.png" srcset="/blog/img/loading.gif" alt="wXeqXV.png"></p><ul><li><code>n</code> 常用的命令有：<br>  <code>n</code> 会列出所有安装的版本供你切换<br>  <code>n latest</code> 安装最新版本<br>  <code>n stable</code> 安装最新稳定版<br>  <code>n lts</code> 安装最新长期支持版本<br>  <code>n rm [版本号]</code> 删除某一版本<br>  <code>n -h</code> 帮助命令<br>  <code>n [版本号]</code> 安装指定版本node</li></ul><h5 id="5-验证是否成功"><a href="#5-验证是否成功" class="headerlink" title="5. 验证是否成功"></a>5. 验证是否成功</h5><div class="hljs"><pre><code class="hljs undefined">node -v</code></pre></div><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-查看当前node的版本号&quot;&gt;&lt;a href=&quot;#1-查看当前node的版本号&quot; class=&quot;headerlink&quot; title=&quot;1. 查看当前node的版本号&quot;&gt;&lt;/a&gt;1. 查看当前node的版本号&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;node --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/22/wXeQwF.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wXeQwF.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-清理npm的cache&quot;&gt;&lt;a href=&quot;#2-清理npm的cache&quot; class=&quot;headerlink&quot; title=&quot;2. 清理npm的cache&quot;&gt;&lt;/a&gt;2. 清理npm的cache&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;npm cache clean -f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-版本管理工具-名称：-n&quot;&gt;&lt;a href=&quot;#3-版本管理工具-名称：-n&quot; class=&quot;headerlink&quot; title=&quot;3. 版本管理工具 名称： n&quot;&gt;&lt;/a&gt;3. 版本管理工具 名称： n&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs undefined&quot;&gt;npm install -g n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/22/wXe8Y9.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wXe8Y9.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;4-更新到最新版&quot;&gt;&lt;a href=&quot;#4-更新到最新版&quot; class=&quot;headerlink&quot; title=&quot;4. 更新到最新版&quot;&gt;&lt;/a&gt;4. 更新到最新版&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs undefined&quot;&gt;n latest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/22/wXeqXV.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wXeqXV.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 常用的命令有：&lt;br&gt;  &lt;code&gt;n&lt;/code&gt; 会列出所有安装的版本供你切换&lt;br&gt;  &lt;code&gt;n latest&lt;/code&gt; 安装最新版本&lt;br&gt;  &lt;code&gt;n stable&lt;/code&gt; 安装最新稳定版&lt;br&gt;  &lt;code&gt;n lts&lt;/code&gt; 安装最新长期支持版本&lt;br&gt;  &lt;code&gt;n rm [版本号]&lt;/code&gt; 删除某一版本&lt;br&gt;  &lt;code&gt;n -h&lt;/code&gt; 帮助命令&lt;br&gt;  &lt;code&gt;n [版本号]&lt;/code&gt; 安装指定版本node&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;5-验证是否成功&quot;&gt;&lt;a href=&quot;#5-验证是否成功&quot; class=&quot;headerlink&quot; title=&quot;5. 验证是否成功&quot;&gt;&lt;/a&gt;5. 验证是否成功&lt;/h5&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs undefined&quot;&gt;node -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下mongodb安装</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/Ubuntu%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/Ubuntu%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85/</id>
    <published>2020-09-22T13:21:21.000Z</published>
    <updated>2020-09-22T11:42:51.109Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载mongodb源码，并解压：</p> <div class="hljs"><pre><code class="hljs bash">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.0.11.tgztar -zxvf mongodb-linux-x86_64-ubuntu1604-4.0.11.tgz</code></pre></div></li><li><p>创建mongo专属目录，拷贝bin下文件到mongodb目录下bin中：</p> <div class="hljs"><pre><code class="hljs bash">mkdir /usr/<span class="hljs-built_in">local</span>/mongodb<span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/mongodbmkdir bincp .../mongodb-linux-x86_64-ubuntu1604-4.0.11/bin/* ./bin/</code></pre></div></li><li><p>创建数据库文件目录、日志目录、配置文件：</p> <div class="hljs"><pre><code class="hljs bash">mkdir datatouch mongodb.logtouch mongodb.conf</code></pre></div></li><li><p>配置文件内容：</p> <div class="hljs"><pre><code class="hljs bash">dbpath=/usr/<span class="hljs-built_in">local</span>/mongodb/datalogpath=/usr/<span class="hljs-built_in">local</span>/mongodb/mongodb.loglogappend=<span class="hljs-literal">true</span>journal=<span class="hljs-literal">true</span>fork=<span class="hljs-literal">true</span>bind_ip = 127.0.0.1port = 27017noauth = <span class="hljs-literal">true</span><span class="hljs-comment">#auth = true</span></code></pre></div></li><li><p>将mongo添加path：</p> <div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">#打开profile</span>vi /etc/profile<span class="hljs-comment">#输入下面内容：</span>MONGO_DB=<span class="hljs-string">"/usr/local/mongodb"</span>PATH=<span class="hljs-variable">$MONGO_DB</span>/bin:<span class="hljs-variable">$PATH</span>:<span class="hljs-built_in">export</span> PATH<span class="hljs-comment">#加载配置</span><span class="hljs-built_in">source</span> /etc/profile</code></pre></div></li><li><p>启动mongodb：</p> <div class="hljs"><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/mongodb/bin/mongod --config /usr/<span class="hljs-built_in">local</span>/mongodb/mongodb.conf</code></pre></div> <div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment">#启动后会看到：</span>about to fork child process, waiting until server is ready <span class="hljs-keyword">for</span> connections.forked process: 1361child process started successfully, parent exiting</code></pre></div>  <a id="more"></a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载mongodb源码，并解压：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.0.11.tgz

tar -zxvf mongodb-linux-x86_64-ubuntu1604-4.0.11.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建mongo专属目录，拷贝bin下文件到mongodb目录下bin中：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mkdir /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb

&lt;span class=&quot;hljs-built_in&quot;&gt;cd&lt;/span&gt; /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb

mkdir bin

cp .../mongodb-linux-x86_64-ubuntu1604-4.0.11/bin/* ./bin/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建数据库文件目录、日志目录、配置文件：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mkdir data

touch mongodb.log

touch mongodb.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置文件内容：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;dbpath=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/data
logpath=/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/mongodb.log

logappend=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
journal=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
fork=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;

bind_ip = 127.0.0.1
port = 27017

noauth = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;#auth = true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将mongo添加path：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#打开profile&lt;/span&gt;
vi /etc/profile

&lt;span class=&quot;hljs-comment&quot;&gt;#输入下面内容：&lt;/span&gt;
MONGO_DB=&lt;span class=&quot;hljs-string&quot;&gt;&quot;/usr/local/mongodb&quot;&lt;/span&gt;
PATH=&lt;span class=&quot;hljs-variable&quot;&gt;$MONGO_DB&lt;/span&gt;/bin:&lt;span class=&quot;hljs-variable&quot;&gt;$PATH&lt;/span&gt;:
&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PATH

&lt;span class=&quot;hljs-comment&quot;&gt;#加载配置&lt;/span&gt;
&lt;span class=&quot;hljs-built_in&quot;&gt;source&lt;/span&gt; /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动mongodb：&lt;/p&gt;
 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;/usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/bin/mongod --config /usr/&lt;span class=&quot;hljs-built_in&quot;&gt;local&lt;/span&gt;/mongodb/mongodb.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#启动后会看到：&lt;/span&gt;

about to fork child process, waiting until server is ready &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; connections.
forked process: 1361
child process started successfully, parent exiting&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[转]Yapi环境搭建(史上最详细步骤)</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/22/[%E8%BD%AC]Yapi%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4)/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/22/[%E8%BD%AC]Yapi%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4)/</id>
    <published>2020-09-22T09:21:21.000Z</published>
    <updated>2020-09-22T15:44:21.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p><strong>操作系统：</strong>centos 7</p></li><li><p>环境要求：</p><ul><li><p>nodejs 7.6+</p></li><li><p>mongodb 2.6+</p></li><li><p>git</p><a id="more"></a></li></ul></li></ul><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li>获取资源（部署nodejs尽可能选择偶数版本，因为偶数版本官方有较长的维护时间，故这次选择8.x。）<br> <code>curl -sL https://rpm.nodesource.com/setup_8.x | bash -</code></li><li>安装<br> <code>yum install -y nodejs</code></li><li>查看版本<br> <code>node -v</code></li><li>查看npm版本<br> <code>npm -v</code></li></ol><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><ol><li>更新yum源，非必须但是更新一下无害<br> <code>yum -y update</code></li><li>添加mongodb源文件，在/etc/yum.repos.d 创建一个 mongodb-org.repo 文件<br> <code>touch /etc/yum.repos.d/mongodb-org.repo</code></li><li>编辑mongodb-org.repo文件<br> <code>vim /etc/yum.repos.d/mongodb-org.repo</code></li><li>添加文件内容</li></ol><div class="hljs"><pre><code class="hljs ini"><span class="hljs-section">[mongodb-org]</span><span class="hljs-attr">name</span>=MongoDB Repository<span class="hljs-attr">baseurl</span>=http://mirrors.aliyun.com/mongodb/yum/redhat/<span class="hljs-number">7</span>Server/mongodb-org/<span class="hljs-number">3.2</span>/x<span class="hljs-number">86_64</span>/<span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">0</span><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span></code></pre></div><blockquote><p>这里可能退不出Vim，参考<a href="https://www.cnblogs.com/melodyjerry/p/13714705.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13714705.html</a></p></blockquote><ol><li>安装mongodb<br> <code>yum install -y mongodb-org</code></li><li>启动mongodb<br> <code>service mongod start</code></li><li>设置开机启动<br> <code>chkconfig mongod on</code></li><li>打开moMongoDB(可忽略)<br> <code>/bin/mongo</code></li><li>配置远程访问</li></ol><ul><li>修改mongod.conf配置文件<br>  <code>vim /etc/mongod.conf</code></li><li>注释 bindIp: 127.0.0.1<br>  <code>#bindIp: 127.0.0.1</code></li><li>重启mongod<br>  <code>service mongod restart</code></li></ul><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li>官方推荐，在内网部署的时候安装git，可以根据自己所需安装<br>  <code>yum -y install git</code></li></ul><h2 id="搭建YApi环境"><a href="#搭建YApi环境" class="headerlink" title="搭建YApi环境"></a>搭建YApi环境</h2><p><strong>搭建YApi</strong></p><ol><li>准备环境搭建完成后，开始搭建YApi,安装命令</li></ol><div class="hljs"><pre><code class="hljs bash">npm install -g yapi-cli --registry https://registry.npm.taobao.orgyapi server</code></pre></div><blockquote><div class="hljs"><pre><code class="hljs bash">$ yapi server/usr/lib/node_modules/yapi-cli/src/utils.js:68  getVersions: async <span class="hljs-function"><span class="hljs-title">function</span></span>(){                     ^^^^^^^^SyntaxError: Unexpected token <span class="hljs-keyword">function</span>    at createScript (vm.js:56:10)    at Object.runInThisContext (vm.js:97:10)    at Module._compile (module.js:549:28)    at Object.Module._extensions..js (module.js:586:10)    at Module.load (module.js:494:32)    at tryModuleLoad (module.js:453:12)    at Function.Module._load (module.js:445:3)    at Module.require (module.js:504:17)    at require (internal/module.js:20:19)    at Object.&lt;anonymous&gt; (/usr/lib/node_modules/yapi-cli/src/index.js:4:15)</code></pre></div><p>解决办法：将node升级到版本&gt;7.6</p><p><a href="https://www.cnblogs.com/melodyjerry/p/13715111.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13715111.html</a></p></blockquote><ul><li><p>实例截图：</p><p>  <img src="https://s1.ax1x.com/2020/09/22/wXMJrq.png" srcset="/blog/img/loading.gif" alt="wXMJrq.png"></p></li></ul><ol><li>执行 yapi server 启动可视化部署程序，浏览器打开提示窗口上的地址，非本地服务器，将0.0.0.0替换指定的域名或IP，进入部署页面。</li></ol><ul><li>实例截图</li></ul><ol><li>根据项目实际需要可以修改部署信息，点击【开始部署】，完成部署任务</li></ol><ul><li>部署成功截图</li></ul><p><strong>4.根据部署日志截图上的提示信息，启动服务</strong><br>启动服务：<code>node vendors/server/app.js</code><br>浏览器打开部署日志上的访问地址<a href="http://127.0.0.1:3000就可以访问搭建的YApi工具了（非本地服务器，将127.0.0.1替换指定的域名或IP），此时YApi本地环境搭建完成">http://127.0.0.1:3000就可以访问搭建的YApi工具了（非本地服务器，将127.0.0.1替换指定的域名或IP），此时YApi本地环境搭建完成</a></p><p>如果是阿里云ecs服务器，端口需要在安全组里开放，不然访问不了</p><p><strong>5.pm2方式管理进程</strong></p><p>要保证后台保持进程，需要安装pm2。<br>全局安装：<br>npm install -g pm2</p><p>启动：<br>cd vendors<br>pm2 start server/app.js –watch</p><p>重启：</p><p>pm2 restart service/app.js</p><p>停止：</p><p>可以先通过<code>pm2 list</code>获取应用的名字（–name指定的）或者进程id。</p><div class="hljs"><pre><code class="hljs 1c">pm2 stop app_name<span class="hljs-string">|app_id</span></code></pre></div><p>pm2使用参考文档：<br><a href="http://imweb.io/topic/57c8cbb27f226f687b365636" target="_blank" rel="noopener">http://imweb.io/topic/57c8cbb27f226f687b365636</a></p><p><strong>6.升级</strong></p><p>升级项目版本是非常容易的，并且不会影响已有的项目数据，只会同步 vendors 目录下的源码文件。</p><div class="hljs"><pre><code class="hljs stata"><span class="hljs-keyword">cd</span> {项目目录}yapi <span class="hljs-keyword">ls</span> <span class="hljs-comment">//查看版本号列表</span>yapi <span class="hljs-keyword">update</span> <span class="hljs-comment">//更新到最新版本</span>yapi <span class="hljs-keyword">update</span> -v {<span class="hljs-keyword">Version</span>} <span class="hljs-comment">//更新到指定版本</span></code></pre></div><p><strong>9.nginx代理</strong></p><p>如果您是将服务器代理到 nginx 服务器，请配置 nginx 支持 websocket。</p><div class="hljs"><pre><code class="hljs routeros">在location /添加proxy_http_version 1.1;proxy_set_header<span class="hljs-built_in"> Upgrade </span><span class="hljs-variable">$http_upgrade</span>;proxy_set_header<span class="hljs-built_in"> Connection </span><span class="hljs-string">"upgrade"</span>;</code></pre></div><p><strong>10.禁止注册</strong></p><p>在 config.json 添加 <code>closeRegister:true</code> 配置项,就可以禁止用户注册 yapi 平台，修改完成后，请重启 yapi 服务器。</p><div class="hljs"><pre><code class="hljs json">{<span class="hljs-attr">"port"</span>: <span class="hljs-string">"*****"</span>,<span class="hljs-attr">"closeRegister"</span>:<span class="hljs-literal">true</span>}</code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;操作系统：&lt;/strong&gt;centos 7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;环境要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nodejs 7.6+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mongodb 2.6+&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
      <category term="API" scheme="https://melodyjerry.github.io/blog/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Vim-类似于Vi的文本编辑器</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/21/Vim-%E7%B1%BB%E4%BC%BC%E4%BA%8EVi%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/21/Vim-%E7%B1%BB%E4%BC%BC%E4%BA%8EVi%E7%9A%84%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-09-21T13:54:00.000Z</published>
    <updated>2020-09-21T14:07:33.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。</p><h1 id="键盘图"><a href="#键盘图" class="headerlink" title="键盘图"></a>键盘图</h1><blockquote><p>来源见水印</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/21/wq1Y6I.png" srcset="/blog/img/loading.gif" alt="wq1Y6I.png"></p><a id="more"></a><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><ul><li>根据设定可以和原始vi完全兼容</li><li>多缓冲编辑</li><li>任意个数的分割窗口（横，竖）</li><li>具备列表和字典功能的脚本语言</li><li>可以在脚本中调用 Perl, Ruby, Python, Tcl, MzScheme</li><li>单词缩写功能</li><li>动态单词补完</li><li>多次撤销和重做</li><li>对应400种以上文本文件的语法高亮</li><li>C/C++, Perl, Java, Ruby, Python 等40种以上语言的自动缩排</li><li>利用ctags的标签中跳转</li><li>崩溃后文件恢复</li><li>光标位置和打开的缓冲状态的保存 复原（session功能）</li><li>可以对两个文件进行差分，同步功能的diff模式</li><li>远程文件编辑</li><li>Omni补完（上下文相关的补完）</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。和Emacs并列成为类Unix系统用户最喜欢的编辑器。&lt;/p&gt;
&lt;h1 id=&quot;键盘图&quot;&gt;&lt;a href=&quot;#键盘图&quot; class=&quot;headerlink&quot; title=&quot;键盘图&quot;&gt;&lt;/a&gt;键盘图&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;来源见水印&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/09/21/wq1Y6I.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wq1Y6I.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下删除普通用户步骤</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/21/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%AD%A5%E9%AA%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/21/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-09-21T13:47:00.000Z</published>
    <updated>2020-09-21T13:48:12.869Z</updated>
    
    <content type="html"><![CDATA[<ol><li>先用命令  <code>cat /etc/passwd</code> 查看一下所有的用户 可以看到片你需要删除的用户名</li><li>用命令  <code>who</code>  查询当前登录的用户</li><li>用命令  <code>ps -u 用户名</code>   查看该用户的pid </li><li>用命令 <code>kill pid</code>  杀掉他的sshd或者是shell进程</li><li>再用命令  <code>userdel -r 用户名</code>  删除用户</li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;先用命令  &lt;code&gt;cat /etc/passwd&lt;/code&gt; 查看一下所有的用户 可以看到片你需要删除的用户名&lt;/li&gt;
&lt;li&gt;用命令  &lt;code&gt;who&lt;/code&gt;  查询当前登录的用户&lt;/li&gt;
&lt;li&gt;用命令  &lt;code&gt;ps -u 用户名&lt;/code&gt;   查看该用户的pid &lt;/li&gt;
&lt;li&gt;用命令 &lt;code&gt;kill pid&lt;/code&gt;  杀掉他的sshd或者是shell进程&lt;/li&gt;
&lt;li&gt;再用命令  &lt;code&gt;userdel -r 用户名&lt;/code&gt;  删除用户&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Xshell-配色方案</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/21/Xshell-%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/21/Xshell-%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/</id>
    <published>2020-09-21T13:21:21.000Z</published>
    <updated>2020-09-22T14:00:07.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置命令行提示符"><a href="#设置命令行提示符" class="headerlink" title="设置命令行提示符"></a>设置命令行提示符</h1><p>在命令行提示符显示用户名，当前机器IP，当前时间，当前路径等信息。但有时候如果我们的目录很长，敲击命令很不方便，可以通过修改 PS1 环境变量，让命令提示符在第二行显示：</p><p>如下示例，后面的 \n 就是起到了提示符 $ 在第二行显示效果。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">"\[\033[01;31m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\][\[\033[01;33m\]\t\[\033[00m\]]:\[\033[01;34m\]\w\[\033[00m\]\n$ "</span></code></pre></div><p>效果如下：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/F3DD95CE99324FCEA6BA15337467F42A/34380" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>注：</strong></p><p>  <strong>设置为什么颜色，可以自己根据显示效果调，很灵活。</strong></p><a id="more"></a><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>如果要写入shell配置文件，建议写到<code>~/.bash_profile</code>，而不要写入<code>~/.bashrc</code>，否则借助ssh类的工具都将因为trap DEBUG信号的特殊性而无限等待，比如scp/rsync等。</p><p>或者，直接判断是否是交互式登录，是的话就设置，否则不设置：</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">${-#*i}</span>"</span> != <span class="hljs-string">"$-"</span> ];<span class="hljs-keyword">then</span>    <span class="hljs-comment"># interactively shell</span>    PS1=<span class="hljs-string">"\[\033[01;31m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\][\[\033[01;33m\]\t\[\033[00m\]]:\[\033[01;34m\]\w\[\033[00m\]\n$ "</span>    <span class="hljs-built_in">trap</span> <span class="hljs-string">'echo -ne "\e[0m"'</span> DEBUG<span class="hljs-keyword">fi</span></code></pre></div><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 写入</span>vim ~/.bash_profile<span class="hljs-comment"># 立即生效</span><span class="hljs-built_in">source</span> ~/.bash_profile</code></pre></div><h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><blockquote><p>在终端上的显示的命令提示符：<code>[root@root ~]#</code></p><p>配置文件中的设置：<code>PS1="[\u@\h \W]\$"</code></p></blockquote><ul><li>设置提示符格式：<code>PS1</code></li></ul><p><code>PS1</code>的定义中个常用的参数的含义如下：</p><p><code>\d</code> ：#代表日期，格式为weekday month date，例如：”Mon Aug 1”</p><p><code>\H</code> ：#完整的主机名称</p><p><code>\h</code> ：#仅取主机的第一个名字</p><p><code>\T</code> ：#显示时间为24小时格式，如：HH：MM：SS</p><p><code>\t</code> ：#显示时间为12小时格式 , 如：HH：MM：SS</p><p><code>\A</code> ：#显示时间为12小时格式：HH：MM</p><p><code>\u</code> ：#当前用户的账号名称</p><p><code>\v</code> ：#BASH的版本信息</p><p><code>\w</code> ：#完整的工作目录名称</p><p><code>\W</code> ：#利用basename取得工作目录名称，所以只会列出最后一个目录</p><p>`#` ：#下达的第几个命令</p><p><code>$</code> ：#提示字符，如果是root时，提示符为：<code>#</code> ，普通用户则为：<code>$</code></p><h1 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h1><blockquote><p>在<code>PS1</code>中设置字符颜色的格式为：<code>[\e[F;Bm]</code>，其中<code>F</code>为字体颜色，编号为30-37，<code>B</code>为背景颜色，编号为40-47。</p></blockquote><p>颜色表如下：</p><p><code>[\e[F;Bm]</code>需要改变颜色的部分<code>[\e[0m]</code></p><p>开始颜色输入：<code>[\e[F;Bm]</code></p><p>结束颜色输入：<code>[\e[0m]</code></p><ul><li>F B 值分别对应的颜色<div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">30 </span><span class="hljs-number">40</span> 黑色<span class="hljs-symbol">31 </span><span class="hljs-number">41</span> 红色<span class="hljs-symbol">32 </span><span class="hljs-number">42</span> 绿色<span class="hljs-symbol">33 </span><span class="hljs-number">43</span> 黄色<span class="hljs-symbol">34 </span><span class="hljs-number">44</span> 蓝色<span class="hljs-symbol">35 </span><span class="hljs-number">45</span> 紫红色<span class="hljs-symbol">36 </span><span class="hljs-number">46</span> 青蓝色<span class="hljs-symbol">37 </span><span class="hljs-number">47</span> 白色</code></pre></div></li></ul><ul><li>设置特殊显示<div class="hljs"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-keyword">OFF</span>，关闭颜色<span class="hljs-symbol">1 </span>高亮显示<span class="hljs-symbol">4 </span>显示下划线<span class="hljs-symbol">5 </span>闪烁显示<span class="hljs-symbol">7 </span>反白显示<span class="hljs-symbol">8 </span>颜色不可见</code></pre></div>特殊显示可在结束颜色输入里面设置：<code>[\e[ 特殊颜色编号 m]</code></li></ul><h1 id="其他配色配置"><a href="#其他配色配置" class="headerlink" title="其他配色配置"></a>其他配色配置</h1><p>点击 Xshell 面板顶部的如下按钮。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/BD96E8E97F1041839D778415D8CABE9A/34339" srcset="/blog/img/loading.gif" alt="0"></p><p>点击 Browse 按钮，弹出如下面板，选择 ANSI Colors on Black，然后点击右侧save as 按钮，命名为 zkl。</p><p>这里其实就是复制一份 ANSI Colors on Black 的颜色方案，或者我们也可以 New 一个方案。</p><p>ANSI 颜色已经很好看，这里我们是沿用 ANSI 颜色，并加以修改，以得到自己想要的颜色方案。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/D1F435F681D641209349778E780A86D7/34342" srcset="/blog/img/loading.gif" alt="0"></p><p>然后，点击右侧的 edit 按钮，编辑前景色和背景色。</p><p><strong>1. 设置背景色</strong></p><p>点击 Backgroud 右侧的下拉列表， 在弹出的界面选择 other, 弹出一个界面，点击自定义颜色，然后会弹出如下界面：</p><p>按照如下 rgb 值填写颜色，（0，43, 53）</p><p>然后点击 Add to Custom Colors 按钮，添加自定义颜色到左侧面板中的 custom colors下，选择它。确定。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/39C2F44930674C0BA5109DAA2DC8C7EB/34330" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>2. 设置字体颜色（前景色）</strong></p><p>点击 Normal Text，进行设置。</p><p>rgb颜色：（131,148,150）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/590A9972CA694D2F8E9F0B8E99DD6FEB/34325" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>3. 设置目录颜色</strong></p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/32C463E5DEEA4F2E8A0BE945E80D02B5/34355" srcset="/blog/img/loading.gif" alt="0"></p><p>颜色 rgb 值如下：（128，128, 255）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/ABF6FAEC55324EB9831A00B1FC5B9201/34372" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>4. 设置压缩文件颜色</strong></p><p>ANSI 颜色中，压缩文件颜色默认是红色，不干扰视线，如果感觉不好，可以调整为如下颜色：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/346D3113708F402FA7010678897293A9/34366" srcset="/blog/img/loading.gif" alt="0"></p><p>颜色 rgb 值如下：（128，128, 0）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/12A178F7B6E64CB89158765374F356B0/34370" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>5. 设置VIM中注释的颜色</strong> </p><p>经过以上设置后，xshell的背景颜色，字体颜色，linux的目录，压缩文件颜色都比较好看了，效果如下。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/EE9F095AB52649F1AD384A170879FD59/34399" srcset="/blog/img/loading.gif" alt="0"></p><p>但是我们打开 vim，编辑一个 c++, python 代码文件时会发现注释的颜色很不好看。需要再进行设置。</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/8CF1086E999A478682FE26CBBD6F66A4/34389" srcset="/blog/img/loading.gif" alt="0"></p><p>设置如下颜色即可：</p><p>rgb颜色：（255,128,64）</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/D75AA5C048F846E2BC0DCFB897051CAE/34405" srcset="/blog/img/loading.gif" alt="0"></p><p>修改后的代码文件显示效果如下：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/F851D90807A74A27BDDD1905B947627E/34391" srcset="/blog/img/loading.gif" alt="0"></p><p><strong>6. 导出颜色方案</strong></p><p>xshell 非常强大，各种功能。我们设置的颜色方案也可以导出保存，当我们在其他机器上使用时，可以导入颜色方案。</p><p>下面界面中的 import 和 export 即可完成导入和导出颜色方案，下面这个文件是上述配置对应的颜色方案文件：</p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/83051EC210554E98A38A8767481ADBA8/34432" srcset="/blog/img/loading.gif" alt="zkl.xcs"></p><p>​    <img src="http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/0E901C3307584455B61DF5E18A68D001/34427" srcset="/blog/img/loading.gif" alt="0"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设置命令行提示符&quot;&gt;&lt;a href=&quot;#设置命令行提示符&quot; class=&quot;headerlink&quot; title=&quot;设置命令行提示符&quot;&gt;&lt;/a&gt;设置命令行提示符&lt;/h1&gt;&lt;p&gt;在命令行提示符显示用户名，当前机器IP，当前时间，当前路径等信息。但有时候如果我们的目录很长，敲击命令很不方便，可以通过修改 PS1 环境变量，让命令提示符在第二行显示：&lt;/p&gt;
&lt;p&gt;如下示例，后面的 \n 就是起到了提示符 $ 在第二行显示效果。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;export&lt;/span&gt; PS1=&lt;span class=&quot;hljs-string&quot;&gt;&quot;\[\033[01;31m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\][\[\033[01;33m\]\t\[\033[00m\]]:\[\033[01;34m\]\w\[\033[00m\]\n$ &quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;​    &lt;img src=&quot;http://note.youdao.com/yws/public/resource/202a88734065732c89c84f9e9197ab9c/xmlnote/F3DD95CE99324FCEA6BA15337467F42A/34380&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;0&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;设置为什么颜色，可以自己根据显示效果调，很灵活。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linxu" scheme="https://melodyjerry.github.io/blog/tags/Linxu/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub建站</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/19/Hexo+GitHub/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/19/Hexo+GitHub/</id>
    <published>2020-09-19T11:24:01.000Z</published>
    <updated>2020-09-19T14:41:21.776Z</updated>
    
    <content type="html"><![CDATA[<p>前言： 使用<a href="https://blog.csdn.net/weixin_43438052" target="_blank" rel="noopener">CSDN</a>或<strong>简书</strong>撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。</p><p>最终，个人选择了<strong>Hexo+GitHub（Pages）</strong>的方式。</p><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 是开源协作社区 GitHub 的一个服务，将博客部署到它上面再合适不过了。</p></blockquote><table><thead><tr><th>Q</th><th>W</th></tr></thead><tbody><tr><td>为什么要部署到 GitHub Pages 上？</td><td>首先免费，其次省心，最后可以学习使用 GitHub。</td></tr><tr><td>GitHub Pages 有容量限制吗？</td><td>有，由 <a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="noopener">What is GitHub Pages?</a> 可知：大小限制为 1GB，一个月 100GB 流量。</td></tr><tr><td>超出限制的容量怎么办？</td><td>讲真，如果图片音乐视频等大文件都放在<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云 KODO</a>、<a href="https://www.aliyun.com/product/oss" target="_blank" rel="noopener">阿里云 OSS</a> 或其它云存储上。<br>图片我更多是存放在图床上，比如<a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a>或<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>。</td></tr><tr><td>国内访问速度行不行，有必要同时部署在 <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 上吗？</td><td>个人感觉可有可无吧，自己不用梯子时，感觉访问速度可以，毕竟站点的大文件都是放在了云存储上，图片都是国内图床，加载较快。</td></tr><tr><td>我可以用自己的域名吗？</td><td>可以，并且原生支持 https。</td></tr></tbody></table><a id="more"></a> <hr><h1 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h1><hr><h2 id="一、安装-Hexo前的准备"><a href="#一、安装-Hexo前的准备" class="headerlink" title="一、安装 Hexo前的准备"></a>一、安装 Hexo前的准备</h2><h3 id="1、安装Hexo前的必要工作"><a href="#1、安装Hexo前的必要工作" class="headerlink" title="1、安装Hexo前的必要工作"></a>1、安装Hexo前的必要工作</h3><p>安装以下两个程序：</p><p>程序 | 下载地址 | 说明|<br>–|–|–|–<br>Git|<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git - Downloads</a>| 网速的同学，可以自行百度移步到国内镜像 |<br>Node.js|<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js - Downloads</a>| 有LTS和Current两个版本，安装 LTS 版即可。 |由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 <strong>“npm -v”</strong> 来测试是否成功安装。</p><p>注意：关于Git和Node.js的安装可能会有问题，尤其是Git的安装。这里贴上几张安装界面的截图。</p><p><img src="https://s1.ax1x.com/2020/09/19/wI2wcT.png" srcset="/blog/img/loading.gif" alt="wI2wcT.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/wI2R9x.png" srcset="/blog/img/loading.gif" alt="wI2R9x.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/wI2oHH.png" srcset="/blog/img/loading.gif" alt="wI2oHH.png"></p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！<br><img src="https://i.loli.net/2019/11/07/pFcNrU8QYBVROGw.png" srcset="/blog/img/loading.gif" alt="image.png"></p><h3 id="2、新建GitHub仓库"><a href="#2、新建GitHub仓库" class="headerlink" title="2、新建GitHub仓库"></a>2、新建GitHub仓库</h3><ol><li>按照下图来新建一个Repo：</li></ol><ul><li>最好勾选``Initialize this repository with a README`，图中忘记勾选了。</li></ul><p><img src="https://s1.ax1x.com/2020/09/19/wIov7T.png" srcset="/blog/img/loading.gif" alt="wIov7T.png"></p><ol start="2"><li>访问GitHub Pages</li></ol><p>在建好的仓库右侧有个<code>settings</code>按钮，点击它</p><p><img src="https://s1.ax1x.com/2020/09/19/wITtUS.png" srcset="/blog/img/loading.gif" alt="wITtUS.png"></p><p>向下拉到<code>GitHub Pages</code>，提示的链接便是博客的首页了，可以点击浏览。（后期可以在这里绑定域名）</p><p><img src="https://s1.ax1x.com/2020/09/19/wIT5K1.png" srcset="/blog/img/loading.gif" alt="wIT5K1.png"></p><h2 id="二、正式安装Hexo"><a href="#二、正式安装Hexo" class="headerlink" title="二、正式安装Hexo"></a>二、正式安装Hexo</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。——官方</p></blockquote><p>准备工作完成后，来安装hexo框架吧！<br> <strong>主要根据hexo官方的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>来安装Hexo。</strong></p><ul><li><p>在本地电脑上新建一个文件夹，用来存放整个Hexo博客项目。这里默认路径是<strong>D:\blog</strong>。</p></li><li><p>使用 npm 安装 Hexo：</p></li></ul><div class="hljs"><pre><code class="hljs bash">$ npm install -g hexo-cli</code></pre></div><p><img src="https://i.loli.net/2019/11/07/BZIuA2XzYeaDQ8k.png" srcset="/blog/img/loading.gif" alt="image.png"></p><p>这样，Hexo就安装完成了。</p><blockquote><p>可使用输入<code>hexo -v</code>，检查<code>Hexo</code>是否安装成功</p></blockquote><h2 id="三、初始化Hexo"><a href="#三、初始化Hexo" class="headerlink" title="三、初始化Hexo"></a>三、初始化Hexo</h2><p><code>hexo init</code>，就会自动构建一个 <code>hexo</code> 项目，看到后面的<code>Start blogging with Hexo！</code>就说明初始化好了。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化Hexo</span>$ hexo init</code></pre></div><h2 id="四、安装npm必需组件"><a href="#四、安装npm必需组件" class="headerlink" title="四、安装npm必需组件"></a>四、安装npm必需组件</h2><div class="hljs"><pre><code class="hljs bash">$ npm install</code></pre></div><h2 id="五、生成并预览"><a href="#五、生成并预览" class="headerlink" title="五、生成并预览"></a>五、生成并预览</h2><p>执行 <code>hexo s</code>，浏览器访问 <code>localhost:4000</code> 就可以看到效果啦！</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 本地预览</span>$ hexo s</code></pre></div><p>初始化的默认博客页面：</p><p><img src="https://s1.ax1x.com/2020/09/19/wII0iQ.png" srcset="/blog/img/loading.gif" alt="wII0iQ.png"></p><h1 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h1><h2 id="一、配置git"><a href="#一、配置git" class="headerlink" title="一、配置git"></a>一、配置git</h2><h3 id="1、-全局变量name、email"><a href="#1、-全局变量name、email" class="headerlink" title="1、 全局变量name、email"></a>1、 全局变量name、email</h3><ul><li><em>可以在未来部署，并非一定现在</em></li></ul><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><div class="hljs"><pre><code>$ git config --global user.name  "your name"`$ git config --global user.email "your Email"</code></pre></div><h3 id="2、生成私钥和公钥"><a href="#2、生成私钥和公钥" class="headerlink" title="2、生成私钥和公钥"></a>2、生成私钥和公钥</h3><div class="hljs"><pre><code class="hljs ba">$ ssh-keygen -t rsa</code></pre></div><p><img src="https://s1.ax1x.com/2020/09/18/wh8K6e.png" srcset="/blog/img/loading.gif" alt="wh8K6e.png"></p><h3 id="3、绑定SSH公钥"><a href="#3、绑定SSH公钥" class="headerlink" title="3、绑定SSH公钥"></a>3、绑定SSH公钥</h3><p>登录Github，点击头像下的<code>settings</code></p><p><img src="https://s1.ax1x.com/2020/09/19/wI7FPg.png" srcset="/blog/img/loading.gif" alt="wI7FPg.png"></p><p>左侧点击<code>SSH and GPG keys</code>，添加ssh，新建一个<code>New SSH key</code>，将<code>id_rsa.pub</code>文件里的内容复制上去</p><p><img src="https://s1.ax1x.com/2020/09/18/wh810A.png" srcset="/blog/img/loading.gif" alt="wh810A.png"></p><ul><li>Title可以直接不填，Key粘贴<code>id_rsa.pub</code>文件里的内容</li></ul><p><img src="https://s1.ax1x.com/2020/09/18/wh8oA1.png" srcset="/blog/img/loading.gif" alt="wh8oA1.png"></p><h3 id="4、修改-config-yml中的Deployment"><a href="#4、修改-config-yml中的Deployment" class="headerlink" title="4、修改_config.yml中的Deployment"></a>4、修改_config.yml中的Deployment</h3><p>配置<code>Deployment</code>，在其文件夹中，找到<code>_config.yml</code>文件，修改<code>repo</code>值（在末尾），<code>repo</code>值是<code>github</code>项目里的<code>ssh</code></p><p><img src="https://s1.ax1x.com/2020/09/19/wIbQgJ.png" srcset="/blog/img/loading.gif" alt="wIbQgJ.png"></p><h2 id="二、安装hexo-deployer-git插件"><a href="#二、安装hexo-deployer-git插件" class="headerlink" title="二、安装hexo-deployer-git插件"></a>二、安装hexo-deployer-git插件</h2><ul><li>HexoBlog部署到<code>git</code>我们需要安装<code>hexo-deployer-git</code>插件，在blog目录下运行一下命令进行安装</li></ul><div class="hljs"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save</code></pre></div><h2 id="三、写作"><a href="#三、写作" class="headerlink" title="三、写作"></a>三、写作</h2><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 创建文章，默认layout布局为：post</span>$ hexo new [layout] &lt;title&gt;<span class="hljs-comment"># 例如</span>$ hexo new post HelloHexo</code></pre></div><blockquote><p>关于这块，最好看官方文档：<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a></p></blockquote><p>之后会在<code>source</code>文件夹的<code>_post</code>文件夹中看到你新建的文件<code>HelloHexo.md</code></p><h2 id="四、生成并部署博客"><a href="#四、生成并部署博客" class="headerlink" title="四、生成并部署博客"></a>四、生成并部署博客</h2><div class="hljs"><pre><code class="hljs bash">$ hexo d -g</code></pre></div><p>生成以及部署了，在打开你的博客主页（melodyjerry.github.io）就可以看到你创建的文章了。</p><h1 id="高阶篇"><a href="#高阶篇" class="headerlink" title="高阶篇"></a>高阶篇</h1><h2 id="一、主题"><a href="#一、主题" class="headerlink" title="一、主题"></a>一、主题</h2><h3 id="1、选取喜欢的主题"><a href="#1、选取喜欢的主题" class="headerlink" title="1、选取喜欢的主题"></a>1、选取喜欢的主题</h3><p>在Hexo官方，有许多现成的主题了。当然，你想自己原创设计或二次开发也可以的<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8">👼</span></p><p>大量主题：<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/themes.html</a></p><p>找到合适的就按要求下载即可。</p><p>以主题<code>fluid</code>为例，<code>fluid</code>的配置文档在<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B" target="_blank" rel="noopener">这里</a>。</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-comment"># 下载到themes文件夹下</span>$ git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid fluid</code></pre></div><h3 id="2、-配置主题"><a href="#2、-配置主题" class="headerlink" title="2、 配置主题"></a>2、 配置主题</h3><p>找到<code>_config.yml</code>文件，修改<code>theme</code>值：</p><div class="hljs"><pre><code class="hljs bash">theme: fluid</code></pre></div><h3 id="3、重新生成并预览"><a href="#3、重新生成并预览" class="headerlink" title="3、重新生成并预览"></a>3、重新生成并预览</h3><div class="hljs"><pre><code class="hljs bash">$ hexo clean$ hexo g$ hexo s</code></pre></div><h2 id="二、接入评论系统-valine"><a href="#二、接入评论系统-valine" class="headerlink" title="二、接入评论系统 - valine"></a>二、接入评论系统 - valine</h2><p>上Valine官方文档：<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">https://valine.js.org/quickstart.html</a></p><h2 id="三、部署优化"><a href="#三、部署优化" class="headerlink" title="三、部署优化"></a>三、部署优化</h2><p>每次都要执行 <code>hexo clean</code> 、<code>hexo generate</code>、 <code>hexo deploy</code>，不如写个新的脚本：</p><div class="hljs"><pre><code class="hljs javascript"><span class="hljs-comment">// package.json</span><span class="hljs-string">"dev"</span>: <span class="hljs-string">"hexo s"</span>,<span class="hljs-string">"build"</span>: <span class="hljs-string">"hexo clean &amp; hexo deploy"</span></code></pre></div><p>部署命令：</p><div class="hljs"><pre><code class="hljs javascript">$ npm run build</code></pre></div><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="站点文件和主题文件的区别"><a href="#站点文件和主题文件的区别" class="headerlink" title="站点文件和主题文件的区别"></a>站点文件和主题文件的区别</h2><p><img src="https://s1.ax1x.com/2020/09/19/wIOAud.png" srcset="/blog/img/loading.gif" alt="wIOAud.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言： 使用&lt;a href=&quot;https://blog.csdn.net/weixin_43438052&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSDN&lt;/a&gt;或&lt;strong&gt;简书&lt;/strong&gt;撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。&lt;/p&gt;
&lt;p&gt;最终，个人选择了&lt;strong&gt;Hexo+GitHub（Pages）&lt;/strong&gt;的方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Pages&lt;/a&gt; 是开源协作社区 GitHub 的一个服务，将博客部署到它上面再合适不过了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Q&lt;/th&gt;
&lt;th&gt;W&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;为什么要部署到 GitHub Pages 上？&lt;/td&gt;
&lt;td&gt;首先免费，其次省心，最后可以学习使用 GitHub。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GitHub Pages 有容量限制吗？&lt;/td&gt;
&lt;td&gt;有，由 &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What is GitHub Pages?&lt;/a&gt; 可知：大小限制为 1GB，一个月 100GB 流量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;超出限制的容量怎么办？&lt;/td&gt;
&lt;td&gt;讲真，如果图片音乐视频等大文件都放在&lt;a href=&quot;https://www.qiniu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;七牛云 KODO&lt;/a&gt;、&lt;a href=&quot;https://www.aliyun.com/product/oss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云 OSS&lt;/a&gt; 或其它云存储上。&lt;br&gt;图片我更多是存放在图床上，比如&lt;a href=&quot;https://imgchr.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;路过图床&lt;/a&gt;或&lt;a href=&quot;https://sm.ms/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SM.MS&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;国内访问速度行不行，有必要同时部署在 &lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Coding&lt;/a&gt; 上吗？&lt;/td&gt;
&lt;td&gt;个人感觉可有可无吧，自己不用梯子时，感觉访问速度可以，毕竟站点的大文件都是放在了云存储上，图片都是国内图床，加载较快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;我可以用自己的域名吗？&lt;/td&gt;
&lt;td&gt;可以，并且原生支持 https。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Hexo" scheme="https://melodyjerry.github.io/blog/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://melodyjerry.github.io/blog/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客加入聊天系统DaoVoice</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/%E5%8A%A0%E5%85%A5%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9Fdaovioce/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/%E5%8A%A0%E5%85%A5%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9Fdaovioce/</id>
    <published>2020-09-18T12:23:11.000Z</published>
    <updated>2020-09-19T04:24:28.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-DaoVoice"><a href="#关于-DaoVoice" class="headerlink" title="关于 DaoVoice"></a>关于 DaoVoice</h1><p>DaoVoice 是一款革命性的应用运营平台，致力于帮助企业实现以用户为中心的「精益运营」体系。</p><p>融合「在线聊天」、「客服支持」、「用户画像」、「消息推送」、「行为引导」等功能为一体， 按需获取用户信息和行为，实现场景化消息推送，让通知更富有人情味。</p><p>接入只需 5 行代码，即可创建与用户实时沟通的窗口，无缝接入企业原有产品体系，拉近企业与用户的距离。</p><p>秉承「数据驱动，精益运营」的理念，让用户定义产品，让参与感驱动产品迭代。</p><p>用 DaoVoice 驱动用户运营，帮你最终实现用户转化。</p><blockquote><p>“DaoVoice 帮我们更好地运营用户。实时在线沟通，可更快解决用户问题。后台管理可帮我们建立用户画像，针对不同的用户需求进行精准运营。此外，DaoVoice 团队会快速响应我们的反馈，给予高质量服务支持。”    ——<strong>Travis</strong>创始人 &amp; CEO</p></blockquote><a id="more"></a><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>layout\_third-party\daovoice.ejs：</p><div class="hljs"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span>(theme.daovoice.enable &amp;&amp; theme.daovoice.appid){ %&gt;  &lt;script&gt;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) </span>{      i[<span class="hljs-string">'DaoVoiceObject'</span>] = r;      i[r] = i[r] ||        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{          (i[r].q = i[r].q || []).push(<span class="hljs-built_in">arguments</span>);        };      i[r].l = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();      a = s.createElement(o);      m = s.getElementsByTagName(o)[<span class="hljs-number">0</span>];      a.async = <span class="hljs-number">1</span>;      a.src = g;      a.charset = <span class="hljs-string">'utf-8'</span>;      m.parentNode.insertBefore(a, m);    })(<span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>, <span class="hljs-string">'script'</span>, (<span class="hljs-string">'https:'</span> === <span class="hljs-built_in">document</span>.location.protocol ? <span class="hljs-string">'https:'</span> : <span class="hljs-string">'http:'</span>) + <span class="hljs-string">"//widget.daovoice.io/widget/&lt;%= theme.daovoice.appid %&gt;.js"</span>, <span class="hljs-string">'daovoice'</span>);    daovoice(<span class="hljs-string">'init'</span>, {      app_id: <span class="hljs-string">"&lt;%= theme.daovoice.appid %&gt;"</span>,    });    daovoice(<span class="hljs-string">'update'</span>);  &lt;<span class="hljs-regexp">/script&gt;</span><span class="hljs-regexp">&lt;% } %&gt;</span></code></pre></div><p>layout\index.ejs：</p><div class="hljs"><pre><code class="hljs js">&lt;!--DaoVoice服务http:<span class="hljs-comment">//blog.daovoice.io/--&gt;</span>&lt;%- partial(<span class="hljs-string">'_third-party/daovoice'</span>) %&gt;</code></pre></div><p>_config.yml：</p><div class="hljs"><pre><code class="hljs yaml"><span class="hljs-attr">daovoice:</span>  <span class="hljs-comment"># 在线客服 Daovoice 参考：http://dashboard.daovoice.io</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启在线客服聊天</span>  <span class="hljs-attr">appid:</span> <span class="hljs-string">'exxxxxxx'</span>  <span class="hljs-comment"># 应用ID设置</span></code></pre></div><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s1.ax1x.com/2020/09/18/w46j3D.gif" srcset="/blog/img/loading.gif" alt="w46j3D.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-DaoVoice&quot;&gt;&lt;a href=&quot;#关于-DaoVoice&quot; class=&quot;headerlink&quot; title=&quot;关于 DaoVoice&quot;&gt;&lt;/a&gt;关于 DaoVoice&lt;/h1&gt;&lt;p&gt;DaoVoice 是一款革命性的应用运营平台，致力于帮助企业实现以用户为中心的「精益运营」体系。&lt;/p&gt;
&lt;p&gt;融合「在线聊天」、「客服支持」、「用户画像」、「消息推送」、「行为引导」等功能为一体， 按需获取用户信息和行为，实现场景化消息推送，让通知更富有人情味。&lt;/p&gt;
&lt;p&gt;接入只需 5 行代码，即可创建与用户实时沟通的窗口，无缝接入企业原有产品体系，拉近企业与用户的距离。&lt;/p&gt;
&lt;p&gt;秉承「数据驱动，精益运营」的理念，让用户定义产品，让参与感驱动产品迭代。&lt;/p&gt;
&lt;p&gt;用 DaoVoice 驱动用户运营，帮你最终实现用户转化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“DaoVoice 帮我们更好地运营用户。实时在线沟通，可更快解决用户问题。后台管理可帮我们建立用户画像，针对不同的用户需求进行精准运营。此外，DaoVoice 团队会快速响应我们的反馈，给予高质量服务支持。”    ——&lt;strong&gt;Travis&lt;/strong&gt;创始人 &amp;amp; CEO&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="博客" scheme="https://melodyjerry.github.io/blog/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>AspectJ的切入点表达式---execution表达式</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/AspectJ%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F---execution%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/AspectJ%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F---execution%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-18T09:24:41.000Z</published>
    <updated>2020-09-19T14:56:11.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>execution(&lt;修饰符模式&gt;?&lt;返回类型模式&gt;&lt;方法名模式&gt;(&lt;参数模式&gt;)&lt;异常模式&gt;?) </p></blockquote> <a id="more"></a><p>除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。</p><p>一、通过方法签名定义切点</p><blockquote><p> execution(public * *(..))</p></blockquote><p>　　匹配所有目标类的public方法，但不匹配SmartSeller和protected voidshowGoods()方法。第一个<em>代表返回类型，第二个</em>代表方法名，而..代表任意入参的方法；</p><blockquote><p> execution(* *To(..))</p></blockquote><p>　　匹配目标类所有以To为后缀的方法。它匹配NaiveWaiter和NaughtyWaiter的greetTo()和serveTo()方法。第一个<em>代表返回类型，而</em>To代表任意以To为后缀的方法；</p><p>二、通过类定义切点</p><blockquote><p> execution(<em>com.baobaotao.Waiter.</em>(..))</p></blockquote><p>　　匹配Waiter接口的所有方法，它匹配NaiveWaiter和NaughtyWaiter类的greetTo()和serveTo()方法。第一个<em>代表返回任意类型，com.baobaotao.Waiter.</em>代表Waiter接口中的所有方法；</p><blockquote><p> execution(<em>com.baobaotao.Waiter+.</em>(..))</p></blockquote><p>　　匹配Waiter接口及其所有实现类的方法，它不但匹配NaiveWaiter和NaughtyWaiter类的greetTo()和serveTo()这两个Waiter接口定义的方法，同时还匹配NaiveWaiter#smile()和NaughtyWaiter#joke()这两个不在Waiter接口中定义的方法。</p><p>三、通过类包定义切点</p><p>　　在类名模式串中，”.*”表示包下的所有类，而”..*”表示包、子孙包下的所有类。</p><blockquote><p> execution(* com.baobaotao.*(..))l</p></blockquote><p>　　匹配com.baobaotao包下所有类的所有方法；</p><blockquote><p> execution(* com.baobaotao..*(..))l</p></blockquote><p>　　匹配com.baobaotao包、子孙包下所有类的所有方法，如com.baobaotao.dao，com.baobaotao.servier以及com.baobaotao.dao.user包下的所有类的所有方法都匹配。”..”出现在类名中时，后面必须跟”*”，表示包、子孙包下的所有类；  </p><blockquote><p> execution(* com..<em>.</em>Dao.find*(..))</p></blockquote><p>　　匹配包名前缀为com的任何包下类名后缀为Dao的方法，方法名必须以find为前缀。如com.baobaotao.UserDao#findByUserId()、com.baobaotao.dao.ForumDao#findById()的方法都匹配切点。</p><p>四、通过方法入参定义切点</p><p>　　切点表达式中方法入参部分比较复杂，可以使用”*”和”..”通配符，其中”*”表示任意类型的参数，而”..”表示任意类型参数且参数个数不限。 </p><blockquote><p> execution(* joke(String,int)))</p></blockquote><p>　　匹配joke(String,int)方法，且joke()方法的第一个入参是String，第二个入参是int。它匹配NaughtyWaiter#joke(String,int)方法。如果方法中的入参类型是<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>.lang包下的类，可以直接使用类名，否则必须使用全限定类名，如joke(java.util.List,int)；</p><blockquote><p> execution(* joke(String,*)))</p></blockquote><p>　　匹配目标类中的joke()方法，该方法第一个入参为String，第二个入参可以是任意类型，如joke(Strings1,String s2)和joke(String s1,double d2)都匹配，但joke(String s1,doubled2,String s3)则不匹配；</p><blockquote><p> execution(* joke(String,..)))</p></blockquote><p>　　匹配目标类中的joke()方法，该方法第 一个入参为String，后面可以有任意个入参且入参类型不限，如joke(Strings1)、joke(String s1,String s2)和joke(String s1,double d2,Strings3)都匹配。</p><blockquote><p> execution(* joke(Object+)))</p></blockquote><p>　　匹配目标类中的joke()方法，方法拥有一个入参，且入参是Object类型或该类的子类。它匹配joke(Strings1)和joke(Client c)。如果我们定义的切点是execution(*joke(Object))，则只匹配joke(Object object)而不匹配joke(Stringcc)或joke(Client c)。</p><p>五、args()和@args()</p><p>　　args()函数的入参是类名，@args()函数的入参必须是注解类的类名。虽然args()允许在类名后使用+通配符后缀，但该通配符在此处没有意义：添加和不添加效果都一样。</p><p>1、args()</p><p>　　该函数接受一个类名，表示目标类方法入参对象按类型匹配于指定类时，切点匹配，如下面的例子：</p><blockquote><p>args(com.baobaotao.Waiter)</p></blockquote><p>　　表示运行时入参是Waiter类型的方法，它和execution(**(com.baobaotao.Waiter))区别在于后者是针对类方法的签名而言的，而前者则针对运行时的入参类型而言。如args(com.baobaotao.Waiter)既匹配于addWaiter(Waiterwaiter)，也匹配于addNaiveWaiter(NaiveWaiter naiveWaiter)，而execution(**(com.baobaotao.Waiter))只匹配addWaiter(Waiterwaiter)方法；实际上，args(com.baobaotao.Waiter)等价于execution(**(com.baobaotao.Waiter+))，当然也等价于args(com.baobaotao.Waiter+)。</p><p>2、@args()</p><p>　　该函数接受一个注解类的类名，当方法的运行时入参对象标注发指定的注解时，方法匹配切点。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>通过类包定义切点</p><p>在类名模式串中，“.*”表示包下的所有类，而“..*”表示包、子孙包下的所有类。</p><p>execution(* com.baobaotao.*(..))</p><p>匹配com.baobaotao包下所有类的所有方法；</p><p>execution(* com.baobaotao..*(..))</p><p>匹 配com.baobaotao包、子孙包下所有类的所有方法，如com.baobaotao.dao，com.baobaotao.servier以及 com.baobaotao.dao.user包下的所有类的所有方法都匹配。“..”出现在类名中时，后面必须跟“*”，表示包、子孙包下的所有类</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;execution(&amp;lt;修饰符模式&amp;gt;?&amp;lt;返回类型模式&amp;gt;&amp;lt;方法名模式&amp;gt;(&amp;lt;参数模式&amp;gt;)&amp;lt;异常模式&amp;gt;?) &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于Java的反射机制，4篇优选参考文章</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/18/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%8C4%E7%AF%87%E4%BC%98%E9%80%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/18/%E5%85%B3%E4%BA%8EJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%8C4%E7%AF%87%E4%BC%98%E9%80%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/</id>
    <published>2020-09-18T01:10:00.738Z</published>
    <updated>2020-09-18T04:43:03.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a></li><li><a href="https://blog.csdn.net/qq_36226453/article/details/82790375" target="_blank" rel="noopener">Java基础之—反射（非常重要）</a></li><li><a href="https://www.cnblogs.com/adamjwh/p/9683705.html" target="_blank" rel="noopener">Java高级篇（四）——反射</a></li><li><a href="https://www.zhihu.com/question/24304289" target="_blank" rel="noopener">学习java应该如何理解反射？</a></li></ol><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/9be58ee20dee&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java高级特性——反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_36226453/article/details/82790375&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java基础之—反射（非常重要）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/adamjwh/p/9683705.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java高级篇（四）——反射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/24304289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;学习java应该如何理解反射？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java+Spring+MyBatis实现多数据源的动态切换</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/08/Java+Spring+MyBatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/08/Java+Spring+MyBatis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/</id>
    <published>2020-09-08T06:22:22.000Z</published>
    <updated>2020-09-18T04:43:02.959Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.cnblogs.com/zt2710/p/11116637.html" target="_blank" rel="noopener">https://www.cnblogs.com/zt2710/p/11116637.html</a></p><p>群聊天记录截图👇</p><img src="https://s1.ax1x.com/2020/09/08/wQE7DO.jpg" srcset="/blog/img/loading.gif" alt="wQE7DO.jpg" style="zoom:30%;"><a id="more"></a><hr><h1 id="固定多数据源切换"><a href="#固定多数据源切换" class="headerlink" title="固定多数据源切换"></a>固定多数据源切换</h1><p>  固定多数据源的动态切换，通过自定义注解实现切换，这样在切换数据源时比较灵活，具体的实现方式如下：</p><p>  1、配置多数据源</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义数据源1--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"oracledataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:oracle:thin:@127.0.0.1:1522:neworcl"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"emspdadev"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"emspdadev"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--定义数据源2--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mysqldataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/jbpmdb"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"123456"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--动态数据源配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.ssm.datasource.DynamicDataSource"</span>&gt;</span><span class="hljs-comment">&lt;!--引入定义好的数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">"targetDataSources"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>  <span class="hljs-attr">key-type</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"oracle"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"mysql"</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">"mysqldataSource"</span> /&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--定义默认数据源--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"defaultTargetDataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--spring和mybatis整合--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapping/*.xml"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.ssm.dao"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p> 2、定义注解(注解名为DataSource)，用于切换数据源，注解的值只能为上述配置中定义的key(对应于上面配置中定义的oracle、mysql)</p><div class="hljs"><pre><code class="hljs less"><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-variable">@Target</span>(ElementType.METHOD)pub lic <span class="hljs-variable">@interface</span> DataSource {    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">value</span>();}</code></pre></div><p>  3、根据Sping切面编程，当调用指定的切面类时，解释注解，并根据注解的定义使用对应的数据库</p><div class="hljs"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> DataSourceAspect {<span class="hljs-comment">/**</span><span class="hljs-comment">    * 定义切面，当调用com.ssm.service下的所有类的所有方法前都会执行beforeInvoke方法</span><span class="hljs-comment">    */</span>    @<span class="hljs-constructor">Pointcut(<span class="hljs-string">"execution(* com.ssm.service.*.*(..))"</span>)</span>    public void point<span class="hljs-constructor">Cut()</span>{};     @<span class="hljs-constructor">Before(<span class="hljs-params">value</span> = <span class="hljs-string">"pointCut()"</span>)</span>    public void before<span class="hljs-constructor">Invoke(JoinPoint <span class="hljs-params">joinpoint</span>)</span> {        <span class="hljs-keyword">try</span> {            String clazzName = joinpoint.get<span class="hljs-constructor">Target()</span>.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span>;            String methodName = joinpoint.get<span class="hljs-constructor">Signature()</span>.get<span class="hljs-constructor">Name()</span>;            Class targetClazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>for<span class="hljs-constructor">Name(<span class="hljs-params">clazzName</span>)</span>;            Method<span class="hljs-literal">[]</span> methods = targetClazz.get<span class="hljs-constructor">Methods()</span>;            for(Method <span class="hljs-keyword">method</span> : methods) {                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Name()</span>.equals(methodName)) {                    <span class="hljs-comment">// 首先查看方法是否使用注解</span>                    <span class="hljs-comment">// 如果使用注解，则获取注解定义的值，并根据注解的值设置访问数据库的key</span>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.is<span class="hljs-constructor">AnnotationPresent(DataSource.<span class="hljs-params">class</span>)</span>) {                        DataSource dataSource = <span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Annotation(DataSource.<span class="hljs-params">class</span>)</span>;                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DataType(<span class="hljs-params">dataSource</span>.<span class="hljs-params">value</span>()</span>);                    }                    break;                }            }        } catch (Exception e) {            e.print<span class="hljs-constructor">StackTrace()</span>;        }     }}</code></pre></div><p>  4、定义动态切换数据源(继承Spring的AbstractRoutingDataSource)</p><div class="hljs"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicDataSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractRoutingDataSource</span> </span>{    <span class="hljs-comment">/**</span><span class="hljs-comment">    * 根据DatasourceHolder中DataType的值获取具体的数据源</span><span class="hljs-comment">    */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Object</span> determineCurrentLookupKey() {        <span class="hljs-keyword">return</span> <span class="hljs-type">DatasourceHolder</span>.getDataType();    }}</code></pre></div><p>  5、数据源切换的使用</p><div class="hljs"><pre><code class="hljs dart"><span class="hljs-meta">@Service</span>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdxServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IIdxSevice</span> </span>{     <span class="hljs-meta">@Autowired</span>    private IdxMapper idxMapper;     <span class="hljs-meta">@Override</span>    public <span class="hljs-built_in">List</span>&lt;Idx&gt; listIdxInfo() {        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    }     <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>根据注解的配置，会访问oracle对应的数据源</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"oracle"</span>)    public <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; getIdxById(<span class="hljs-built_in">int</span> idxId) {        <span class="hljs-keyword">return</span> idxMapper.getIdxById(idxId);    }     <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>根据注解的配置，会访问mysql对应的数据源</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@DataSource</span>(<span class="hljs-string">"mysql"</span>)    public <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; getJobInfo(<span class="hljs-built_in">int</span> dbId) {        <span class="hljs-keyword">return</span> idxMapper.getJobInfo(dbId);    }}</code></pre></div><p>通过以上的步骤即实现了数据源的动态切换</p><h1 id="动态多数据源切换"><a href="#动态多数据源切换" class="headerlink" title="动态多数据源切换"></a>动态多数据源切换</h1><p>  对于动态的多数据源，数据源的配置一般不放在配置文件中，因为如果放在配置文件中，每次新增或删除数据源，都需要重启项目，这样的实现方式非常不友好；通常情况向数据源的配置放在数据库中。实现方式如下：**<br>**</p><p>  1、配置数据源，这里配置的数据源用于保存其他数据源的配置信息，今后数据的新增、删除、修改均在该数据库中操作，配置如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义数据源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"oracledataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">"close"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"oracle.jdbc.driver.OracleDriver"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:oracle:thin:@127.0.0.1:1522:neworcl"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cfgmanage"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cfgmanage"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- 初始化连接大小 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"initialSize"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"0"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大数量 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxActive"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最大空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 连接池最小空闲 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minIdle"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 获取连接最大等待时间 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"maxWait"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"60000"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--查询动态配置的数据库连接信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"jdbcTemplate"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dbConfigService"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.teamsun.datasource.DBConfigService"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"jdbcTemplate"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"jdbcTemplate"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--定义动态数据源--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.teamsun.datasource.DynamicDataSource"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"masterDataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"oracledataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dbConfigService"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dbConfigService"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span> <span class="hljs-comment">&lt;!--spring和mybatis整合--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span> /&gt;</span>    <span class="hljs-comment">&lt;!--&lt;property name="mapperLocations" value="classpath:mapping/*.xml" /&gt;--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"basePackage"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.teamsun.mapper"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactoryBeanName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>2、实现查询数据源配置信息的类</p><div class="hljs"><pre><code class="hljs lsl">public class DBConfigService {     private JdbcTemplate jdbcTemplate;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询数据库配置信息</span><span class="hljs-comment">     * @param dbName  数据库名称</span><span class="hljs-comment">     * @return 数据库配置信息</span><span class="hljs-comment">     */</span>    public DBCfg getDBCfg(String dbName) throws Exception {        String querySql = <span class="hljs-string">"select<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"          t.db_type as <span class="hljs-subst">\"</span>dbType<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_name as <span class="hljs-subst">\"</span>dbName<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_comment as <span class="hljs-subst">\"</span>dbCommment<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_driver as <span class="hljs-subst">\"</span>driverClass<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_username as <span class="hljs-subst">\"</span>userName<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_password as <span class="hljs-subst">\"</span>passworld<span class="hljs-subst">\"</span>,<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"           t.db_url as <span class="hljs-subst">\"</span>jdbcURL<span class="hljs-subst">\"</span>"</span> +                <span class="hljs-string">"          from TB_RPT_DBCFG t<span class="hljs-subst">\n</span>"</span> +                <span class="hljs-string">"          where t.db_name = '"</span> + dbName + <span class="hljs-string">"'"</span>;         RowMapper&lt;DBCfg&gt; rowMapper = ParameterizedBeanPropertyRowMapper.newInstance(DBCfg.class);        DBCfg dbCfg = (DBCfg) jdbcTemplate.queryForObject(querySql, rowMapper);        return dbCfg;    }     public JdbcTemplate getJdbcTemplate() {        return jdbcTemplate;    }     public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }}</code></pre></div><p>3、实现动态切换数据源</p><div class="hljs"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><span class="hljs-comment"> * &lt;p&gt;动态创建及访问多数据源&lt;/p&gt;</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> DynamicDataSource extends AbstractRoutingDataSource{     <span class="hljs-keyword">private</span> DBConfigService dbConfigService;     <span class="hljs-keyword">private</span> DataSource masterDataSource;     <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; targetDataSource = <span class="hljs-keyword">new</span> HashMap&lt;Object, Object&gt;<span class="hljs-literal">()</span>;     <span class="hljs-keyword">private</span> static final String DEFAULT_DB_NAME = <span class="hljs-string">"dataSource"</span>;  <span class="hljs-comment">// 默认数据库名</span>     <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>get<span class="hljs-constructor">Logger(DynamicDataSource.<span class="hljs-params">class</span>)</span>;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建并获取数据源</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    @Override    protected DataSource determine<span class="hljs-constructor">TargetDataSource()</span> {        <span class="hljs-comment">// 获取数据源名称</span>        String dbName = (String) determine<span class="hljs-constructor">CurrentLookupKey()</span>;         <span class="hljs-comment">// 获取默认数据源</span>        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DEFAULT_DB_NAME</span>.</span></span>equals(dbName)) {            return masterDataSource;        }         <span class="hljs-comment">// 创建数据源</span>        DataSource dataSource = (DataSource) targetDataSource.get(dbName);        <span class="hljs-keyword">try</span> {            <span class="hljs-keyword">if</span> (dataSource<span class="hljs-operator"> == </span>null) {                dataSource = get<span class="hljs-constructor">DataSourceByName(<span class="hljs-params">dbName</span>)</span>;            }        } catch (Exception e) {            e.print<span class="hljs-constructor">StackTrace()</span>;        }        return dataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取数据库名称，可根据获取的数据库名称查询数据库配置信息，</span><span class="hljs-comment">     * 通过配置信息动态创建数据源</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    @Override    protected Object determine<span class="hljs-constructor">CurrentLookupKey()</span> {        String dbName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>get<span class="hljs-constructor">DBName()</span>;        <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">dbName</span>)</span>) {            dbName = DEFAULT_DB_NAME;        }         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>remove<span class="hljs-literal">()</span>;        return dbName;    }     @Override    public void after<span class="hljs-constructor">PropertiesSet()</span> {     }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过数据库的配置信息获取数据源</span><span class="hljs-comment">     * @param dbName 数据库名称</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    public synchronized DataSource get<span class="hljs-constructor">DataSourceByName(String <span class="hljs-params">dbName</span>)</span> throws Exception {                 <span class="hljs-comment">// 创建数据源</span>        BasicDataSource dataSource = create<span class="hljs-constructor">DataSource(<span class="hljs-params">dbName</span>)</span>;                 <span class="hljs-comment">// 如果创建数据源成功则缓存数据源，避免重复创建相同的数据源</span>        <span class="hljs-keyword">if</span>(dataSource != null) {            targetDataSource.put(dbName, dataSource);        }        return  dataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 通过数据库的配置创建数据源</span><span class="hljs-comment">     * @param dbName 数据库名称</span><span class="hljs-comment">     * @return</span><span class="hljs-comment">     */</span>    public BasicDataSource create<span class="hljs-constructor">DataSource(String <span class="hljs-params">dbName</span>)</span> throws Exception {                 <span class="hljs-comment">// 查询动态数据源配置信息</span>        String oriDBName = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>get<span class="hljs-constructor">DBName()</span>;         <span class="hljs-keyword">if</span>(dbConfigService<span class="hljs-operator"> == </span>null) {            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"创建数据源失败[dbCfgService is null......]"</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>debug(<span class="hljs-string">"创建数据源失败[dbCfgService is null......]"</span>);        }         <span class="hljs-comment">// 通过数据库名称查询相关的数据库配置信息</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(DEFAULT_DB_NAME)</span>;        DBCfg dbCfg = dbConfigService.get<span class="hljs-constructor">DBCfg(<span class="hljs-params">dbName</span>)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">oriDBName</span>)</span>;         String driver = dbCfg.get<span class="hljs-constructor">DriverClass()</span>;  <span class="hljs-comment">// 数据库驱动</span>        String url = dbCfg.get<span class="hljs-constructor">JdbcURL()</span>;  <span class="hljs-comment">// 数据库连接地址</span>        String username = dbCfg.get<span class="hljs-constructor">UserName()</span>;  <span class="hljs-comment">// 数据库用户名</span>        String password = dbCfg.get<span class="hljs-constructor">Passworld()</span>;  <span class="hljs-comment">// 数据库密码</span>         <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LOGGER</span>.</span></span>debug(<span class="hljs-string">"动态连接的数据库为["</span> + url + <span class="hljs-string">"|"</span> + username + <span class="hljs-string">"]"</span>);         <span class="hljs-comment">// 创建数据源</span>        BasicDataSource basicDataSource = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BasicDataSource()</span>;        basicDataSource.set<span class="hljs-constructor">DriverClassName(<span class="hljs-params">driver</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Url(<span class="hljs-params">url</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>;        basicDataSource.set<span class="hljs-constructor">Password(<span class="hljs-params">password</span>)</span>;        basicDataSource.set<span class="hljs-constructor">TestWhileIdle(<span class="hljs-params">true</span>)</span>;         return basicDataSource;    }     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果修改或删除数据源的配置，则需要同步删除缓存的数据源</span><span class="hljs-comment">     * @param dbName</span><span class="hljs-comment">     */</span>    public void remove<span class="hljs-constructor">DataSource(String <span class="hljs-params">dbName</span>)</span> {        this.targetDataSource.remove(dbName);    }     public DataSource get<span class="hljs-constructor">MasterDataSource()</span> {        return masterDataSource;    }     public void set<span class="hljs-constructor">MasterDataSource(DataSource <span class="hljs-params">masterDataSource</span>)</span> {        this.masterDataSource = masterDataSource;    }     public DBConfigService get<span class="hljs-constructor">DbConfigService()</span> {        return dbConfigService;    }     public void set<span class="hljs-constructor">DbConfigService(DBConfigService <span class="hljs-params">dbConfigService</span>)</span> {        this.dbConfigService = dbConfigService;    }}</code></pre></div><p>4、使用动态切换数据源</p><div class="hljs"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> ShowRptServiceImpl implements IShowRptService {     <span class="hljs-keyword">private</span> static final Logger LOGGER = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>get<span class="hljs-constructor">Logger(ShowRptServiceImpl.<span class="hljs-params">class</span>)</span>;     @Autowired    <span class="hljs-keyword">private</span> DBCfgMapper dbCfgMapper;     @Autowired    <span class="hljs-keyword">private</span> ShowRptInfoMapper showRptInfoMapper;     @Override    public RptResult query<span class="hljs-constructor">RptInfo(BaseRpt <span class="hljs-params">baseRpt</span>, Map&lt;String, String&gt; <span class="hljs-params">params</span>)</span> {        <span class="hljs-comment">// 在调用Mybatis执行数据库之前先选择数据源</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">dbCfg</span>.<span class="hljs-params">getDbName</span>()</span>);        <span class="hljs-comment">// 查询报表数据</span>        List&lt;Map&lt;String,Object&gt;&gt; resultList = showRptInfoMapper.query<span class="hljs-constructor">RptData(<span class="hljs-params">querySQL</span>)</span>;          <span class="hljs-comment">// 选择数据源</span>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DatasourceHolder</span>.</span></span>set<span class="hljs-constructor">DBName(<span class="hljs-params">dbCfg</span>.<span class="hljs-params">getDbName</span>()</span>);        <span class="hljs-comment">// 查询数据数据量</span>        <span class="hljs-built_in">int</span> totalCount = showRptInfoMapper.query<span class="hljs-constructor">TotalCount(<span class="hljs-params">countSQL</span>)</span>;         RptResult rptResult = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RptResult()</span>;        return rptResult;    } }</code></pre></div><p>通过以上步骤即可实现动态多数据源的动态切换</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://www.cnblogs.com/zt2710/p/11116637.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/zt2710/p/11116637.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;群聊天记录截图👇&lt;/p&gt;
&lt;img src=&quot;https://s1.ax1x.com/2020/09/08/wQE7DO.jpg&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;wQE7DO.jpg&quot; style=&quot;zoom:30%;&quot;&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>优化IDEA卡顿现象</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/07/%E4%BC%98%E5%8C%96IDEA%E5%8D%A1%E9%A1%BF%E7%8E%B0%E8%B1%A1/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/07/%E4%BC%98%E5%8C%96IDEA%E5%8D%A1%E9%A1%BF%E7%8E%B0%E8%B1%A1/</id>
    <published>2020-09-07T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:03.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改-vmoptions-文件"><a href="#修改-vmoptions-文件" class="headerlink" title="修改 vmoptions 文件"></a>修改 vmoptions 文件</h2><p>首先是找到 IDEA 的安装目录，之后到安装目录的 bin 目录下，找到如下两个文件：<br><code>idea.exe.vmoptions</code>和<code>idea64.exe.vmoptions</code><br>看你是多少位系统的你就该对应的就可以了，编辑这个配置文件。<br>修改前：</p><div class="hljs"><pre><code class="hljs haml">-<span class="ruby">Xms128m</span><span class="ruby">-Xmx750m</span><span class="ruby">-<span class="hljs-symbol">XX:</span>ReservedCodeCacheSize=<span class="hljs-number">240</span>m</span><span class="ruby">-<span class="hljs-symbol">XX:</span>+UseConcMarkSweepGC</span><span class="ruby">-<span class="hljs-symbol">XX:</span>SoftRefLRUPolicyMSPerMB=<span class="hljs-number">50</span></span><span class="ruby">-ea</span><span class="ruby">-<span class="hljs-symbol">XX:</span>CICompilerCount=<span class="hljs-number">2</span></span><span class="ruby">-Dsun.io.useCanonPrefixCache=<span class="hljs-literal">false</span></span><span class="ruby">-Djdk.http.auth.tunneling.disabledSchemes=<span class="hljs-string">""</span></span><span class="ruby">-<span class="hljs-symbol">XX:</span>+HeapDumpOnOutOfMemoryError</span><span class="ruby">-<span class="hljs-symbol">XX:</span>-OmitStackTraceInFastThrow</span><span class="ruby">-Djdk.attach.allowAttachSelf=<span class="hljs-literal">true</span></span><span class="ruby">-Dkotlinx.coroutines.debug=off</span><span class="ruby">-Djdk<span class="hljs-class">.<span class="hljs-keyword">module</span>.<span class="hljs-title">illegalAccess</span>.<span class="hljs-title">silent</span>=<span class="hljs-title">true</span></span></span></code></pre></div><p>修改后：<br>分别把<strong>内存</strong>的参数 <strong>128m</strong> 和 <strong>750m</strong> 改成你想要改的就可以了，我是分别改成了 <strong>1024m</strong> 和 <strong>2048m</strong>，之后如果还卡，再往大了调，可以根据自己电脑的实际内存设置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/evane1890/article/details/78941968" target="_blank" rel="noopener">JVM调优常用参数</a></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;修改-vmoptions-文件&quot;&gt;&lt;a href=&quot;#修改-vmoptions-文件&quot; class=&quot;headerlink&quot; title=&quot;修改 vmoptions 文件&quot;&gt;&lt;/a&gt;修改 vmoptions 文件&lt;/h2&gt;&lt;p&gt;首先是找到 IDEA 的安装目录，之后到安装目录的 bin 目录下，找到如下两个文件：&lt;br&gt;&lt;code&gt;idea.exe.vmoptions&lt;/code&gt;和&lt;code&gt;idea64.exe.vmoptions&lt;/code&gt;&lt;br&gt;看你是多少位系统的你就该对应的就可以了，编辑这个配置文件。&lt;br&gt;修改前：&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs haml&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;Xms128m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Xmx750m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;ReservedCodeCacheSize=&lt;span class=&quot;hljs-number&quot;&gt;240&lt;/span&gt;m&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+UseConcMarkSweepGC&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;SoftRefLRUPolicyMSPerMB=&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-ea&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;CICompilerCount=&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Dsun.io.useCanonPrefixCache=&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk.http.auth.tunneling.disabledSchemes=&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;+HeapDumpOnOutOfMemoryError&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-&lt;span class=&quot;hljs-symbol&quot;&gt;XX:&lt;/span&gt;-OmitStackTraceInFastThrow&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk.attach.allowAttachSelf=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Dkotlinx.coroutines.debug=off&lt;/span&gt;
&lt;span class=&quot;ruby&quot;&gt;-Djdk&lt;span class=&quot;hljs-class&quot;&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;module&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;illegalAccess&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;silent&lt;/span&gt;=&lt;span class=&quot;hljs-title&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后：&lt;br&gt;分别把&lt;strong&gt;内存&lt;/strong&gt;的参数 &lt;strong&gt;128m&lt;/strong&gt; 和 &lt;strong&gt;750m&lt;/strong&gt; 改成你想要改的就可以了，我是分别改成了 &lt;strong&gt;1024m&lt;/strong&gt; 和 &lt;strong&gt;2048m&lt;/strong&gt;，之后如果还卡，再往大了调，可以根据自己电脑的实际内存设置。&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/evane1890/article/details/78941968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM调优常用参数&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="小技巧" scheme="https://melodyjerry.github.io/blog/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="IDEA" scheme="https://melodyjerry.github.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>宝塔同IP或同域名不同端口分别对应不同网站教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/09/05/%E5%AE%9D%E5%A1%94%E5%90%8CIP%E6%88%96%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/09/05/%E5%AE%9D%E5%A1%94%E5%90%8CIP%E6%88%96%E5%90%8C%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E5%88%86%E5%88%AB%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-05T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:03.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>IP</p></li><li><p>服务器端放行所需端口</p></li><li><p>安装好的宝塔面板。</p></li></ul><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>192.168.1.666:80 站点一指向A项目</p><p>192.168.1.666:8081 站点二指向B项目</p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>1） 新建一个站点指向项目A</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514113737124-1200219923.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 2）再次添加一个站点指向项目B</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114000175-1939839843.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 提交之后打开设置</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114036225-1680296715.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 修改配置文件如下图：</p><p><img src="https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114317948-567330049.png" srcset="/blog/img/loading.gif" alt="img"></p><p> 提交之后，切记一定要重启nginx，然后即打开站点就可以看到内容</p><p>照此可添加多个</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器端放行所需端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装好的宝塔面板。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h1&gt;&lt;p&gt;192.168.1.666:80 站点一指向A项目&lt;/p&gt;
&lt;p&gt;192.168.1.666:8081 站点二指向B项目&lt;/p&gt;
&lt;h1 id=&quot;具体步骤&quot;&gt;&lt;a href=&quot;#具体步骤&quot; class=&quot;headerlink&quot; title=&quot;具体步骤&quot;&gt;&lt;/a&gt;具体步骤&lt;/h1&gt;&lt;p&gt;1） 新建一个站点指向项目A&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514113737124-1200219923.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 2）再次添加一个站点指向项目B&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114000175-1939839843.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 提交之后打开设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114036225-1680296715.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 修改配置文件如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/1137058/202005/1137058-20200514114317948-567330049.png&quot; srcset=&quot;/blog/img/loading.gif&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt; 提交之后，切记一定要重启nginx，然后即打开站点就可以看到内容&lt;/p&gt;
&lt;p&gt;照此可添加多个&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/29/Git%E7%AC%94%E8%AE%B0/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/29/Git%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-29T13:00:00.000Z</published>
    <updated>2020-09-18T04:43:02.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h1><h4 id="在当前目录下初始化一个空的git仓库"><a href="#在当前目录下初始化一个空的git仓库" class="headerlink" title="在当前目录下初始化一个空的git仓库"></a>在当前目录下初始化一个空的git仓库</h4><ul><li><code>git init</code></li></ul><h4 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱"></a>设置全局用户名和邮箱</h4><ul><li><code>git config --global user.name "name"</code></li><li><code>git config --global user.email "xxxxx@email.com"</code></li><li><code>git config user.name</code> 查看git用户名</li><li><code>git config user.email</code> 查看邮箱配置</li></ul><h4 id="查看git配置"><a href="#查看git配置" class="headerlink" title="查看git配置"></a>查看git配置</h4><ul><li><code>git config --list</code></li></ul><h4 id="提交修改到暂存区"><a href="#提交修改到暂存区" class="headerlink" title="提交修改到暂存区"></a>提交修改到暂存区</h4><ul><li><code>git add -A</code> 提交全部修改。（git add -All）</li><li><code>git add -u</code> 只提交修改，不提交新文件。（git add -update)</li><li><code>git add .</code> 不提交删除文件</li><li><code>git add &lt;filename&gt;</code> 提交指定文件</li></ul><h4 id="查看暂存区"><a href="#查看暂存区" class="headerlink" title="查看暂存区"></a>查看暂存区</h4><ul><li><code>git status</code></li></ul><h4 id="修改最新提交的-commit-message"><a href="#修改最新提交的-commit-message" class="headerlink" title="修改最新提交的 commit message"></a>修改最新提交的 commit message</h4><ul><li><code>git commit --amend</code></li></ul><h4 id="修改某个提交的-commit-message"><a href="#修改某个提交的-commit-message" class="headerlink" title="修改某个提交的 commit message"></a>修改某个提交的 commit message</h4><ul><li><code>git commit -i &lt;commit id&gt;</code> commit id 为要修改的目标 commit 的父亲 commit id</li></ul><h4 id="合并连续的commit"><a href="#合并连续的commit" class="headerlink" title="合并连续的commit"></a>合并连续的commit</h4><ul><li><code>git rebase -i &lt;commit id&gt;</code> commit id 为目标commit的父亲commit id</li></ul><h4 id="提交修改到本地仓库"><a href="#提交修改到本地仓库" class="headerlink" title="提交修改到本地仓库"></a>提交修改到本地仓库</h4><ul><li><code>git commit -m 'msg'</code> 提交暂存区到本地仓库</li><li><code>git commit -a -m 'msg'</code> 提交修改到本地仓库（不提交新增文件）</li></ul><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><ul><li><code>git log</code></li></ul><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><ul><li><code>git remote add &lt;name&gt; &lt;url&gt;</code></li></ul><h4 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h4><ul><li><code>git remote show &lt;name&gt;</code></li></ul><h4 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h4><ul><li><code>git remote rm &lt;remote_name&gt;</code></li><li><code>git remote rename &lt;old_name&gt; &lt;new_name&gt;</code></li></ul><h4 id="拉取远程仓库数据到本地"><a href="#拉取远程仓库数据到本地" class="headerlink" title="拉取远程仓库数据到本地"></a>拉取远程仓库数据到本地</h4><ul><li><code>git pull &lt;remote_name&gt; &lt;branch_name&gt;</code></li></ul><h4 id="提交本地仓库到远程仓库"><a href="#提交本地仓库到远程仓库" class="headerlink" title="提交本地仓库到远程仓库"></a>提交本地仓库到远程仓库</h4><ul><li><code>git push &lt;remote_name&gt; &lt;branch_name&gt;</code></li></ul><h4 id="查看-amp-创建-amp-切换分支"><a href="#查看-amp-创建-amp-切换分支" class="headerlink" title="查看&amp;创建&amp;切换分支"></a>查看&amp;创建&amp;切换分支</h4><ul><li><code>git branch</code> 查看已有分支</li><li><code>git branch -v</code> 查看已有分支及各个分支最后一个提交对象的信息</li><li><code>git branch &lt;branch_name&gt;</code> 创建新的空分支</li><li><code>git branch &lt;branch_name&gt; &lt;exist_branch_name&gt;</code> 创建新分支</li><li><code>git checkout -b &lt;branch_name&gt; &lt;exist_branch_name&gt;</code> 创建并切换到新分支</li><li><code>git checkout &lt;branch_name&gt;</code> 切换分支</li></ul><h4 id="删除-amp-合并分支"><a href="#删除-amp-合并分支" class="headerlink" title="删除&amp;合并分支"></a>删除&amp;合并分支</h4><ul><li><code>git branch -D &lt;branch_name&gt;</code> 删除分支</li><li><code>git merge &lt;branch_name&gt;</code> 当前分支合并到指定分支</li></ul><h4 id="暂存区恢复到HEAD"><a href="#暂存区恢复到HEAD" class="headerlink" title="暂存区恢复到HEAD"></a>暂存区恢复到HEAD</h4><ul><li><code>git reset HEAD</code></li><li><code>git reset HEAD &lt;file_name&gt;</code></li></ul><h4 id="工作区恢复到暂存区"><a href="#工作区恢复到暂存区" class="headerlink" title="工作区恢复到暂存区"></a>工作区恢复到暂存区</h4><ul><li><code>git checkout -- &lt;file_name&gt;</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git笔记&quot;&gt;&lt;a href=&quot;#Git笔记&quot; class=&quot;headerlink&quot; title=&quot;Git笔记&quot;&gt;&lt;/a&gt;Git笔记&lt;/h1&gt;&lt;h4 id=&quot;在当前目录下初始化一个空的git仓库&quot;&gt;&lt;a href=&quot;#在当前目录下初始化一个空的git仓库&quot; cla
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="https://melodyjerry.github.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[转]Maven中静态资源和字节码文件的过滤</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/29/[%E8%BD%AC]Maven%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E6%BB%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/29/[%E8%BD%AC]Maven%E4%B8%AD%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8C%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E6%BB%A4/</id>
    <published>2020-08-29T13:00:00.000Z</published>
    <updated>2020-09-18T04:43:03.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文的方法是针对Maven管理的Java Web工程</p></blockquote><a id="more"></a><h2 id="静态资源的过滤"><a href="#静态资源的过滤" class="headerlink" title="静态资源的过滤"></a>静态资源的过滤</h2><p>在maven中，静态资源的过滤使用基本上大家都知道，只需要在<code>&lt;build&gt;&lt;/build&gt;</code>中使用<code>resources</code>标签即可，示例如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>1234567891011</code></pre></div><p>在静态资源的过滤中，基本的元素有三种：</p><ul><li><code>directory</code>：指定资源所在的目录，这个目录的路径是相对于pom.xml文件；</li><li><code>includes</code>：指定要包含哪些文件，其中包括inlcude子节点来指定匹配的模式；</li><li><code>excludes</code>：指定要排除哪些文件，其中包括exclude子节点来指定匹配的模式；</li><li><code>filtering</code>：指定哪些文件需要过滤，这个过滤的目的是为了替换其中的占位符<code>${}</code>，其中的占位符属性在pom.xml文件中的<code>&lt;properties&gt;&lt;/properties&gt;</code>中指定；</li></ul><p>在其中可能遇到的问题如下：</p><ul><li>当includes和excludes冲突的时候，优先采取excludes中的设定，<a href="http://blog.csdn.net/bluishglc/article/details/6640889" target="_blank" rel="noopener">这篇文章</a>中详细的说明了，<a href="http://bylijinnan.iteye.com/blog/2298100" target="_blank" rel="noopener">这篇文章</a>从源码角度进行了分析；</li></ul><h2 id="字节码文件的过滤"><a href="#字节码文件的过滤" class="headerlink" title="字节码文件的过滤"></a>字节码文件的过滤</h2><p>相对于静态资源的过滤，针对字节码文件的过滤则比较生僻，尤其是在配置文件基本上都是<code>xml</code>或者<code>properties</code>的时候，如果你的工程的配置是Java Config风格的，那么就会遇到在不同的环境下加载不同的配置类的问题。不同于静态的配置文件直接使用<code>&lt;resources&gt;</code>标签（其实背后还是通过resource插件完成的），字节码的过滤需要直接使用<code>maven-war-plugin</code> ，实例如下：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">packagingExcludes</span>&gt;</span>WEB-INF/classes/test/dao/,         WEB-INF/classes/test/service/,         WEB-INF/classes/config/TestConfig.class,         WEB-INF/lib/log4j-*.jar      <span class="hljs-tag">&lt;/<span class="hljs-name">packagingExcludes</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>123456789101112</code></pre></div><p>从上面可以看到，该插件是通过<code>packagingExcludes</code>元素完成过滤的，这个元素的作用是在工程package之前， 通过一些模式来排除掉一些文件或者文件夹，如果有多个可以通过逗号“,”来分割，上述使用的例子：</p><ul><li>排除特定配置类：<code>WEB-INF/classes/config/TestConfig.class</code></li><li>排除特定文件夹：<code>WEB-INF/classes/test/service/</code></li><li>排除引用的jar包：<code>WEB-INF/lib/log4j-*.jar</code></li></ul><p>上述使用的路径是<strong>相对于war包的根路径的</strong>。</p><p>另外在<code>packagingExcludes</code>中还可以使用Java的正则表达式，通过<code>%regex[...]</code>包裹即可，具体可以看<a href="https://maven.apache.org/plugins/maven-war-plugin/examples/including-excluding-files-from-war.html" target="_blank" rel="noopener">官方文档</a> .</p><hr><p>转载链接：<a href="https://blog.csdn.net/lmy86263/article/details/71189485?locationNum=3&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/lmy86263/article/details/71189485?locationNum=3&amp;fps=1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文的方法是针对Maven管理的Java Web工程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Maven" scheme="https://melodyjerry.github.io/blog/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>[转]curl教程</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/28/curl%E6%95%99%E7%A8%8B/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/28/curl%E6%95%99%E7%A8%8B/</id>
    <published>2020-08-28T04:11:11.000Z</published>
    <updated>2020-09-18T04:43:03.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="curl-的用法指南"><a href="#curl-的用法指南" class="headerlink" title="curl 的用法指南"></a>curl 的用法指南</h1><p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p><img src="https://www.wangbase.com/blogimg/asset/201909/bg2019090501.jpg" srcset="/blog/img/loading.gif" alt="img"></p><p>本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自<a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">《curl cookbook》</a>。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的<a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">《curl 初学者教程》</a>。</p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl https://www.example.com</code></pre></div></blockquote><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="A"><a href="#A" class="headerlink" title="-A"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span> https://google.com</code></pre></div></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -A <span class="hljs-string">''</span> https://google.com</code></pre></div></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'User-Agent: php/1.0'</span> https://google.com</code></pre></div></blockquote><h2 id="b"><a href="#b" class="headerlink" title="-b"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">'foo=bar'</span> https://google.com</code></pre></div></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b <span class="hljs-string">'foo1=bar;foo2=bar2'</span> https://google.com</code></pre></div></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -b cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="c"><a href="#c" class="headerlink" title="-c"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -c cookies.txt https://www.google.com</code></pre></div></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="d"><a href="#d" class="headerlink" title="-d"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d<span class="hljs-string">'login=emma＆password=123'</span>-X POST https://google.com/login<span class="hljs-comment"># 或者</span>$ curl -d <span class="hljs-string">'login=emma'</span> -d <span class="hljs-string">'password=123'</span> -X POST  https://google.com/login</code></pre></div></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">'@data.txt'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --data-urlencode <span class="hljs-string">'comment=hello world'</span> https://google.com/login</code></pre></div></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="e"><a href="#e" class="headerlink" title="-e"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><div class="hljs"><pre><code class="hljs bash">curl -e <span class="hljs-string">'https://google.com?q=example'</span> https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><div class="hljs"><pre><code class="hljs bash">curl -H <span class="hljs-string">'Referer: https://google.com?q=example'</span> https://www.example.com</code></pre></div></blockquote><h2 id="F"><a href="#F" class="headerlink" title="-F"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png;type=image/png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -F <span class="hljs-string">'file=@photo.png;filename=me.png'</span> https://google.com/profile</code></pre></div></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="G"><a href="#G" class="headerlink" title="-G"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -G -d <span class="hljs-string">'q=kitties'</span> -d <span class="hljs-string">'count=20'</span> https://google.com/search</code></pre></div></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -G --data-urlencode <span class="hljs-string">'comment=hello world'</span> https://www.example.com</code></pre></div></blockquote><h2 id="H"><a href="#H" class="headerlink" title="-H"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'Accept-Language: en-US'</span> https://google.com</code></pre></div></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -H <span class="hljs-string">'Accept-Language: en-US'</span> -H <span class="hljs-string">'Secret-Message: xyzzy'</span> https://google.com</code></pre></div></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -d <span class="hljs-string">'{"login": "emma", "pass": "123"}'</span> -H <span class="hljs-string">'Content-Type: application/json'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="i"><a href="#i" class="headerlink" title="-i"></a><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -i https://www.example.com</code></pre></div></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="I"><a href="#I" class="headerlink" title="-I"></a><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -I https://www.example.com</code></pre></div></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --head https://www.example.com</code></pre></div></blockquote><h2 id="k"><a href="#k" class="headerlink" title="-k"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -k https://www.example.com</code></pre></div></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="L"><a href="#L" class="headerlink" title="-L"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -L -d <span class="hljs-string">'tweet=hi'</span> https://api.twitter.com/tweet</code></pre></div></blockquote><h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a><strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --<span class="hljs-built_in">limit</span>-rate 200k https://google.com</code></pre></div></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o"><a href="#o" class="headerlink" title="-o"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -o example.html https://www.example.com</code></pre></div></blockquote><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="O"><a href="#O" class="headerlink" title="-O"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -O https://www.example.com/foo/bar.html</code></pre></div></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="s"><a href="#s" class="headerlink" title="-s"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s https://www.example.com</code></pre></div></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><h2 id="S"><a href="#S" class="headerlink" title="-S"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -s -o /dev/null https://google.com</code></pre></div></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2 id="u"><a href="#u" class="headerlink" title="-u"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">'bob:12345'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl https://bob:12345@google.com/login</code></pre></div></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -u <span class="hljs-string">'bob'</span> https://google.com/login</code></pre></div></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v"><a href="#v" class="headerlink" title="-v"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -v https://www.example.com</code></pre></div></blockquote><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl --trace - https://www.example.com</code></pre></div></blockquote><h2 id="x"><a href="#x" class="headerlink" title="-x"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</code></pre></div></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="X"><a href="#X" class="headerlink" title="-X"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><div class="hljs"><pre><code class="hljs bash">$ curl -X POST https://www.example.com</code></pre></div></blockquote><p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://catonmat.net/cookbooks/curl" target="_blank" rel="noopener">Curl Cookbook</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;curl-的用法指南&quot;&gt;&lt;a href=&quot;#curl-的用法指南&quot; class=&quot;headerlink&quot; title=&quot;curl 的用法指南&quot;&gt;&lt;/a&gt;curl 的用法指南&lt;/h1&gt;&lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java中编译器自动进行的强制类型转换</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/Java%E4%B8%AD%E7%BC%96%E8%AF%91%E5%99%A8%E8%87%AA%E5%8A%A8%E8%BF%9B%E8%A1%8C%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/Java%E4%B8%AD%E7%BC%96%E8%AF%91%E5%99%A8%E8%87%AA%E5%8A%A8%E8%BF%9B%E8%A1%8C%E7%9A%84%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-08-27T09:24:41.000Z</published>
    <updated>2020-09-18T04:43:02.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h2><p>一般规律：<strong>小类型向大类型可以自动类型转换，而大类型向小类型转换，需要手动的强制类型转换。</strong></p><p><strong>注意：<br>1.类型的大小不是按字节大小区分的</strong>，而是按照它的范围来定的，比如</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">long</span> long1 = <span class="hljs-number">300F</span>;<span class="hljs-comment">//报错，编译无法通过</span><span class="hljs-keyword">float</span> float1 = <span class="hljs-number">300L</span>;<span class="hljs-comment">//编译可以通过，并且可以正常运行</span></code></pre></div><p>long占八个字节，float占四个字节，但实际上float表示的范围要比long更大，（这主要是底层采用存储方式不同造成的）所以long类型的常量可以赋值给float类型的变量，而反过来却不行。<br><strong>2.这个规则也可以用在引用数据类型上</strong>，如果是引用类型，类型的大小则由他们的继承或实现关系来决定。</p><h2 id="关于自动java中编译器做的自动强制类型转换"><a href="#关于自动java中编译器做的自动强制类型转换" class="headerlink" title="关于自动java中编译器做的自动强制类型转换"></a>关于自动java中编译器做的自动强制类型转换</h2><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> byte1 = <span class="hljs-number">1</span>;<span class="hljs-keyword">short</span> short1 = <span class="hljs-number">2</span>;<span class="hljs-keyword">char</span> char1 = <span class="hljs-number">3</span>;</code></pre></div><p>类似上面的代码，相信大家都写过，实际上，也能编译通过，并且正常运行。但是，如果作为初学者，不应该有疑惑吗？<strong>java中的整型常量是int类型的</strong>，将一个int类型的常量，赋值给byte、short或char类型的变量，却不会报错？？不是小类型才可以进行自动类型转换转为大类型的吗？大类型的转小类型需要进行强制类型转换，并且可能会损失精度的。这里是为什么呢？</p><p>其实是java中有一种机制：<strong>只要一个int类型的常量，在byte、short或char类型的范围之类的，就可以直接赋值给byte、short或char的变量</strong>，检查工作是java的编译器自动进行的。</p><p><strong>注意：</strong><br><strong>1.只能是常量，不能是变量或变量参与运算的表达式</strong>。</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> byte1 = <span class="hljs-number">1</span>;<span class="hljs-keyword">short</span> short1 = <span class="hljs-number">2</span>;<span class="hljs-keyword">char</span> char1 = <span class="hljs-number">3</span>;<span class="hljs-keyword">int</span> int1 = <span class="hljs-number">3</span>；<span class="hljs-keyword">short</span> short2 = byte1 + <span class="hljs-number">1</span>;<span class="hljs-comment">//报错，编译无法通过</span><span class="hljs-keyword">short</span> short3 = int1;<span class="hljs-comment">//报错，编译无法通过</span><span class="hljs-keyword">short</span> short4 = <span class="hljs-number">3</span>;<span class="hljs-comment">//编译通过，并且可以正常运行</span></code></pre></div><p>因为java编译器只会自动检测字面常量是否超出了类型的范围，而不会对变量的值或有变量参与的运算结果进行检测。<br>“short short2 = byte1 + 1;”在做运算的时候，会自动上升为int类型，然后编译器就会检测到结果是一个int类型的值，而前面的变量是一个short类型的。不是小类型转大类型，所以直接编译报错。<br>“short short3 = int1;” 直接通过变量的类型就有问题，而不会通过上下文来判断值是否超出了范围。</p><p><strong>2.对于纯常量的表达式，也是可以的</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">short</span> short4 = <span class="hljs-number">1</span> + <span class="hljs-number">2</span>;<span class="hljs-comment">//编译通过，并且可以正常运行</span></code></pre></div><p>因为简单的常量表达式，java的编译器可以直接就运算出结果，然后再进一步检测是否超出了范围。</p><p><strong>3.这个机制只是针对int转byte、short或char</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">float</span> float1 = <span class="hljs-number">3.14</span>;<span class="hljs-comment">//报错，编译无法通过</span></code></pre></div><p>对于其它的基本数据类型或引用数据类型，是没有这个机制的，只能使用文章开头说的一般规律。<br>其它一些简单的测试，比如超出范围就会编译报错.</p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于类型转换&quot;&gt;&lt;a href=&quot;#关于类型转换&quot; class=&quot;headerlink&quot; title=&quot;关于类型转换&quot;&gt;&lt;/a&gt;关于类型转换&lt;/h2&gt;&lt;p&gt;一般规律：&lt;strong&gt;小类型向大类型可以自动类型转换，而大类型向小类型转换，需要手动的强制类型转换。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;br&gt;1.类型的大小不是按字节大小区分的&lt;/strong&gt;，而是按照它的范围来定的，比如&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;long&lt;/span&gt; long1 = &lt;span class=&quot;hljs-number&quot;&gt;300F&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt; float1 = &lt;span class=&quot;hljs-number&quot;&gt;300L&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//编译可以通过，并且可以正常运行&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;long占八个字节，float占四个字节，但实际上float表示的范围要比long更大，（这主要是底层采用存储方式不同造成的）所以long类型的常量可以赋值给float类型的变量，而反过来却不行。&lt;br&gt;&lt;strong&gt;2.这个规则也可以用在引用数据类型上&lt;/strong&gt;，如果是引用类型，类型的大小则由他们的继承或实现关系来决定。&lt;/p&gt;
&lt;h2 id=&quot;关于自动java中编译器做的自动强制类型转换&quot;&gt;&lt;a href=&quot;#关于自动java中编译器做的自动强制类型转换&quot; class=&quot;headerlink&quot; title=&quot;关于自动java中编译器做的自动强制类型转换&quot;&gt;&lt;/a&gt;关于自动java中编译器做的自动强制类型转换&lt;/h2&gt;&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt; byte1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short1 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt; char1 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;类似上面的代码，相信大家都写过，实际上，也能编译通过，并且正常运行。但是，如果作为初学者，不应该有疑惑吗？&lt;strong&gt;java中的整型常量是int类型的&lt;/strong&gt;，将一个int类型的常量，赋值给byte、short或char类型的变量，却不会报错？？不是小类型才可以进行自动类型转换转为大类型的吗？大类型的转小类型需要进行强制类型转换，并且可能会损失精度的。这里是为什么呢？&lt;/p&gt;
&lt;p&gt;其实是java中有一种机制：&lt;strong&gt;只要一个int类型的常量，在byte、short或char类型的范围之类的，就可以直接赋值给byte、short或char的变量&lt;/strong&gt;，检查工作是java的编译器自动进行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;1.只能是常量，不能是变量或变量参与运算的表达式&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt; byte1 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short1 = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt; char1 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; int1 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;；

&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short2 = byte1 + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short3 = int1;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short4 = &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//编译通过，并且可以正常运行&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为java编译器只会自动检测字面常量是否超出了类型的范围，而不会对变量的值或有变量参与的运算结果进行检测。&lt;br&gt;“short short2 = byte1 + 1;”在做运算的时候，会自动上升为int类型，然后编译器就会检测到结果是一个int类型的值，而前面的变量是一个short类型的。不是小类型转大类型，所以直接编译报错。&lt;br&gt;“short short3 = int1;” 直接通过变量的类型就有问题，而不会通过上下文来判断值是否超出了范围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.对于纯常量的表达式，也是可以的&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;short&lt;/span&gt; short4 = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//编译通过，并且可以正常运行&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为简单的常量表达式，java的编译器可以直接就运算出结果，然后再进一步检测是否超出了范围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.这个机制只是针对int转byte、short或char&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;float&lt;/span&gt; float1 = &lt;span class=&quot;hljs-number&quot;&gt;3.14&lt;/span&gt;;&lt;span class=&quot;hljs-comment&quot;&gt;//报错，编译无法通过&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;对于其它的基本数据类型或引用数据类型，是没有这个机制的，只能使用文章开头说的一般规律。&lt;br&gt;其它一些简单的测试，比如超出范围就会编译报错.&lt;/p&gt;
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="Java" scheme="https://melodyjerry.github.io/blog/tags/Java/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux运维常用的150条命令</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E7%9A%84150%E6%9D%A1%E5%91%BD%E4%BB%A4/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E7%9A%84150%E6%9D%A1%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-27T06:00:00.000Z</published>
    <updated>2020-09-18T04:43:02.970Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>功能说明</th></tr></thead><tbody><tr><td>线上查询及帮助命令(2个)</td><td></td></tr><tr><td>man</td><td>查看命令帮助，命令的词典，更复杂的还有info，但不常用。</td></tr><tr><td>help</td><td>查看Linux内置命令的帮助，比如cd命令。</td></tr><tr><td>文件和目录操作命令(18个)</td><td></td></tr><tr><td>ls</td><td>全拼list，功能是列出目录的内容及其内容属性信息。</td></tr><tr><td>cd</td><td>全拼change directory，功能是从当前工作目录切换到指定的工作目录。</td></tr><tr><td>cp</td><td>全拼copy，其功能为复制文件或目录。</td></tr><tr><td>find</td><td>查找的意思，用于查找目录及目录下的文件。</td></tr><tr><td>mkdir</td><td>全拼make directories，其功能是创建目录。</td></tr><tr><td>mv</td><td>全拼move，其功能是移动或重命名文件。</td></tr><tr><td>pwd</td><td>全拼print working directory，其功能是显示当前工作目录的绝对路径。</td></tr><tr><td>rename</td><td>用于重命名文件。</td></tr><tr><td>rm</td><td>全拼remove，其功能是删除一个或多个文件或目录。</td></tr><tr><td>rmdir</td><td>全拼remove empty directories，功能是删除空目录。</td></tr><tr><td>touch</td><td>创建新的空文件，改变已有文件的时间戳属性。</td></tr><tr><td>tree</td><td>功能是以树形结构显示目录下的内容。</td></tr><tr><td>basename</td><td>显示文件名或目录名。</td></tr><tr><td>dirname</td><td>显示文件或目录路径。</td></tr><tr><td>chattr</td><td>改变文件的扩展属性。</td></tr><tr><td>lsattr</td><td>查看文件扩展属性。</td></tr><tr><td>file</td><td>显示文件的类型。</td></tr><tr><td>md5sum</td><td>计算和校验文件的MD5值。</td></tr><tr><td>查看文件及内容处理命令（21个）</td><td></td></tr><tr><td>cat</td><td>全拼concatenate，功能是用于连接多个文件并且打印到屏幕输出或重定向到指定文件中。</td></tr><tr><td>tac</td><td>tac是cat的反向拼写，因此命令的功能为反向显示文件内容。</td></tr><tr><td>more</td><td>分页显示文件内容。</td></tr><tr><td>less</td><td>分页显示文件内容，more命令的相反用法。</td></tr><tr><td>head</td><td>显示文件内容的头部。</td></tr><tr><td>tail</td><td>显示文件内容的尾部。</td></tr><tr><td>cut</td><td>将文件的每一行按指定分隔符分割并输出。</td></tr><tr><td>split</td><td>分割文件为不同的小片段。</td></tr><tr><td>paste</td><td>按行合并文件内容。</td></tr><tr><td>sort</td><td>对文件的文本内容排序。</td></tr><tr><td>uniq</td><td>去除重复行。oldboy</td></tr><tr><td>wc</td><td>统计文件的行数、单词数或字节数。</td></tr><tr><td>iconv</td><td>转换文件的编码格式。</td></tr><tr><td>dos2unix</td><td>将DOS格式文件转换成UNIX格式。</td></tr><tr><td>diff</td><td>全拼difference，比较文件的差异，常用于文本文件。</td></tr><tr><td>vimdiff</td><td>命令行可视化文件比较工具，常用于文本文件。</td></tr><tr><td>rev</td><td>反向输出文件内容。</td></tr><tr><td>grep/egrep</td><td>过滤字符串，三剑客老三。</td></tr><tr><td>join</td><td>按两个文件的相同字段合并。</td></tr><tr><td>tr</td><td>替换或删除字符。</td></tr><tr><td>vi/vim</td><td>命令行文本编辑器。</td></tr><tr><td>文件压缩及解压缩命令（4个）</td><td></td></tr><tr><td>tar</td><td>打包压缩。oldboy</td></tr><tr><td>unzip</td><td>解压文件。</td></tr><tr><td>gzip</td><td>gzip压缩工具。</td></tr><tr><td>zip</td><td>压缩工具。</td></tr><tr><td>信息显示命令（11个）</td><td></td></tr><tr><td>uname</td><td>显示操作系统相关信息的命令。</td></tr><tr><td>hostname</td><td>显示或者设置当前系统的主机名。</td></tr><tr><td>dmesg</td><td>显示开机信息，用于诊断系统故障。</td></tr><tr><td>uptime</td><td>显示系统运行时间及负载。</td></tr><tr><td>stat</td><td>显示文件或文件系统的状态。</td></tr><tr><td>du</td><td>计算磁盘空间使用情况。</td></tr><tr><td>df</td><td>报告文件系统磁盘空间的使用情况。</td></tr><tr><td>top</td><td>实时显示系统资源使用情况。</td></tr><tr><td>free</td><td>查看系统内存。</td></tr><tr><td>date</td><td>显示与设置系统时间。</td></tr><tr><td>cal</td><td>查看日历等时间信息。</td></tr><tr><td>搜索文件命令（4个）</td><td></td></tr><tr><td>which</td><td>查找二进制命令，按环境变量PATH路径查找。</td></tr><tr><td>find</td><td>从磁盘遍历查找文件或目录。</td></tr><tr><td>whereis</td><td>查找二进制命令，按环境变量PATH路径查找。</td></tr><tr><td>locate</td><td>从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用updatedb更新库。</td></tr><tr><td>用户管理命令（10个）</td><td></td></tr><tr><td>useradd</td><td>添加用户。</td></tr><tr><td>usermod</td><td>修改系统已经存在的用户属性。</td></tr><tr><td>userdel</td><td>删除用户。</td></tr><tr><td>groupadd</td><td>添加用户组。</td></tr><tr><td>passwd</td><td>修改用户密码。</td></tr><tr><td>chage</td><td>修改用户密码有效期限。</td></tr><tr><td>id</td><td>查看用户的uid,gid及归属的用户组。</td></tr><tr><td>su</td><td>切换用户身份。</td></tr><tr><td>visudo</td><td>编辑/etc/sudoers文件的专属命令。</td></tr><tr><td>sudo</td><td>以另外一个用户身份（默认root用户）执行事先在sudoers文件允许的命令。</td></tr><tr><td>基础网络操作命令（11个）</td><td></td></tr><tr><td>telnet</td><td>使用TELNET协议远程登录。</td></tr><tr><td>ssh</td><td>使用SSH加密协议远程登录。</td></tr><tr><td>scp</td><td>全拼secure copy，用于不同主机之间复制文件。</td></tr><tr><td>wget</td><td>命令行下载文件。</td></tr><tr><td>ping</td><td>测试主机之间网络的连通性。</td></tr><tr><td>route</td><td>显示和设置linux系统的路由表。</td></tr><tr><td>ifconfig</td><td>查看、配置、启用或禁用网络接口的命令。</td></tr><tr><td>ifup</td><td>启动网卡。</td></tr><tr><td>ifdown</td><td>关闭网卡。</td></tr><tr><td>netstat</td><td>查看网络状态。</td></tr><tr><td>ss</td><td>查看网络状态。</td></tr><tr><td>深入网络操作命令（9个）</td><td></td></tr><tr><td>nmap</td><td>网络扫描命令。</td></tr><tr><td>lsof</td><td>全名list open files，也就是列举系统中已经被打开的文件。</td></tr><tr><td>mail</td><td>发送和接收邮件。</td></tr><tr><td>mutt</td><td>邮件管理命令。</td></tr><tr><td>nslookup</td><td>交互式查询互联网DNS服务器的命令。</td></tr><tr><td>dig</td><td>查找DNS解析过程。</td></tr><tr><td>host</td><td>查询DNS的命令。</td></tr><tr><td>traceroute</td><td>追踪数据传输路由状况。</td></tr><tr><td>tcpdump</td><td>命令行的抓包工具。</td></tr><tr><td>有关磁盘与文件系统的命令（16个）</td><td></td></tr><tr><td>mount</td><td>挂载文件系统。</td></tr><tr><td>umount</td><td>卸载文件系统。</td></tr><tr><td>fsck</td><td>检查并修复Linux文件系统。</td></tr><tr><td>dd</td><td>转换或复制文件。</td></tr><tr><td>dumpe2fs</td><td>导出ext2/ext3/ext4文件系统信息。</td></tr><tr><td>dump</td><td>ext2/3/4文件系统备份工具。</td></tr><tr><td>fdisk</td><td>磁盘分区命令，适用于2TB以下磁盘分区。</td></tr><tr><td>parted</td><td>磁盘分区命令，没有磁盘大小限制，常用于2TB以下磁盘分区。</td></tr><tr><td>mkfs</td><td>格式化创建Linux文件系统。</td></tr><tr><td>partprobe</td><td>更新内核的硬盘分区表信息。</td></tr><tr><td>e2fsck</td><td>检查ext2/ext3/ext4类型文件系统。</td></tr><tr><td>mkswap</td><td>创建Linux交换分区。</td></tr><tr><td>swapon</td><td>启用交换分区。</td></tr><tr><td>swapoff</td><td>关闭交换分区。</td></tr><tr><td>sync</td><td>将内存缓冲区内的数据写入磁盘。</td></tr><tr><td>resize2fs</td><td>调整ext2/ext3/ext4文件系统大小。</td></tr><tr><td>系统权限及用户授权相关命令（4个）</td><td></td></tr><tr><td>chmod</td><td>改变文件或目录权限。</td></tr><tr><td>chown</td><td>改变文件或目录的属主和属组。</td></tr><tr><td>chgrp</td><td>更改文件用户组。</td></tr><tr><td>umask</td><td>显示或设置权限掩码。</td></tr><tr><td>查看系统用户登陆信息的命令（7个）</td><td></td></tr><tr><td>whoami</td><td>显示当前有效的用户名称，相当于执行id -un命令。</td></tr><tr><td>who</td><td>显示目前登录系统的用户信息。</td></tr><tr><td>w</td><td>显示已经登陆系统的用户列表，并显示用户正在执行的指令。</td></tr><tr><td>last</td><td>显示登入系统的用户。</td></tr><tr><td>lastlog</td><td>显示系统中所有用户最近一次登录信息。</td></tr><tr><td>users</td><td>显示当前登录系统的所有用户的用户列表。</td></tr><tr><td>finger</td><td>查找并显示用户信息。</td></tr><tr><td>内置命令及其它（19个）</td><td></td></tr><tr><td>echo</td><td>打印变量，或直接输出指定的字符串</td></tr><tr><td>printf</td><td>将结果格式化输出到标准输出。</td></tr><tr><td>rpm</td><td>管理rpm包的命令。</td></tr><tr><td>yum</td><td>自动化简单化地管理rpm包的命令。</td></tr><tr><td>watch</td><td>周期性的执行给定的命令，并将命令的输出以全屏方式显示。</td></tr><tr><td>alias</td><td>设置系统别名。</td></tr><tr><td>unalias</td><td>取消系统别名。</td></tr><tr><td>date</td><td>查看或设置系统时间。</td></tr><tr><td>clear</td><td>清除屏幕，简称清屏。</td></tr><tr><td>history</td><td>查看命令执行的历史纪录。</td></tr><tr><td>eject</td><td>弹出光驱。</td></tr><tr><td>time</td><td>计算命令执行时间。</td></tr><tr><td>nc</td><td>功能强大的网络工具。</td></tr><tr><td>xargs</td><td>将标准输入转换成命令行参数。</td></tr><tr><td>exec</td><td>调用并执行指令的命令。</td></tr><tr><td>export</td><td>设置或者显示环境变量。</td></tr><tr><td>unset</td><td>删除变量或函数。</td></tr><tr><td>type</td><td>用于判断另外一个命令是否是内置命令。</td></tr><tr><td>bc</td><td>命令行科学计算器</td></tr><tr><td>系统管理与性能监视命令(9个)</td><td></td></tr><tr><td>chkconfig</td><td>管理Linux系统开机启动项。</td></tr><tr><td>vmstat</td><td>虚拟内存统计。</td></tr><tr><td>mpstat</td><td>显示各个可用CPU的状态统计。</td></tr><tr><td>iostat</td><td>统计系统IO。</td></tr><tr><td>sar</td><td>全面地获取系统的CPU、运行队列、磁盘 I/O、分页（交换区）、内存、 CPU中断和网络等性能数据。</td></tr><tr><td>ipcs</td><td>用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息。</td></tr><tr><td>ipcrm</td><td>用来删除一个或更多的消息队列、信号量集或者共享内存标识。</td></tr><tr><td>strace</td><td>用于诊断、调试Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</td></tr><tr><td>ltrace</td><td>命令会跟踪进程的库函数调用,它会显现出哪个库函数被调用。</td></tr><tr><td>关机/重启/注销和查看系统信息的命令（6个）</td><td></td></tr><tr><td>shutdown</td><td>关机。</td></tr><tr><td>halt</td><td>关机。</td></tr><tr><td>poweroff</td><td>关闭电源。</td></tr><tr><td>logout</td><td>退出当前登录的Shell。</td></tr><tr><td>exit</td><td>退出当前登录的Shell。</td></tr><tr><td>Ctrl+d</td><td>退出当前登录的Shell的快捷键。</td></tr><tr><td>进程管理相关命令（15个）</td><td></td></tr><tr><td>bg</td><td>将一个在后台暂停的命令，变成继续执行 （在后台执行）。</td></tr><tr><td>fg</td><td>将后台中的命令调至前台继续运行。</td></tr><tr><td>jobs</td><td>查看当前有多少在后台运行的命令。</td></tr><tr><td>kill</td><td>终止进程。</td></tr><tr><td>killall</td><td>通过进程名终止进程。</td></tr><tr><td>pkill</td><td>通过进程名终止进程。</td></tr><tr><td>crontab</td><td>定时任务命令。</td></tr><tr><td>ps</td><td>显示进程的快照。</td></tr><tr><td>pstree</td><td>树形显示进程。</td></tr><tr><td>nice/renice</td><td>调整程序运行的优先级。</td></tr><tr><td>nohup</td><td>忽略挂起信号运行指定的命令。</td></tr><tr><td>pgrep</td><td>查找匹配条件的进程。</td></tr><tr><td>runlevel</td><td>查看系统当前运行级别。</td></tr><tr><td>init</td><td>切换运行级别。</td></tr><tr><td>service</td><td>启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;功能说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;线上查询及帮助命令(2个)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;man&lt;/td&gt;
&lt;td&gt;查看命令帮
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="服务器" scheme="https://melodyjerry.github.io/blog/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="https://melodyjerry.github.io/blog/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】JavaWeb-文件上传</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91JavaWeb-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91JavaWeb-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-08-27T05:52:05.548Z</published>
    <updated>2020-09-18T04:43:03.045Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下，以免以下几个包导错</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.ProgressListener;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</code></pre></div><p><strong>源码：</strong></p><p>FileSerlvet类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chen;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.ProgressListener;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Servlet implementation class FileSerlvet</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileSerlvet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span><span class="hljs-comment"> *      response)</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><span class="hljs-function"><span class="hljs-keyword">throws</span> ServletException, IOException </span>{<span class="hljs-comment">// TODO Auto-generated method stub</span><span class="hljs-comment">// response.getWriter().append("Served at: ").append(request.getContextPath());</span><span class="hljs-comment">// 判断上传的文件普通表单还是带文件的表单</span><span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) {<span class="hljs-keyword">return</span>;<span class="hljs-comment">//终止方法运行,说明这是一个普通的表单,直接返回</span>}    <span class="hljs-comment">//创建上传文件的保存路径,建议在WEB-INF路径下,安全,用户无法直接访间上传的文件;</span>    String uploadPath =<span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/upload"</span>);    File uploadFile = <span class="hljs-keyword">new</span> File(uploadPath);    <span class="hljs-keyword">if</span> (!uploadFile.exists()){    uploadFile.mkdir(); <span class="hljs-comment">//创建这个月录</span>    }<span class="hljs-comment">// 创建上传文件的保存路径，建议在WEB-INF路径下，安全，用户无法直接访问上传的文件</span>String tmpPath = <span class="hljs-keyword">this</span>.getServletContext().getRealPath(<span class="hljs-string">"/WEB-INF/tmp"</span>);File file = <span class="hljs-keyword">new</span> File(tmpPath);<span class="hljs-keyword">if</span> (!file.exists()) {file.mkdir();<span class="hljs-comment">//创建临时目录</span>}<span class="hljs-comment">// 处理上传的文件,一般都需要通过流来获取,我们可以使用 request, getInputstream(),原生态的文件上传流获取,十分麻烦</span><span class="hljs-comment">// 但是我们都建议使用 Apache的文件上传组件来实现, common-fileupload,它需要旅 commons-io组件;</span><span class="hljs-keyword">try</span> {<span class="hljs-comment">// 创建DiskFileItemFactory对象，处理文件路径或者大小限制</span>DiskFileItemFactory factory = getDiskFileItemFactory(file);<span class="hljs-comment">/*</span><span class="hljs-comment"> * //通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件 factory.setSizeThreshold(1024 *</span><span class="hljs-comment"> * 1024); //缓存区大小为1M factory.setRepository (file);//临时目录的保存目录,需要一个File</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 2、获取ServletFileUpload</span>ServletFileUpload upload = getServletFileUpload(factory);<span class="hljs-comment">// 3、处理上传文件</span><span class="hljs-comment">// 把前端请求解析，封装成FileItem对象，需要从ServletFileUpload对象中获取</span>String msg = uploadParseRequest(upload, request, uploadPath);<span class="hljs-comment">// Servlet请求转发消息</span>System.out.println(msg);<span class="hljs-keyword">if</span>(msg == <span class="hljs-string">"文件上传成功!"</span>) {<span class="hljs-comment">// Servlet请求转发消息</span>request.setAttribute(<span class="hljs-string">"msg"</span>,msg);request.getRequestDispatcher(<span class="hljs-string">"info.jsp"</span>).forward(request, response);}<span class="hljs-keyword">else</span> {msg =<span class="hljs-string">"请上传文件"</span>;request.setAttribute(<span class="hljs-string">"msg"</span>,msg);request.getRequestDispatcher(<span class="hljs-string">"info.jsp"</span>).forward(request, response);}} <span class="hljs-keyword">catch</span> (FileUploadException e) {<span class="hljs-comment">// TODO 自动生成的 catch 块</span>e.printStackTrace();}}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DiskFileItemFactory <span class="hljs-title">getDiskFileItemFactory</span><span class="hljs-params">(File file)</span> </span>{DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<span class="hljs-comment">// 通过这个工厂设置一个缓冲区,当上传的文件大于这个缓冲区的时候,将他放到临时文件中;</span>factory.setSizeThreshold(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<span class="hljs-comment">// 缓冲区大小为1M</span>factory.setRepository(file);<span class="hljs-comment">// 临时目录的保存目录,需要一个file</span><span class="hljs-keyword">return</span> factory;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServletFileUpload <span class="hljs-title">getServletFileUpload</span><span class="hljs-params">(DiskFileItemFactory factory)</span> </span>{ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload(factory);<span class="hljs-comment">// 监听长传进度</span>upload.setProgressListener(<span class="hljs-keyword">new</span> ProgressListener() {<span class="hljs-comment">// pBYtesRead:已读取到的文件大小</span><span class="hljs-comment">// pContextLength:文件大小</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">long</span> pBytesRead, <span class="hljs-keyword">long</span> pContentLength, <span class="hljs-keyword">int</span> pItems)</span> </span>{System.out.println(<span class="hljs-string">"总大小："</span> + pContentLength + <span class="hljs-string">"已上传："</span> + pBytesRead);}});<span class="hljs-comment">// 处理乱码问题</span>upload.setHeaderEncoding(<span class="hljs-string">"UTF-8"</span>);<span class="hljs-comment">// 设置单个文件的最大值</span>upload.setFileSizeMax(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>);<span class="hljs-comment">// 设置总共能够上传文件的大小</span><span class="hljs-comment">// 1024 = 1kb * 1024 = 1M * 10 = 10м</span><span class="hljs-keyword">return</span> upload;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">uploadParseRequest</span><span class="hljs-params">(ServletFileUpload upload, HttpServletRequest request, String uploadPath)</span></span><span class="hljs-function"><span class="hljs-keyword">throws</span> FileUploadException, IOException </span>{String msg = <span class="hljs-string">""</span>;<span class="hljs-comment">// 把前端请求解析，封装成FileItem对象</span>List&lt;FileItem&gt; fileItems = upload.parseRequest(request);<span class="hljs-keyword">for</span> (FileItem fileItem : fileItems) {<span class="hljs-keyword">if</span> (fileItem.isFormField()) {<span class="hljs-comment">// 判断上传的文件是普通的表单还是带文件的表单</span><span class="hljs-comment">// getFieldName指的是前端表单控件的name;</span>String name = fileItem.getFieldName();String value = fileItem.getString(<span class="hljs-string">"UTF-8"</span>); <span class="hljs-comment">// 处理乱码</span>System.out.println(name + <span class="hljs-string">": "</span> + value);} <span class="hljs-keyword">else</span> {<span class="hljs-comment">// 判断它是上传的文件</span><span class="hljs-comment">// ============处理文件==============</span><span class="hljs-comment">// 拿到文件名</span>String uploadFileName = fileItem.getName();System.out.println(<span class="hljs-string">"上传的文件名: "</span> + uploadFileName);<span class="hljs-keyword">if</span> (uploadFileName.trim().equals(<span class="hljs-string">""</span>) || uploadFileName == <span class="hljs-keyword">null</span>) {<span class="hljs-keyword">continue</span>;}<span class="hljs-comment">// 获得上传的文件名/images/girl/paojie.png</span>String fileName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">"/"</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获得文件的后缀名</span>String fileExtName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="hljs-string">"."</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">/*</span><span class="hljs-comment"> * 如果文件后缀名fileExtName不是我们所需要的 就直按return.不处理,告诉用户文件类型不对。</span><span class="hljs-comment"> */</span>System.out.println(<span class="hljs-string">"文件信息[件名: "</span> + fileName + <span class="hljs-string">" ---文件类型"</span> + fileExtName + <span class="hljs-string">"]"</span>);<span class="hljs-comment">// 可以使用UID（唯一识别的通用码),保证文件名唯</span><span class="hljs-comment">// 0UID. randomUUID(),随机生一个唯一识别的通用码;</span>String uuidPath = UUID.randomUUID().toString();<span class="hljs-comment">// ================处理文件完毕==============</span><span class="hljs-comment">// 存到哪? uploadPath</span><span class="hljs-comment">// 文件真实存在的路径realPath</span>String realPath = uploadPath + <span class="hljs-string">"/"</span> + uuidPath;<span class="hljs-comment">// 给每个文件创建一个对应的文件夹</span>File realPathFile = <span class="hljs-keyword">new</span> File(realPath);<span class="hljs-keyword">if</span> (!realPathFile.exists()) {realPathFile.mkdir();}<span class="hljs-comment">// ==============存放地址完毕==============</span><span class="hljs-comment">// 获得文件上传的流</span>InputStream inputStream = fileItem.getInputStream();<span class="hljs-comment">// 创建一个文件输出流</span><span class="hljs-comment">// realPath =真实的文件夹;</span><span class="hljs-comment">// 差了一个文件;加上翰出文件的名产"/"+uuidFileName</span>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(realPath + <span class="hljs-string">"/"</span> + fileName);<span class="hljs-comment">// 创建一个缓冲区</span><span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<span class="hljs-comment">// 判断是否读取完毕</span><span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<span class="hljs-comment">// 如果大于0说明还存在数据;</span><span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) &gt; <span class="hljs-number">0</span>) {fos.write(buffer, <span class="hljs-number">0</span>, len);}<span class="hljs-comment">// 关闭流</span>fos.close();inputStream.close();msg = <span class="hljs-string">"文件上传成功!"</span>;fileItem.delete(); <span class="hljs-comment">// 上传成功,清除临时文件</span><span class="hljs-comment">//=============文件传输完成=============</span>}}<span class="hljs-keyword">return</span> msg;}}</code></pre></div><p>注册xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.chen.FileSerlvet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>upload<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/upload.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span></code></pre></div><p>导入依赖的jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>index.jsp</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> %&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%--</span></span><span class="hljs-tag"><span class="hljs-attr">GET</span>：上传文件大小有限制</span><span class="hljs-tag"><span class="hljs-attr">POST</span>：上传文件大小没有限制</span><span class="hljs-tag"> ${<span class="hljs-attr">pageContext.request.contextPath</span>}</span><span class="hljs-tag"> <span class="hljs-attr">--</span>%&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"upload.do"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>  <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>上传用户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file1"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>info.jsp</p><div class="hljs"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">language</span>=<span class="hljs-string">"java"</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">"text/html;charset=UTF-8"</span>%&gt;</span><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=request.getAttribute("msg")%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下，以免以下几个包导错&lt;/p&gt;
&lt;div class=&quot;hljs&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.apache.commons.fileupload.
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>【狂神说Java】Spring5笔记存档</title>
    <link href="https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91Spring5%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/"/>
    <id>https://melodyjerry.github.io/blog/2020/08/27/%E3%80%90%E7%8B%82%E7%A5%9E%E8%AF%B4Java%E3%80%91Spring5%E7%AC%94%E8%AE%B0%E5%AD%98%E6%A1%A3/</id>
    <published>2020-08-27T05:52:05.530Z</published>
    <updated>2020-09-18T04:43:03.300Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="https://www.bilibili.com/video/BV1WE411d7Dv" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1WE411d7Dv</a></p><hr><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDEwMjUxMzkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br>spring官网： <a href="https://spring.io/projects/spring-framework#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-framework#overview</a></p><p>官方下载： <a href="https://repo.spring.io/release/org/springframework/spring/" target="_blank" rel="noopener">https://repo.spring.io/release/org/springframework/spring/</a></p><p>GitHub： <a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><p>Spring Web MVC： <a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.7.RELEASE" target="_blank" rel="noopener">spring-webmvc最新版</a></p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li>Spring是一个开源的免费框架（容器）！</li><li>Spring是一个轻量级的非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持</li></ul><p>开源免费容器，轻量级非侵入式，控制反转，面向切面，支持事务，支持框架整合</p><p>Spring是一个轻量级的控制反转(IOC)和面向切面(AOP)编程的框架</p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvU3ByaW5nNyVFNSVBNCVBNyVFNiVBOCVBMSVFNSU5RCU5Ny5wbmc?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"></p><h3 id="1-4、扩展"><a href="#1-4、扩展" class="headerlink" title="1.4、扩展"></a>1.4、扩展</h3><p>现代化的java开发 -&gt; 基于Spring的开发</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDEwMzA4MjAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDEwMzE0Mjk1MTQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801031429514"></p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><p>传统的调用</p><ol><li><p>UserDao</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>{<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div></li><li><p>UserDaoImp</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> dao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"默认获取用户数据"</span>);}}</code></pre></div></li><li><p>UserSevice</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;}</code></pre></div></li><li><p>UserServiceImp</p> <div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<span class="hljs-keyword">import</span> dao.UserDao;<span class="hljs-keyword">import</span> dao.UserDaoImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>{UserDao userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{userDao.getUser();}}</code></pre></div></li></ol><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle0;<span class="hljs-keyword">import</span> Service.UserService;<span class="hljs-keyword">import</span> Service.UserServiceImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest0</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">// 用户实际调用的是业务层，dao层他们不需要接触</span>UserService userService = <span class="hljs-keyword">new</span> UserServiceImpl();userService.getUser();}}</code></pre></div><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjI3NDI1ODEucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801122742581"><br>改良：我们使用一个Set接口实现。已经发生了革命性的变化！</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//在Service层的实现类(UserServiceImpl)增加一个Set()方法</span><span class="hljs-comment">//利用set动态实现值的注入！</span><span class="hljs-keyword">private</span> UserDao userDao;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>{    <span class="hljs-keyword">this</span>.userDao = userDao;}</code></pre></div><p>set() 方法实际上是动态改变了 UserDao userDao 的 初始化部分（<strong>new UserDaoImpl()</strong>）</p><p>测试中加上</p><div class="hljs"><pre><code class="hljs java">((UserServiceImpl)userService).setUserDao(<span class="hljs-keyword">new</span> UserDaoImpl());</code></pre></div><ul><li>之前，程序是主动创建对象！<strong>控制权在程序猿手上</strong>！</li><li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！（<strong>主动权在客户手上</strong>）</li></ul><p>本质上解决了问题，程序员不用再去管理对象的创建</p><p>系统的耦合性大大降低，可以更专注在业务的实现上</p><p>这是IOC（控制反转）的原型，反转(理解)：主动权交给了用户</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjI4MDU3NjkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801122805769"></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjM1MTg5NzQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123518974"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvMjAyMDA4MDExMjMyMzUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="img"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjMzNDgyMDcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123348207"><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExMjM0NTA4OTcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801123450897"></p><h2 id="3、HolleSpring"><a href="#3、HolleSpring" class="headerlink" title="3、HolleSpring"></a>3、HolleSpring</h2><p>在父模块中导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>pojo的Hello.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>{<span class="hljs-keyword">private</span> String str;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStr</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> str;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>{<span class="hljs-keyword">this</span>.str = str;}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"Holle [str="</span> + str + <span class="hljs-string">"]"</span>;}}</code></pre></div><p>在resource里面的xml配置</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--在Spring中创建对象，在Spring这些都称为bean</span><span class="hljs-comment">    类型 变量名 = new 类型();</span><span class="hljs-comment">    Holle holle = new Holle();</span><span class="hljs-comment">    </span><span class="hljs-comment">    bean = 对象(holle)</span><span class="hljs-comment">    id = 变量名(holle)</span><span class="hljs-comment">    class = new的对象(new Holle();)</span><span class="hljs-comment">    property 相当于给对象中的属性设值,让str="Spring"</span><span class="hljs-comment">    --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hello"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Hello"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"str"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Spring"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类MyTest</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle1;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> pojo.Hello;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//获取Spring的上下文对象</span>ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);<span class="hljs-comment">//我们的对象下能在都在spring·中管理了，我们要使用，直接取出来就可以了</span>Hello holle = (Hello) context.getBean(<span class="hljs-string">"hello"</span>);System.out.println(holle.toString());}}</code></pre></div><p>核心用set注入，所以必须要有下面的se()方法</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//Hello类</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStr</span><span class="hljs-params">(String str)</span> </span>{<span class="hljs-keyword">this</span>.str = str;}</code></pre></div><p><strong>思考：</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDExNjUxNTYyNTkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200801165156259"><br>IOC：对象由Spring 来创建，管理，装配！</p><p><strong>弹幕评论里面的理解：</strong></p><p>原来这套程序是：你写好菜单买好菜，客人来了自己把菜炒好招待，就相当于你请人吃饭<br>现在这套程序是：你告诉楼下餐厅，你要哪些菜，客人来的时候，餐厅把做好的你需要的菜送上来<br>IoC：炒菜这件事，不再由你自己来做，而是委托给了第三方__餐厅来做</p><p>此时的区别就是，如果我还需要做其他的菜，我不需要自己搞菜谱买材料再做好，而是告诉餐厅，我要什么菜，什么时候要，你做好送来</p><p>.</p><p>在前面第一个module试试引入Spring</p><div class="hljs"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;&lt;beans xmlns=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>       xmlns:xsi=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi:schemaLocation=<span class="hljs-string">"http://www.springframework.org/schema/beans</span><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;    &lt;bean id="userDaomSql" class="dao.UserDaoMysqlImpl"&gt;&lt;/bean&gt;    &lt;bean id=<span class="hljs-string">"userServiceImpl"</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"service.UserServiceImp"</span>&gt;        &lt;!--ref引用spring中已经创建很好的对象--&gt;        &lt;!--value是一个具体的值,基本数据类型--&gt;        &lt;property name=<span class="hljs-string">"userDao"</span> ref=<span class="hljs-string">"userDaomSql"</span>/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre></div><p>第一个module改良后测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle0;<span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> service.UserServiceImpl;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest0</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(<span class="hljs-string">"userServiceImpl"</span>);userServiceImpl.getUser();}}</code></pre></div><p><strong>总结：</strong></p><p>所有的类都要装配的beans.xml 里面；</p><p>所有的bean 都要通过容器去取；</p><p>容器里面取得的bean，拿出来就是一个对象，用对象调用方法即可；</p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><ol><li>使用无参构造创建对象，默认。</li><li>使用有参构造（如下）</li></ol><p>下标赋值</p><p>index指的是有参构造中参数的下标，下标从0开始;</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>类型赋值（不建议使用）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"kuang"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>直接通过参数名（掌握）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"kuang"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 比如参数名是name，则有name="具体值" --&gt;</span></code></pre></div><p>注册bean之后就对象的初始化了（<strong>类似 new 类名()</strong>）</p><p>弹幕评论：</p><p>name方式还需要无参构造和set方法,index和type只需要有参构造</p><p>就算是new 两个对象，也是只有一个实例（<strong>单例模式：全局唯一</strong>）</p><div class="hljs"><pre><code class="hljs java">User user = (User) context.getBean(<span class="hljs-string">"user"</span>);User user2 = (User) context.getBean(<span class="hljs-string">"user"</span>);system.out.println(user == user2)<span class="hljs-comment">//结果为true</span></code></pre></div><p>总结：在配置文件加载的时候，容器(&lt; bean&gt;)中管理的对象就已经初始化了</p><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">alias</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">"userLove"</span>/&gt;</span><span class="hljs-comment">&lt;!-- 使用时</span><span class="hljs-comment">User user2 = (User) context.getBean("userLove");</span><span class="hljs-comment">--&gt;</span></code></pre></div><h3 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--id：bean的唯一标识符，也就是相当于我们学的对象名</span><span class="hljs-comment">class：bean对象所对应的会限定名：包名+类型</span><span class="hljs-comment">name：也是别名，而且name可以同时取多个别名 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"u1 u2,u3;u4"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"chen"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!-- 使用时</span><span class="hljs-comment">User user2 = (User) context.getBean("u1");</span><span class="hljs-comment">--&gt;</span></code></pre></div><h3 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h3><p>import一般用于团队开发使用，它可以将多个配置文件，导入合并为一个</p><p>假设，现在项目中有多个人开发，这三个人复制不同的类开发，不同的类需要注册在不同的bean中，我们可以利<br>用import将所有人的beans.xml合并为一个总的！</p><ul><li><p>张三(beans.xm1)</p></li><li><p>李四(beans2.xm1)</p></li><li><p>王五(beans3.xm1)</p></li><li><p>applicationContext.xml</p>  <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans.xm1"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans2.xml"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"beans3.xm1"</span>/&gt;</span></code></pre></div></li></ul><p><strong>使用的时候，直接使用总的配置就可以了</strong></p><p>弹幕评论：</p><p>按照在总的xml中的导入顺序来进行创建，后导入的会重写先导入的，最终实例化的对象会是后导入xml中的那个</p><h2 id="6、依赖注入（DI）"><a href="#6、依赖注入（DI）" class="headerlink" title="6、依赖注入（DI）"></a>6、依赖注入（DI）</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><p>第4点有提到</p><h3 id="6-2、set方式注入【重点】"><a href="#6-2、set方式注入【重点】" class="headerlink" title="6.2、set方式注入【重点】"></a>6.2、set方式注入【重点】</h3><p>依赖注入：set注入！</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul><p>【环境搭建】</p><ol><li><p>复杂类型</p><p> Address类</p></li><li><p>真实测试对象</p><p> Student类</p></li><li><p>beans.xml</p></li><li><p>测试</p><p> MyTest3</p></li></ol><p>Student类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-meta">@Get</span><span class="hljs-meta">@Set</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>{<span class="hljs-comment">//别忘了写get和set方法（用lombok注解也行）</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Address address;    <span class="hljs-keyword">private</span> String[] books;    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; card;    <span class="hljs-keyword">private</span> Set&lt;String&gt; game;    <span class="hljs-keyword">private</span> Properties infor;    <span class="hljs-keyword">private</span> String wife;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Student{"</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", address="</span> + address.toString() +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", books="</span> + Arrays.toString(books) +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", hobbies="</span> + hobbies +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", card="</span> + card +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", game="</span> + game +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", infor="</span> + infor +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">", wife='"</span> + wife + <span class="hljs-string">'\''</span> +<span class="hljs-string">"\n"</span>+                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>Address类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>{    <span class="hljs-keyword">private</span> String address;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> address;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>{        <span class="hljs-keyword">this</span>.address = address;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"Address{"</span> +                <span class="hljs-string">"address='"</span> + address + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>beans.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Address"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"address你好"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Student"</span>&gt;</span><span class="hljs-comment">&lt;!--第一种，普通值注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"name你好"</span> /&gt;</span><span class="hljs-comment">&lt;!--第二种，ref注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"address"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"address"</span> /&gt;</span><span class="hljs-comment">&lt;!--数组注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"books"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--list列表注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"hobbies"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--map键值对注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"card"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--set(可去重)注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"game"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>wangzhe<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>lol<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>galname<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--空指针null注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"wife"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--properties常量注入 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"infor"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"id"</span>&gt;</span>20200802<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">"name"</span>&gt;</span>cbh<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>MyTest3</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> pojo.Student;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest3</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);Student stu = (Student) context.getBean(<span class="hljs-string">"student"</span>);System.out.println(stu.toString());}}</code></pre></div><h3 id="6-3、拓展注入"><a href="#6-3、拓展注入" class="headerlink" title="6.3、拓展注入"></a>6.3、拓展注入</h3><p>官方文档位置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDI3MTcyMTYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802142717216"></p><p>pojo增加User类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>{        }<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">super</span>();<span class="hljs-keyword">this</span>.name = name;<span class="hljs-keyword">this</span>.id = id;}<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> name;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{<span class="hljs-keyword">this</span>.name = name;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> id;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">this</span>.id = id;}<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"User [name="</span> + name + <span class="hljs-string">", id="</span> + id + <span class="hljs-string">"]"</span>;}}</code></pre></div><p>注意： beans 里面加上这下面两行</p><p>使用p和c命名空间需要导入xml约束</p><p>xmlns:p=“<a href="http://www.springframework.org/schema/p”" target="_blank" rel="noopener">http://www.springframework.org/schema/p”</a><br>xmlns:c=“<a href="http://www.springframework.org/schema/c”" target="_blank" rel="noopener">http://www.springframework.org/schema/c”</a></p><div class="hljs"><pre><code class="hljs xml">?xml version="1.0" encoding="UTF-8"?&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">"http://www.springframework.org/schema/c"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--p命名空间注入/set注入，可以直接注入属性的值-》property--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">p:id</span>=<span class="hljs-string">"20"</span> &gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--c命名空间，通过构造器注入，需要写入有参和无参构造方法-》construct-args--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cbh"</span> <span class="hljs-attr">c:id</span>=<span class="hljs-string">"22"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java">ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"beans.xml"</span>);User user = context.getBean(<span class="hljs-string">"user"</span>,User<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//确定class对象，就不用再强转了</span>System.out.println(user.toString());</code></pre></div><h3 id="6-4、Bean作用域"><a href="#6-4、Bean作用域" class="headerlink" title="6.4、Bean作用域"></a>6.4、Bean作用域</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM0MDExNjUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143401165"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDMzNDI1ODYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143342586"></p><ol><li><p>单例模式（默认）</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"singleton"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM4MDIwMDUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143802005"><br>弹幕评论：单例模式是把对象放在pool中，需要再取出来，使用的都是同一个对象实例</p><ol><li><p>原型模式: 每次从容器中get的时候，都产生一个新对象！</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.User"</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">"cxk"</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">"19"</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"prototype"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div></li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIxNDM4MjYyMjcucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802143826227"></p><ol><li>其余的request、session、application这些只能在web开放中使用！</li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找，并自动给bean装配属性</li></ul><p>在Spring中有三种装配的方式</p><ol><li><p>在xml中显示配置</p></li><li><p>在java中显示配置</p></li><li><p>隐式的自动装配bean 【重要】</p></li><li><p>环境搭建：一个人有两个宠物</p></li><li><p>byType自动装配：byType会自动查找，和自己对象set方法参数的类型相同的bean</p><p> 保证所有的class唯一(类为全局唯一)</p></li><li><p>byName自动装配：byName会自动查找，和自己对象set对应的值对应的id</p><p> 保证所有id唯一，并且和set注入的值一致</p> <div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 找不到id和多个相同class --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat1"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span>找不到 id=cat，且有两个Cat</code></pre></div></li></ol><h3 id="7-1测试：自动装配"><a href="#7-1测试：自动装配" class="headerlink" title="7.1测试：自动装配"></a>7.1测试：自动装配</h3><p>pojo的Cat类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shut</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"miao"</span>);    }}</code></pre></div><p>pojo的Dog类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shut</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"wow"</span>);    }}</code></pre></div><p>pojo的People类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{        <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> Cat <span class="hljs-title">getCat</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> cat;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCat</span><span class="hljs-params">(Cat cat)</span> </span>{        <span class="hljs-keyword">this</span>.cat = cat;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">getDog</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> dog;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDog</span><span class="hljs-params">(Dog dog)</span> </span>{        <span class="hljs-keyword">this</span>.dog = dog;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> name;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{        <span class="hljs-keyword">this</span>.name = name;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>{        <span class="hljs-keyword">return</span> <span class="hljs-string">"People{"</span> +                <span class="hljs-string">"cat="</span> + cat +                <span class="hljs-string">", dog="</span> + dog +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'}'</span>;    }}</code></pre></div><p>xml配置 -&gt; byType 自动装配</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Dog"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--byType会在容器自动查找，和自己对象属性相同的bean</span><span class="hljs-comment">例如，Dog dog; 那么就会查找pojo的Dog类，再进行自动装配</span><span class="hljs-comment">--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.People"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cbh"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>xml配置 -&gt; byName 自动装配</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Cat"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.Dog"</span>/&gt;</span><span class="hljs-comment">&lt;!--byname会在容器自动查找，和自己对象set方法的set后面的值对应的id</span><span class="hljs-comment">  例如:setDog()，取set后面的字符作为id，则要id = dog 才可以进行自动装配</span><span class="hljs-comment">  </span><span class="hljs-comment"> --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"people"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"pojo.People"</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"cbh"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>弹幕评论：byName只能取到小写，大写取不到</p><h3 id="7-2、使用注解实现自动装配"><a href="#7-2、使用注解实现自动装配" class="headerlink" title="7.2、使用注解实现自动装配"></a>7.2、使用注解实现自动装配</h3><p>jdk1.5支持的注解，spring2.5支持的注解</p><p>The introduction of annotation-based configuration raised the question of whether this approach is “better” than XML.（翻译：基于注释的配置的引入提出了一个问题，即这种方法是否比XML“更好”）</p><ol><li>导入context约束</li></ol><p><strong>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context"</a></strong></p><ol><li>配置注解的支持：&lt; context:annotation-config/&gt;</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h4 id="7-2-1、-Autowired"><a href="#7-2-1、-Autowired" class="headerlink" title="7.2.1、@Autowired"></a>7.2.1、@Autowired</h4><p><strong>默认是byType方式，如果匹配不上，就会byName</strong></p><p>在属性上个使用，也可以在set上使用</p><p>我们可以不用编写set方法了，前提是自动装配的属性在Spring容器里，且要符合ByName 自动装配</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><blockquote><p>@Nullable 字段标记了这个注解，说明该字段可以为空</p><p>public name(@Nullable String name){</p><p>}</p></blockquote><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//源码</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Autowired { <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>; }</code></pre></div><p>如果定义了Autowire的require属性为false，说明这个对象可以为null，否则不允许为空（false表示找不到装配，不抛出异常）</p><h4 id="7-2-2、-Autowired-Qualifier"><a href="#7-2-2、-Autowired-Qualifier" class="headerlink" title="7.2.2、@Autowired+@Qualifier"></a>7.2.2、@Autowired+@Qualifier</h4><p><strong>@Autowired不能唯一装配时，需要@Autowired+@Qualifier</strong></p><p>如果@Autowired自动装配环境比较复杂。自动装配无法通过一个注解完成的时候，可以使用@Qualifier(value = “dog”)去配合使用，指定一个唯一的id对象</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Cat cat;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier</span>(value = <span class="hljs-string">"dog"</span>)    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><p>弹幕评论：</p><p>如果xml文件中同一个对象被多个bean使用，Autowired无法按类型找到，可以用@Qualifier指定id查找</p><h4 id="7-2-3、-Resource"><a href="#7-2-3、-Resource" class="headerlink" title="7.2.3、@Resource"></a>7.2.3、@Resource</h4><p><strong>默认是byName方式，如果匹配不上，就会byType</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>{    Resource(name=<span class="hljs-string">"cat"</span>)    <span class="hljs-keyword">private</span> Cat cat;    Resource(name=<span class="hljs-string">"dog"</span>)    <span class="hljs-keyword">private</span> Dog dog;    <span class="hljs-keyword">private</span> String name;}</code></pre></div><p>弹幕评论：</p><p>Autowired是byType，@Autowired+@Qualifier = byType || byName</p><p>Autowired是先byteType,如果唯一則注入，否则byName查找。resource是先byname,不符合再继续byType</p><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><p>@Resource和@Autowired的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】</li><li>@Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li><li>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byname的方式实现</li></ul><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在spring4之后，使用注解开发，必须要保证aop包的导入<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIyMDE5MjQ0OTAucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802201924490"><br>使用注解需要导入contex的约束</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><h3 id="8-1、bean"><a href="#8-1、bean" class="headerlink" title="8.1、bean"></a>8.1、bean</h3><p>弹幕评论：<br>有了&lt; context:component-scan&gt;，另一个&lt; context:annotation-config/&gt;标签可以移除掉，因为已经被包含进去了。</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定要扫描的包，这个包下面的注解才会生效</span><span class="hljs-comment">别只扫一个com.kuang.pojo包--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.kuang"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>1234//@Component 组件//等价于<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"user"</span> <span class="hljs-attr">classs</span>"<span class="hljs-attr">pojo.User</span>"/&gt;</span> @Componentpublic class User {       public String name ="秦疆";}</code></pre></div><h3 id="8-2、属性如何注入-value"><a href="#8-2、属性如何注入-value" class="headerlink" title="8.2、属性如何注入@value"></a>8.2、属性如何注入@value</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{     <span class="hljs-comment">//相当于&lt;property name="name" value="kuangshen"/&gt; </span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)     <span class="hljs-keyword">public</span> String name;         <span class="hljs-comment">//也可以放在set方法上面</span>    <span class="hljs-comment">//@value("kuangshen")</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{         <span class="hljs-keyword">this</span>.name = name;     }}</code></pre></div><h3 id="8-3、衍生的注解"><a href="#8-3、衍生的注解" class="headerlink" title="8.3、衍生的注解"></a>8.3、衍生的注解</h3><p>@Component有几个衍生注解，会按照web开发中，mvc架构中分层。</p><ul><li>dao （@Repository）</li><li>service（@Service）</li><li>controller（@Controller）</li></ul><p><strong>这四个注解的功能是一样的，都是代表将某个类注册到容器中</strong></p><h3 id="8-4、自动装配置"><a href="#8-4、自动装配置" class="headerlink" title="8.4、自动装配置"></a>8.4、自动装配置</h3><p>@Autowired：默认是byType方式，如果匹配不上，就会byName</p><p>@Nullable：字段标记了这个注解，说明该字段可以为空</p><p>@Resource：默认是byName方式，如果匹配不上，就会byType</p><h3 id="8-5、作用域-scope"><a href="#8-5、作用域-scope" class="headerlink" title="8.5、作用域@scope"></a>8.5、作用域@scope</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//原型模式prototype，单例模式singleton</span><span class="hljs-comment">//scope("prototype")相当于&lt;bean scope="prototype"&gt;&lt;/bean&gt;</span><span class="hljs-meta">@Component</span> <span class="hljs-meta">@scope</span>(<span class="hljs-string">"prototype"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{         <span class="hljs-comment">//相当于&lt;property name="name" value="kuangshen"/&gt; </span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)     <span class="hljs-keyword">public</span> String name;         <span class="hljs-comment">//也可以放在set方法上面</span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"kuangshen"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>{         <span class="hljs-keyword">this</span>.name = name;     }}</code></pre></div><h3 id="8-6、小结"><a href="#8-6、小结" class="headerlink" title="8.6、小结"></a>8.6、小结</h3><p><strong>xml与注解：</strong></p><ul><li>xml更加万能，维护简单，适用于任何场合</li><li>注解，不是自己的类使用不了，维护复杂</li></ul><p><strong>最佳实践：</strong></p><ul><li>xml用来管理bean</li><li>注解只用来完成属性的注入</li><li>要开启注解支持</li></ul><h2 id="9、使用Java的方式配置Spring"><a href="#9、使用Java的方式配置Spring" class="headerlink" title="9、使用Java的方式配置Spring"></a>9、使用Java的方式配置Spring</h2><p>不使用Spring的xml配置，完全交给java来做！</p><p>Spring的一个子项目，在spring4之后，，，它成为了核心功能</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDIyMTU3NTI4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200802215752868"><br><strong>实体类：pojo的User.java</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这里这个注解的意思,就是说明这个类被Spring接管了,注册到了容器中 </span><span class="hljs-meta">@component</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{     <span class="hljs-keyword">private</span> String name;        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>{     <span class="hljs-keyword">return</span> name;     }     <span class="hljs-comment">//属性注入值</span>    <span class="hljs-meta">@value</span>(<span class="hljs-string">"QINJIANG')  </span><span class="hljs-string">    public void setName(String name) { </span><span class="hljs-string">    this.name = name; </span><span class="hljs-string">    } </span><span class="hljs-string">    @Override </span><span class="hljs-string">    public String toString() { </span><span class="hljs-string">        return "</span>user{<span class="hljs-string">" + </span><span class="hljs-string">        "</span>name=<span class="hljs-string">'" + name + '</span>\<span class="hljs-string">''</span>+         <span class="hljs-string">'}'</span>;     } }</code></pre></div><p>弹幕评论：要么使用@Bean，要么使用@Component和ComponentScan，两种效果一样</p><p><strong>配置文件：config中的kuang.java</strong></p><p>@Import(KuangConfig2.class)，用@import来包含KuangConfig2.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这个也会Spring容器托管,注册到容器中,因为他本米就是一个@Component </span><span class="hljs-comment">// @Configuration表这是一个配置类,就像我们之前看的beans.xml，类似于&lt;beans&gt;标签</span><span class="hljs-meta">@Configuration</span> <span class="hljs-meta">@componentScan</span>(<span class="hljs-string">"com.Kuang.pojo"</span>) <span class="hljs-comment">//开启扫描</span><span class="hljs-comment">//@Import(KuangConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KuangConfig</span> </span>{     <span class="hljs-comment">//注册一个bean , 就相当于我们之前写的一个bean 标签 </span>    <span class="hljs-comment">//这个方法的名字,就相当于bean 标签中的 id 属性 -&gt;getUser</span>    <span class="hljs-comment">//这个方法的返同值,就相当于bean 标签中的class 属性 -&gt;User</span>        <span class="hljs-comment">//@Bean </span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//就是返回要注入到bean的对象! </span>    } }</code></pre></div><p>弹幕评论：ComponentScan、@Component(“pojo”) 这两个注解配合使用</p><p><strong>测试类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[ ] args)</span> </span>{     <span class="hljs-comment">//如果完全使用了配置类方式去做,我们就只能通过 Annotationconfig 上下文来获取容器,通过配置类的class对象加载! </span>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.Class); <span class="hljs-comment">//class对象</span>    User getUser =(User)context.getBean( <span class="hljs-string">"getUser"</span>); <span class="hljs-comment">//方法名getUser</span>    System.out.Println(getUser.getName());     } }</code></pre></div><p><strong>会创建两个相同对象问题的说明：</strong></p><p><strong>弹幕总结 - -&gt; @Bean是相当于&lt; bean&gt;标签创建的对象，而我们之前学的@Component是通过spring自动创建的这个被注解声明的对象，所以这里相当于有两个User对象被创建了。一个是bean标签创建的（@Bean），一个是通过扫描然后使用@Component，spring自动创建的User对象，所以这里去掉@Bean这些东西，然后开启扫描。之后在User头上用@Component即可达到spring自动创建User对象了</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//这个也会Spring容器托管,注册到容器中,因为他本米就是一个@Component </span><span class="hljs-comment">// @Configuration表这是一个配置类,就像我们之前看的beans.xml，类似于&lt;beans&gt;标签</span><span class="hljs-meta">@Configuration</span> <span class="hljs-meta">@componentScan</span>(<span class="hljs-string">"com.Kuang.pojo"</span>) <span class="hljs-comment">//开启扫描</span><span class="hljs-comment">//@Import(KuangConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KuangConfig</span> </span>{     <span class="hljs-comment">//注册一个bean , 就相当于我们之前写的一个bean 标签 </span>    <span class="hljs-comment">//这个方法的名字,就相当于bean 标签中的 id 属性 -&gt;getUser</span>    <span class="hljs-comment">//这个方法的返同值,就相当于bean 标签中的class 属性 -&gt;User</span>        <span class="hljs-comment">//@Bean </span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>{     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//就是返回要注入到bean的对象! </span>    } }</code></pre></div><p>弹幕评论：ComponentScan、@Component(“pojo”) 这两个注解配合使用</p><p><strong>测试类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[ ] args)</span> </span>{     <span class="hljs-comment">//如果完全使用了配置类方式去做,我们就只能通过 Annotationconfig 上下文来获取容器,通过配置类的class对象加载! </span>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.Class); <span class="hljs-comment">//class对象</span>    User getUser =(User)context.getBean( <span class="hljs-string">"getUser"</span>); <span class="hljs-comment">//方法名getUser</span>    System.out.Println(getUser.getName());     } }</code></pre></div><p><strong>会创建两个相同对象问题的说明：</strong></p><p><strong>弹幕总结 - -&gt; @Bean是相当于&lt; bean&gt;标签创建的对象，而我们之前学的@Component是通过spring自动创建的这个被注解声明的对象，所以这里相当于有两个User对象被创建了。一个是bean标签创建的（@Bean），一个是通过扫描然后使用@Component，spring自动创建的User对象，所以这里去掉@Bean这些东西，然后开启扫描。之后在User头上用@Component即可达到spring自动创建User对象了</strong></p><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学代理模式？</p><p>因为这个就是SpringAOP的底层！【SpringAOP 和 SpringMVC】</p><p>分类：</p><ul><li>动态代理</li><li>静态代理</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE0Mjc4NDYucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803101427846"></p><h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDE2MjE4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803101621868"><br>代码步骤：</p><p>1、接口</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Host</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>2、真实角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HostMaster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Host</span></span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"房东要出租房子"</span>);}}</code></pre></div><p>3、代理角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> </span>{<span class="hljs-keyword">public</span> Host host;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span> </span>{}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span> </span>{<span class="hljs-keyword">super</span>();<span class="hljs-keyword">this</span>.host = host;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{seeHouse();host.rent();fee();sign();}<span class="hljs-comment">//看房</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"看房子"</span>);}<span class="hljs-comment">//收费</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"收中介费"</span>);}<span class="hljs-comment">//合同</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sign</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"签合同"</span>);}}</code></pre></div><p>4、客户端访问代理角色</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle4_proxy;<span class="hljs-keyword">import</span> pojo.Host;<span class="hljs-keyword">import</span> pojo.HostMaster;<span class="hljs-keyword">import</span> pojo.Proxy;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{<span class="hljs-comment">//房东要出租房子</span>Host host = <span class="hljs-keyword">new</span> HostMaster();<span class="hljs-comment">//中介帮房东出租房子，但也收取一定费用（增加一些房东不做的操作）</span>Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);<span class="hljs-comment">//看不到房东，但通过代理，还是租到了房子</span>proxy.rent();}}</code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMDUyMjk0NzgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803105229478"><br>代码翻倍：几十个真实角色就得写几十个代理</p><p>AOP横向开发</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMTE1Mzk2MjEucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803111539621"></p><h3 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h3><p>动态代理和静态角色一样，动态代理底层是反射机制</p><p>动态代理类是动态生成的，不是我们直接写好的！</p><p>动态代理(两大类)：基于接口，基于类</p><ul><li>基于接口：JDK的动态代理【使用ing】</li><li>基于类：cglib</li><li>java字节码实现：javasisit</li></ul><p>了解两个类<br>1、Proxy：代理<br>2、InvocationHandler：调用处理程序<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMTI2MTk4NjgucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803112619868"></p><p>实例：</p><p>接口 Host.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Host</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>接口Host实现类 HostMaster.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//接口实现类</span><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HostMaster</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Host</span></span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"房东要租房子"</span>);}}</code></pre></div><p>代理角色的处理程序类 ProxyInvocationHandler.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo2;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-comment">///用这个类，自动生成代理</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{<span class="hljs-comment">// Foo f =(Foo) Proxy.NewProxyInstance(Foo. Class.GetClassLoader(),</span><span class="hljs-comment">// new Class&lt;?&gt;[] { Foo.Class },</span><span class="hljs-comment">// handler);</span><span class="hljs-comment">// 被代理的接口</span><span class="hljs-keyword">public</span> HostMaster hostMaster ;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHostMaster</span><span class="hljs-params">(HostMaster hostMaster)</span> </span>{<span class="hljs-keyword">this</span>.hostMaster = hostMaster;}<span class="hljs-comment">// 得到生成的代理类 </span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">// newProxyInstance() -&gt; 生成代理对象，就不用再写具体的代理类了</span><span class="hljs-comment">// this.getClass().getClassLoader() -&gt; 找到加载类的位置</span><span class="hljs-comment">// hostMaster.getClass().getInterfaces() -&gt; 代理的具体接口</span><span class="hljs-comment">// this -&gt; 代表了接口InvocationHandler的实现类ProxyInvocationHandler</span><span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(), hostMaster.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);<span class="hljs-comment">// 处理代理实例并返回结果</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{seeHouse();<span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现的</span>        <span class="hljs-comment">// invoke()执行它真正要执行的方法</span>Object result = method.invoke(hostMaster, args);fee();<span class="hljs-keyword">return</span> result;}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seeHouse</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"看房子"</span>);}<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fee</span><span class="hljs-params">()</span> </span>{System.out.println(<span class="hljs-string">"收中介费"</span>);}}</code></pre></div><p>用户类 My2.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> holle4_proxy;<span class="hljs-keyword">import</span> pojo2.Host;<span class="hljs-keyword">import</span> pojo2.Host2;<span class="hljs-keyword">import</span> pojo2.HostMaster;<span class="hljs-keyword">import</span> pojo2.ProxyInvocationHandler;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My2</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//真实角色</span>HostMaster hostMaster = <span class="hljs-keyword">new</span> HostMaster();        <span class="hljs-comment">//代理角色，现在没有；用代理角色的处理程序来实现Host接口的调用</span>ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();                <span class="hljs-comment">//pih -&gt; HostMaster接口类 -&gt; Host接口</span>pih.setHostMaster(hostMaster);        <span class="hljs-comment">//获取newProxyInstance动态生成代理类</span>Host proxy = (Host) pih.getProxy();proxy.rent();}}</code></pre></div><p>弹幕评论：<br>什么时候调用invoke方法的?<br>代理实例调用方法时invoke方法就会被调用，可以debug试试</p><p>改为<strong>万能代理类</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">///用这个类，自动生代理</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>{    <span class="hljs-comment">// Foo f =(Foo) Proxy.NewProxyInstance(Foo. Class.GetClassLoader(),</span>    <span class="hljs-comment">// new Class&lt;?&gt;[] { Foo.Class },</span>    <span class="hljs-comment">// handler);</span>    <span class="hljs-comment">// 被代理的接口</span>    <span class="hljs-keyword">public</span> Object target;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>{        <span class="hljs-keyword">this</span>.target = target;    }    <span class="hljs-comment">// 得到生成的代理类 -&gt; 固定的代码</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span> </span>{        <span class="hljs-comment">// newProxyInstance() -&gt; 生成代理对象，就不用再写具体的代理类了</span>        <span class="hljs-comment">// this.getClass().getClassLoader() -&gt; 找到加载类的位置</span>        <span class="hljs-comment">// hostMaster.getClass().getInterfaces() -&gt; 代理的具体接口</span>        <span class="hljs-comment">// this -&gt; 代表了接口InvocationHandler的实现类ProxyInvocationHandler</span>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),                target.getClass().getInterfaces(), <span class="hljs-keyword">this</span>);    }    <span class="hljs-comment">// 处理代理实例并返回结果</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        <span class="hljs-comment">//前置通知</span>        pre();        <span class="hljs-comment">//打印日志,通过反射的方式</span>        log(method.getName());        <span class="hljs-comment">// 动态代理的本质，就是使用反射机制实现的</span>        <span class="hljs-comment">// invoke()执行它真正要执行的方法</span>        Object result = method.invoke(target, args);        <span class="hljs-comment">//后置通知</span>        post();        <span class="hljs-keyword">return</span> result;    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"[前置通知]"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">post</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"[后置通知]"</span>);    }    <span class="hljs-comment">//日志打印</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span> </span>{        System.out.println(<span class="hljs-string">"[Debug]执行了"</span> + msg + <span class="hljs-string">"方法"</span>);    }}</code></pre></div><p>测试类：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        <span class="hljs-comment">//真实角色</span>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();        <span class="hljs-comment">//代理角色,不存在</span>        ProxyInvocationHandler proxyInvocationHandler = <span class="hljs-keyword">new</span> ProxyInvocationHandler();        <span class="hljs-comment">//设置要代理的对象</span>        proxyInvocationHandler.setTarget(userService);        <span class="hljs-comment">//动态生产代理类</span>        UserService proxy = (UserService) proxyInvocationHandler.getProxy();        <span class="hljs-comment">//执行业务操作</span>        proxy.add();    }}</code></pre></div><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzMwMzU0ODQlMjAtJTIwJUU1JThBJUE4JUU2JTgwJTgxJUU0JUJCJUEzJUU3JTkwJTg2LnBuZw?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803133035484"></p><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzQ1MDIxNjklMjAtJTIwQU9QLnBuZw?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803134502169"></p><p><img src="https://s1.ax1x.com/2020/08/28/dIUZkV.png" srcset="/blog/img/loading.gif" alt="dIUZkV.png"></p><h3 id="11-2、AOP在Spring中的使用"><a href="#11-2、AOP在Spring中的使用" class="headerlink" title="11.2、AOP在Spring中的使用"></a>11.2、AOP在Spring中的使用</h3><p>提供声明式事务，允许用户自定义切面</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等…</li><li>切面(Aspect)：横切关注点 被模块化的特殊对象。即，它是一个类。（Log类）</li><li>通知(Advice)：切面必须要完成的工作。即，它是类中的一个方法。（Log类中的方法）</li><li>目标(Target)：被通知对象。（生成的代理类)</li><li>代理(Proxy)：向目标对象应用通知之后创建的对象。（生成的代理类）</li><li>切入点(PointCut)：切面通知执行的”地点”的定义。（最后两点：在哪个地方执行，比如：method.invoke()）</li><li>连接点(JointPoint)：与切入点匹配的执行点。</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxNTQwNDM5MDkucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803154043909"><br>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxMzU5Mzc0MzUucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803135937435"><br><strong>即AOP在不改变原有代码的情况下，去增加新的功能。</strong>（代理）</p><h3 id="11-3、使用Spring实现AOP"><a href="#11-3、使用Spring实现AOP" class="headerlink" title="11.3、使用Spring实现AOP"></a>11.3、使用Spring实现AOP</h3><p>【重点】</p><ul><li>使用AOP织入，需要导入一个依赖包！</li></ul><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h4 id="11-3-1、方法一：使用原生spring接口"><a href="#11-3-1、方法一：使用原生spring接口" class="headerlink" title="11.3.1、方法一：使用原生spring接口"></a>11.3.1、方法一：使用原生spring接口</h4><p>springAPI接口实现</p><p>需要先导入aop约束</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--注册bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.Log"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.AfterLog"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--方式一，使用原生Spring API接口--&gt;</span>    <span class="hljs-comment">&lt;!--配置aop,还需要导入aop约束--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--切入点：expression:表达式，execution（要执行的位置）--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>/&gt;</span>        <span class="hljs-comment">&lt;!--UserServiceImpl.*(..) -》 UserServiceImpl类下的所以方法(参数)--&gt;</span>        <span class="hljs-comment">&lt;!--执行环绕增加--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- 环绕,在id="pointcut"的前后切入 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p><code>execution(返回类型，类名，方法名(参数))</code> -&gt; <code>execution(* com.service.*,*(…))</code></p><p>UserService.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>{       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>UserService 的实现类 UserServiceImp.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"add增"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"delete删"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"update改"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>{        System.out.println(<span class="hljs-string">"query查"</span>);    }}</code></pre></div><p>前置Log.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<span class="hljs-keyword">import</span> org.springframework.aop.MethodBeforeAdvice;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>{    <span class="hljs-comment">//method：要执行的目标对象的方法</span>    <span class="hljs-comment">//args：参数</span>    <span class="hljs-comment">//target：目标对象</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        System.out.println(target.getClass().getName()+<span class="hljs-string">"的"</span>+method.getName()+<span class="hljs-string">"被执行了"</span>);    }}</code></pre></div><p>后置AfterLog.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> log;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> org.springframework.aop.AfterReturningAdvice;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AfterLog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AfterReturningAdvice</span> </span>{    <span class="hljs-comment">//returnVaule: 返回值</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="hljs-keyword">throws</span> Throwable </span>{    System.out.println(<span class="hljs-string">"执行了"</span>+method.getName()+<span class="hljs-string">"方法，返回值是"</span>+returnValue);    }}</code></pre></div><p>测试类MyTest5</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> service.UserService;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><h4 id="11-3-2、方法二：自定义类实现AOP"><a href="#11-3-2、方法二：自定义类实现AOP" class="headerlink" title="11.3.2、方法二：自定义类实现AOP"></a>11.3.2、方法二：自定义类实现AOP</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">   http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">   https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>   <span class="hljs-comment">&lt;!--注册bean--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"log"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.Log"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"afterLog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"log.AfterLog"</span>/&gt;</span>   <span class="hljs-comment">&lt;!-- 方式二，自定义 --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"diy.DiyPointcut"</span>/&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>       <span class="hljs-comment">&lt;!--自定义切面--&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"diy"</span>&gt;</span>           <span class="hljs-comment">&lt;!--切入点--&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"point"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>/&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"after"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"point"</span>/&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> diy;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcut</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"插入到前面"</span>);    }    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"插入到后面"</span>);    }}</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><h4 id="11-3-3、方法三：使用注解实现"><a href="#11-3-3、方法三：使用注解实现" class="headerlink" title="11.3.3、方法三：使用注解实现"></a>11.3.3、方法三：使用注解实现</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 注册 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userservice"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"service.UserServiceImpl"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--方式三，使用注解实现--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"diyAnnotation"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"diy.DiyAnnotation"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 开启自动代理 </span><span class="hljs-comment">实现方式：默认JDK (proxy-targer-class="fasle")</span><span class="hljs-comment">     cglib (proxy-targer-class="true")--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>DiyAnnotation.java</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> diy;<span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.After;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-meta">@Aspect</span>  <span class="hljs-comment">//标注这个类是一个切面</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyAnnotation</span> </span>{    <span class="hljs-meta">@Before</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"=====方法执行前====="</span>);    }    <span class="hljs-meta">@After</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>{        System.out.println(<span class="hljs-string">"=====方法执行后====="</span>);    }    <span class="hljs-comment">//在环绕增强中，我们可以给地暖管一个参数，代表我们要获取切入的点</span>    <span class="hljs-meta">@Around</span>(<span class="hljs-string">"execution(* service.UserServiceImpl.*(..))"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>{        System.out.println(<span class="hljs-string">"环绕前"</span>);        Object proceed = joinPoint.proceed();        System.out.println(<span class="hljs-string">"环绕后"</span>);    }}</code></pre></div><p>测试</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest5</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        <span class="hljs-comment">//注意:动态代理代理的是接口</span>        UserService userService = (UserService) context.getBean(<span class="hljs-string">"userservice"</span>);        userService.add();    }}</code></pre></div><p>输出结果：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vd29fYmVsbC9QaWN0dXJlQmVkL3Jhdy9tYXN0ZXIvaW1hZ2UvaW1hZ2UtMjAyMDA4MDMxNzU2NDIwNjQucG5n?x-oss-process=image/format,png" srcset="/blog/img/loading.gif" alt="image-20200803175642064"></p><h2 id="12、整合mybatis"><a href="#12、整合mybatis" class="headerlink" title="12、整合mybatis"></a>12、整合mybatis</h2><blockquote><p>【提醒】：</p><p>本节知识密度大，时间长，需要多看几遍视频，加深理解</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=23" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1WE411d7Dv?p=23</a></p></blockquote><p><strong>步骤：</strong></p><ol><li>导入相关jar</li></ol><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li>mybatis-spring【new】</li></ul><ol start="2"><li>编写配置文件</li><li>测试</li></ol><p>mybatis-spring官网：<a href="https://mybatis.org/spring/zh/" target="_blank" rel="noopener">https://mybatis.org/spring/zh/</a></p><h3 id="12-0、回忆Mybatis"><a href="#12-0、回忆Mybatis" class="headerlink" title="12.0、回忆Mybatis"></a>12.0、回忆Mybatis</h3><p><strong>mybatis的配置流程：</strong></p><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写Mapper.xmi</li><li>测试</li></ol><p><strong>实例：</strong></p><ol><li>导入相关jar，pom.xml：</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.melodyhub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-10-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-comment">&lt;!--&lt;version&gt;5.1.47&lt;/version&gt;--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Spring操作数据库的话，需要一个spring-jdbc--&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span>    <span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;false&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;true&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><ol start="2"><li>编写实体类，User.java：</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;}</code></pre></div><ol start="3"><li>编写核心配置文件，resources/mybatis-config.xml：</li></ol><div class="hljs"><pre><code class="hljs xml-dtd">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;!--configuration 核心配置文件--&gt;&lt;configuration&gt;    &lt;!--开启日志--&gt;    &lt;!--&lt;settings&gt;        &lt;setting name="logImpl" value="STDOUT_LOGGING" /&gt;    &lt;/settings&gt;--&gt;    &lt;!--可以给实体类起别名 --&gt;    &lt;typeAliases&gt;        &lt;package name="com.melodyhub.pojo"/&gt;    &lt;/typeAliases&gt;        &lt;!--environments 可配置多个环境--&gt;    &lt;environments default="development"&gt;        &lt;!--多个环境，不同id--&gt;        &lt;environment id="development"&gt;            &lt;!--事务管理--&gt;            &lt;transactionManager type="JDBC"/&gt;            &lt;dataSource type="POOLED"&gt;                &lt;!--&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;--&gt;                &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;                &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;autoReconnect=true"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="root"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;    &lt;mappers&gt;        &lt;mapper class="com.melodyhub.mapper.UserMapper"/&gt;        &lt;!--&lt;mapper resource="com/melodyhub/mapper/UserMapper.xml"/&gt;--&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre></div><ol start="4"><li>编写接口，UserMapper.xml：</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><ol start="5"><li>编写接口配置文件，UserMapper.xml：</li></ol><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapper"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"user"</span>&gt;</span>        select * from mybatis.user;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><ol start="6"><li>测试，test/java/MyTest.java：</li></ol><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.melodyhub.mapper.UserMapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>{        String resource = <span class="hljs-string">"mybatis-config.xml"</span>;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        SqlSession sqlSession = sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        List&lt;User&gt; userList = mapper.selectUser();        <span class="hljs-keyword">for</span> (User user : userList) {            System.out.println(user);        }    }}</code></pre></div><ol start="7"><li>结果：</li></ol><div class="hljs"><pre><code class="hljs java">User(id=<span class="hljs-number">1</span>, name=狂神, pwd=<span class="hljs-number">123456</span>)User(id=<span class="hljs-number">2</span>, name=张三, pwd=abcdef)User(id=<span class="hljs-number">3</span>, name=李四, pwd=<span class="hljs-number">987654</span>)Process finished with exit code <span class="hljs-number">0</span></code></pre></div><h3 id="12-1、mybatis-spring-方式一"><a href="#12-1、mybatis-spring-方式一" class="headerlink" title="12.1、mybatis-spring-方式一"></a>12.1、mybatis-spring-方式一</h3><ol><li>编写数据源配置</li><li><code>sqISessionFactory</code></li><li><code>sqISessionTemplate</code>（相当于<code>sqISession</code>）</li><li>需要给接口加实现类【new】</li><li>将自己写的实现类，注入到Spring中</li><li>测试！</li></ol><p><strong>数据源：</strong></p><ul><li><p><code>DataSource</code>：使用Spring的数帮源替换Mybatis的配置</p></li><li><p>这使用Spring提供的JDBC：<code>org.springframework.jdbc.datasource</code></p></li></ul><ul><li>其他数据源：<code>c3p0</code>、<code>dbcp</code>、<code>druid</code></li></ul><p><strong>【核心对象】：</strong></p><ul><li><code>sqISessionFactory</code></li></ul><blockquote><p>在基础的 MyBatis 用法中，是通过 <code>SqlSessionFactoryBuilder</code> 来创建 <code>SqlSessionFactory</code> 的。 而在 MyBatis-Spring 中，则使用 <code>SqlSessionFactoryBean</code> 来创建。</p><p>文档：<a href="http://mybatis.org/spring/zh/factorybean.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/factorybean.html</a></p></blockquote><ul><li><code>sqISessionTemplate</code></li></ul><blockquote><p><code>SqlSessionTemplate</code> 是 MyBatis-Spring 的核心。作为 <code>SqlSession</code> 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 <code>SqlSession</code>。<code>SqlSessionTemplate</code> 是线程安全的，可以被多个 DAO 或映射器所共享使用。</p><p>当调用 SQL 方法时（包括由 <code>getMapper()</code> 方法返回的映射器中的方法），<code>SqlSessionTemplate</code> 将会保证使用的 <code>SqlSession</code> 与当前 Spring 的事务相关。此外，它管理 session 的生命周期，包含必要的关闭、提交或回滚操作。另外，它也负责将 MyBatis 的异常翻译成 Spring 中的 <code>DataAccessExceptions</code>。</p><p>由于模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该<strong>总是</strong>用 <code>SqlSessionTemplate</code> 来替换 MyBatis 默认的 <code>DefaultSqlSession</code> 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 <code>SqlSessionFactory</code> 作为构造方法的参数来创建 <code>SqlSessionTemplate</code> 对象。</p><p>文档：<a href="http://mybatis.org/spring/zh/sqlsession.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/sqlsession.html</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/09/06/wZTWmn.png" srcset="/blog/img/loading.gif" alt="wZTWmn.png"></p><p>先导入jar包，</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.melodyhub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-10-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-comment">&lt;!--&lt;version&gt;5.1.47&lt;/version&gt;--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--Spring操作数据库的话，需要一个spring-jdbc--&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span>    <span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;false&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-comment">&lt;!--&lt;filtering&gt;true&lt;/filtering&gt;--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div><blockquote><p>关于解决<strong>“Maven解决静态资源过滤问题”</strong>详见：<a href="https://www.cnblogs.com/melodyjerry/p/13586750.html" target="_blank" rel="noopener">Maven中静态资源和字节码文件的过滤</a></p></blockquote><p><img src="https://s1.ax1x.com/2020/08/30/dqq7D0.png" srcset="/blog/img/loading.gif" alt="dqq7D0.png"><br><strong>编写顺序：</strong></p><p><em>User -&gt; UserMapper -&gt; UserMapper.xml -&gt; spring-dao.xml -&gt; UserServiceImpl -&gt; applicationContext.xml -&gt; MyTest6</em></p><p><strong>代码步骤：</strong></p><p>pojo实体类 User：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;}</code></pre></div><p>mapper目录下的 UserMapper、UserMapperImpl、UserMapper.xml</p><p>接口UserMapper：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;}</code></pre></div><p>UserMapperImpl：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionTemplate;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-comment">//我们的所有操作，在原来都使用sqlSession来执行，现在都使用SqlSessionTemplate；</span>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlSession;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSqlSession</span><span class="hljs-params">(SqlSessionTemplate sqlSession)</span> </span>{        <span class="hljs-keyword">this</span>.sqlSession = sqlSession;    }    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>{        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> userMapper.selectUser();    }}</code></pre></div><p>UserMapper.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapper"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"selectUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"user"</span>&gt;</span>        select * from mybatis.user;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>resource目录下的 mybatis-config.xml、spring-dao.xml、applicationContext.xml</p><p>mybatis-config.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-comment">&lt;!--configuration 核心配置文件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--开启日志--&gt;</span>    <span class="hljs-comment">&lt;!--&lt;settings&gt;</span><span class="hljs-comment">        &lt;setting name="logImpl" value="STDOUT_LOGGING" /&gt;</span><span class="hljs-comment">    &lt;/settings&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--可以给实体类起别名 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"com.melodyhub.pojo"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span>        <span class="hljs-comment">&lt;!--environments 可配置多个环境--&gt;</span>    <span class="hljs-comment">&lt;!--配置了Spring-Dao.xml后，这块可以直接注释掉了：dataSource</span><span class="hljs-comment">    &lt;environments default="development"&gt;</span><span class="hljs-comment">        &amp;lt;!&amp;ndash;多个环境，不同id&amp;ndash;&amp;gt;</span><span class="hljs-comment">        &lt;environment id="development"&gt;</span><span class="hljs-comment">            &amp;lt;!&amp;ndash;事务管理&amp;ndash;&amp;gt;</span><span class="hljs-comment">            &lt;transactionManager type="JDBC"/&gt;</span><span class="hljs-comment">            &lt;dataSource type="POOLED"&gt;</span><span class="hljs-comment">                &amp;lt;!&amp;ndash;&lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;&amp;ndash;&amp;gt;</span><span class="hljs-comment">                &lt;property name="driver" value="com.mysql.cj.jdbc.Driver"/&gt;</span><span class="hljs-comment">                &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;autoReconnect=true"/&gt;</span><span class="hljs-comment">                &lt;property name="username" value="root"/&gt;</span><span class="hljs-comment">                &lt;property name="password" value="root"/&gt;</span><span class="hljs-comment">            &lt;/dataSource&gt;</span><span class="hljs-comment">        &lt;/environment&gt;</span><span class="hljs-comment">    &lt;/environments&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在MyBatis核心配置文件中注册！！！--&gt;</span>    <span class="hljs-comment">&lt;!-- 配置了Spring-Dao.xml后，这块可以直接注释掉了：绑定Mybatis配置文件</span><span class="hljs-comment">    &lt;mappers&gt;</span><span class="hljs-comment">        &lt;mapper class="com.melodyhub.mapper.UserMapper"/&gt;</span><span class="hljs-comment">        &amp;lt;!&amp;ndash;&lt;mapper resource="com/melodyhub/mapper/UserMapper.xml"/&gt;&amp;ndash;&amp;gt;</span><span class="hljs-comment">    &lt;/mappers&gt;--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>spring-dao.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DataSource:使用Spring的数帮源替换Mybatis的配置 其他数据源：c3p0、dbcp、druid</span><span class="hljs-comment">        这使用Spring提供的JDBC: org.springframework.jdbc.datasource --&gt;</span>    <span class="hljs-comment">&lt;!--dataSource --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag">                  <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;autoReconnect=true"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 Mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:com/melodyhub/mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- sqlSessionTemplate 就是之前使用的：sqlsession --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 只能使用构造器注入sqlSessionFactory 原因：它没有set方法--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--导入其他配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--&lt;import resource="spring-mvc.xml"/&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--mybatis-spring 方式1--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapperImpl"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSession"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSession"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.melodyhub.mapper.UserMapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>{    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>{        ClassPathXmlApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);        UserMapper userMapper = context.getBean(<span class="hljs-string">"userMapper"</span>, UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">for</span> (User user : userMapper.selectUser()) {            System.out.println(user);        }    }}</code></pre></div><h3 id="12-2、mybatis-spring-方式二"><a href="#12-2、mybatis-spring-方式二" class="headerlink" title="12.2、mybatis-spring-方式二"></a>12.2、mybatis-spring-方式二</h3><ul><li><code>SqlSessionDaoSupport</code></li></ul><blockquote><p><code>SqlSessionDaoSupport</code> 是一个抽象的支持类，用来为你提供 <code>SqlSession</code>。调用 <code>getSqlSession()</code> 方法你会得到一个 <code>SqlSessionTemplate</code>，之后可以用于执行 SQL 方法，就像下面这样:</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>{  <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">(String userId)</span> </span>{    <span class="hljs-keyword">return</span> getSqlSession().selectOne(<span class="hljs-string">"org.mybatis.spring.sample.mapper.UserMapper.getUser"</span>, userId);  }}</code></pre></div><p>在这个类里面，通常更倾向于使用 <code>MapperFactoryBean</code>，因为它不需要额外的代码。但是，如果你需要在 DAO 中做其它非 MyBatis 的工作或需要一个非抽象的实现类，那么这个类就很有用了。</p><p><code>SqlSessionDaoSupport</code> 需要通过属性设置一个 <code>sqlSessionFactory</code> 或 <code>SqlSessionTemplate</code>。如果两个属性都被设置了，那么 <code>SqlSessionFactory</code> 将被忽略。</p><p>假设类 <code>UserMapperImpl</code> 是 <code>SqlSessionDaoSupport</code> 的子类，可以编写如下的 Spring 配置来执行设置：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userDao"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.sample.dao.UserDaoImpl"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></div><p>文档：<a href="http://mybatis.org/spring/zh/sqlsession.html" target="_blank" rel="noopener">http://mybatis.org/spring/zh/sqlsession.html</a></p></blockquote><p>UserServiceImpl2.java：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.melodyhub.mapper;<span class="hljs-keyword">import</span> com.melodyhub.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>{        <span class="hljs-comment">/*</span><span class="hljs-comment">        SqlSession sqlSession = getSqlSession();</span><span class="hljs-comment">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><span class="hljs-comment">        return userMapper.selectUser();</span><span class="hljs-comment">        */</span>        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">selectUser</span>()</span>;    }}</code></pre></div><p>spring-dao.xml：<code>SqlSessionTemplate</code>可以不写了</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--DataSource:使用Spring的数帮源替换Mybatis的配置 其他数据源：c3p0、dbcp、druid</span><span class="hljs-comment">        这使用Spring提供的JDBC: org.springframework.jdbc.datasource --&gt;</span>    <span class="hljs-comment">&lt;!--dataSource --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag">                  <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;serverTimezone=GMT%2B8&amp;amp;autoReconnect=true"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"dataSource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 Mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:com/melodyhub/mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 方法二：SqlSessionTemplate 可以不写了--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>    <span class="hljs-comment">&lt;!--导入其他配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span>/&gt;</span>    <span class="hljs-comment">&lt;!--&lt;import resource="spring-mvc.xml"/&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--mybatis-spring 方式-2--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.melodyhub.mapper.UserMapperImpl2"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试：</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest6</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper2"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><h2 id="13-声明式事务"><a href="#13-声明式事务" class="headerlink" title="13. 声明式事务"></a>13. 声明式事务</h2><ul><li>把一组业务当成一个业务来做；要么都成功，要么都失败！</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题</li><li>确保完整性和一致性</li></ul><p>事务的ACID原则：<br>1、原子性<br>2、隔离性<br>3、一致性<br>4、持久性</p><p>ACID参考文章：<a href="https://www.cnblogs.com/melodyjerry/p/13621129.html" target="_blank" rel="noopener">https://www.cnblogs.com/melodyjerry/p/13621129.html</a></p><p>Spring中的事务管理</p><ul><li>声明式事务：AOP</li><li>编程式事务：需要再代码中，进行事务管理</li></ul><p><strong>声明式事务</strong></p><p>先导入jar包</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!--在build中配置resources，来防止资源导出失败的问题--&gt;</span><span class="hljs-comment">&lt;!-- Maven解决静态资源过滤问题 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p><strong>代码步骤：</strong></p><p>pojo实体类 User</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pojo;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>{<span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> String pwd;}</code></pre></div><p>mapper目录下的 UserMapper、UserMapperImpl、UserMapper.xml</p><p>接口UserMapper</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>; }</code></pre></div><p>UserMapperImpl</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">package</span> mapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>{    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>{    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>,<span class="hljs-string">"你好"</span>,<span class="hljs-string">"ok"</span>);    insertUser(user);    delUser(<span class="hljs-number">5</span>);        SqlSession sqlSession = getSqlSession();        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> mapper.getUser();        <span class="hljs-comment">//或者return  getSqlSession().getMapper(UserMapper.class).getUser();</span>    }    <span class="hljs-comment">//插入</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span> </span>{<span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">insertUser</span>(<span class="hljs-title">user</span>)</span>;}<span class="hljs-comment">//删除</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{<span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>).<span class="hljs-title">delUser</span>(<span class="hljs-title">id</span>)</span>;}}</code></pre></div><p>UserMapper.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE mapper</span><span class="hljs-meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>        <span class="hljs-comment">&lt;!-- 绑定接口 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"mapper.UserMapper"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUser"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"pojo.User"</span>&gt;</span>select * from mybatis.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insertUser"</span>  <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"pojo.User"</span> &gt;</span>insert into  mybatis.mybatis (id,name,pwd) values (#{id},#{name},#{pwd})<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"delUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"_int"</span>&gt;</span>deleteAAAAA from mybatis.mybatis where id = #{id}<span class="hljs-comment">&lt;!-- deleteAAAAA是故意写错的 --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></div><p>resource目录下的 mybatis-config.xml、spring-dao.xml、applicationContext.xml</p><p>mybatis-config.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE configuration</span><span class="hljs-meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="hljs-meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-comment">&lt;!-- configuration --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!--开启日志--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pojo"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre></div><p>spring-dao.xml（已导入约束）</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">"http://www.springframework.org/schema/tx"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/tx</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--data source --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"datasource"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driverClassName"</span></span><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.cj.jdbc.Driver"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;serverTimezone=Asia/Shanghai"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--sqlSessionFactory--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dataSource"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>        <span class="hljs-comment">&lt;!--绑定 mybatis 配置文件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"configLocation"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mybatis-config.xml"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"mapperLocations"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"classpath:mapper/*.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--声明式事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"transactionManager"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"datasource"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合aop实现事务织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的通知类--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">"transactionManager"</span>&gt;</span>        <span class="hljs-comment">&lt;!--给哪些方法配置事务--&gt;</span>        <span class="hljs-comment">&lt;!--新东西：配置事务的传播特性 propagation--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"add"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"delete"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"update"</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">"REQUIRED"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"query"</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">"true"</span>/&gt;</span>            <span class="hljs-comment">&lt;!-- *号包含上面4个方法：</span><span class="hljs-comment">            &lt;tx:method name="*" propagation="REQUIRED"/&gt; --&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置事务切入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"txpointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* mapper.*.*(..))"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">"txAdvice"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"txpointcut"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>applicationContext.xml</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag"><span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"spring-dao.xml"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMapper"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mapper.UserMapperImpl"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"sqlSessionFactory"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"sqlSessionFactory"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></div><p>测试类</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<span class="hljs-keyword">import</span> mapper.UserMapper;<span class="hljs-keyword">import</span> pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest7</span> </span>{<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"applicationContext.xml"</span>);UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">"userMapper"</span>);<span class="hljs-keyword">for</span> (User user : userMapper.getUser()) {System.out.println(user);}}}</code></pre></div><p><strong>思考：</strong><br>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况下；</li><li>如果不在spring中去配置声明式事务，我们就需要在代码中手动配置事务！</li><li>事务在项目的开发中非常重要，涉及到数据的一致性和完整性问题！</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1WE411d7Dv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1WE411d7Dv&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="uncategorized" scheme="https://melodyjerry.github.io/blog/categories/uncategorized/"/>
    
    
      <category term="SSM" scheme="https://melodyjerry.github.io/blog/tags/SSM/"/>
    
      <category term="笔记" scheme="https://melodyjerry.github.io/blog/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaWeb" scheme="https://melodyjerry.github.io/blog/tags/JavaWeb/"/>
    
  </entry>
  
</feed>
