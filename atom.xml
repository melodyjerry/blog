<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MelodyHub</title>
  
  <subtitle>你用走 可是我用跑</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-13T05:02:08.644Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Melody Jerry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java笔记——对象、类</title>
    <link href="http://yoursite.com/2019/11/13/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/11/13/Java笔记——对象、类/</id>
    <published>2019-11-13T04:54:59.000Z</published>
    <updated>2019-11-13T05:02:08.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java笔记——对象、类"><a href="#Java笔记——对象、类" class="headerlink" title="Java笔记——对象、类"></a>Java笔记——对象、类</h3><p>创建时间：2019.11.11</p><p>说明：持续更新ing</p><hr><ol><li><code>对象</code>和<code>类</code>的概念。</li></ol><ul><li><blockquote><p><code>对象</code>：对象是类的一个实例（实实在在存在的个体），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></blockquote></li><li><blockquote><p><code>类</code>：类是对现实生活中事物的描述。类是一个模板，它描述一类对象的行为和状态。</p></blockquote></li></ul><p>下图中<strong>男孩（boy）</strong>、<strong>女孩（girl）</strong>为<strong>类（class）</strong>，而具体的每个人为该类的<strong>对象（object）</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/12/P8M5LWHdIcs42yB.png" alt="菜鸟教程.png" title="">                </div>                <div class="image-caption">菜鸟教程.png</div>            </figure><hr><ol start="2"><li>问：类设计get方法和set方法的作用是什么？</li></ol><blockquote><p>答1：一般类的成员变量被设置为private（私有的），这样设置安全性比较高，但是设置为私有的后其他的类和对象则无法调用该对象了，所以会有get和set方法，这两个方法一般设置为public，在其他的类中通过对象调用set或get方法即可操作私有的变量，增强程序的安全性，set为给对象赋值的方法，而get则是取得变量值的方法！</p></blockquote><blockquote><p>答2：get set常用在自定义类，类创建了一个实例对象后，用set设置对象的某一个属性，get得到对象某一属性。如果不使用get set，你就得用点，点出来还得是个方法。其实就是给get set换个名而已。而且get set作为内部方法，可以访问私有数据</p></blockquote><blockquote><p>答3：别说的那么专业化了，理解都要半天。<br>就这么理解吧，面向对象中，想对类的成员变量设置访问一些权限，于是，就将该字段设置为private的，这样别的类就不能访问了，然后在该内定义两个方法，一个专门用于获取，一个用于修改，这样，在你不想让别人乱动该字段的时候，就在该方法内写一些限制条件。<br>而为了规范起见（团队开发需要嘛），就根据人家老外的习惯，将方法名设置为set+字段名，get+字段名（名字乱改没问题），既然规范了，那就是别人都叫这名了，于是，有些框架给对象赋值就有方法了，方法名称由get或set开始的又有private变量名的，就找出来调用。hibernate1框架就这样弄得，至于后面的版本是不是这样就不大清楚了。<br>JavaBean就是一个JAVA类，既然是JAVA类就不需要什么组件了，这玩意直接深入到虚拟机了的</p></blockquote><hr><ol start="3"><li></li></ol><ul><li><p>Java中的对象<br>  现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。<br>  拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。<br>  对比现实对象和软件对象，它们之间十分相似。<br>  <strong><em>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。<br>  在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</em></strong></p></li><li><p>Java中的类<br>  类可以看成是创建Java对象的模板。<br>  通过下面一个简单的类来理解下Java中类的定义：</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>{</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>{</span><br><span class="line">  }</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>{</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一个类可以包含以下类型变量：<br><code>局部变量</code>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。<br><code>成员变量</code>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。<br><code>类变量</code>：类变量也声明在类中，方法体之外，但必须声明为static类型。<br>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。</p><hr><ol start="4"><li>类和对象的关系：</li></ol><ul><li><p>现实生活中的对象：张三、李四。</p></li><li><p>【想要描述】提取对象中的共性内容。<strong>对具体的抽象。</strong></p></li><li><p>【描述时】这些对象的共性有：姓名、学号、年龄、性别、学习Java等等。（即<strong>定义类：描述事物的属性和行为，就是在定义属性和行为。<em>属性和行为共同成为类中的成员（成员变量和成员方法）。</em></strong>）</p></li><li><p>映射到Java中，<strong>描述就是class定义的类，具体对象就是new建立的实体</strong>。</p></li><li><p>这些描述在Java当中是用类的形式来体现的。而对象是通过Java的new操作符所产生的一个实体，这个的实体存在于==堆内存==当中。</p>  <img src="https://i.loli.net/2019/11/13/znyBu9gp1jtdEFs.png" alt="image.png" style="zoom:80%;">  <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类，就是描述事物，就是在定义属性和行为。属性和行为共同成为类中的成员（成员变量和成员方法）。</span></span><br><span class="line"><span class="comment">//需求：描述车汽车（颜色，轮胎数）。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span><span class="title">Car</span> </span>{</span><br><span class="line">    <span class="comment">//描述颜色</span></span><br><span class="line">    String color = <span class="string">"red"</span>;</span><br><span class="line">    <span class="comment">//描述轮胎数</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//运行行为。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(color+<span class="string">".."</span>+num);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span><span class="title">CarDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//生产汽车：在Java中通过new操作符来完成。</span></span><br><span class="line">        <span class="comment">//其实就是在堆内存中产生一个实体。</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car();<span class="comment">//c就是一个【类类型】变量。记住：类类型变量只想对象。</span></span><br><span class="line">        <span class="comment">//需求：将已有车的颜色的颜色改成蓝色。指定该对象做使用。</span></span><br><span class="line">        <span class="comment">//在Java指挥方式是：【对象.对象成员】</span></span><br><span class="line">        c.color = <span class="string">"blue"</span>;</span><br><span class="line">        <span class="comment">//需求：想要车运行起来。</span></span><br><span class="line">        c.run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><code>Car c = new Car();</code>在内存中的示意图——&gt;</p><img src="https://i.loli.net/2019/11/13/1X4VFtqIwDN5Epx.png" alt="image.png" style="zoom:80%;"><p><code>c.run();</code>——&gt;输出这个车的颜色“蓝色”和轮胎数“4”。</p><p>(1)倘若在<code>c.run();</code>后加入<code>Car c1=new Car();c1.run();</code>——&gt;</p><img src="https://i.loli.net/2019/11/13/9TSkMDwUR2z4ILe.png" alt="image.png" style="zoom:80%;"><p>(2)若main的代码块改为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span><span class="title">CarDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line">c.num = <span class="number">5</span>;</span><br><span class="line">Car c1 = c;</span><br><span class="line">c1.color = <span class="string">"green"</span>;</span><br><span class="line">c.run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在内存中的示意图——&gt;</p><img src="https://i.loli.net/2019/11/13/DkndXsG9p7FguhB.png" alt="image.png" style="zoom:80%;"><blockquote><p>对对象调用的基本概念：用new建立对象，在堆内存中产生对象。那么<strong>对象的特点在于封装数据，数据包含属性和行为</strong>。想要操作对象中的内容就指挥对象做事，指挥哪个对象要明确，操作什么也要明确，用<strong><code>对象.xyz</code></strong>的形式就能完成。</p></blockquote><p>【注意】：<br>如下图，</p><img src="https://i.loli.net/2019/11/13/PkjShzpB5GDg3On.png" alt="image.png" style="zoom:80%;"><p>以前定义在函数里面，现在定义在函数外面                      </p><hr><p>5. </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java笔记——对象、类&quot;&gt;&lt;a href=&quot;#Java笔记——对象、类&quot; class=&quot;headerlink&quot; title=&quot;Java笔记——对象、类&quot;&gt;&lt;/a&gt;Java笔记——对象、类&lt;/h3&gt;&lt;p&gt;创建时间：2019.11.11&lt;/p&gt;
&lt;p&gt;说明：持续更新
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记——面向对象</title>
    <link href="http://yoursite.com/2019/11/13/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2019/11/13/Java笔记——面向对象/</id>
    <published>2019-11-13T04:54:46.000Z</published>
    <updated>2019-11-13T04:57:45.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java笔记——面向对象"><a href="#Java笔记——面向对象" class="headerlink" title="Java笔记——面向对象"></a>Java笔记——面向对象</h3><p>创建时间：2019.11.11</p><p>说明：持续更新ing</p><hr><ol><li><p><strong>Java作为一种面向对象语言</strong>。支持以下基本概念：<br> <strong><code>多态</code></strong> | <strong><code>继承</code></strong> | <strong><code>封装</code></strong> | <strong><code>抽象</code></strong><br>  <strong><code>类</code></strong>  | <strong><code>对象</code></strong> | <strong><code>实例</code></strong> | <strong><code>方法</code></strong> | <strong><code>重载</code></strong></p></li><li><p>“面向对象”和“面向过程”的区别：</p></li></ol><ul><li><code>面向过程</code>：如 C/C++</li></ul><blockquote><p>例子：冰箱装大象。1、打开冰箱门；2、放进大象；3、关上冰箱门。<br>强调过程，“打开”、“存储”、“关闭”三个动作。<br><strong>注重过程，注重的是过程涉及的行为（即功能）。</strong></p></blockquote><ul><li><code>面向对象</code>：如 Java</li></ul><blockquote><p><strong>将功能封装进对象，强调具备了功能的对象。</strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/7WFrJqdjnfpTa4c.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><ul><li><blockquote><p><strong><em><code>面向对象</code>是基于<code>面向过程</code>的。</em></strong></p></blockquote></li></ul><ol start="3"><li>使用不同思想，对“冰箱装大象”的理解——&gt;</li></ol><p>问：“人开冰箱”事件，其中人、冰箱都是实物（对象），开是动作。若使用面向对象思维，“开”的这个动作是属于“人”还是属于“冰箱”？</p><blockquote><p>答：属于“冰箱”，“人”只是调用了“冰箱”的“开”的方法（或功能），用力作用了门一下并将门打开了。</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">人开门：名词提炼法。</span><br><span class="line">/*</span><br><span class="line">人{</span><br><span class="line">    开门（门）{</span><br><span class="line">        门.开（）;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">门{</span><br><span class="line">    开（）{</span><br><span class="line">        操作门轴;</span><br><span class="line">        ……等等;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">*/</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>面向对象的三个特征：<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>。<br> 以后开发：<code>其实就是找对象使用，没有对象就创建一个对象</code>。<br> <strong><em>找对象，建立对象，使用对象，维护对象的关系。</em></strong></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java笔记——面向对象&quot;&gt;&lt;a href=&quot;#Java笔记——面向对象&quot; class=&quot;headerlink&quot; title=&quot;Java笔记——面向对象&quot;&gt;&lt;/a&gt;Java笔记——面向对象&lt;/h3&gt;&lt;p&gt;创建时间：2019.11.11&lt;/p&gt;
&lt;p&gt;说明：持续更新
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记——语法</title>
    <link href="http://yoursite.com/2019/11/13/Java%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/11/13/Java笔记——语法/</id>
    <published>2019-11-13T04:54:20.000Z</published>
    <updated>2019-11-13T04:57:45.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java笔记——语法"><a href="#Java笔记——语法" class="headerlink" title="Java笔记——语法"></a>Java笔记——语法</h3><p>创建时间：2019.11.11<br>说明：持续更新ing</p><hr><ol><li>单引号’’中存放一个字符，不能存放字符串。双引号””中存放字符串。</li><li><strong>Java是强类型语言。对于每一种数据都定义了明确的具体数据类型，在内存中总分配了不同的内存空间。</strong></li><li>布尔型常量只有2个值：true、false</li><li>标识符由字母：26个，大小写；数字：0-  8；符号：$ _  组成。</li><li>标识符不能数字开头、不能使用关键字</li><li>main不是关键字，但是是被JVM识别的名字，是程序的入口</li><li>Java中的名称规范：</li></ol><ul><li><p>包名：多单词组成，全为小写</p><blockquote><p>xxxyyyy</p></blockquote></li><li><p>类名接口： 多单词组成，所有单词的首字母大写</p><blockquote><p>XxxYyyZzz</p></blockquote></li><li><p>变量名和函数名：多单词组成时，第一个单词的首字母小写，其余首字母大写</p><blockquote><p>xxxYyyZzz</p></blockquote></li><li><p>常量名：所有字母都大写。每个单词用_隔开</p><blockquote><p>XXX_YYY_ZZZ</p></blockquote></li></ul><ol start="8"><li>注释，写在代码前面</li><li>对于整数：Java有三种表现形式。<br>· 十进制：0-9，满10进1<br>· 八进制：0-7，满8进1，<strong>用0开头表示</strong><br>· 十六进制：0-9，A-F或a-f（A\a是10，B\b是11…F\f是15），满16进1，<strong>用0x开头表示</strong></li><li>null常量：只有一个值null。在对象、引用数据类型时会用上。</li><li>二进制。一个字节8位0、1组合。</li><li>八进制：3位二进制位代表1位八进制位；十六进制：4位二进制位代表1位十六进制位。<br><strong>进制转换：进制越大，表示越短，更方便地表示数据。</strong></li><li>二进制计算：<br><code>5 + 4 = 9</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/hP5DS9bqTnHLZkw.png" alt="十进制转二进制.png" title="">                </div>                <div class="image-caption">十进制转二进制.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/arJOKCdRLm6wfXZ.png" alt="进制之间转换.png" title="">                </div>                <div class="image-caption">进制之间转换.png</div>            </figure></li><li>负数地二进制表现形式：<strong>对应的整数二进制取反加1</strong>。<br><code>负数的最高位都是1</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/11/53E4DtdvXCkjQLz.png" alt="负数的二进制.png" title="">                </div>                <div class="image-caption">负数的二进制.png</div>            </figure></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java笔记——语法&quot;&gt;&lt;a href=&quot;#Java笔记——语法&quot; class=&quot;headerlink&quot; title=&quot;Java笔记——语法&quot;&gt;&lt;/a&gt;Java笔记——语法&lt;/h3&gt;&lt;p&gt;创建时间：2019.11.11&lt;br&gt;说明：持续更新ing&lt;/p&gt;
&lt;hr&gt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>博客v1.4上线</title>
    <link href="http://yoursite.com/2019/11/08/v1.4/"/>
    <id>http://yoursite.com/2019/11/08/v1.4/</id>
    <published>2019-11-08T14:30:21.000Z</published>
    <updated>2019-11-09T10:29:05.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ul><li><ol><li>主页动画，点击体验效果（<a href="https://melodyhub.ltd/" target="_blank" rel="noopener">这里</a>）</li></ol></li><li><ol start="2"><li>文字跳动（menu、head中的文字均可跳动）,比如顶部的“你用走，可是我用跑”……</li></ol></li><li><ol start="3"><li>新增<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine评论</a>（可以使用表情；发送前浏览）。想用别的，但是暂时先着Valine。可以试着来骚扰我（滑稽~~</li></ol></li><li><ol start="4"><li>有评论，邮件提示(还未测试)。接入Leancloud（<a href="https://leancloud.cn/docs/" target="_blank" rel="noopener">文档</a>）。</li></ol></li><li><ol start="5"><li>底部开启鼠标滑动渲染</li></ol></li><li><ol start="6"><li>开启“一言”api。menu中作者名（Melody Jerry）下面随机显示一句话。同时，使用文字扭曲动画。</li></ol></li></ul><hr><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li>1.重写三个按钮（menu、搜索、回到顶部）的代码，现在可以正常使用了。</li><li><ol start="2"><li>更新menu的Github的url</li></ol></li><li><ol start="3"><li>修复移动端提示证书错误的问题（移动端重定向太多次了，难怪hhh）</li></ol></li><li><ol start="4"><li>主页和首页分仓（也不算是修复，不知道写哪而已）</li></ol></li></ul><hr><h3 id="已知问题（加粗的为重要问题）"><a href="#已知问题（加粗的为重要问题）" class="headerlink" title="已知问题（加粗的为重要问题）"></a>已知问题（加粗的为重要问题）</h3><ul><li><ol><li><strong>menu中的“分类”、“标签”、“关于”，仍然无法正常使用（原因未知）</strong></li></ol></li><li><ol start="2"><li>menu的Email仍旧无法mailto</li></ol></li><li><ol start="3"><li><strong>文章增加标签或类名，无法被tags或categories绑定</strong></li></ol></li><li><ol start="4"><li>浏览人数、浏览次数，无法使用（接口有问题？）</li></ol></li><li><ol start="5"><li><strong>文字截断，异常。（原因位置）</strong></li></ol></li><li><ol start="6"><li>等待发现</li></ol></li></ul><hr><h3 id="未来加入"><a href="#未来加入" class="headerlink" title="未来加入"></a>未来加入</h3><ul><li><ol><li>音乐控件（自动？手动？浮窗？嵌入？音源线上还是本地？）</li></ol></li><li><ol start="2"><li>实时颜色</li></ol></li><li><ol start="3"><li>加载网页时、侧栏、搜索、进度条等动画</li></ol></li><li><ol start="4"><li>留言板？</li></ol></li><li><ol start="5"><li>友情链接？快速导航？</li></ol></li><li><ol start="6"><li>嵌入播放（这个很想要，链接一些学习视频）</li></ol></li><li><ol start="7"><li>天气控件</li></ol></li><li><ol start="8"><li>等待脑洞大开</li></ol></li></ul><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>从早上9点搞到下午4点，午饭还没吃hh，就一直坐在电脑前。<br><del>找模板中的问题代码、修改代码，还是很麻烦的。</del><br>最后分享一首今天网易日推的英文歌（版权原因，没法生成外联播放器）<br><a href="https://music.163.com/#/song?id=555931250" target="_blank" rel="noopener">I’ll Be There-Jess Glynne</a><br>对于我的博客有问题或建议，欢迎在评论或邮件中告诉我。<br>谢谢每一位读者。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;新增&quot;&gt;&lt;a href=&quot;#新增&quot; class=&quot;headerlink&quot; title=&quot;新增&quot;&gt;&lt;/a&gt;新增&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;主页动画，点击体验效果（&lt;a href=&quot;https://melodyhub.ltd/&quot; target=&quot;_b
      
    
    </summary>
    
    
    
      <category term="发布" scheme="http://yoursite.com/tags/%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+GitHub建站</title>
    <link href="http://yoursite.com/2019/11/07/Hexo+GitHub/"/>
    <id>http://yoursite.com/2019/11/07/Hexo+GitHub/</id>
    <published>2019-11-07T11:24:01.000Z</published>
    <updated>2019-11-13T04:52:11.915Z</updated>
    
    <content type="html"><![CDATA[<p>前言： 使用CSDN平台撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。</p><hr><h1 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h1><hr><h2 id="一、安装-【hexo】-前的准备"><a href="#一、安装-【hexo】-前的准备" class="headerlink" title="一、安装 【hexo】 前的准备"></a>一、安装 【hexo】 前的准备</h2><h3 id="安装hexo前的必要工作"><a href="#安装hexo前的必要工作" class="headerlink" title="安装hexo前的必要工作"></a>安装hexo前的必要工作</h3><h4 id="1-安装以下两个程序："><a href="#1-安装以下两个程序：" class="headerlink" title="1).安装以下两个程序："></a>1).安装以下两个程序：</h4><table><thead><tr><th>程序</th><th>下载地址</th><th>说明</th></tr></thead><tbody><tr><td>Git</td><td><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git - Downloads</a></td><td>网速的同学，可以自行百度移步到国内镜像</td></tr><tr><td>Node.js</td><td><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js - Downloads</a></td><td>有LTS和Current两个版本，安装 LTS 版即可</td></tr></tbody></table><p>注意：关于Git和Node.js的安装可能会有问题，尤其是Git的安装。这里贴上几张安装界面的截图（来源见水印，作者GroovRain）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/bUgMBmks7VwjPIe.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/9OkM4l2Szbe5RQs.png" alt="f3e0287f.png" title="">                </div>                <div class="image-caption">f3e0287f.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/PKTDE54qpkQ1S8J.png" alt="774cdfb9.png" title="">                </div>                <div class="image-caption">774cdfb9.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/8RYLQNsVoCZpxqB.png" alt="2e023781.png" title="">                </div>                <div class="image-caption">2e023781.png</div>            </figure><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/pFcNrU8QYBVROGw.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><h4 id="2-配置（可以在未来部署，并非一定现在）"><a href="#2-配置（可以在未来部署，并非一定现在）" class="headerlink" title="2).配置（可以在未来部署，并非一定现在）"></a>2).配置（<em>可以在未来部署，并非一定现在</em>）</h4><blockquote><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><pre><code>$ git config --global user.name  "your name"`$ git config --global user.email "your Email"</code></pre><h2 id="二、正式安装【hexo】"><a href="#二、正式安装【hexo】" class="headerlink" title="二、正式安装【hexo】"></a>二、正式安装【hexo】</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。——官方</p></blockquote><p>准备工作完成后，来安装hexo框架吧！<br> <strong>== 主要根据hexo官方的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>来安装hexo ==</strong></p><p>==使用 npm 安装 Hexo==</p><p><code>$ npm install -g hexo-cli</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/11/07/BZIuA2XzYeaDQ8k.png" alt="image.png" title="">                </div>                <div class="image-caption">image.png</div>            </figure><p>这样,【hexo】就安装完成了。</p><a id="more"></a><!-- more --><!-- more --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言： 使用CSDN平台撰写博客似乎是一件美事，只不过个人觉得太过于依赖他人平台，不如就自己搭建一个属于自己的博客。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;安装篇&quot;&gt;&lt;a href=&quot;#安装篇&quot; class=&quot;headerlink&quot; title=&quot;安装篇&quot;&gt;&lt;/a&gt;安装篇&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、安装-【hexo】-前的准备&quot;&gt;&lt;a href=&quot;#一、安装-【hexo】-前的准备&quot; class=&quot;headerlink&quot; title=&quot;一、安装 【hexo】 前的准备&quot;&gt;&lt;/a&gt;一、安装 【hexo】 前的准备&lt;/h2&gt;&lt;h3 id=&quot;安装hexo前的必要工作&quot;&gt;&lt;a href=&quot;#安装hexo前的必要工作&quot; class=&quot;headerlink&quot; title=&quot;安装hexo前的必要工作&quot;&gt;&lt;/a&gt;安装hexo前的必要工作&lt;/h3&gt;&lt;h4 id=&quot;1-安装以下两个程序：&quot;&gt;&lt;a href=&quot;#1-安装以下两个程序：&quot; class=&quot;headerlink&quot; title=&quot;1).安装以下两个程序：&quot;&gt;&lt;/a&gt;1).安装以下两个程序：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;程序&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Git&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git - Downloads&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;网速的同学，可以自行百度移步到国内镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js - Downloads&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;有LTS和Current两个版本，安装 LTS 版即可&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;注意：关于Git和Node.js的安装可能会有问题，尤其是Git的安装。这里贴上几张安装界面的截图（来源见水印，作者GroovRain）。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/bUgMBmks7VwjPIe.png&quot; alt=&quot;image.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/9OkM4l2Szbe5RQs.png&quot; alt=&quot;f3e0287f.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;f3e0287f.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/PKTDE54qpkQ1S8J.png&quot; alt=&quot;774cdfb9.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;774cdfb9.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/8RYLQNsVoCZpxqB.png&quot; alt=&quot;2e023781.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;2e023781.png&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;安装完成后，在开始菜单里找到“Git”-&amp;gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/pFcNrU8QYBVROGw.png&quot; alt=&quot;image.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image.png&lt;/div&gt;
            &lt;/figure&gt;

&lt;h4 id=&quot;2-配置（可以在未来部署，并非一定现在）&quot;&gt;&lt;a href=&quot;#2-配置（可以在未来部署，并非一定现在）&quot; class=&quot;headerlink&quot; title=&quot;2).配置（可以在未来部署，并非一定现在）&quot;&gt;&lt;/a&gt;2).配置（&lt;em&gt;可以在未来部署，并非一定现在&lt;/em&gt;）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。注意&lt;code&gt;git config&lt;/code&gt;命令的&lt;code&gt;--global&lt;/code&gt;参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name  &quot;your name&quot;`

$ git config --global user.email &quot;your Email&quot;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、正式安装【hexo】&quot;&gt;&lt;a href=&quot;#二、正式安装【hexo】&quot; class=&quot;headerlink&quot; title=&quot;二、正式安装【hexo】&quot;&gt;&lt;/a&gt;二、正式安装【hexo】&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。——官方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;准备工作完成后，来安装hexo框架吧！&lt;br&gt; &lt;strong&gt;== 主要根据hexo官方的&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;来安装hexo ==&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;==使用 npm 安装 Hexo==&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install -g hexo-cli&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://i.loli.net/2019/11/07/BZIuA2XzYeaDQ8k.png&quot; alt=&quot;image.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;image.png&lt;/div&gt;
            &lt;/figure&gt;


&lt;p&gt;这样,【hexo】就安装完成了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo+GitHub" scheme="http://yoursite.com/tags/Hexo-GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/06/hello-world/"/>
    <id>http://yoursite.com/2019/11/06/hello-world/</id>
    <published>2019-11-06T08:49:56.000Z</published>
    <updated>2019-11-09T09:34:35.824Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
